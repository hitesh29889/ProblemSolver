(this["webpackJsonpreactjs"] = this["webpackJsonpreactjs"] || []).push([[11],{

/***/ "./node_modules/@syncfusion/ej2-data/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-data/index.js ***!
  \****************************************************/
/*! exports provided: DataManager, Deferred, Query, Predicate, Adaptor, JsonAdaptor, UrlAdaptor, ODataAdaptor, ODataV4Adaptor, WebApiAdaptor, WebMethodAdaptor, RemoteSaveAdaptor, CustomDataAdaptor, GraphQLAdaptor, CacheAdaptor, DataUtil */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/index */ "./node_modules/@syncfusion/ej2-data/src/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataManager", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["DataManager"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Deferred", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Deferred"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Query", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Query"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Predicate", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Predicate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Adaptor", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Adaptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonAdaptor", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["JsonAdaptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlAdaptor", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["UrlAdaptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ODataAdaptor", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["ODataAdaptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ODataV4Adaptor", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["ODataV4Adaptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WebApiAdaptor", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["WebApiAdaptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WebMethodAdaptor", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["WebMethodAdaptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RemoteSaveAdaptor", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["RemoteSaveAdaptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CustomDataAdaptor", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["CustomDataAdaptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GraphQLAdaptor", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["GraphQLAdaptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CacheAdaptor", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["CacheAdaptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataUtil", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["DataUtil"]; });

/**
 * index
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-data/src/adaptors.js":
/*!***********************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-data/src/adaptors.js ***!
  \***********************************************************/
/*! exports provided: Adaptor, JsonAdaptor, UrlAdaptor, ODataAdaptor, ODataV4Adaptor, WebApiAdaptor, WebMethodAdaptor, RemoteSaveAdaptor, CustomDataAdaptor, GraphQLAdaptor, CacheAdaptor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Adaptor", function() { return Adaptor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JsonAdaptor", function() { return JsonAdaptor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UrlAdaptor", function() { return UrlAdaptor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ODataAdaptor", function() { return ODataAdaptor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ODataV4Adaptor", function() { return ODataV4Adaptor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebApiAdaptor", function() { return WebApiAdaptor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebMethodAdaptor", function() { return WebMethodAdaptor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RemoteSaveAdaptor", function() { return RemoteSaveAdaptor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomDataAdaptor", function() { return CustomDataAdaptor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GraphQLAdaptor", function() { return GraphQLAdaptor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CacheAdaptor", function() { return CacheAdaptor; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "./node_modules/@syncfusion/ej2-data/src/util.js");
/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./query */ "./node_modules/@syncfusion/ej2-data/src/query.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();




var consts = {
  GroupGuid: '{271bbba0-1ee7}'
};
/**
 * Adaptors are specific data source type aware interfaces that are used by DataManager to communicate with DataSource.
 * This is the base adaptor class that other adaptors can extend.
 *
 * @hidden
 */

var Adaptor =
/** @class */
function () {
  /**
   * Constructor for Adaptor class
   *
   * @param {DataOptions} ds?
   * @param ds
   * @hidden
   * @returns aggregates
   */
  function Adaptor(ds) {
    // common options for all the adaptors
    this.options = {
      from: 'table',
      requestType: 'json',
      sortBy: 'sorted',
      select: 'select',
      skip: 'skip',
      group: 'group',
      take: 'take',
      search: 'search',
      count: 'requiresCounts',
      where: 'where',
      aggregates: 'aggregates',
      expand: 'expand'
    };
    /**
     * Specifies the type of adaptor.
     *
     * @default Adaptor
     */

    this.type = Adaptor;
    this.dataSource = ds;
    this.pvt = {};
  }
  /**
   * Returns the data from the query processing.
   *
   * @param {Object} data
   * @param {DataOptions} ds?
   * @param {Query} query?
   * @param {Request} xhr?
   * @param ds
   * @param query
   * @param xhr
   * @returns Object
   */


  Adaptor.prototype.processResponse = function (data, ds, query, xhr) {
    return data;
  };

  return Adaptor;
}();


/**
 * JsonAdaptor is used to process JSON data. It contains methods to process the given JSON data based on the queries.
 *
 * @hidden
 */

var JsonAdaptor =
/** @class */
function (_super) {
  __extends(JsonAdaptor, _super);

  function JsonAdaptor() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  /**
   * Process the JSON data based on the provided queries.
   *
   * @param  {DataManager} dataManager
   * @param  {Query} query
   * @returns Object
   */


  JsonAdaptor.prototype.processQuery = function (dataManager, query) {
    var result = dataManager.dataSource.json.slice(0);
    var count = result.length;
    var countFlg = true;
    var ret;
    var key;
    var lazyLoad = {};
    var keyCount = 0;
    var group = [];
    var page;

    for (var i = 0; i < query.lazyLoad.length; i++) {
      keyCount++;
      lazyLoad[query.lazyLoad[i].key] = query.lazyLoad[i].value;
    }

    var agg = {};

    for (var i = 0; i < query.queries.length; i++) {
      key = query.queries[i];

      if ((key.fn === 'onPage' || key.fn === 'onGroup') && query.lazyLoad.length) {
        if (key.fn === 'onGroup') {
          group.push(key.e);
        }

        if (key.fn === 'onPage') {
          page = key.e;
        }

        continue;
      }

      ret = this[key.fn].call(this, result, key.e, query);

      if (key.fn === 'onAggregates') {
        agg[key.e.field + ' - ' + key.e.type] = ret;
      } else {
        result = ret !== undefined ? ret : result;
      }

      if (key.fn === 'onPage' || key.fn === 'onSkip' || key.fn === 'onTake' || key.fn === 'onRange') {
        countFlg = false;
      }

      if (countFlg) {
        count = result.length;
      }
    }

    if (keyCount) {
      var args = {
        query: query,
        lazyLoad: lazyLoad,
        result: result,
        group: group,
        page: page
      };
      var lazyLoadData = this.lazyLoadGroup(args);
      result = lazyLoadData.result;
      count = lazyLoadData.count;
    }

    if (query.isCountRequired) {
      result = {
        result: result,
        count: count,
        aggregates: agg
      };
    }

    return result;
  };
  /**
   * Perform lazy load grouping in JSON array based on the given query and lazy load details.
   *
   * @param  {LazyLoadGroupArgs} args
   */


  JsonAdaptor.prototype.lazyLoadGroup = function (args) {
    var count = 0;
    var agg = this.getAggregate(args.query);
    var result = args.result;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.lazyLoad.onDemandGroupInfo)) {
      var req = args.lazyLoad.onDemandGroupInfo;

      for (var i = req.where.length - 1; i >= 0; i--) {
        result = this.onWhere(result, req.where[i]);
      }

      if (args.group.length !== req.level) {
        var field = args.group[req.level].fieldName;
        result = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].group(result, field, agg, null, null, args.group[0].comparer, true);
      }

      count = result.length;
      var data = result;
      result = result.slice(req.skip);
      result = result.slice(0, req.take);

      if (args.group.length !== req.level) {
        this.formGroupResult(result, data);
      }
    } else {
      var field = args.group[0].fieldName;
      result = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].group(result, field, agg, null, null, args.group[0].comparer, true);
      count = result.length;
      var data = result;

      if (args.page) {
        result = this.onPage(result, args.page, args.query);
      }

      this.formGroupResult(result, data);
    }

    return {
      result: result,
      count: count
    };
  };

  JsonAdaptor.prototype.formGroupResult = function (result, data) {
    if (result.length && data.length) {
      var uid = 'GroupGuid';
      var childLevel = 'childLevels';
      var level = 'level';
      var records = 'records';
      result[uid] = data[uid];
      result[childLevel] = data[childLevel];
      result[level] = data[level];
      result[records] = data[records];
    }

    return result;
  };
  /**
   * Separate the aggregate query from the given queries
   *
   * @param  {Query} query
   */


  JsonAdaptor.prototype.getAggregate = function (query) {
    var aggQuery = _query__WEBPACK_IMPORTED_MODULE_2__["Query"].filterQueries(query.queries, 'onAggregates');
    var agg = [];

    if (aggQuery.length) {
      var tmp = void 0;

      for (var i = 0; i < aggQuery.length; i++) {
        tmp = aggQuery[i].e;
        agg.push({
          type: tmp.type,
          field: _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getValue(tmp.field, query)
        });
      }
    }

    return agg;
  };
  /**
   * Performs batch update in the JSON array which add, remove and update records.
   *
   * @param  {DataManager} dm
   * @param  {CrudOptions} changes
   * @param  {RemoteArgs} e
   */


  JsonAdaptor.prototype.batchRequest = function (dm, changes, e) {
    var i;
    var deletedRecordsLen = changes.deletedRecords.length;

    for (i = 0; i < changes.addedRecords.length; i++) {
      this.insert(dm, changes.addedRecords[i]);
    }

    for (i = 0; i < changes.changedRecords.length; i++) {
      this.update(dm, e.key, changes.changedRecords[i]);
    }

    for (i = 0; i < deletedRecordsLen; i++) {
      this.remove(dm, e.key, changes.deletedRecords[i]);
    }

    return changes;
  };
  /**
   * Performs filter operation with the given data and where query.
   *
   * @param {Object[]} ds
   * @param {{validate:Function}} e
   * @param e.validate
   */


  JsonAdaptor.prototype.onWhere = function (ds, e) {
    if (!ds || !ds.length) {
      return ds;
    }

    return ds.filter(function (obj) {
      if (e) {
        return e.validate(obj);
      }
    });
  };
  /**
   * Returns aggregate function based on the aggregate type.
   *
   * @param {Object[]} ds
   * @param e
   * @param {string} } type
   * @param e.field
   * @param e.type
   */


  JsonAdaptor.prototype.onAggregates = function (ds, e) {
    var fn = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].aggregates[e.type];

    if (!ds || !fn || ds.length === 0) {
      return null;
    }

    return fn(ds, e.field);
  };
  /**
   * Performs search operation based on the given query.
   *
   * @param  {Object[]} ds
   * @param  {QueryOptions} e
   */


  JsonAdaptor.prototype.onSearch = function (ds, e) {
    if (!ds || !ds.length) {
      return ds;
    }

    if (e.fieldNames.length === 0) {
      _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getFieldList(ds[0], e.fieldNames);
    }

    return ds.filter(function (obj) {
      for (var j = 0; j < e.fieldNames.length; j++) {
        if (e.comparer.call(obj, _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase, e.ignoreAccent)) {
          return true;
        }
      }

      return false;
    });
  };
  /**
   * Sort the data with given direction and field.
   *
   * @param {Object[]} ds
   * @param e
   * @param {Object} b
   * @param e.comparer
   * @param e.fieldName
   * @param query
   */


  JsonAdaptor.prototype.onSortBy = function (ds, e, query) {
    if (!ds || !ds.length) {
      return ds;
    }

    var fnCompare;
    var field = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getValue(e.fieldName, query);

    if (!field) {
      return ds.sort(e.comparer);
    }

    if (field instanceof Array) {
      field = field.slice(0);

      for (var i = field.length - 1; i >= 0; i--) {
        if (!field[i]) {
          continue;
        }

        fnCompare = e.comparer;

        if (_util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].endsWith(field[i], ' desc')) {
          fnCompare = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].fnSort('descending');
          field[i] = field[i].replace(' desc', '');
        }

        ds = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].sort(ds, field[i], fnCompare);
      }

      return ds;
    }

    return _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].sort(ds, field, e.comparer);
  };
  /**
   * Group the data based on the given query.
   *
   * @param  {Object[]} ds
   * @param  {QueryOptions} e
   * @param  {Query} query
   */


  JsonAdaptor.prototype.onGroup = function (ds, e, query) {
    if (!ds || !ds.length) {
      return ds;
    }

    var agg = this.getAggregate(query);
    return _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].group(ds, _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getValue(e.fieldName, query), agg, null, null, e.comparer);
  };
  /**
   * Retrieves records based on the given page index and size.
   *
   * @param {Object[]} ds
   * @param e
   * @param {number} } pageIndex
   * @param e.pageSize
   * @param {Query} query
   * @param e.pageIndex
   */


  JsonAdaptor.prototype.onPage = function (ds, e, query) {
    var size = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getValue(e.pageSize, query);
    var start = (_util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getValue(e.pageIndex, query) - 1) * size;
    var end = start + size;

    if (!ds || !ds.length) {
      return ds;
    }

    return ds.slice(start, end);
  };
  /**
   * Retrieves records based on the given start and end index from query.
   *
   * @param {Object[]} ds
   * @param e
   * @param {number} } end
   * @param e.start
   * @param e.end
   */


  JsonAdaptor.prototype.onRange = function (ds, e) {
    if (!ds || !ds.length) {
      return ds;
    }

    return ds.slice(_util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getValue(e.start), _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getValue(e.end));
  };
  /**
   * Picks the given count of records from the top of the datasource.
   *
   * @param {Object[]} ds
   * @param {{nos:number}} e
   * @param e.nos
   */


  JsonAdaptor.prototype.onTake = function (ds, e) {
    if (!ds || !ds.length) {
      return ds;
    }

    return ds.slice(0, _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getValue(e.nos));
  };
  /**
   * Skips the given count of records from the data source.
   *
   * @param {Object[]} ds
   * @param {{nos:number}} e
   * @param e.nos
   */


  JsonAdaptor.prototype.onSkip = function (ds, e) {
    if (!ds || !ds.length) {
      return ds;
    }

    return ds.slice(_util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getValue(e.nos));
  };
  /**
   * Selects specified columns from the data source.
   *
   * @param {Object[]} ds
   * @param {{fieldNames:string}} e
   * @param e.fieldNames
   */


  JsonAdaptor.prototype.onSelect = function (ds, e) {
    if (!ds || !ds.length) {
      return ds;
    }

    return _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].select(ds, _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getValue(e.fieldNames));
  };
  /**
   * Inserts new record in the table.
   *
   * @param {DataManager} dm
   * @param {Object} data
   * @param tableName
   * @param query
   * @param {number} position
   */


  JsonAdaptor.prototype.insert = function (dm, data, tableName, query, position) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(position)) {
      return dm.dataSource.json.push(data);
    } else {
      return dm.dataSource.json.splice(position, 0, data);
    }
  };
  /**
   * Remove the data from the dataSource based on the key field value.
   *
   * @param {DataManager} dm
   * @param {string} keyField
   * @param {Object} value
   * @param {string} tableName?
   * @param tableName
   * @returns null
   */


  JsonAdaptor.prototype.remove = function (dm, keyField, value, tableName) {
    var ds = dm.dataSource.json;
    var i;

    if (typeof value === 'object' && !(value instanceof Date)) {
      value = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getObject(keyField, value);
    }

    for (i = 0; i < ds.length; i++) {
      if (_util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getObject(keyField, ds[i]) === value) {
        break;
      }
    }

    return i !== ds.length ? ds.splice(i, 1) : null;
  };
  /**
   * Updates existing record and saves the changes to the table.
   *
   * @param {DataManager} dm
   * @param {string} keyField
   * @param {Object} value
   * @param {string} tableName?
   * @param tableName
   * @returns null
   */


  JsonAdaptor.prototype.update = function (dm, keyField, value, tableName) {
    var ds = dm.dataSource.json;
    var i;
    var key;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(keyField)) {
      key = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(keyField, value);
    }

    for (i = 0; i < ds.length; i++) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(keyField) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(keyField, ds[i]) === key) {
        break;
      }
    }

    return i < ds.length ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(ds[i], value) : null;
  };

  return JsonAdaptor;
}(Adaptor);


/**
 * URL Adaptor of DataManager can be used when you are required to use remote service to retrieve data.
 * It interacts with server-side for all DataManager Queries and CRUD operations.
 *
 * @hidden
 */

var UrlAdaptor =
/** @class */
function (_super) {
  __extends(UrlAdaptor, _super);

  function UrlAdaptor() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  /**
   * Process the query to generate request body.
   *
   * @param {DataManager} dm
   * @param {Query} query
   * @param {Object[]} hierarchyFilters?
   * @param hierarchyFilters
   * @returns p
   */
  // tslint:disable-next-line:max-func-body-length


  UrlAdaptor.prototype.processQuery = function (dm, query, hierarchyFilters) {
    var queries = this.getQueryRequest(query);
    var singles = _query__WEBPACK_IMPORTED_MODULE_2__["Query"].filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);
    var params = query.params;
    var url = dm.dataSource.url;
    var temp;
    var skip;
    var take = null;
    var options = this.options;
    var request = {
      sorts: [],
      groups: [],
      filters: [],
      searches: [],
      aggregates: []
    }; // calc Paging & Range

    if ('onPage' in singles) {
      temp = singles.onPage;
      skip = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getValue(temp.pageIndex, query);
      take = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getValue(temp.pageSize, query);
      skip = (skip - 1) * take;
    } else if ('onRange' in singles) {
      temp = singles.onRange;
      skip = temp.start;
      take = temp.end - temp.start;
    } // Sorting


    for (var i = 0; i < queries.sorts.length; i++) {
      temp = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getValue(queries.sorts[i].e.fieldName, query);
      request.sorts.push(_util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].callAdaptorFunction(this, 'onEachSort', {
        name: temp,
        direction: queries.sorts[i].e.direction
      }, query));
    } // hierarchy


    if (hierarchyFilters) {
      temp = this.getFiltersFrom(hierarchyFilters, query);

      if (temp) {
        request.filters.push(_util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].callAdaptorFunction(this, 'onEachWhere', temp.toJson(), query));
      }
    } // Filters


    for (var i = 0; i < queries.filters.length; i++) {
      var res = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].callAdaptorFunction(this, 'onEachWhere', queries.filters[i].e.toJson(), query);

      if (this.getModuleName && this.getModuleName() === 'ODataV4Adaptor' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(queries.filters[i].e.key) && queries.filters.length > 1) {
        res = '(' + res + ')';
      }

      request.filters.push(res);
      var keys_3 = typeof request.filters[i] === 'object' ? Object.keys(request.filters[i]) : [];

      for (var _i = 0, keys_1 = keys_3; _i < keys_1.length; _i++) {
        var prop = keys_1[_i];

        if (_util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].isNull(request[prop])) {
          delete request[prop];
        }
      }
    } // Searches


    for (var i = 0; i < queries.searches.length; i++) {
      temp = queries.searches[i].e;
      request.searches.push(_util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].callAdaptorFunction(this, 'onEachSearch', {
        fields: temp.fieldNames,
        operator: temp.operator,
        key: temp.searchKey,
        ignoreCase: temp.ignoreCase
      }, query));
    } // Grouping


    for (var i = 0; i < queries.groups.length; i++) {
      request.groups.push(_util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getValue(queries.groups[i].e.fieldName, query));
    } // aggregates


    for (var i = 0; i < queries.aggregates.length; i++) {
      temp = queries.aggregates[i].e;
      request.aggregates.push({
        type: temp.type,
        field: _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getValue(temp.field, query)
      });
    }

    var req = {};
    this.getRequestQuery(options, query, singles, request, req); // Params

    _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].callAdaptorFunction(this, 'addParams', {
      dm: dm,
      query: query,
      params: params,
      reqParams: req
    });

    if (query.lazyLoad.length) {
      for (var i = 0; i < query.lazyLoad.length; i++) {
        req[query.lazyLoad[i].key] = query.lazyLoad[i].value;
      }
    } // cleanup


    var keys = Object.keys(req);

    for (var _a = 0, keys_2 = keys; _a < keys_2.length; _a++) {
      var prop = keys_2[_a];

      if (_util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].isNull(req[prop]) || req[prop] === '' || req[prop].length === 0) {
        delete req[prop];
      }
    }

    if (!(options.skip in req && options.take in req) && take !== null) {
      req[options.skip] = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].callAdaptorFunction(this, 'onSkip', skip, query);
      req[options.take] = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].callAdaptorFunction(this, 'onTake', take, query);
    }

    var p = this.pvt;
    this.pvt = {};

    if (this.options.requestType === 'json') {
      return {
        data: JSON.stringify(req, _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].parse.jsonDateReplacer),
        url: url,
        pvtData: p,
        type: 'POST',
        contentType: 'application/json; charset=utf-8'
      };
    }

    temp = this.convertToQueryString(req, query, dm);
    temp = (dm.dataSource.url.indexOf('?') !== -1 ? '&' : '/') + temp;
    return {
      type: 'GET',
      url: temp.length ? url.replace(/\/*$/, temp) : url,
      pvtData: p
    };
  };

  UrlAdaptor.prototype.getRequestQuery = function (options, query, singles, request, request1) {
    var param = 'param';
    var req = request1;
    req[options.from] = query.fromTable;

    if (options.apply && query.distincts.length) {
      req[options.apply] = 'onDistinct' in this ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].callAdaptorFunction(this, 'onDistinct', query.distincts) : '';
    }

    if (!query.distincts.length && options.expand) {
      req[options.expand] = 'onExpand' in this && 'onSelect' in singles ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].callAdaptorFunction(this, 'onExpand', {
        selects: _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getValue(singles.onSelect.fieldNames, query),
        expands: query.expands
      }, query) : query.expands;
    }

    req[options.select] = 'onSelect' in singles && !query.distincts.length ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].callAdaptorFunction(this, 'onSelect', _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getValue(singles.onSelect.fieldNames, query), query) : '';
    req[options.count] = query.isCountRequired ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].callAdaptorFunction(this, 'onCount', query.isCountRequired, query) : '';
    req[options.search] = request.searches.length ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].callAdaptorFunction(this, 'onSearch', request.searches, query) : '';
    req[options.skip] = 'onSkip' in singles ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].callAdaptorFunction(this, 'onSkip', _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getValue(singles.onSkip.nos, query), query) : '';
    req[options.take] = 'onTake' in singles ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].callAdaptorFunction(this, 'onTake', _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getValue(singles.onTake.nos, query), query) : '';
    req[options.where] = request.filters.length || request.searches.length ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].callAdaptorFunction(this, 'onWhere', request.filters, query) : '';
    req[options.sortBy] = request.sorts.length ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].callAdaptorFunction(this, 'onSortBy', request.sorts, query) : '';
    req[options.group] = request.groups.length ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].callAdaptorFunction(this, 'onGroup', request.groups, query) : '';
    req[options.aggregates] = request.aggregates.length ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].callAdaptorFunction(this, 'onAggregates', request.aggregates, query) : '';
    req[param] = [];
  };
  /**
   * Convert the object from processQuery to string which can be added query string.
   *
   * @param {Object} req
   * @param request
   * @param {Query} query
   * @param {DataManager} dm
   */


  UrlAdaptor.prototype.convertToQueryString = function (request, query, dm) {
    return ''; // this needs to be overridden
  };
  /**
   * Return the data from the data manager processing.
   *
   * @param {DataResult} data
   * @param {DataOptions} ds?
   * @param {Query} query?
   * @param {Request} xhr?
   * @param {Object} request?
   * @param {CrudOptions} changes?
   * @param ds
   * @param query
   * @param xhr
   * @param request
   * @param changes
   */


  UrlAdaptor.prototype.processResponse = function (data, ds, query, xhr, request, changes) {
    if (xhr && xhr.headers.get('Content-Type') && xhr.headers.get('Content-Type').indexOf('application/json') !== -1) {
      var handleTimeZone = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].timeZoneHandling;

      if (ds && !ds.timeZoneHandling) {
        _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].timeZoneHandling = false;
      }

      data = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].parse.parseJson(data);
      _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].timeZoneHandling = handleTimeZone;
    }

    var requests = request;
    var pvt = requests.pvtData || {};
    var groupDs = data ? data.groupDs : [];

    if (xhr && xhr.headers.get('Content-Type') && xhr.headers.get('Content-Type').indexOf('xml') !== -1) {
      return query.isCountRequired ? {
        result: [],
        count: 0
      } : [];
    }

    var d = JSON.parse(requests.data);

    if (d && d.action === 'batch' && data && data.addedRecords) {
      changes.addedRecords = data.addedRecords;
      return changes;
    }

    if (data && data.d) {
      data = data.d;
    }

    var args = {};

    if (data && 'count' in data) {
      args.count = data.count;
    }

    args.result = data && data.result ? data.result : data;
    var isExpand = false;

    if (Array.isArray(data.result) && data.result.length) {
      var key = 'key';
      var val = 'value';
      var level = 'level';

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data.result[0][key])) {
        args.result = this.formRemoteGroupedData(args.result, 1, pvt.groups.length - 1);
      }

      if (query && query.lazyLoad.length && pvt.groups.length) {
        for (var i = 0; i < query.lazyLoad.length; i++) {
          if (query.lazyLoad[i][key] === 'onDemandGroupInfo') {
            var value = query.lazyLoad[i][val][level];

            if (pvt.groups.length === value) {
              isExpand = true;
            }
          }
        }
      }
    }

    if (!isExpand) {
      this.getAggregateResult(pvt, data, args, groupDs, query);
    }

    return _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].isNull(args.count) ? args.result : {
      result: args.result,
      count: args.count,
      aggregates: args.aggregates
    };
  };

  UrlAdaptor.prototype.formRemoteGroupedData = function (data, level, childLevel) {
    for (var i = 0; i < data.length; i++) {
      if (data[i].items.length && Object.keys(data[i].items[0]).indexOf('key') > -1) {
        this.formRemoteGroupedData(data[i].items, level + 1, childLevel - 1);
      }
    }

    var uid = 'GroupGuid';
    var childLvl = 'childLevels';
    var lvl = 'level';
    var records = 'records';
    data[uid] = consts[uid];
    data[lvl] = level;
    data[childLvl] = childLevel;
    data[records] = data[0].items.length ? this.getGroupedRecords(data, !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data[0].items[records])) : [];
    return data;
  };

  UrlAdaptor.prototype.getGroupedRecords = function (data, hasRecords) {
    var childGroupedRecords = [];
    var records = 'records';

    for (var i = 0; i < data.length; i++) {
      if (!hasRecords) {
        for (var j = 0; j < data[i].items.length; j++) {
          childGroupedRecords.push(data[i].items[j]);
        }
      } else {
        childGroupedRecords = childGroupedRecords.concat(data[i].items[records]);
      }
    }

    return childGroupedRecords;
  };
  /**
   * Add the group query to the adaptor`s option.
   *
   * @param  {Object[]} e
   * @returns void
   */


  UrlAdaptor.prototype.onGroup = function (e) {
    this.pvt.groups = e;
    return e;
  };
  /**
   * Add the aggregate query to the adaptor`s option.
   *
   * @param  {Aggregates[]} e
   * @returns void
   */


  UrlAdaptor.prototype.onAggregates = function (e) {
    this.pvt.aggregates = e;
  };
  /**
   * Prepare the request body based on the newly added, removed and updated records.
   * The result is used by the batch request.
   *
   * @param {DataManager} dm
   * @param {CrudOptions} changes
   * @param {Object} e
   * @param query
   * @param original
   */


  UrlAdaptor.prototype.batchRequest = function (dm, changes, e, query, original) {
    var url;
    var key;
    return {
      type: 'POST',
      url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,
      contentType: 'application/json; charset=utf-8',
      dataType: 'json',
      data: JSON.stringify(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {
        changed: changes.changedRecords,
        added: changes.addedRecords,
        deleted: changes.deletedRecords,
        action: 'batch',
        table: e[url],
        key: e[key]
      }, _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getAddParams(this, dm, query)))
    };
  };
  /**
   * Method will trigger before send the request to server side.
   * Used to set the custom header or modify the request options.
   *
   * @param  {DataManager} dm
   * @param  {Request} request
   * @returns void
   */


  UrlAdaptor.prototype.beforeSend = function (dm, request) {// need to extend this method
  };
  /**
   * Prepare and returns request body which is used to insert a new record in the table.
   *
   * @param {DataManager} dm
   * @param {Object} data
   * @param {string} tableName
   * @param query
   */


  UrlAdaptor.prototype.insert = function (dm, data, tableName, query) {
    return {
      url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
      data: JSON.stringify(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {
        value: data,
        table: tableName,
        action: 'insert'
      }, _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getAddParams(this, dm, query)))
    };
  };
  /**
   * Prepare and return request body which is used to remove record from the table.
   *
   * @param {DataManager} dm
   * @param {string} keyField
   * @param {number|string} value
   * @param {string} tableName
   * @param query
   */


  UrlAdaptor.prototype.remove = function (dm, keyField, value, tableName, query) {
    return {
      type: 'POST',
      url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,
      data: JSON.stringify(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {
        key: value,
        keyColumn: keyField,
        table: tableName,
        action: 'remove'
      }, _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getAddParams(this, dm, query)))
    };
  };
  /**
   * Prepare and return request body which is used to update record.
   *
   * @param {DataManager} dm
   * @param {string} keyField
   * @param {Object} value
   * @param {string} tableName
   * @param query
   */


  UrlAdaptor.prototype.update = function (dm, keyField, value, tableName, query) {
    return {
      type: 'POST',
      url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
      data: JSON.stringify(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {
        value: value,
        action: 'update',
        keyColumn: keyField,
        key: _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getObject(keyField, value),
        table: tableName
      }, _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getAddParams(this, dm, query)))
    };
  };
  /**
   * To generate the predicate based on the filtered query.
   *
   * @param  {Object[]|string[]|number[]} data
   * @param  {Query} query
   * @hidden
   */


  UrlAdaptor.prototype.getFiltersFrom = function (data, query) {
    var key = query.fKey;
    var value;
    var prop = key;
    var pKey = query.key;
    var predicats = [];

    if (typeof data[0] !== 'object') {
      prop = null;
    }

    for (var i = 0; i < data.length; i++) {
      if (typeof data[0] === 'object') {
        value = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getObject(pKey || prop, data[i]);
      } else {
        value = data[i];
      }

      predicats.push(new _query__WEBPACK_IMPORTED_MODULE_2__["Predicate"](key, 'equal', value));
    }

    return _query__WEBPACK_IMPORTED_MODULE_2__["Predicate"].or(predicats);
  };

  UrlAdaptor.prototype.getAggregateResult = function (pvt, data, args, groupDs, query) {
    var pData = data;

    if (data && data.result) {
      pData = data.result;
    }

    if (pvt && pvt.aggregates && pvt.aggregates.length) {
      var agg = pvt.aggregates;
      var fn = void 0;
      var aggregateData = pData;
      var res = {};

      if (data.aggregate) {
        aggregateData = data.aggregate;
      }

      for (var i = 0; i < agg.length; i++) {
        fn = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].aggregates[agg[i].type];

        if (fn) {
          res[agg[i].field + ' - ' + agg[i].type] = fn(aggregateData, agg[i].field);
        }
      }

      args.aggregates = res;
    }

    var key = 'key';
    var isServerGrouping = Array.isArray(data.result) && data.result.length && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data.result[0][key]);

    if (pvt && pvt.groups && pvt.groups.length && !isServerGrouping) {
      var groups = pvt.groups;

      for (var i = 0; i < groups.length; i++) {
        var level = null;

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(groupDs)) {
          groupDs = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].group(groupDs, groups[i]);
        }

        var groupQuery = _query__WEBPACK_IMPORTED_MODULE_2__["Query"].filterQueries(query.queries, 'onGroup')[i].e;
        pData = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].group(pData, groups[i], pvt.aggregates, level, groupDs, groupQuery.comparer);
      }

      args.result = pData;
    }

    return args;
  };

  UrlAdaptor.prototype.getQueryRequest = function (query) {
    var req = {
      sorts: [],
      groups: [],
      filters: [],
      searches: [],
      aggregates: []
    };
    req.sorts = _query__WEBPACK_IMPORTED_MODULE_2__["Query"].filterQueries(query.queries, 'onSortBy');
    req.groups = _query__WEBPACK_IMPORTED_MODULE_2__["Query"].filterQueries(query.queries, 'onGroup');
    req.filters = _query__WEBPACK_IMPORTED_MODULE_2__["Query"].filterQueries(query.queries, 'onWhere');
    req.searches = _query__WEBPACK_IMPORTED_MODULE_2__["Query"].filterQueries(query.queries, 'onSearch');
    req.aggregates = _query__WEBPACK_IMPORTED_MODULE_2__["Query"].filterQueries(query.queries, 'onAggregates');
    return req;
  };

  UrlAdaptor.prototype.addParams = function (options) {
    var req = options.reqParams;

    if (options.params.length) {
      req.params = {};
    }

    for (var _i = 0, _a = options.params; _i < _a.length; _i++) {
      var tmp = _a[_i];

      if (req[tmp.key]) {
        throw new Error('Query() - addParams: Custom Param is conflicting other request arguments');
      }

      req[tmp.key] = tmp.value;

      if (tmp.fn) {
        req[tmp.key] = tmp.fn.call(options.query, tmp.key, options.query, options.dm);
      }

      req.params[tmp.key] = req[tmp.key];
    }
  };

  return UrlAdaptor;
}(Adaptor);


/**
 * OData Adaptor that is extended from URL Adaptor, is used for consuming data through OData Service.
 *
 * @hidden
 */

var ODataAdaptor =
/** @class */
function (_super) {
  __extends(ODataAdaptor, _super);

  function ODataAdaptor(props) {
    var _this = _super.call(this) || this; // options replaced the default adaptor options


    _this.options = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, _this.options, {
      requestType: 'get',
      accept: 'application/json;odata=light;q=1,application/json;odata=verbose;q=0.5',
      multipartAccept: 'multipart/mixed',
      sortBy: '$orderby',
      select: '$select',
      skip: '$skip',
      take: '$top',
      count: '$inlinecount',
      where: '$filter',
      expand: '$expand',
      batch: '$batch',
      changeSet: '--changeset_',
      batchPre: 'batch_',
      contentId: 'Content-Id: ',
      batchContent: 'Content-Type: multipart/mixed; boundary=',
      changeSetContent: 'Content-Type: application/http\nContent-Transfer-Encoding: binary ',
      batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',
      updateType: 'PUT'
    });
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(_this.options, props || {});
    return _this;
  }

  ODataAdaptor.prototype.getModuleName = function () {
    return 'ODataAdaptor';
  };
  /**
   * Generate request string based on the filter criteria from query.
   *
   * @param {Predicate} pred
   * @param {boolean} requiresCast?
   * @param predicate
   * @param query
   * @param requiresCast
   */


  ODataAdaptor.prototype.onPredicate = function (predicate, query, requiresCast) {
    var returnValue = '';
    var operator;
    var guid;
    var val = predicate.value;
    var type = typeof val;
    var field = predicate.field ? ODataAdaptor.getField(predicate.field) : null;

    if (val instanceof Date) {
      val = 'datetime\'' + _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].parse.replacer(val) + '\'';
    }

    if (type === 'string') {
      val = val.replace(/'/g, '\'\'');

      if (predicate.ignoreCase) {
        val = val.toLowerCase();
      }

      if (predicate.operator !== 'like') {
        val = encodeURIComponent(val);
      }

      if (predicate.operator !== 'wildcard' && predicate.operator !== 'like') {
        val = '\'' + val + '\'';
      }

      if (requiresCast) {
        field = 'cast(' + field + ', \'Edm.String\')';
      }

      if (_util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].parse.isGuid(val)) {
        guid = 'guid';
      }

      if (predicate.ignoreCase) {
        if (!guid) {
          field = 'tolower(' + field + ')';
        }

        val = val.toLowerCase();
      }
    }

    if (predicate.operator === 'isempty' || predicate.operator === 'isnull' || predicate.operator === 'isnotempty' || predicate.operator === 'isnotnull') {
      operator = predicate.operator.indexOf('isnot') !== -1 ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odBiOperator['notequal'] : _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odBiOperator['equal'];
      val = predicate.operator === 'isnull' || predicate.operator === 'isnotnull' ? null : '\'\'';
    } else {
      operator = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odBiOperator[predicate.operator];
    }

    if (operator) {
      returnValue += field;
      returnValue += operator;

      if (guid) {
        returnValue += guid;
      }

      return returnValue + val;
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor') {
      operator = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odv4UniOperator[predicate.operator];
    } else {
      operator = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odUniOperator[predicate.operator];
    }

    if (operator === 'like') {
      val = val;

      if (val.indexOf('%') !== -1) {
        if (val.charAt(0) === '%' && val.lastIndexOf('%') < 2) {
          val = val.substring(1, val.length);
          operator = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor' ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odv4UniOperator['startswith'] : _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odUniOperator['startswith'];
        } else if (val.charAt(val.length - 1) === '%' && val.indexOf('%') > val.length - 3) {
          val = val.substring(0, val.length - 1);
          operator = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor' ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odv4UniOperator['endswith'] : _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odUniOperator['endswith'];
        } else if (val.lastIndexOf('%') !== val.indexOf('%') && val.lastIndexOf('%') > val.indexOf('%') + 1) {
          val = val.substring(val.indexOf('%') + 1, val.lastIndexOf('%'));
          operator = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor' ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odv4UniOperator['contains'] : _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odUniOperator['contains'];
        } else {
          operator = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor' ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odv4UniOperator['contains'] : _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odUniOperator['contains'];
        }
      }

      val = encodeURIComponent(val);
      val = '\'' + val + '\'';
    } else if (operator === 'wildcard') {
      val = val;

      if (val.indexOf('*') !== -1) {
        var splittedStringValue = val.split('*');
        var splittedValue = void 0;
        var count = 0;

        if (val.indexOf('*') !== 0 && splittedStringValue[0].indexOf('%3f') === -1 && splittedStringValue[0].indexOf('?') === -1) {
          splittedValue = splittedStringValue[0];
          splittedValue = '\'' + splittedValue + '\'';
          operator = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor' ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odv4UniOperator['startswith'] : _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odUniOperator['startswith'];
          returnValue += operator + '(';
          returnValue += field + ',';

          if (guid) {
            returnValue += guid;
          }

          returnValue += splittedValue + ')';
          count++;
        }

        if (val.lastIndexOf('*') !== val.length - 1 && splittedStringValue[splittedStringValue.length - 1].indexOf('%3f') === -1 && splittedStringValue[splittedStringValue.length - 1].indexOf('?') === -1) {
          splittedValue = splittedStringValue[splittedStringValue.length - 1];
          splittedValue = '\'' + splittedValue + '\'';
          operator = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor' ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odv4UniOperator['endswith'] : _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odUniOperator['endswith'];

          if (count > 0) {
            returnValue += ' and ';
          }

          returnValue += operator + '(';
          returnValue += field + ',';

          if (guid) {
            returnValue += guid;
          }

          returnValue += splittedValue + ')';
          count++;
        }

        if (splittedStringValue.length > 2) {
          for (var i = 1; i < splittedStringValue.length - 1; i++) {
            if (splittedStringValue[i].indexOf('%3f') === -1 && splittedStringValue[i].indexOf('?') === -1) {
              splittedValue = splittedStringValue[i];
              splittedValue = '\'' + splittedValue + '\'';
              operator = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor' ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odv4UniOperator['contains'] : _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odUniOperator['contains'];

              if (count > 0) {
                returnValue += ' and ';
              }

              if (operator === 'substringof' || operator === 'not substringof') {
                var temp = splittedValue;
                splittedValue = field;
                field = temp;
              }

              returnValue += operator + '(';
              returnValue += field + ',';

              if (guid) {
                returnValue += guid;
              }

              returnValue += splittedValue + ')';
              count++;
            }
          }
        }

        if (count === 0) {
          operator = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor' ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odv4UniOperator['contains'] : _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odUniOperator['contains'];

          if (val.indexOf('?') !== -1 || val.indexOf('%3f') !== -1) {
            val = val.indexOf('?') !== -1 ? val.split('?').join('') : val.split('%3f').join('');
          }

          val = '\'' + val + '\'';
        } else {
          operator = 'wildcard';
        }
      } else {
        operator = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor' ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odv4UniOperator['contains'] : _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].odUniOperator['contains'];

        if (val.indexOf('?') !== -1 || val.indexOf('%3f') !== -1) {
          val = val.indexOf('?') !== -1 ? val.split('?').join('') : val.split('%3f').join('');
        }

        val = '\'' + val + '\'';
      }
    }

    if (operator === 'substringof' || operator === 'not substringof') {
      var temp = val;
      val = field;
      field = temp;
    }

    if (operator !== 'wildcard') {
      returnValue += operator + '(';
      returnValue += field + ',';

      if (guid) {
        returnValue += guid;
      }

      returnValue += val + ')';
    }

    return returnValue;
  };

  ODataAdaptor.prototype.addParams = function (options) {
    _super.prototype.addParams.call(this, options);

    delete options.reqParams.params;
  };
  /**
   * Generate request string based on the multiple filter criteria from query.
   *
   * @param {Predicate} pred
   * @param {boolean} requiresCast?
   * @param predicate
   * @param query
   * @param requiresCast
   */


  ODataAdaptor.prototype.onComplexPredicate = function (predicate, query, requiresCast) {
    var res = [];

    for (var i = 0; i < predicate.predicates.length; i++) {
      res.push('(' + this.onEachWhere(predicate.predicates[i], query, requiresCast) + ')');
    }

    return res.join(' ' + predicate.condition + ' ');
  };
  /**
   * Generate query string based on the multiple filter criteria from query.
   *
   * @param {Predicate} filter
   * @param {boolean} requiresCast?
   * @param query
   * @param requiresCast
   */


  ODataAdaptor.prototype.onEachWhere = function (filter, query, requiresCast) {
    return filter.isComplex ? this.onComplexPredicate(filter, query, requiresCast) : this.onPredicate(filter, query, requiresCast);
  };
  /**
   * Generate query string based on the multiple filter criteria from query.
   *
   * @param  {string[]} filters
   */


  ODataAdaptor.prototype.onWhere = function (filters) {
    if (this.pvt.search) {
      filters.push(this.onEachWhere(this.pvt.search, null, true));
    }

    return filters.join(' and ');
  };
  /**
   * Generate query string based on the multiple search criteria from query.
   *
   * @param e
   * @param {string} operator
   * @param {string} key
   * @param {boolean} } ignoreCase
   * @param e.fields
   * @param e.operator
   * @param e.key
   * @param e.ignoreCase
   */


  ODataAdaptor.prototype.onEachSearch = function (e) {
    if (e.fields && e.fields.length === 0) {
      _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].throwError('Query() - Search : oData search requires list of field names to search');
    }

    var filter = this.pvt.search || [];

    for (var i = 0; i < e.fields.length; i++) {
      filter.push(new _query__WEBPACK_IMPORTED_MODULE_2__["Predicate"](e.fields[i], e.operator, e.key, e.ignoreCase));
    }

    this.pvt.search = filter;
  };
  /**
   * Generate query string based on the search criteria from query.
   *
   * @param  {Object} e
   */


  ODataAdaptor.prototype.onSearch = function (e) {
    this.pvt.search = _query__WEBPACK_IMPORTED_MODULE_2__["Predicate"].or(this.pvt.search);
    return '';
  };
  /**
   * Generate query string based on multiple sort criteria from query.
   *
   * @param  {QueryOptions} e
   */


  ODataAdaptor.prototype.onEachSort = function (e) {
    var res = [];

    if (e.name instanceof Array) {
      for (var i = 0; i < e.name.length; i++) {
        res.push(ODataAdaptor.getField(e.name[i]) + (e.direction === 'descending' ? ' desc' : ''));
      }
    } else {
      res.push(ODataAdaptor.getField(e.name) + (e.direction === 'descending' ? ' desc' : ''));
    }

    return res.join(',');
  };
  /**
   * Returns sort query string.
   *
   * @param  {string[]} e
   */


  ODataAdaptor.prototype.onSortBy = function (e) {
    return e.reverse().join(',');
  };
  /**
   * Adds the group query to the adaptor option.
   *
   * @param  {Object[]} e
   * @returns string
   */


  ODataAdaptor.prototype.onGroup = function (e) {
    this.pvt.groups = e;
    return [];
  };
  /**
   * Returns the select query string.
   *
   * @param  {string[]} e
   */


  ODataAdaptor.prototype.onSelect = function (e) {
    for (var i = 0; i < e.length; i++) {
      e[i] = ODataAdaptor.getField(e[i]);
    }

    return e.join(',');
  };
  /**
   * Add the aggregate query to the adaptor option.
   *
   * @param  {Object[]} e
   * @returns string
   */


  ODataAdaptor.prototype.onAggregates = function (e) {
    this.pvt.aggregates = e;
    return '';
  };
  /**
   * Returns the query string which requests total count from the data source.
   *
   * @param  {boolean} e
   * @returns string
   */


  ODataAdaptor.prototype.onCount = function (e) {
    return e === true ? 'allpages' : '';
  };
  /**
   * Method will trigger before send the request to server side.
   * Used to set the custom header or modify the request options.
   *
   * @param {DataManager} dm
   * @param {Request} request
   * @param {Fetch} settings?
   * @param settings
   */


  ODataAdaptor.prototype.beforeSend = function (dm, request, settings) {
    if (_util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].endsWith(settings.url, this.options.batch) && settings.type.toLowerCase() === 'post') {
      request.headers.set('Accept', this.options.multipartAccept);
      request.headers.set('DataServiceVersion', '2.0'); //request.overrideMimeType('text/plain; charset=x-user-defined');
    } else {
      request.headers.set('Accept', this.options.accept);
    }

    request.headers.set('DataServiceVersion', '2.0');
    request.headers.set('MaxDataServiceVersion', '2.0');
  };
  /**
   * Returns the data from the query processing.
   *
   * @param {DataResult} data
   * @param {DataOptions} ds?
   * @param {Query} query?
   * @param {Request} xhr?
   * @param {Fetch} request?
   * @param {CrudOptions} changes?
   * @param ds
   * @param query
   * @param xhr
   * @param request
   * @param changes
   * @returns aggregateResult
   */


  ODataAdaptor.prototype.processResponse = function (data, ds, query, xhr, request, changes) {
    var metaCheck = 'odata.metadata';

    if (request && request.type === 'GET' && !this.rootUrl && data[metaCheck]) {
      var dataUrls = data[metaCheck].split('/$metadata#');
      this.rootUrl = dataUrls[0];
      this.resourceTableName = dataUrls[1];
    }

    var pvtData = 'pvtData';

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data.d)) {
      var dataCopy = query && query.isCountRequired ? data.d.results : data.d;
      var metaData = '__metadata';

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataCopy)) {
        for (var i = 0; i < dataCopy.length; i++) {
          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataCopy[i][metaData])) {
            delete dataCopy[i][metaData];
          }
        }
      }
    }

    var pvt = request && request[pvtData];
    var emptyAndBatch = this.processBatchResponse(data, query, xhr, request, changes);

    if (emptyAndBatch) {
      return emptyAndBatch;
    }

    var versionCheck = xhr && request.fetchRequest.headers.get('DataServiceVersion');
    var count = null;
    var version = versionCheck && parseInt(versionCheck, 10) || 2;

    if (query && query.isCountRequired) {
      var oDataCount = '__count';

      if (data[oDataCount] || data['odata.count']) {
        count = data[oDataCount] || data['odata.count'];
      }

      if (data.d) {
        data = data.d;
      }

      if (data[oDataCount] || data['odata.count']) {
        count = data[oDataCount] || data['odata.count'];
      }
    }

    if (version === 3 && data.value) {
      data = data.value;
    }

    if (data.d) {
      data = data.d;
    }

    if (version < 3 && data.results) {
      data = data.results;
    }

    var args = {};
    args.count = count;
    args.result = data;
    this.getAggregateResult(pvt, data, args, null, query);
    return _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].isNull(count) ? args.result : {
      result: args.result,
      count: args.count,
      aggregates: args.aggregates
    };
  };
  /**
   * Converts the request object to query string.
   *
   * @param {Object} req
   * @param request
   * @param {Query} query
   * @param {DataManager} dm
   * @returns tableName
   */


  ODataAdaptor.prototype.convertToQueryString = function (request, query, dm) {
    var res = [];
    var table = 'table';
    var tableName = request[table] || '';
    var format = '$format';
    delete request[table];

    if (dm.dataSource.requiresFormat) {
      request[format] = 'json';
    }

    var keys = Object.keys(request);

    for (var _i = 0, keys_4 = keys; _i < keys_4.length; _i++) {
      var prop = keys_4[_i];
      res.push(prop + '=' + request[prop]);
    }

    res = res.join('&');

    if (dm.dataSource.url && dm.dataSource.url.indexOf('?') !== -1 && !tableName) {
      return res;
    }

    return res.length ? tableName + '?' + res : tableName || '';
  };

  ODataAdaptor.prototype.localTimeReplacer = function (key, convertObj) {
    for (var _i = 0, _a = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(convertObj) ? Object.keys(convertObj) : []; _i < _a.length; _i++) {
      var prop = _a[_i];

      if (convertObj[prop] instanceof Date) {
        convertObj[prop] = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].dateParse.toLocalTime(convertObj[prop]);
      }
    }

    return convertObj;
  };
  /**
   * Prepare and returns request body which is used to insert a new record in the table.
   *
   * @param {DataManager} dm
   * @param {Object} data
   * @param {string} tableName?
   * @param tableName
   */


  ODataAdaptor.prototype.insert = function (dm, data, tableName) {
    return {
      url: (dm.dataSource.insertUrl || dm.dataSource.url).replace(/\/*$/, tableName ? '/' + tableName : ''),
      data: JSON.stringify(data, this.options.localTime ? this.localTimeReplacer : null)
    };
  };
  /**
   * Prepare and return request body which is used to remove record from the table.
   *
   * @param {DataManager} dm
   * @param {string} keyField
   * @param {number} value
   * @param {string} tableName?
   * @param tableName
   */


  ODataAdaptor.prototype.remove = function (dm, keyField, value, tableName) {
    var url;

    if (typeof value === 'string' && !_util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].parse.isGuid(value)) {
      url = "('" + value + "')";
    } else {
      url = "(" + value + ")";
    }

    return {
      type: 'DELETE',
      url: (dm.dataSource.removeUrl || dm.dataSource.url).replace(/\/*$/, tableName ? '/' + tableName : '') + url
    };
  };
  /**
   * Updates existing record and saves the changes to the table.
   *
   * @param {DataManager} dm
   * @param {string} keyField
   * @param {Object} value
   * @param {string} tableName?
   * @param tableName
   * @param query
   * @param original
   * @returns this
   */


  ODataAdaptor.prototype.update = function (dm, keyField, value, tableName, query, original) {
    if (this.options.updateType === 'PATCH' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(original)) {
      value = this.compareAndRemove(value, original, keyField);
    }

    var url;

    if (typeof value[keyField] === 'string' && !_util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].parse.isGuid(value[keyField])) {
      url = "('" + value[keyField] + "')";
    } else {
      url = "(" + value[keyField] + ")";
    }

    return {
      type: this.options.updateType,
      url: (dm.dataSource.updateUrl || dm.dataSource.url).replace(/\/*$/, tableName ? '/' + tableName : '') + url,
      data: JSON.stringify(value, this.options.localTime ? this.localTimeReplacer : null),
      accept: this.options.accept
    };
  };
  /**
   * Prepare the request body based on the newly added, removed and updated records.
   * The result is used by the batch request.
   *
   * @param {DataManager} dm
   * @param {CrudOptions} changes
   * @param {RemoteArgs} e
   * @param query
   * @param original
   * @returns {Object}
   */


  ODataAdaptor.prototype.batchRequest = function (dm, changes, e, query, original) {
    var initialGuid = e.guid = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getGuid(this.options.batchPre);
    var url = this.rootUrl ? this.rootUrl + '/' + this.options.batch : dm.dataSource.url.replace(/\/*$/, '/' + this.options.batch);
    e.url = this.resourceTableName ? this.resourceTableName : e.url;
    var args = {
      url: e.url,
      key: e.key,
      cid: 1,
      cSet: _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getGuid(this.options.changeSet)
    };
    var req = '--' + initialGuid + '\n';
    req += 'Content-Type: multipart/mixed; boundary=' + args.cSet.replace('--', '') + '\n';
    this.pvt.changeSet = 0;
    req += this.generateInsertRequest(changes.addedRecords, args, dm);
    req += this.generateUpdateRequest(changes.changedRecords, args, dm, original ? original.changedRecords : []);
    req += this.generateDeleteRequest(changes.deletedRecords, args, dm);
    req += args.cSet + '--\n';
    req += '--' + initialGuid + '--';
    return {
      type: 'POST',
      url: url,
      dataType: 'json',
      contentType: 'multipart/mixed; charset=UTF-8;boundary=' + initialGuid,
      data: req
    };
  };
  /**
   * Generate the string content from the removed records.
   * The result will be send during batch update.
   *
   * @param {Object[]} arr
   * @param {RemoteArgs} e
   * @param dm
   * @returns this
   */


  ODataAdaptor.prototype.generateDeleteRequest = function (arr, e, dm) {
    if (!arr) {
      return '';
    }

    var req = '';
    var stat = {
      'method': 'DELETE ',
      'url': function (data, i, key) {
        var url = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getObject(key, data[i]);

        if (typeof url === 'number' || _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].parse.isGuid(url)) {
          return '(' + url + ')';
        } else if (url instanceof Date) {
          var dateTime = data[i][key];
          return '(' + dateTime.toJSON() + ')';
        } else {
          return "('" + url + "')";
        }
      },
      'data': function (data, i) {
        return '';
      }
    };
    req = this.generateBodyContent(arr, e, stat, dm);
    return req + '\n';
  };
  /**
   * Generate the string content from the inserted records.
   * The result will be send during batch update.
   *
   * @param {Object[]} arr
   * @param {RemoteArgs} e
   * @param dm
   */


  ODataAdaptor.prototype.generateInsertRequest = function (arr, e, dm) {
    if (!arr) {
      return '';
    }

    var req = '';
    var stat = {
      'method': 'POST ',
      'url': function (data, i, key) {
        return '';
      },
      'data': function (data, i) {
        return JSON.stringify(data[i]) + '\n\n';
      }
    };
    req = this.generateBodyContent(arr, e, stat, dm);
    return req;
  };
  /**
   * Generate the string content from the updated records.
   * The result will be send during batch update.
   *
   * @param {Object[]} arr
   * @param {RemoteArgs} e
   * @param dm
   * @param org
   */


  ODataAdaptor.prototype.generateUpdateRequest = function (arr, e, dm, org) {
    var _this = this;

    if (!arr) {
      return '';
    }

    var req = '';
    arr.forEach(function (change) {
      return change = _this.compareAndRemove(change, org.filter(function (o) {
        return _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getObject(e.key, o) === _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getObject(e.key, change);
      })[0], e.key);
    });
    var stat = {
      'method': this.options.updateType + ' ',
      'url': function (data, i, key) {
        if (typeof data[i][key] === 'number' || _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].parse.isGuid(data[i][key])) {
          return '(' + data[i][key] + ')';
        } else if (data[i][key] instanceof Date) {
          var date = data[i][key];
          return '(' + date.toJSON() + ')';
        } else {
          return "('" + data[i][key] + "')";
        }
      },
      'data': function (data, i) {
        return JSON.stringify(data[i]) + '\n\n';
      }
    };
    req = this.generateBodyContent(arr, e, stat, dm);
    return req;
  };

  ODataAdaptor.getField = function (prop) {
    return prop.replace(/\./g, '/');
  };

  ODataAdaptor.prototype.generateBodyContent = function (arr, e, stat, dm) {
    var req = '';

    for (var i = 0; i < arr.length; i++) {
      req += '\n' + e.cSet + '\n';
      req += this.options.changeSetContent + '\n\n';
      req += stat.method;

      if (stat.method === 'POST ') {
        req += (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\n';
      } else if (stat.method === 'PUT ' || stat.method === 'PATCH ') {
        req += (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\n';
      } else if (stat.method === 'DELETE ') {
        req += (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\n';
      }

      req += 'Accept: ' + this.options.accept + '\n';
      req += 'Content-Id: ' + this.pvt.changeSet++ + '\n';
      req += this.options.batchChangeSetContentType + '\n';

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(arr[i]['@odata.etag'])) {
        req += 'If-Match: ' + arr[i]['@odata.etag'] + '\n\n';
        delete arr[i]['@odata.etag'];
      } else {
        req += '\n';
      }

      req += stat.data(arr, i);
    }

    return req;
  };

  ODataAdaptor.prototype.processBatchResponse = function (data, query, xhr, request, changes) {
    if (xhr && xhr.headers.get('Content-Type') && xhr.headers.get('Content-Type').indexOf('xml') !== -1) {
      return query.isCountRequired ? {
        result: [],
        count: 0
      } : [];
    }

    if (request && this.options.batch && _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].endsWith(request.url, this.options.batch) && request.type.toLowerCase() === 'post') {
      var guid = xhr.headers.get('Content-Type');
      var cIdx = void 0;
      var jsonObj = void 0;
      var d = data + '';
      guid = guid.substring(guid.indexOf('=batchresponse') + 1);
      d = d.split(guid);

      if (d.length < 2) {
        return {};
      }

      d = d[1];
      var exVal = /(?:\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(d);

      if (exVal) {
        d.replace(exVal[0], '');
      }

      var changeGuid = exVal ? exVal[1] : '';
      d = d.split(changeGuid);

      for (var i = d.length; i > -1; i--) {
        if (!/\bContent-ID:/i.test(d[i]) || !/\bHTTP.+201/.test(d[i])) {
          continue;
        }

        cIdx = parseInt(/\bContent-ID: (\d+)/i.exec(d[i])[1], 10);

        if (changes.addedRecords[cIdx]) {
          jsonObj = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].parse.parseJson(/^\{.+\}/m.exec(d[i])[0]);
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, changes.addedRecords[cIdx], this.processResponse(jsonObj));
        }
      }

      return changes;
    }

    return null;
  };

  ODataAdaptor.prototype.compareAndRemove = function (data, original, key) {
    var _this = this;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(original)) {
      return data;
    }

    Object.keys(data).forEach(function (prop) {
      if (prop !== key && prop !== '@odata.etag') {
        if (_util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].isPlainObject(data[prop])) {
          _this.compareAndRemove(data[prop], original[prop]);

          var final = Object.keys(data[prop]).filter(function (data) {
            return data !== '@odata.etag';
          });

          if (final.length === 0) {
            delete data[prop];
          }
        } else if (data[prop] === original[prop]) {
          delete data[prop];
        } else if (data[prop] && original[prop] && data[prop].valueOf() === original[prop].valueOf()) {
          delete data[prop];
        }
      }
    });
    return data;
  };

  return ODataAdaptor;
}(UrlAdaptor);


/**
 * The OData v4 is an improved version of OData protocols.
 * The DataManager uses the ODataV4Adaptor to consume OData v4 services.
 *
 * @hidden
 */

var ODataV4Adaptor =
/** @class */
function (_super) {
  __extends(ODataV4Adaptor, _super);

  function ODataV4Adaptor(props) {
    var _this = _super.call(this, props) || this; // options replaced the default adaptor options


    _this.options = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, _this.options, {
      requestType: 'get',
      accept: 'application/json, text/javascript, */*; q=0.01',
      multipartAccept: 'multipart/mixed',
      sortBy: '$orderby',
      select: '$select',
      skip: '$skip',
      take: '$top',
      count: '$count',
      search: '$search',
      where: '$filter',
      expand: '$expand',
      batch: '$batch',
      changeSet: '--changeset_',
      batchPre: 'batch_',
      contentId: 'Content-Id: ',
      batchContent: 'Content-Type: multipart/mixed; boundary=',
      changeSetContent: 'Content-Type: application/http\nContent-Transfer-Encoding: binary ',
      batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',
      updateType: 'PATCH',
      localTime: false,
      apply: '$apply'
    });
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(_this.options, props || {});
    return _this;
  }
  /**
   * @hidden
   */


  ODataV4Adaptor.prototype.getModuleName = function () {
    return 'ODataV4Adaptor';
  };
  /**
   * Returns the query string which requests total count from the data source.
   *
   * @param  {boolean} e
   * @returns string
   */


  ODataV4Adaptor.prototype.onCount = function (e) {
    return e === true ? 'true' : '';
  };
  /**
   * Generate request string based on the filter criteria from query.
   *
   * @param {Predicate} pred
   * @param {boolean} requiresCast?
   * @param predicate
   * @param query
   * @param requiresCast
   */


  ODataV4Adaptor.prototype.onPredicate = function (predicate, query, requiresCast) {
    var returnValue = '';
    var val = predicate.value;
    var isDate = val instanceof Date;

    if (query instanceof _query__WEBPACK_IMPORTED_MODULE_2__["Query"]) {
      var queries = this.getQueryRequest(query);

      for (var i = 0; i < queries.filters.length; i++) {
        if (queries.filters[i].e.key === predicate.value) {
          requiresCast = true;
        }
      }
    }

    returnValue = _super.prototype.onPredicate.call(this, predicate, query, requiresCast);

    if (isDate) {
      returnValue = returnValue.replace(/datetime'(.*)'$/, '$1');
    }

    if (_util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].parse.isGuid(val)) {
      returnValue = returnValue.replace('guid', '').replace(/'/g, '');
    }

    return returnValue;
  };
  /**
   * Generate query string based on the multiple search criteria from query.
   *
   * @param e
   * @param {string} operator
   * @param {string} key
   * @param {boolean} } ignoreCase
   * @param e.fields
   * @param e.operator
   * @param e.key
   * @param e.ignoreCase
   */


  ODataV4Adaptor.prototype.onEachSearch = function (e) {
    var search = this.pvt.searches || [];
    search.push(e.key);
    this.pvt.searches = search;
  };
  /**
   *  Generate query string based on the search criteria from query.
   *
   * @param  {Object} e
   */


  ODataV4Adaptor.prototype.onSearch = function (e) {
    return this.pvt.searches.join(' OR ');
  };
  /**
   * Returns the expand query string.
   *
   * @param {string} e
   * @param e.selects
   * @param e.expands
   */


  ODataV4Adaptor.prototype.onExpand = function (e) {
    var _this = this;

    var selected = {};
    var expanded = {};
    var expands = e.expands.slice();
    var exArr = [];
    var selects = e.selects.filter(function (item) {
      return item.indexOf('.') > -1;
    });
    selects.forEach(function (select) {
      var splits = select.split('.');

      if (!(splits[0] in selected)) {
        selected[splits[0]] = [];
      }

      if (splits.length === 2) {
        if (selected[splits[0]].length && Object.keys(selected).indexOf(splits[0]) !== -1) {
          if (selected[splits[0]][0].indexOf('$expand') !== -1 && selected[splits[0]][0].indexOf(';$select=') === -1) {
            selected[splits[0]][0] = selected[splits[0]][0] + ';' + '$select=' + splits[1];
          } else {
            selected[splits[0]][0] = selected[splits[0]][0] + ',' + splits[1];
          }
        } else {
          selected[splits[0]].push('$select=' + splits[1]);
        }
      } else {
        var sel = '$select=' + splits[splits.length - 1];
        var exp = '';
        var close_1 = '';

        for (var i = 1; i < splits.length - 1; i++) {
          exp = exp + '$expand=' + splits[i] + '(';
          close_1 = close_1 + ')';
        }

        var combineVal = exp + sel + close_1;

        if (selected[splits[0]].length && Object.keys(selected).indexOf(splits[0]) !== -1 && _this.expandQueryIndex(selected[splits[0]], true)) {
          var idx = _this.expandQueryIndex(selected[splits[0]]);

          selected[splits[0]][idx] = selected[splits[0]][idx] + combineVal.replace('$expand=', ',');
        } else {
          selected[splits[0]].push(combineVal);
        }
      }
    }); //Auto expand from select query

    Object.keys(selected).forEach(function (expand) {
      if (expands.indexOf(expand) === -1) {
        expands.push(expand);
      }
    });
    expands.forEach(function (expand) {
      expanded[expand] = expand in selected ? expand + "(" + selected[expand].join(';') + ")" : expand;
    });
    Object.keys(expanded).forEach(function (ex) {
      return exArr.push(expanded[ex]);
    });
    return exArr.join(',');
  };

  ODataV4Adaptor.prototype.expandQueryIndex = function (query, isExpand) {
    for (var i = 0; i < query.length; i++) {
      if (query[i].indexOf('$expand') !== -1) {
        return isExpand ? true : i;
      }
    }

    return isExpand ? false : 0;
  };
  /**
   * Returns the groupby query string.
   *
   * @param {string} e
   * @param distinctFields
   */


  ODataV4Adaptor.prototype.onDistinct = function (distinctFields) {
    var fields = distinctFields.map(function (field) {
      return ODataAdaptor.getField(field);
    }).join(',');
    return "groupby((" + fields + "))";
  };
  /**
   * Returns the select query string.
   *
   * @param  {string[]} e
   */


  ODataV4Adaptor.prototype.onSelect = function (e) {
    return _super.prototype.onSelect.call(this, e.filter(function (item) {
      return item.indexOf('.') === -1;
    }));
  };
  /**
   * Method will trigger before send the request to server side.
   * Used to set the custom header or modify the request options.
   *
   * @param  {DataManager} dm
   * @param  {Request} request
   * @param  {Fetch} settings
   * @returns void
   */


  ODataV4Adaptor.prototype.beforeSend = function (dm, request, settings) {
    if (settings.type === 'POST' || settings.type === 'PUT' || settings.type === 'PATCH') {
      request.headers.set('Prefer', 'return=representation');
    }

    request.headers.set('Accept', this.options.accept);
  };
  /**
   * Returns the data from the query processing.
   *
   * @param {DataResult} data
   * @param {DataOptions} ds?
   * @param {Query} query?
   * @param {Request} xhr?
   * @param {Fetch} request?
   * @param {CrudOptions} changes?
   * @param ds
   * @param query
   * @param xhr
   * @param request
   * @param changes
   * @returns aggregateResult
   */


  ODataV4Adaptor.prototype.processResponse = function (data, ds, query, xhr, request, changes) {
    var metaName = '@odata.context';
    var metaV4Name = '@context';

    if (request && request.type === 'GET' && !this.rootUrl && (data[metaName] || data[metaV4Name])) {
      var dataUrl = data[metaName] ? data[metaName].split('/$metadata#') : data[metaV4Name].split('/$metadata#');
      this.rootUrl = dataUrl[0];
      this.resourceTableName = dataUrl[1];
    }

    var pvtData = 'pvtData';
    var pvt = request && request[pvtData];

    var emptyAndBatch = _super.prototype.processBatchResponse.call(this, data, query, xhr, request, changes);

    if (emptyAndBatch) {
      return emptyAndBatch;
    }

    var count = null;
    var dataCount = '@odata.count';
    var dataV4Count = '@count';

    if (query && query.isCountRequired) {
      if (dataCount in data) {
        count = data[dataCount];
      } else if (dataV4Count in data) {
        count = data[dataV4Count];
      }
    }

    data = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data.value) ? data.value : data;
    var args = {};
    args.count = count;
    args.result = data;
    this.getAggregateResult(pvt, data, args, null, query);
    return _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].isNull(count) ? args.result : {
      result: args.result,
      count: count,
      aggregates: args.aggregates
    };
  };

  return ODataV4Adaptor;
}(ODataAdaptor);


/**
 * The Web API is a programmatic interface to define the request and response messages system that is mostly exposed in JSON or XML.
 * The DataManager uses the WebApiAdaptor to consume Web API.
 * Since this adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor
 *
 * @hidden
 */

var WebApiAdaptor =
/** @class */
function (_super) {
  __extends(WebApiAdaptor, _super);

  function WebApiAdaptor() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  WebApiAdaptor.prototype.getModuleName = function () {
    return 'WebApiAdaptor';
  };
  /**
   * Prepare and returns request body which is used to insert a new record in the table.
   *
   * @param {DataManager} dm
   * @param {Object} data
   * @param {string} tableName?
   * @param tableName
   */


  WebApiAdaptor.prototype.insert = function (dm, data, tableName) {
    return {
      type: 'POST',
      url: dm.dataSource.url,
      data: JSON.stringify(data)
    };
  };
  /**
   * Prepare and return request body which is used to remove record from the table.
   *
   * @param {DataManager} dm
   * @param {string} keyField
   * @param {number} value
   * @param {string} tableName?
   * @param tableName
   */


  WebApiAdaptor.prototype.remove = function (dm, keyField, value, tableName) {
    return {
      type: 'DELETE',
      url: dm.dataSource.url + '/' + value,
      data: JSON.stringify(value)
    };
  };
  /**
   * Prepare and return request body which is used to update record.
   *
   * @param {DataManager} dm
   * @param {string} keyField
   * @param {Object} value
   * @param {string} tableName?
   * @param tableName
   */


  WebApiAdaptor.prototype.update = function (dm, keyField, value, tableName) {
    return {
      type: 'PUT',
      url: dm.dataSource.url,
      data: JSON.stringify(value)
    };
  };

  WebApiAdaptor.prototype.batchRequest = function (dm, changes, e) {
    var _this = this;

    var initialGuid = e.guid = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getGuid(this.options.batchPre);
    var url = dm.dataSource.url.replace(/\/*$/, '/' + this.options.batch);
    e.url = this.resourceTableName ? this.resourceTableName : e.url;
    var req = [];

    var _loop_1 = function (i, x) {
      changes.addedRecords.forEach(function (j, d) {
        var stat = {
          'method': 'POST ',
          'url': function (data, i, key) {
            return '';
          },
          'data': function (data, i) {
            return JSON.stringify(data[i]) + '\n\n';
          }
        };
        req.push('--' + initialGuid);
        req.push('Content-Type: application/http; msgtype=request', '');
        req.push('POST ' + '/api/' + (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.addedRecords, i, e.key) + ' HTTP/1.1');
        req.push('Content-Type: ' + 'application/json; charset=utf-8');
        req.push('Host: ' + location.host);
        req.push('', j ? JSON.stringify(j) : '');
      });
    }; //insertion


    for (var i = 0, x = changes.addedRecords.length; i < x; i++) {
      _loop_1(i, x);
    }

    var _loop_2 = function (i, x) {
      changes.changedRecords.forEach(function (j, d) {
        var stat = {
          'method': _this.options.updateType + ' ',
          'url': function (data, i, key) {
            return '';
          },
          'data': function (data, i) {
            return JSON.stringify(data[i]) + '\n\n';
          }
        };
        req.push('--' + initialGuid);
        req.push('Content-Type: application/http; msgtype=request', '');
        req.push('PUT ' + '/api/' + (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.changedRecords, i, e.key) + ' HTTP/1.1');
        req.push('Content-Type: ' + 'application/json; charset=utf-8');
        req.push('Host: ' + location.host);
        req.push('', j ? JSON.stringify(j) : '');
      });
    }; //updation


    for (var i = 0, x = changes.changedRecords.length; i < x; i++) {
      _loop_2(i, x);
    }

    var _loop_3 = function (i, x) {
      changes.deletedRecords.forEach(function (j, d) {
        var state = {
          'mtd': 'DELETE ',
          'url': function (data, i, key) {
            var url = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getObject(key, data[i]);

            if (typeof url === 'number' || _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].parse.isGuid(url)) {
              return '/' + url;
            } else if (url instanceof Date) {
              var datTime = data[i][key];
              return '/' + datTime.toJSON();
            } else {
              return "/'" + url + "'";
            }
          },
          'data': function (data, i) {
            return '';
          }
        };
        req.push('--' + initialGuid);
        req.push('Content-Type: application/http; msgtype=request', '');
        req.push('DELETE ' + '/api/' + (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + state.url(changes.deletedRecords, i, e.key) + ' HTTP/1.1');
        req.push('Content-Type: ' + 'application/json; charset=utf-8');
        req.push('Host: ' + location.host);
        req.push('', j ? JSON.stringify(j) : '');
      });
    }; //deletion


    for (var i = 0, x = changes.deletedRecords.length; i < x; i++) {
      _loop_3(i, x);
    }

    req.push('--' + initialGuid + '--', '');
    return {
      type: 'POST',
      url: url,
      contentType: 'multipart/mixed; boundary=' + initialGuid,
      data: req.join('\r\n')
    };
  };
  /**
   * Method will trigger before send the request to server side.
   * Used to set the custom header or modify the request options.
   *
   * @param  {DataManager} dm
   * @param  {Request} request
   * @param  {Fetch} settings
   * @returns void
   */


  WebApiAdaptor.prototype.beforeSend = function (dm, request, settings) {
    request.headers.set('Accept', 'application/json, text/javascript, */*; q=0.01');
  };
  /**
   * Returns the data from the query processing.
   *
   * @param {DataResult} data
   * @param {DataOptions} ds?
   * @param {Query} query?
   * @param {Request} xhr?
   * @param {Fetch} request?
   * @param {CrudOptions} changes?
   * @param ds
   * @param query
   * @param xhr
   * @param request
   * @param changes
   * @returns aggregateResult
   */


  WebApiAdaptor.prototype.processResponse = function (data, ds, query, xhr, request, changes) {
    var pvtData = 'pvtData';
    var pvt = request && request[pvtData];
    var count = null;
    var args = {};

    if (request && request.type.toLowerCase() !== 'post') {
      var versionCheck = xhr && request.fetchRequest.headers.get('DataServiceVersion');
      var version = versionCheck && parseInt(versionCheck, 10) || 2;

      if (query && query.isCountRequired) {
        if (!_util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].isNull(data.Count)) {
          count = data.Count;
        }
      }

      if (version < 3 && data.Items) {
        data = data.Items;
      }

      args.count = count;
      args.result = data;
      this.getAggregateResult(pvt, data, args, null, query);
    }

    args.result = args.result || data;
    return _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].isNull(count) ? args.result : {
      result: args.result,
      count: args.count,
      aggregates: args.aggregates
    };
  };

  return WebApiAdaptor;
}(ODataAdaptor);


/**
 * WebMethodAdaptor can be used by DataManager to interact with web method.
 *
 * @hidden
 */

var WebMethodAdaptor =
/** @class */
function (_super) {
  __extends(WebMethodAdaptor, _super);

  function WebMethodAdaptor() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  /**
   * Prepare the request body based on the query.
   * The query information can be accessed at the WebMethod using variable named `value`.
   *
   * @param {DataManager} dm
   * @param {Query} query
   * @param {Object[]} hierarchyFilters?
   * @param hierarchyFilters
   * @returns application
   */


  WebMethodAdaptor.prototype.processQuery = function (dm, query, hierarchyFilters) {
    var obj = new UrlAdaptor().processQuery(dm, query, hierarchyFilters);
    var getData = 'data';
    var data = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].parse.parseJson(obj[getData]);
    var result = {};
    var value = 'value';

    if (data.param) {
      for (var i = 0; i < data.param.length; i++) {
        var param = data.param[i];
        var key = Object.keys(param)[0];
        result[key] = param[key];
      }
    }

    result[value] = data;
    var pvtData = 'pvtData';
    var url = 'url';
    return {
      data: JSON.stringify(result),
      url: obj[url],
      pvtData: obj[pvtData],
      type: 'POST',
      contentType: 'application/json; charset=utf-8'
    };
  };

  return WebMethodAdaptor;
}(UrlAdaptor);


/**
 * RemoteSaveAdaptor, extended from JsonAdaptor and it is used for binding local data and performs all DataManager queries in client-side.
 * It interacts with server-side only for CRUD operations.
 *
 * @hidden
 */

var RemoteSaveAdaptor =
/** @class */
function (_super) {
  __extends(RemoteSaveAdaptor, _super);
  /**
   * @hidden
   */


  function RemoteSaveAdaptor() {
    var _this = _super.call(this) || this;

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('beforeSend', UrlAdaptor.prototype.beforeSend, _this);
    return _this;
  }

  RemoteSaveAdaptor.prototype.insert = function (dm, data, tableName, query, position) {
    this.pvt.position = position;
    this.updateType = 'add';
    return {
      url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
      data: JSON.stringify(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {
        value: data,
        table: tableName,
        action: 'insert'
      }, _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getAddParams(this, dm, query)))
    };
  };

  RemoteSaveAdaptor.prototype.remove = function (dm, keyField, val, tableName, query) {
    _super.prototype.remove.call(this, dm, keyField, val);

    return {
      type: 'POST',
      url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,
      data: JSON.stringify(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {
        key: val,
        keyColumn: keyField,
        table: tableName,
        action: 'remove'
      }, _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getAddParams(this, dm, query)))
    };
  };

  RemoteSaveAdaptor.prototype.update = function (dm, keyField, val, tableName, query) {
    this.updateType = 'update';
    this.updateKey = keyField;
    return {
      type: 'POST',
      url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
      data: JSON.stringify(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {
        value: val,
        action: 'update',
        keyColumn: keyField,
        key: val[keyField],
        table: tableName
      }, _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getAddParams(this, dm, query)))
    };
  };

  RemoteSaveAdaptor.prototype.processResponse = function (data, ds, query, xhr, request, changes, e) {
    var i;
    var newData = request ? JSON.parse(request.data) : data;
    data = newData.action === 'batch' ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].parse.parseJson(data) : data;

    if (this.updateType === 'add') {
      _super.prototype.insert.call(this, ds, data, null, null, this.pvt.position);
    }

    if (this.updateType === 'update') {
      _super.prototype.update.call(this, ds, this.updateKey, data);
    }

    this.updateType = undefined;

    if (data.added) {
      for (i = 0; i < data.added.length; i++) {
        _super.prototype.insert.call(this, ds, data.added[i]);
      }
    }

    if (data.changed) {
      for (i = 0; i < data.changed.length; i++) {
        _super.prototype.update.call(this, ds, e.key, data.changed[i]);
      }
    }

    if (data.deleted) {
      for (i = 0; i < data.deleted.length; i++) {
        _super.prototype.remove.call(this, ds, e.key, data.deleted[i]);
      }
    }

    return data;
  };
  /**
   * Prepare the request body based on the newly added, removed and updated records.
   * Also perform the changes in the locally cached data to sync with the remote data.
   * The result is used by the batch request.
   *
   * @param {DataManager} dm
   * @param {CrudOptions} changes
   * @param {RemoteArgs} e
   * @param query
   * @param original
   */


  RemoteSaveAdaptor.prototype.batchRequest = function (dm, changes, e, query, original) {
    return {
      type: 'POST',
      url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,
      contentType: 'application/json; charset=utf-8',
      dataType: 'json',
      data: JSON.stringify(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {
        changed: changes.changedRecords,
        added: changes.addedRecords,
        deleted: changes.deletedRecords,
        action: 'batch',
        table: e.url,
        key: e.key
      }, _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getAddParams(this, dm, query)))
    };
  };

  RemoteSaveAdaptor.prototype.addParams = function (options) {
    var urlParams = new UrlAdaptor();
    urlParams.addParams(options);
  };

  return RemoteSaveAdaptor;
}(JsonAdaptor);


/**
 * Fetch Adaptor that is extended from URL Adaptor, is used for handle data operations with user defined functions.
 *
 * @hidden
 */

var CustomDataAdaptor =
/** @class */
function (_super) {
  __extends(CustomDataAdaptor, _super);

  function CustomDataAdaptor(props) {
    var _this = _super.call(this) || this; // options replaced the default adaptor options


    _this.options = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, _this.options, {
      getData: new Function(),
      addRecord: new Function(),
      updateRecord: new Function(),
      deleteRecord: new Function(),
      batchUpdate: new Function()
    });
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(_this.options, props || {});
    return _this;
  }

  CustomDataAdaptor.prototype.getModuleName = function () {
    return 'CustomDataAdaptor';
  };

  return CustomDataAdaptor;
}(UrlAdaptor);


/**
 * The GraphqlAdaptor that is extended from URL Adaptor, is used for retrieving data from the Graphql server.
 * It interacts with the Graphql server with all the DataManager Queries and performs CRUD operations.
 *
 * @hidden
 */

var GraphQLAdaptor =
/** @class */
function (_super) {
  __extends(GraphQLAdaptor, _super);

  function GraphQLAdaptor(options) {
    var _this = _super.call(this) || this;

    _this.opt = options;
    _this.schema = _this.opt.response;
    _this.query = _this.opt.query;
    /* eslint-disable @typescript-eslint/no-empty-function */
    // tslint:disable-next-line:no-empty

    _this.getVariables = _this.opt.getVariables ? _this.opt.getVariables : function () {};
    /* eslint-enable @typescript-eslint/no-empty-function */

    _this.getQuery = function () {
      return _this.query;
    };

    return _this;
  }

  GraphQLAdaptor.prototype.getModuleName = function () {
    return 'GraphQLAdaptor';
  };
  /**
   * Process the JSON data based on the provided queries.
   *
   * @param {DataManager} dm
   * @param {Query} query?
   * @param datamanager
   * @param query
   */


  GraphQLAdaptor.prototype.processQuery = function (datamanager, query) {
    var urlQuery = _super.prototype.processQuery.apply(this, arguments);

    var dm = JSON.parse(urlQuery.data); // constructing GraphQL parameters

    var keys = ['skip', 'take', 'sorted', 'table', 'select', 'where', 'search', 'requiresCounts', 'aggregates', 'params'];
    var temp = {};
    var str = 'searchwhereparams';
    keys.filter(function (e) {
      temp[e] = str.indexOf(e) > -1 ? JSON.stringify(dm[e]) : dm[e];
    });
    var vars = this.getVariables() || {}; // tslint:disable-next-line:no-string-literal

    vars['datamanager'] = temp;
    var data = JSON.stringify({
      query: this.getQuery(),
      variables: vars
    });
    urlQuery.data = data;
    return urlQuery;
  };
  /**
   * Returns the data from the query processing.
   * It will also cache the data for later usage.
   *
   * @param {DataResult} data
   * @param {DataManager} ds?
   * @param {Query} query?
   * @param {Request} xhr?
   * @param {Object} request?
   * @param resData
   * @param ds
   * @param query
   * @param xhr
   * @param request
   * @returns DataResult
   */


  GraphQLAdaptor.prototype.processResponse = function (resData, ds, query, xhr, request) {
    var res = resData;
    var count;
    var aggregates;
    var result = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.schema.result, res.data);

    if (this.schema.count) {
      count = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.schema.count, res.data);
    }

    if (this.schema.aggregates) {
      aggregates = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.schema.aggregates, res.data);
      aggregates = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(aggregates) ? _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].parse.parseJson(aggregates) : aggregates;
    }

    var pvt = request.pvtData || {};
    var args = {
      result: result,
      aggregates: aggregates
    };
    var data = args;

    if (pvt && pvt.groups && pvt.groups.length) {
      this.getAggregateResult(pvt, data, args, null, query);
    }

    return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(count) ? {
      result: args.result,
      count: count,
      aggregates: aggregates
    } : args.result;
  };
  /**
   * Prepare and returns request body which is used to insert a new record in the table.
   */


  GraphQLAdaptor.prototype.insert = function () {
    var inserted = _super.prototype.insert.apply(this, arguments);

    return this.generateCrudData(inserted, 'insert');
  };
  /**
   * Prepare and returns request body which is used to update a new record in the table.
   */


  GraphQLAdaptor.prototype.update = function () {
    var inserted = _super.prototype.update.apply(this, arguments);

    return this.generateCrudData(inserted, 'update');
  };
  /**
   * Prepare and returns request body which is used to remove a new record in the table.
   */


  GraphQLAdaptor.prototype.remove = function () {
    var inserted = _super.prototype.remove.apply(this, arguments);

    return this.generateCrudData(inserted, 'remove');
  };
  /**
   * Prepare the request body based on the newly added, removed and updated records.
   * The result is used by the batch request.
   *
   * @param {DataManager} dm
   * @param {CrudOptions} changes
   * @param {Object} e
   * @param e.key
   * @param {Query} query
   * @param {Object} original
   */


  GraphQLAdaptor.prototype.batchRequest = function (dm, changes, e, query, original) {
    var batch = _super.prototype.batchRequest.apply(this, arguments); // tslint:disable-next-line:typedef


    var bData = JSON.parse(batch.data);
    bData.key = e.key;
    batch.data = JSON.stringify(bData);
    return this.generateCrudData(batch, 'batch');
  };

  GraphQLAdaptor.prototype.generateCrudData = function (crudData, action) {
    var parsed = JSON.parse(crudData.data);
    crudData.data = JSON.stringify({
      query: this.opt.getMutation(action),
      variables: parsed
    });
    return crudData;
  };

  return GraphQLAdaptor;
}(UrlAdaptor);


/**
 * Cache Adaptor is used to cache the data of the visited pages. It prevents new requests for the previously visited pages.
 * You can configure cache page size and duration of caching by using cachingPageSize and timeTillExpiration properties of the DataManager
 *
 * @hidden
 */

var CacheAdaptor =
/** @class */
function (_super) {
  __extends(CacheAdaptor, _super);
  /**
   * Constructor for CacheAdaptor class.
   *
   * @param {CacheAdaptor} adaptor?
   * @param {number} timeStamp?
   * @param {number} pageSize?
   * @param adaptor
   * @param timeStamp
   * @param pageSize
   * @hidden
   */


  function CacheAdaptor(adaptor, timeStamp, pageSize) {
    var _this = _super.call(this) || this;

    _this.isCrudAction = false;
    _this.isInsertAction = false;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(adaptor)) {
      _this.cacheAdaptor = adaptor;
    }

    _this.pageSize = pageSize;
    _this.guidId = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getGuid('cacheAdaptor');
    var obj = {
      keys: [],
      results: []
    };
    window.localStorage.setItem(_this.guidId, JSON.stringify(obj));
    var guid = _this.guidId;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(timeStamp)) {
      setInterval(function () {
        var data = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].parse.parseJson(window.localStorage.getItem(guid));
        var forDel = [];

        for (var i = 0; i < data.results.length; i++) {
          var currentTime = +new Date();
          var requestTime = +new Date(data.results[i].timeStamp);
          data.results[i].timeStamp = currentTime - requestTime;

          if (currentTime - requestTime > timeStamp) {
            forDel.push(i);
          }
        }

        for (var i = 0; i < forDel.length; i++) {
          data.results.splice(forDel[i], 1);
          data.keys.splice(forDel[i], 1);
        }

        window.localStorage.removeItem(guid);
        window.localStorage.setItem(guid, JSON.stringify(data));
      }, timeStamp);
    }

    return _this;
  }
  /**
   * It will generate the key based on the URL when we send a request to server.
   *
   * @param {string} url
   * @param {Query} query?
   * @param query
   * @hidden
   */


  CacheAdaptor.prototype.generateKey = function (url, query) {
    var queries = this.getQueryRequest(query);
    var singles = _query__WEBPACK_IMPORTED_MODULE_2__["Query"].filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);
    var key = url;
    var page = 'onPage';

    if (page in singles) {
      key += singles[page].pageIndex;
    }

    queries.sorts.forEach(function (obj) {
      key += obj.e.direction + obj.e.fieldName;
    });
    queries.groups.forEach(function (obj) {
      key += obj.e.fieldName;
    });
    queries.searches.forEach(function (obj) {
      key += obj.e.searchKey;
    });

    for (var filter = 0; filter < queries.filters.length; filter++) {
      var currentFilter = queries.filters[filter];

      if (currentFilter.e.isComplex) {
        var newQuery = query.clone();
        newQuery.queries = [];

        for (var i = 0; i < currentFilter.e.predicates.length; i++) {
          newQuery.queries.push({
            fn: 'onWhere',
            e: currentFilter.e.predicates[i],
            filter: query.queries.filter
          });
        }

        key += currentFilter.e.condition + this.generateKey(url, newQuery);
      } else {
        key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;
      }
    }

    return key;
  };
  /**
   * Process the query to generate request body.
   * If the data is already cached, it will return the cached data.
   *
   * @param {DataManager} dm
   * @param {Query} query?
   * @param {Object[]} hierarchyFilters?
   * @param query
   * @param hierarchyFilters
   */


  CacheAdaptor.prototype.processQuery = function (dm, query, hierarchyFilters) {
    var key = this.generateKey(dm.dataSource.url, query);
    var cachedItems = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].parse.parseJson(window.localStorage.getItem(this.guidId));
    var data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;

    if (data != null && !this.isCrudAction && !this.isInsertAction) {
      return data;
    }

    this.isCrudAction = null;
    this.isInsertAction = null;
    /* eslint-disable prefer-spread */

    return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0));
    /* eslint-enable prefer-spread */
  };
  /**
   * Returns the data from the query processing.
   * It will also cache the data for later usage.
   *
   * @param {DataResult} data
   * @param {DataManager} ds?
   * @param {Query} query?
   * @param {Request} xhr?
   * @param {Fetch} request?
   * @param {CrudOptions} changes?
   * @param ds
   * @param query
   * @param xhr
   * @param request
   * @param changes
   */


  CacheAdaptor.prototype.processResponse = function (data, ds, query, xhr, request, changes) {
    if (this.isInsertAction || request && this.cacheAdaptor.options.batch && _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].endsWith(request.url, this.cacheAdaptor.options.batch) && request.type.toLowerCase() === 'post') {
      return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);
    }
    /* eslint-disable prefer-spread */


    data = this.cacheAdaptor.processResponse.apply(this.cacheAdaptor, [].slice.call(arguments, 0));
    /* eslint-enable prefer-spread */

    var key = query ? this.generateKey(ds.dataSource.url, query) : ds.dataSource.url;
    var obj = {};
    obj = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].parse.parseJson(window.localStorage.getItem(this.guidId));
    var index = obj.keys.indexOf(key);

    if (index !== -1) {
      obj.results.splice(index, 1);
      obj.keys.splice(index, 1);
    }

    obj.results[obj.keys.push(key) - 1] = {
      keys: key,
      result: data.result,
      timeStamp: new Date(),
      count: data.count
    };

    while (obj.results.length > this.pageSize) {
      obj.results.splice(0, 1);
      obj.keys.splice(0, 1);
    }

    window.localStorage.setItem(this.guidId, JSON.stringify(obj));
    return data;
  };
  /**
   * Method will trigger before send the request to server side. Used to set the custom header or modify the request options.
   *
   * @param {DataManager} dm
   * @param {Request} request
   * @param {Fetch} settings?
   * @param settings
   */


  CacheAdaptor.prototype.beforeSend = function (dm, request, settings) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cacheAdaptor.options.batch) && _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].endsWith(settings.url, this.cacheAdaptor.options.batch) && settings.type.toLowerCase() === 'post') {
      request.headers.set('Accept', this.cacheAdaptor.options.multipartAccept);
    }

    if (!dm.dataSource.crossDomain) {
      request.headers.set('Accept', this.cacheAdaptor.options.accept);
    }
  };
  /**
   * Updates existing record and saves the changes to the table.
   *
   * @param  {DataManager} dm
   * @param  {string} keyField
   * @param  {Object} value
   * @param  {string} tableName
   */


  CacheAdaptor.prototype.update = function (dm, keyField, value, tableName) {
    this.isCrudAction = true;
    return this.cacheAdaptor.update(dm, keyField, value, tableName);
  };
  /**
   * Prepare and returns request body which is used to insert a new record in the table.
   *
   * @param {DataManager} dm
   * @param {Object} data
   * @param {string} tableName?
   * @param tableName
   */


  CacheAdaptor.prototype.insert = function (dm, data, tableName) {
    this.isInsertAction = true;
    return this.cacheAdaptor.insert(dm, data, tableName);
  };
  /**
   * Prepare and return request body which is used to remove record from the table.
   *
   * @param {DataManager} dm
   * @param {string} keyField
   * @param {Object} value
   * @param {string} tableName?
   * @param tableName
   */


  CacheAdaptor.prototype.remove = function (dm, keyField, value, tableName) {
    this.isCrudAction = true;
    return this.cacheAdaptor.remove(dm, keyField, value, tableName);
  };
  /**
   * Prepare the request body based on the newly added, removed and updated records.
   * The result is used by the batch request.
   *
   * @param  {DataManager} dm
   * @param  {CrudOptions} changes
   * @param  {RemoteArgs} e
   */


  CacheAdaptor.prototype.batchRequest = function (dm, changes, e) {
    return this.cacheAdaptor.batchRequest(dm, changes, e);
  };

  return CacheAdaptor;
}(UrlAdaptor);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-data/src/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-data/src/index.js ***!
  \********************************************************/
/*! exports provided: DataManager, Deferred, Query, Predicate, Adaptor, JsonAdaptor, UrlAdaptor, ODataAdaptor, ODataV4Adaptor, WebApiAdaptor, WebMethodAdaptor, RemoteSaveAdaptor, CustomDataAdaptor, GraphQLAdaptor, CacheAdaptor, DataUtil */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./manager */ "./node_modules/@syncfusion/ej2-data/src/manager.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataManager", function() { return _manager__WEBPACK_IMPORTED_MODULE_0__["DataManager"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Deferred", function() { return _manager__WEBPACK_IMPORTED_MODULE_0__["Deferred"]; });

/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./query */ "./node_modules/@syncfusion/ej2-data/src/query.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Query", function() { return _query__WEBPACK_IMPORTED_MODULE_1__["Query"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Predicate", function() { return _query__WEBPACK_IMPORTED_MODULE_1__["Predicate"]; });

/* harmony import */ var _adaptors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./adaptors */ "./node_modules/@syncfusion/ej2-data/src/adaptors.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Adaptor", function() { return _adaptors__WEBPACK_IMPORTED_MODULE_2__["Adaptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonAdaptor", function() { return _adaptors__WEBPACK_IMPORTED_MODULE_2__["JsonAdaptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlAdaptor", function() { return _adaptors__WEBPACK_IMPORTED_MODULE_2__["UrlAdaptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ODataAdaptor", function() { return _adaptors__WEBPACK_IMPORTED_MODULE_2__["ODataAdaptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ODataV4Adaptor", function() { return _adaptors__WEBPACK_IMPORTED_MODULE_2__["ODataV4Adaptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WebApiAdaptor", function() { return _adaptors__WEBPACK_IMPORTED_MODULE_2__["WebApiAdaptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WebMethodAdaptor", function() { return _adaptors__WEBPACK_IMPORTED_MODULE_2__["WebMethodAdaptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RemoteSaveAdaptor", function() { return _adaptors__WEBPACK_IMPORTED_MODULE_2__["RemoteSaveAdaptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CustomDataAdaptor", function() { return _adaptors__WEBPACK_IMPORTED_MODULE_2__["CustomDataAdaptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GraphQLAdaptor", function() { return _adaptors__WEBPACK_IMPORTED_MODULE_2__["GraphQLAdaptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CacheAdaptor", function() { return _adaptors__WEBPACK_IMPORTED_MODULE_2__["CacheAdaptor"]; });

/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ "./node_modules/@syncfusion/ej2-data/src/util.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataUtil", function() { return _util__WEBPACK_IMPORTED_MODULE_3__["DataUtil"]; });

/**
 * Data modules
 */





/***/ }),

/***/ "./node_modules/@syncfusion/ej2-data/src/manager.js":
/*!**********************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-data/src/manager.js ***!
  \**********************************************************/
/*! exports provided: DataManager, Deferred */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataManager", function() { return DataManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Deferred", function() { return Deferred; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "./node_modules/@syncfusion/ej2-data/src/util.js");
/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./query */ "./node_modules/@syncfusion/ej2-data/src/query.js");
/* harmony import */ var _adaptors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./adaptors */ "./node_modules/@syncfusion/ej2-data/src/adaptors.js");
/* eslint-disable valid-jsdoc */

/* eslint-disable security/detect-object-injection */





/**
 * DataManager is used to manage and manipulate relational data.
 */

var DataManager =
/** @class */
function () {
  /**
   * Constructor for DataManager class
   *
   * @param {DataOptions|JSON[]} dataSource?
   * @param {Query} query?
   * @param {AdaptorOptions|string} adaptor?
   * @param dataSource
   * @param query
   * @param adaptor
   * @hidden
   */
  function DataManager(dataSource, query, adaptor) {
    var _this = this;
    /** @hidden */


    this.dateParse = true;
    /** @hidden */

    this.timeZoneHandling = true;
    this.persistQuery = {};
    this.isInitialLoad = false;
    this.requests = [];
    this.isInitialLoad = true;

    if (!dataSource && !this.dataSource) {
      dataSource = [];
    }

    adaptor = adaptor || dataSource.adaptor;

    if (dataSource && dataSource.timeZoneHandling === false) {
      this.timeZoneHandling = dataSource.timeZoneHandling;
    }

    var data;

    if (dataSource instanceof Array) {
      data = {
        json: dataSource,
        offline: true
      };
    } else if (typeof dataSource === 'object') {
      if (!dataSource.json) {
        dataSource.json = [];
      }

      if (!dataSource.enablePersistence) {
        dataSource.enablePersistence = false;
      }

      if (!dataSource.id) {
        dataSource.id = '';
      }

      if (!dataSource.ignoreOnPersist) {
        dataSource.ignoreOnPersist = [];
      }

      data = {
        url: dataSource.url,
        insertUrl: dataSource.insertUrl,
        removeUrl: dataSource.removeUrl,
        updateUrl: dataSource.updateUrl,
        crudUrl: dataSource.crudUrl,
        batchUrl: dataSource.batchUrl,
        json: dataSource.json,
        headers: dataSource.headers,
        accept: dataSource.accept,
        data: dataSource.data,
        timeTillExpiration: dataSource.timeTillExpiration,
        cachingPageSize: dataSource.cachingPageSize,
        enableCaching: dataSource.enableCaching,
        requestType: dataSource.requestType,
        key: dataSource.key,
        crossDomain: dataSource.crossDomain,
        jsonp: dataSource.jsonp,
        dataType: dataSource.dataType,
        offline: dataSource.offline !== undefined ? dataSource.offline : dataSource.adaptor instanceof _adaptors__WEBPACK_IMPORTED_MODULE_3__["RemoteSaveAdaptor"] || dataSource.adaptor instanceof _adaptors__WEBPACK_IMPORTED_MODULE_3__["CustomDataAdaptor"] ? false : dataSource.url ? false : true,
        requiresFormat: dataSource.requiresFormat,
        enablePersistence: dataSource.enablePersistence,
        id: dataSource.id,
        ignoreOnPersist: dataSource.ignoreOnPersist
      };
    } else {
      _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].throwError('DataManager: Invalid arguments');
    }

    if (data.requiresFormat === undefined && !_util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].isCors()) {
      data.requiresFormat = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data.crossDomain) ? true : data.crossDomain;
    }

    if (data.dataType === undefined) {
      data.dataType = 'json';
    }

    this.dataSource = data;
    this.defaultQuery = query;

    if (this.dataSource.enablePersistence && this.dataSource.id) {
      window.addEventListener('unload', this.setPersistData.bind(this));
    }

    if (data.url && data.offline && !data.json.length) {
      this.isDataAvailable = false;
      this.adaptor = adaptor || new _adaptors__WEBPACK_IMPORTED_MODULE_3__["ODataAdaptor"]();
      this.dataSource.offline = false;
      this.ready = this.executeQuery(query || new _query__WEBPACK_IMPORTED_MODULE_2__["Query"]());
      this.ready.then(function (e) {
        _this.dataSource.offline = true;
        _this.isDataAvailable = true;
        data.json = e.result;
        _this.adaptor = new _adaptors__WEBPACK_IMPORTED_MODULE_3__["JsonAdaptor"]();
      });
    } else {
      this.adaptor = data.offline ? new _adaptors__WEBPACK_IMPORTED_MODULE_3__["JsonAdaptor"]() : new _adaptors__WEBPACK_IMPORTED_MODULE_3__["ODataAdaptor"]();
    }

    if (!data.jsonp && this.adaptor instanceof _adaptors__WEBPACK_IMPORTED_MODULE_3__["ODataAdaptor"]) {
      data.jsonp = 'callback';
    }

    this.adaptor = adaptor || this.adaptor;

    if (data.enableCaching) {
      this.adaptor = new _adaptors__WEBPACK_IMPORTED_MODULE_3__["CacheAdaptor"](this.adaptor, data.timeTillExpiration, data.cachingPageSize);
    }

    return this;
  }
  /**
   * Get the queries maintained in the persisted state.
   * @param {string} id - The identifier of the persisted query to retrieve.
   * @returns {object} The persisted data object.
   */


  DataManager.prototype.getPersistedData = function (id) {
    var persistedData = localStorage.getItem(id || this.dataSource.id);
    return JSON.parse(persistedData);
  };
  /**
  * Set the queries to be maintained in the persisted state.
  * @param {Event} e - The event parameter that triggers the setPersistData method.
  * @param {string} id - The identifier of the persisted query to set.
  * @param {object} persistData - The data to be persisted.
  * @returns {void} .
  */


  DataManager.prototype.setPersistData = function (e, id, persistData) {
    localStorage.setItem(id || this.dataSource.id, JSON.stringify(persistData || this.persistQuery));
  };

  DataManager.prototype.setPersistQuery = function (query) {
    var _this = this;

    var persistedQuery = this.getPersistedData();

    if (this.isInitialLoad && persistedQuery && Object.keys(persistedQuery).length) {
      this.persistQuery = persistedQuery;
      this.persistQuery.queries = this.persistQuery.queries.filter(function (query) {
        if (_this.dataSource.ignoreOnPersist && _this.dataSource.ignoreOnPersist.length) {
          if (query.fn && _this.dataSource.ignoreOnPersist.some(function (keyword) {
            return query.fn === keyword;
          })) {
            return false; // Exclude the matching query
          }
        }

        if (query.fn === 'onWhere') {
          var e = query.e;

          if (e && e.isComplex && e.predicates instanceof Array) {
            var allPredicates = e.predicates.map(function (predicateObj) {
              if (predicateObj.predicates && predicateObj.predicates instanceof Array) {
                // Process nested predicate array
                var nestedPredicates = predicateObj.predicates.map(function (nestedPredicate) {
                  var field = nestedPredicate.field,
                      operator = nestedPredicate.operator,
                      value = nestedPredicate.value,
                      ignoreCase = nestedPredicate.ignoreCase,
                      ignoreAccent = nestedPredicate.ignoreAccent,
                      matchCase = nestedPredicate.matchCase;
                  return new _query__WEBPACK_IMPORTED_MODULE_2__["Predicate"](field, operator, value, ignoreCase, ignoreAccent, matchCase);
                });
                return predicateObj.condition === 'and' ? _query__WEBPACK_IMPORTED_MODULE_2__["Predicate"].and(nestedPredicates) : _query__WEBPACK_IMPORTED_MODULE_2__["Predicate"].or(nestedPredicates);
              } else {
                // Process individual predicate
                var field = predicateObj.field,
                    operator = predicateObj.operator,
                    value = predicateObj.value,
                    ignoreCase = predicateObj.ignoreCase,
                    ignoreAccent = predicateObj.ignoreAccent,
                    matchCase = predicateObj.matchCase;
                return new _query__WEBPACK_IMPORTED_MODULE_2__["Predicate"](field, operator, value, ignoreCase, ignoreAccent, matchCase);
              }
            });
            query.e = new _query__WEBPACK_IMPORTED_MODULE_2__["Predicate"](allPredicates[0], e.condition, allPredicates.slice(1));
          }
        }

        return true; // Keep all other queries
      });
      var newQuery = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(new _query__WEBPACK_IMPORTED_MODULE_2__["Query"](), this.persistQuery);
      this.isInitialLoad = false;
      return newQuery;
    } else {
      this.persistQuery = query;
      this.isInitialLoad = false;
      return query;
    }
  };
  /**
   * Overrides DataManager's default query with given query.
   *
   * @param  {Query} query - Defines the new default query.
   */


  DataManager.prototype.setDefaultQuery = function (query) {
    this.defaultQuery = query;
    return this;
  };
  /**
   * Executes the given query with local data source.
   *
   * @param  {Query} query - Defines the query to retrieve data.
   */


  DataManager.prototype.executeLocal = function (query) {
    if (!this.defaultQuery && !(query instanceof _query__WEBPACK_IMPORTED_MODULE_2__["Query"])) {
      _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].throwError('DataManager - executeLocal() : A query is required to execute');
    }

    if (!this.dataSource.json) {
      _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].throwError('DataManager - executeLocal() : Json data is required to execute');
    }

    if (this.dataSource.enablePersistence && this.dataSource.id) {
      query = this.setPersistQuery(query);
    }

    query = query || this.defaultQuery;
    var result = this.adaptor.processQuery(this, query);

    if (query.subQuery) {
      var from = query.subQuery.fromTable;
      var lookup = query.subQuery.lookups;
      var res = query.isCountRequired ? result.result : result;

      if (lookup && lookup instanceof Array) {
        _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);
      }

      for (var j = 0; j < res.length; j++) {
        if (res[j][from] instanceof Array) {
          res[j] = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {}, res[j]);
          res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager(res[j][from].slice(0))).executeLocal(), this, query);
        }
      }
    }

    return this.adaptor.processResponse(result, this, query);
  };
  /**
   * Executes the given query with either local or remote data source.
   * It will be executed as asynchronously and returns Promise object which will be resolved or rejected after action completed.
   *
   * @param  {Query|Function} query - Defines the query to retrieve data.
   * @param  {Function} done - Defines the callback function and triggers when the Promise is resolved.
   * @param  {Function} fail - Defines the callback function and triggers when the Promise is rejected.
   * @param  {Function} always - Defines the callback function and triggers when the Promise is resolved or rejected.
   */


  DataManager.prototype.executeQuery = function (query, done, fail, always) {
    var _this = this;

    var makeRequest = 'makeRequest';

    if (this.dataSource.enablePersistence && this.dataSource.id) {
      query = this.setPersistQuery(query);
    }

    if (typeof query === 'function') {
      always = fail;
      fail = done;
      done = query;
      query = null;
    }

    if (!query) {
      query = this.defaultQuery;
    }

    if (!(query instanceof _query__WEBPACK_IMPORTED_MODULE_2__["Query"])) {
      _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].throwError('DataManager - executeQuery() : A query is required to execute');
    }

    var deffered = new Deferred();
    var args = {
      query: query
    };

    if (!this.dataSource.offline && this.dataSource.url !== undefined && this.dataSource.url !== '' || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.adaptor[makeRequest]) || this.isCustomDataAdaptor(this.adaptor)) {
      var result = this.adaptor.processQuery(this, query);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.adaptor[makeRequest])) {
        this.adaptor[makeRequest](result, deffered, args, query);
      } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(result.url) || this.isCustomDataAdaptor(this.adaptor)) {
        this.requests = [];
        this.makeRequest(result, deffered, args, query);
      } else {
        args = DataManager.getDeferedArgs(query, result, args);
        deffered.resolve(args);
      }
    } else {
      DataManager.nextTick(function () {
        var res = _this.executeLocal(query);

        args = DataManager.getDeferedArgs(query, res, args);
        deffered.resolve(args);
      });
    }

    if (done || fail) {
      deffered.promise.then(done, fail);
    }

    if (always) {
      deffered.promise.then(always, always);
    }

    return deffered.promise;
  };

  DataManager.getDeferedArgs = function (query, result, args) {
    if (query.isCountRequired) {
      args.result = result.result;
      args.count = result.count;
      args.aggregates = result.aggregates;
    } else {
      args.result = result;
    }

    return args;
  };

  DataManager.nextTick = function (fn) {
    /* eslint-disable @typescript-eslint/no-explicit-any */
    // tslint:disable-next-line:no-any
    (window.setImmediate || window.setTimeout)(fn, 0);
    /* eslint-enable @typescript-eslint/no-explicit-any */
  };

  DataManager.prototype.extendRequest = function (url, fnSuccess, fnFail) {
    return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {
      type: 'GET',
      dataType: this.dataSource.dataType,
      crossDomain: this.dataSource.crossDomain,
      jsonp: this.dataSource.jsonp,
      cache: true,
      processData: false,
      onSuccess: fnSuccess,
      onFailure: fnFail
    }, url);
  }; // tslint:disable-next-line:max-func-body-length


  DataManager.prototype.makeRequest = function (url, deffered, args, query) {
    var _this = this;

    var isSelector = !!query.subQuerySelector;

    var fnFail = function (e) {
      args.error = e;
      deffered.reject(args);
    };

    var process = function (data, count, xhr, request, actual, aggregates, virtualSelectRecords) {
      args.xhr = xhr;
      args.count = count ? parseInt(count.toString(), 10) : 0;
      args.result = data;
      args.request = request;
      args.aggregates = aggregates;
      args.actual = actual;
      args.virtualSelectRecords = virtualSelectRecords;
      deffered.resolve(args);
    };

    var fnQueryChild = function (data, selector) {
      var subDeffer = new Deferred();
      var childArgs = {
        parent: args
      };
      query.subQuery.isChild = true;

      var subUrl = _this.adaptor.processQuery(_this, query.subQuery, data ? _this.adaptor.processResponse(data) : selector);

      var childReq = _this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);

      if (!isSelector) {
        subDeffer.then(function (subData) {
          if (data) {
            _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);
            process(data, subData.count, subData.xhr);
          }
        }, fnFail);
      }

      return childReq;
    };

    var fnSuccess = function (data, request) {
      if (_this.isGraphQLAdaptor(_this.adaptor)) {
        // tslint:disable-next-line:no-string-literal
        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data['errors'])) {
          // tslint:disable-next-line:no-string-literal
          return fnFail(data['errors'], request);
        }
      }

      if (_this.isCustomDataAdaptor(_this.adaptor)) {
        request = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, _this.fetchReqOption, request);
      }

      if (request.contentType.indexOf('xml') === -1 && _this.dateParse) {
        data = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].parse.parseJson(data);
      }

      var result = _this.adaptor.processResponse(data, _this, query, request.fetchRequest, request);

      var count = 0;
      var aggregates = null;
      var virtualSelectRecords = 'virtualSelectRecords';
      var virtualRecords = data[virtualSelectRecords];

      if (query.isCountRequired) {
        count = result.count;
        aggregates = result.aggregates;
        result = result.result;
      }

      if (!query.subQuery) {
        process(result, count, request.fetchRequest, request.type, data, aggregates, virtualRecords);
        return;
      }

      if (!isSelector) {
        fnQueryChild(result, request);
      }
    };

    var req = this.extendRequest(url, fnSuccess, fnFail);

    if (!this.isCustomDataAdaptor(this.adaptor)) {
      var fetch_1 = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Fetch"](req);

      fetch_1.beforeSend = function () {
        _this.beforeSend(fetch_1.fetchRequest, fetch_1);
      };

      req = fetch_1.send();
      req.catch(function (e) {
        return true;
      }); // to handle failure remote requests.

      this.requests.push(fetch_1);
    } else {
      this.fetchReqOption = req;
      var request = req;
      this.adaptor.options.getData({
        data: request.data,
        onSuccess: request.onSuccess,
        onFailure: request.onFailure
      });
    }

    if (isSelector) {
      var promise = void 0;
      var res = query.subQuerySelector.call(this, {
        query: query.subQuery,
        parent: query
      });

      if (res && res.length) {
        promise = Promise.all([req, fnQueryChild(null, res)]);
        promise.then(function () {
          var args = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }

          var result = args[0];

          var pResult = _this.adaptor.processResponse(result[0], _this, query, _this.requests[0].fetchRequest, _this.requests[0]);

          var count = 0;

          if (query.isCountRequired) {
            count = pResult.count;
            pResult = pResult.result;
          }

          var cResult = _this.adaptor.processResponse(result[1], _this, query.subQuery, _this.requests[1].fetchRequest, _this.requests[1]);

          count = 0;

          if (query.subQuery.isCountRequired) {
            count = cResult.count;
            cResult = cResult.result;
          }

          _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);
          isSelector = false;
          process(pResult, count, _this.requests[0].fetchRequest);
        });
      } else {
        isSelector = false;
      }
    }

    return req;
  };

  DataManager.prototype.beforeSend = function (request, settings) {
    this.adaptor.beforeSend(this, request, settings);
    var headers = this.dataSource.headers;
    var props;

    for (var i = 0; headers && i < headers.length; i++) {
      props = [];
      var keys = Object.keys(headers[i]);

      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var prop = keys_1[_i];
        props.push(prop);
        request.headers.set(prop, headers[i][prop]);
      }
    }
  };
  /**
   * Save bulk changes to the given table name.
   * User can add a new record, edit an existing record, and delete a record at the same time.
   * If the datasource from remote, then updated in a single post.
   *
   * @param {Object} changes - Defines the CrudOptions.
   * @param {string} key - Defines the column field.
   * @param {string|Query} tableName - Defines the table name.
   * @param {Query} query - Sets default query for the DataManager.
   * @param original
   */


  DataManager.prototype.saveChanges = function (changes, key, tableName, query, original) {
    var _this = this;

    if (tableName instanceof _query__WEBPACK_IMPORTED_MODULE_2__["Query"]) {
      query = tableName;
      tableName = null;
    }

    var args = {
      url: tableName,
      key: key || this.dataSource.key
    };
    var req = this.adaptor.batchRequest(this, changes, args, query || new _query__WEBPACK_IMPORTED_MODULE_2__["Query"](), original);
    var dofetchRequest = 'dofetchRequest';

    if (this.dataSource.offline) {
      return req;
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.adaptor[dofetchRequest])) {
      return this.adaptor[dofetchRequest](req);
    } else if (!this.isCustomDataAdaptor(this.adaptor)) {
      var deff_1 = new Deferred();
      var fetch_2 = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Fetch"](req);

      fetch_2.beforeSend = function () {
        _this.beforeSend(fetch_2.fetchRequest, fetch_2);
      };

      fetch_2.onSuccess = function (data, request) {
        if (_this.isGraphQLAdaptor(_this.adaptor)) {
          // tslint:disable-next-line:no-string-literal
          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data['errors'])) {
            // tslint:disable-next-line:no-string-literal
            fetch_2.onFailure(JSON.stringify(data['errors']));
          }
        }

        deff_1.resolve(_this.adaptor.processResponse(data, _this, null, request.fetchRequest, request, changes, args));
      };

      fetch_2.onFailure = function (e) {
        deff_1.reject([{
          error: e
        }]);
      };

      fetch_2.send().catch(function (e) {
        return true;
      }); // to handle the failure requests.

      return deff_1.promise;
    } else {
      return this.dofetchRequest(req, this.adaptor.options.batchUpdate);
    }
  };
  /**
   * Inserts new record in the given table.
   *
   * @param {Object} data - Defines the data to insert.
   * @param {string|Query} tableName - Defines the table name.
   * @param {Query} query - Sets default query for the DataManager.
   * @param position
   */


  DataManager.prototype.insert = function (data, tableName, query, position) {
    if (tableName instanceof _query__WEBPACK_IMPORTED_MODULE_2__["Query"]) {
      query = tableName;
      tableName = null;
    }

    var req = this.adaptor.insert(this, data, tableName, query, position);
    var dofetchRequest = 'dofetchRequest';

    if (this.dataSource.offline) {
      return req;
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.adaptor[dofetchRequest])) {
      return this.adaptor[dofetchRequest](req);
    } else {
      return this.dofetchRequest(req, this.adaptor.options.addRecord);
    }
  };
  /**
   * Removes data from the table with the given key.
   *
   * @param  {string} keyField - Defines the column field.
   * @param  {Object} value - Defines the value to find the data in the specified column.
   * @param  {string|Query} tableName - Defines the table name
   * @param  {Query} query - Sets default query for the DataManager.
   */


  DataManager.prototype.remove = function (keyField, value, tableName, query) {
    if (typeof value === 'object') {
      value = _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].getObject(keyField, value);
    }

    if (tableName instanceof _query__WEBPACK_IMPORTED_MODULE_2__["Query"]) {
      query = tableName;
      tableName = null;
    }

    var res = this.adaptor.remove(this, keyField, value, tableName, query);
    var dofetchRequest = 'dofetchRequest';

    if (this.dataSource.offline) {
      return res;
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.adaptor[dofetchRequest])) {
      return this.adaptor[dofetchRequest](res);
    } else {
      var remove = this.adaptor.options.deleteRecord;
      return this.dofetchRequest(res, remove);
    }
  };
  /**
   * Updates existing record in the given table.
   *
   * @param {string} keyField - Defines the column field.
   * @param {Object} value - Defines the value to find the data in the specified column.
   * @param {string|Query} tableName - Defines the table name
   * @param {Query} query - Sets default query for the DataManager.
   * @param original
   */


  DataManager.prototype.update = function (keyField, value, tableName, query, original) {
    if (tableName instanceof _query__WEBPACK_IMPORTED_MODULE_2__["Query"]) {
      query = tableName;
      tableName = null;
    }

    var res = this.adaptor.update(this, keyField, value, tableName, query, original);
    var dofetchRequest = 'dofetchRequest';

    if (this.dataSource.offline) {
      return res;
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.adaptor[dofetchRequest])) {
      return this.adaptor[dofetchRequest](res);
    } else {
      var update = this.adaptor.options.updateRecord;
      return this.dofetchRequest(res, update);
    }
  };

  DataManager.prototype.isCustomDataAdaptor = function (dataSource) {
    return this.adaptor.getModuleName && this.adaptor.getModuleName() === 'CustomDataAdaptor';
  };

  DataManager.prototype.isGraphQLAdaptor = function (dataSource) {
    return this.adaptor.getModuleName && this.adaptor.getModuleName() === 'GraphQLAdaptor';
  };

  DataManager.prototype.successFunc = function (record, request) {
    if (this.isGraphQLAdaptor(this.adaptor)) {
      var data = JSON.parse(record); // tslint:disable-next-line:no-string-literal

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data['errors'])) {
        // tslint:disable-next-line:no-string-literal
        this.failureFunc(JSON.stringify(data['errors']));
      }
    }

    if (this.isCustomDataAdaptor(this.adaptor)) {
      request = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, this.fetchReqOption, request);
    }

    try {
      _util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].parse.parseJson(record);
    } catch (e) {
      record = [];
    }

    record = this.adaptor.processResponse(_util__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].parse.parseJson(record), this, null, request.fetchRequest, request);
    this.fetchDeffered.resolve(record);
  };

  DataManager.prototype.failureFunc = function (e) {
    this.fetchDeffered.reject([{
      error: e
    }]);
  };

  DataManager.prototype.dofetchRequest = function (res, fetchFunc) {
    var _this = this;

    res = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {
      type: 'POST',
      contentType: 'application/json; charset=utf-8',
      processData: false
    }, res);
    this.fetchDeffered = new Deferred();

    if (!this.isCustomDataAdaptor(this.adaptor)) {
      var fetch_3 = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Fetch"](res);

      fetch_3.beforeSend = function () {
        _this.beforeSend(fetch_3.fetchRequest, fetch_3);
      };

      fetch_3.onSuccess = this.successFunc.bind(this);
      fetch_3.onFailure = this.failureFunc.bind(this);
      fetch_3.send().catch(function (e) {
        return true;
      }); // to handle the failure requests.
    } else {
      this.fetchReqOption = res;
      fetchFunc.call(this, {
        data: res.data,
        onSuccess: this.successFunc.bind(this),
        onFailure: this.failureFunc.bind(this)
      });
    }

    return this.fetchDeffered.promise;
  };

  DataManager.prototype.clearPersistence = function () {
    window.removeEventListener('unload', this.setPersistData.bind(this));
    this.dataSource.enablePersistence = false;
    this.persistQuery = {};
    window.localStorage.setItem(this.dataSource.id, '[]');
  };

  return DataManager;
}();


/**
 * Deferred is used to handle asynchronous operation.
 */

var Deferred =
/** @class */
function () {
  function Deferred() {
    var _this = this;
    /**
     * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.
     */


    this.promise = new Promise(function (resolve, reject) {
      _this.resolve = resolve;
      _this.reject = reject;
    });
    /**
     * Defines the callback function triggers when the Deferred object is resolved.
     */

    this.then = this.promise.then.bind(this.promise);
    /**
     * Defines the callback function triggers when the Deferred object is rejected.
     */

    this.catch = this.promise.catch.bind(this.promise);
  }

  return Deferred;
}();



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-data/src/query.js":
/*!********************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-data/src/query.js ***!
  \********************************************************/
/*! exports provided: Query, Predicate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Query", function() { return Query; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Predicate", function() { return Predicate; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "./node_modules/@syncfusion/ej2-data/src/util.js");
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* eslint-disable valid-jsdoc */

/* eslint-disable security/detect-object-injection */


/**
 * Query class is used to build query which is used by the DataManager to communicate with datasource.
 */

var Query =
/** @class */
function () {
  /**
   * Constructor for Query class.
   *
   * @param {string|string[]} from?
   * @param from
   * @hidden
   */
  function Query(from) {
    /** @hidden */
    this.subQuery = null;
    /** @hidden */

    this.isChild = false;
    /** @hidden */

    this.distincts = [];
    this.queries = [];
    this.key = '';
    this.fKey = '';

    if (typeof from === 'string') {
      this.fromTable = from;
    } else if (from && from instanceof Array) {
      this.lookups = from;
    }

    this.expands = [];
    this.sortedColumns = [];
    this.groupedColumns = [];
    this.subQuery = null;
    this.isChild = false;
    this.params = [];
    this.lazyLoad = [];
    return this;
  }
  /**
   * Sets the primary key.
   *
   * @param  {string} field - Defines the column field.
   */


  Query.prototype.setKey = function (field) {
    this.key = field;
    return this;
  };
  /**
   * Sets default DataManager to execute query.
   *
   * @param  {DataManager} dataManager - Defines the DataManager.
   */


  Query.prototype.using = function (dataManager) {
    this.dataManager = dataManager;
    return this;
  };
  /**
   * Executes query with the given DataManager.
   *
   * @param  {DataManager} dataManager - Defines the DataManager.
   * @param  {Function} done - Defines the success callback.
   * @param  {Function} fail - Defines the failure callback.
   * @param  {Function} always - Defines the callback which will be invoked on either success or failure.
   *
   * <pre>
   * let dataManager: DataManager = new DataManager([{ ID: '10' }, { ID: '2' }, { ID: '1' }, { ID: '20' }]);
   * let query: Query = new Query();
   * query.sortBy('ID', (x: string, y: string): number => { return parseInt(x, 10) - parseInt(y, 10) });
   * let promise: Promise< Object > = query.execute(dataManager);
   * promise.then((e: { result: Object }) => { });
   * </pre>
   */


  Query.prototype.execute = function (dataManager, done, fail, always) {
    dataManager = dataManager || this.dataManager;

    if (dataManager) {
      return dataManager.executeQuery(this, done, fail, always);
    }

    return _util__WEBPACK_IMPORTED_MODULE_0__["DataUtil"].throwError('Query - execute() : dataManager needs to be is set using "using" function or should be passed as argument');
  };
  /**
   * Executes query with the local datasource.
   *
   * @param  {DataManager} dataManager - Defines the DataManager.
   */


  Query.prototype.executeLocal = function (dataManager) {
    dataManager = dataManager || this.dataManager;

    if (dataManager) {
      return dataManager.executeLocal(this);
    }

    return _util__WEBPACK_IMPORTED_MODULE_0__["DataUtil"].throwError('Query - executeLocal() : dataManager needs to be is set using "using" function or should be passed as argument');
  };
  /**
   * Creates deep copy of the Query object.
   */


  Query.prototype.clone = function () {
    var cloned = new Query();
    cloned.queries = this.queries.slice(0);
    cloned.key = this.key;
    cloned.isChild = this.isChild;
    cloned.dataManager = this.dataManager;
    cloned.fromTable = this.fromTable;
    cloned.params = this.params.slice(0);
    cloned.expands = this.expands.slice(0);
    cloned.sortedColumns = this.sortedColumns.slice(0);
    cloned.groupedColumns = this.groupedColumns.slice(0);
    cloned.subQuerySelector = this.subQuerySelector;
    cloned.subQuery = this.subQuery;
    cloned.fKey = this.fKey;
    cloned.isCountRequired = this.isCountRequired;
    cloned.distincts = this.distincts.slice(0);
    cloned.lazyLoad = this.lazyLoad.slice(0);
    return cloned;
  };
  /**
   * Specifies the name of table to retrieve data in query execution.
   *
   * @param  {string} tableName - Defines the table name.
   */


  Query.prototype.from = function (tableName) {
    this.fromTable = tableName;
    return this;
  };
  /**
   * Adds additional parameter which will be sent along with the request which will be generated while DataManager execute.
   *
   * @param  {string} key - Defines the key of additional parameter.
   * @param  {Function|string} value - Defines the value for the key.
   */


  Query.prototype.addParams = function (key, value) {
    if (typeof value === 'function') {
      this.params.push({
        key: key,
        fn: value
      });
    } else {
      this.params.push({
        key: key,
        value: value
      });
    }

    return this;
  };
  /**
   * @param fields
   * @hidden
   */


  Query.prototype.distinct = function (fields) {
    if (typeof fields === 'string') {
      this.distincts = [].slice.call([fields], 0);
    } else {
      this.distincts = fields.slice(0);
    }

    return this;
  };
  /**
   * Expands the related table.
   *
   * @param  {string|Object[]} tables
   */


  Query.prototype.expand = function (tables) {
    if (typeof tables === 'string') {
      this.expands = [].slice.call([tables], 0);
    } else {
      this.expands = tables.slice(0);
    }

    return this;
  };
  /**
   * Filter data with given filter criteria.
   *
   * @param {string|Predicate} fieldName - Defines the column field or Predicate.
   * @param {string} operator - Defines the operator how to filter data.
   * @param {string|number|boolean} value - Defines the values to match with data.
   * @param {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else
   * filter data with case insensitive.
   * @param ignoreAccent
   * @param matchCase
   */


  Query.prototype.where = function (fieldName, operator, value, ignoreCase, ignoreAccent, matchCase) {
    operator = operator ? operator.toLowerCase() : null;
    var predicate = null;

    if (typeof fieldName === 'string') {
      predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent, matchCase);
    } else if (fieldName instanceof Predicate) {
      predicate = fieldName;
    }

    this.queries.push({
      fn: 'onWhere',
      e: predicate
    });
    return this;
  };
  /**
   * Search data with given search criteria.
   *
   * @param {string|number|boolean} searchKey - Defines the search key.
   * @param {string|string[]} fieldNames - Defines the collection of column fields.
   * @param {string} operator - Defines the operator how to search data.
   * @param {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else
   * filter data with case insensitive.
   * @param ignoreAccent
   */


  Query.prototype.search = function (searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {
    if (typeof fieldNames === 'string') {
      fieldNames = [fieldNames];
    }

    if (!operator || operator === 'none') {
      operator = 'contains';
    }

    var comparer = _util__WEBPACK_IMPORTED_MODULE_0__["DataUtil"].fnOperators[operator];
    this.queries.push({
      fn: 'onSearch',
      e: {
        fieldNames: fieldNames,
        operator: operator,
        searchKey: searchKey,
        ignoreCase: ignoreCase,
        ignoreAccent: ignoreAccent,
        comparer: comparer
      }
    });
    return this;
  };
  /**
   * Sort the data with given sort criteria.
   * By default, sort direction is ascending.
   *
   * @param {string|string[]} fieldName - Defines the single or collection of column fields.
   * @param {string|Function} comparer - Defines the sort direction or custom sort comparer function.
   * @param isFromGroup
   */


  Query.prototype.sortBy = function (fieldName, comparer, isFromGroup) {
    return this.sortByForeignKey(fieldName, comparer, isFromGroup);
  };
  /**
   * Sort the data with given sort criteria.
   * By default, sort direction is ascending.
   *
   * @param {string|string[]} fieldName - Defines the single or collection of column fields.
   * @param {string|Function} comparer - Defines the sort direction or custom sort comparer function.
   * @param isFromGroup
   * @param {string} direction - Defines the sort direction .
   */


  Query.prototype.sortByForeignKey = function (fieldName, comparer, isFromGroup, direction) {
    var order = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["isNullOrUndefined"])(direction) ? direction : 'ascending';
    var sorts;
    var temp;

    if (typeof fieldName === 'string' && _util__WEBPACK_IMPORTED_MODULE_0__["DataUtil"].endsWith(fieldName.toLowerCase(), ' desc')) {
      fieldName = fieldName.replace(/ desc$/i, '');
      comparer = 'descending';
    }

    if (!comparer || typeof comparer === 'string') {
      order = comparer ? comparer.toLowerCase() : 'ascending';
      comparer = _util__WEBPACK_IMPORTED_MODULE_0__["DataUtil"].fnSort(comparer);
    }

    if (isFromGroup) {
      sorts = Query.filterQueries(this.queries, 'onSortBy');

      for (var i = 0; i < sorts.length; i++) {
        temp = sorts[i].e.fieldName;

        if (typeof temp === 'string') {
          if (temp === fieldName) {
            return this;
          }
        } else if (temp instanceof Array) {
          for (var j = 0; j < temp.length; j++) {
            if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + ' desc') {
              return this;
            }
          }
        }
      }
    }

    this.queries.push({
      fn: 'onSortBy',
      e: {
        fieldName: fieldName,
        comparer: comparer,
        direction: order
      }
    });
    return this;
  };
  /**
   * Sorts data in descending order.
   *
   * @param  {string} fieldName - Defines the column field.
   */


  Query.prototype.sortByDesc = function (fieldName) {
    return this.sortBy(fieldName, 'descending');
  };
  /**
   * Groups data with the given field name.
   *
   * @param {string} fieldName - Defines the column field.
   * @param fn
   * @param format
   */


  Query.prototype.group = function (fieldName, fn, format) {
    this.sortBy(fieldName, null, true);
    this.queries.push({
      fn: 'onGroup',
      e: {
        fieldName: fieldName,
        comparer: fn ? fn : null,
        format: format ? format : null
      }
    });
    return this;
  };
  /**
   * Gets data based on the given page index and size.
   *
   * @param  {number} pageIndex - Defines the current page index.
   * @param  {number} pageSize - Defines the no of records per page.
   */


  Query.prototype.page = function (pageIndex, pageSize) {
    this.queries.push({
      fn: 'onPage',
      e: {
        pageIndex: pageIndex,
        pageSize: pageSize
      }
    });
    return this;
  };
  /**
   * Gets data based on the given start and end index.
   *
   * @param  {number} start - Defines the start index of the datasource.
   * @param  {number} end - Defines the end index of the datasource.
   */


  Query.prototype.range = function (start, end) {
    this.queries.push({
      fn: 'onRange',
      e: {
        start: start,
        end: end
      }
    });
    return this;
  };
  /**
   * Gets data from the top of the data source based on given number of records count.
   *
   * @param  {number} nos - Defines the no of records to retrieve from datasource.
   */


  Query.prototype.take = function (nos) {
    this.queries.push({
      fn: 'onTake',
      e: {
        nos: nos
      }
    });
    return this;
  };
  /**
   * Skips data with given number of records count from the top of the data source.
   *
   * @param  {number} nos - Defines the no of records skip in the datasource.
   */


  Query.prototype.skip = function (nos) {
    this.queries.push({
      fn: 'onSkip',
      e: {
        nos: nos
      }
    });
    return this;
  };
  /**
   * Selects specified columns from the data source.
   *
   * @param  {string|string[]} fieldNames - Defines the collection of column fields.
   */


  Query.prototype.select = function (fieldNames) {
    if (typeof fieldNames === 'string') {
      fieldNames = [].slice.call([fieldNames], 0);
    }

    this.queries.push({
      fn: 'onSelect',
      e: {
        fieldNames: fieldNames
      }
    });
    return this;
  };
  /**
   * Gets the records in hierarchical relationship from two tables. It requires the foreign key to relate two tables.
   *
   * @param  {Query} query - Defines the query to relate two tables.
   * @param  {Function} selectorFn - Defines the custom function to select records.
   */


  Query.prototype.hierarchy = function (query, selectorFn) {
    this.subQuerySelector = selectorFn;
    this.subQuery = query;
    return this;
  };
  /**
   * Sets the foreign key which is used to get data from the related table.
   *
   * @param  {string} key - Defines the foreign key.
   */


  Query.prototype.foreignKey = function (key) {
    this.fKey = key;
    return this;
  };
  /**
   * It is used to get total number of records in the DataManager execution result.
   */


  Query.prototype.requiresCount = function () {
    this.isCountRequired = true;
    return this;
  }; //type - sum, avg, min, max

  /**
   * Aggregate the data with given type and field name.
   *
   * @param  {string} type - Defines the aggregate type.
   * @param  {string} field - Defines the column field to aggregate.
   */


  Query.prototype.aggregate = function (type, field) {
    this.queries.push({
      fn: 'onAggregates',
      e: {
        field: field,
        type: type
      }
    });
    return this;
  };
  /**
   * Pass array of filterColumn query for performing filter operation.
   *
   * @param  {QueryOptions[]} queries
   * @param  {string} name
   * @hidden
   */


  Query.filterQueries = function (queries, name) {
    return queries.filter(function (q) {
      return q.fn === name;
    });
  };
  /**
   * To get the list of queries which is already filtered in current data source.
   *
   * @param  {Object[]} queries
   * @param  {string[]} singles
   * @hidden
   */


  Query.filterQueryLists = function (queries, singles) {
    var filtered = queries.filter(function (q) {
      return singles.indexOf(q.fn) !== -1;
    });
    var res = {};

    for (var i = 0; i < filtered.length; i++) {
      if (!res[filtered[i].fn]) {
        res[filtered[i].fn] = filtered[i].e;
      }
    }

    return res;
  };

  return Query;
}();


/**
 * Predicate class is used to generate complex filter criteria.
 * This will be used by DataManager to perform multiple filtering operation.
 */

var Predicate =
/** @class */
function () {
  /**
   * Constructor for Predicate class.
   *
   * @param {string|Predicate} field
   * @param {string} operator
   * @param {string|number|boolean|Predicate|Predicate[]} value
   * @param {boolean=false} ignoreCase
   * @param ignoreAccent
   * @param {boolean} matchCase
   * @hidden
   */
  function Predicate(field, operator, value, ignoreCase, ignoreAccent, matchCase) {
    if (ignoreCase === void 0) {
      ignoreCase = false;
    }
    /** @hidden */


    this.ignoreAccent = false;
    /** @hidden */

    this.isComplex = false;

    if (typeof field === 'string') {
      this.field = field;
      this.operator = operator.toLowerCase();
      this.value = value;
      this.matchCase = matchCase;
      this.ignoreCase = ignoreCase;
      this.ignoreAccent = ignoreAccent;
      this.isComplex = false;
      this.comparer = _util__WEBPACK_IMPORTED_MODULE_0__["DataUtil"].fnOperators.processOperator(this.operator);
    } else if (field instanceof Predicate && value instanceof Predicate || value instanceof Array) {
      this.isComplex = true;
      this.condition = operator.toLowerCase();
      this.predicates = [field];
      this.matchCase = field.matchCase;
      this.ignoreCase = field.ignoreCase;
      this.ignoreAccent = field.ignoreAccent;

      if (value instanceof Array) {
        [].push.apply(this.predicates, value);
      } else {
        this.predicates.push(value);
      }
    }

    return this;
  }
  /**
   * Adds n-number of new predicates on existing predicate with “and” condition.
   *
   * @param  {Object[]} args - Defines the collection of predicates.
   */


  Predicate.and = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    return Predicate.combinePredicates([].slice.call(args, 0), 'and');
  };
  /**
   * Adds new predicate on existing predicate with “and” condition.
   *
   * @param {string} field - Defines the column field.
   * @param {string} operator - Defines the operator how to filter data.
   * @param {string} value - Defines the values to match with data.
   * @param {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else
   * filter data with case insensitive.
   * @param ignoreCase
   * @param ignoreAccent
   */


  Predicate.prototype.and = function (field, operator, value, ignoreCase, ignoreAccent) {
    return Predicate.combine(this, field, operator, value, 'and', ignoreCase, ignoreAccent);
  };
  /**
   * Adds n-number of new predicates on existing predicate with “or” condition.
   *
   * @param  {Object[]} args - Defines the collection of predicates.
   */


  Predicate.or = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    return Predicate.combinePredicates([].slice.call(args, 0), 'or');
  };
  /**
   * Adds new predicate on existing predicate with “or” condition.
   *
   * @param {string} field - Defines the column field.
   * @param {string} operator - Defines the operator how to filter data.
   * @param {string} value - Defines the values to match with data.
   * @param {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else
   * filter data with case insensitive.
   * @param ignoreCase
   * @param ignoreAccent
   */


  Predicate.prototype.or = function (field, operator, value, ignoreCase, ignoreAccent) {
    return Predicate.combine(this, field, operator, value, 'or', ignoreCase, ignoreAccent);
  };
  /**
   * Adds n-number of new predicates on existing predicate with “and not” condition.
   *
   * @param  {Object[]} args - Defines the collection of predicates.
   */


  Predicate.ornot = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    return Predicate.combinePredicates([].slice.call(args, 0), 'or not');
  };
  /**
   * Adds new predicate on existing predicate with “and not” condition.
   *
   * @param {string} field - Defines the column field.
   * @param {string} operator - Defines the operator how to filter data.
   * @param {string} value - Defines the values to match with data.
   * @param {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else
   * filter data with case insensitive.
   * @param ignoreCase
   * @param ignoreAccent
   */


  Predicate.prototype.ornot = function (field, operator, value, ignoreCase, ignoreAccent) {
    return Predicate.combine(this, field, operator, value, 'ornot', ignoreCase, ignoreAccent);
  };
  /**
   * Adds n-number of new predicates on existing predicate with “and not” condition.
   *
   * @param  {Object[]} args - Defines the collection of predicates.
   */


  Predicate.andnot = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    return Predicate.combinePredicates([].slice.call(args, 0), 'and not');
  };
  /**
   * Adds new predicate on existing predicate with “and not” condition.
   *
   * @param {string} field - Defines the column field.
   * @param {string} operator - Defines the operator how to filter data.
   * @param {string} value - Defines the values to match with data.
   * @param {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else
   * filter data with case insensitive.
   * @param ignoreCase
   * @param ignoreAccent
   */


  Predicate.prototype.andnot = function (field, operator, value, ignoreCase, ignoreAccent) {
    return Predicate.combine(this, field, operator, value, 'andnot', ignoreCase, ignoreAccent);
  };
  /**
   * Converts plain JavaScript object to Predicate object.
   *
   * @param  {Predicate[]|Predicate} json - Defines single or collection of Predicate.
   */


  Predicate.fromJson = function (json) {
    if (json instanceof Array) {
      var res = [];

      for (var i = 0, len = json.length; i < len; i++) {
        res.push(this.fromJSONData(json[i]));
      }

      return res;
    }

    var pred = json;
    return this.fromJSONData(pred);
  };
  /**
   * Validate the record based on the predicates.
   *
   * @param  {Object} record - Defines the datasource record.
   */


  Predicate.prototype.validate = function (record) {
    var predicate = this.predicates ? this.predicates : [];
    var ret;
    var isAnd;

    if (!this.isComplex && this.comparer) {
      if (this.condition && this.condition.indexOf('not') !== -1) {
        this.condition = this.condition.split('not')[0] === '' ? undefined : this.condition.split('not')[0];
        return !this.comparer.call(this, _util__WEBPACK_IMPORTED_MODULE_0__["DataUtil"].getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);
      } else {
        return this.comparer.call(this, _util__WEBPACK_IMPORTED_MODULE_0__["DataUtil"].getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);
      }
    }

    if (this.condition && this.condition.indexOf('not') !== -1) {
      isAnd = this.condition.indexOf('and') !== -1;
    } else {
      isAnd = this.condition === 'and';
    }

    for (var i = 0; i < predicate.length; i++) {
      if (i > 0 && this.condition && this.condition.indexOf('not') !== -1) {
        predicate[i].condition = predicate[i].condition ? predicate[i].condition + 'not' : 'not';
      }

      ret = predicate[i].validate(record);

      if (isAnd) {
        if (!ret) {
          return false;
        }
      } else {
        if (ret) {
          return true;
        }
      }
    }

    return isAnd;
  };
  /**
   * Converts predicates to plain JavaScript.
   * This method is uses Json stringify when serializing Predicate object.
   */


  Predicate.prototype.toJson = function () {
    var predicates;
    var p;

    if (this.isComplex) {
      predicates = [];
      p = this.predicates;

      for (var i = 0; i < p.length; i++) {
        predicates.push(p[i].toJson());
      }
    }

    return {
      isComplex: this.isComplex,
      field: this.field,
      operator: this.operator,
      value: this.value,
      ignoreCase: this.ignoreCase,
      ignoreAccent: this.ignoreAccent,
      condition: this.condition,
      predicates: predicates,
      matchCase: this.matchCase
    };
  };

  Predicate.combinePredicates = function (predicates, operator) {
    if (predicates.length === 1) {
      if (!(predicates[0] instanceof Array)) {
        return predicates[0];
      }

      predicates = predicates[0];
    }

    return new Predicate(predicates[0], operator, predicates.slice(1));
  };

  Predicate.combine = function (pred, field, operator, value, condition, ignoreCase, ignoreAccent) {
    if (field instanceof Predicate) {
      return Predicate[condition](pred, field);
    }

    if (typeof field === 'string') {
      return Predicate[condition](pred, new Predicate(field, operator, value, ignoreCase, ignoreAccent));
    }

    return _util__WEBPACK_IMPORTED_MODULE_0__["DataUtil"].throwError('Predicate - ' + condition + ' : invalid arguments');
  };

  Predicate.fromJSONData = function (json) {
    var preds = json.predicates || [];
    var len = preds.length;
    var predicates = [];
    var result;

    for (var i = 0; i < len; i++) {
      predicates.push(this.fromJSONData(preds[i]));
    }

    if (!json.isComplex) {
      result = new Predicate(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);
    } else {
      result = new Predicate(predicates[0], json.condition, predicates.slice(1));
    }

    return result;
  };

  return Predicate;
}();



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-data/src/util.js":
/*!*******************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-data/src/util.js ***!
  \*******************************************************/
/*! exports provided: DataUtil */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataUtil", function() { return DataUtil; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./manager */ "./node_modules/@syncfusion/ej2-data/src/manager.js");
/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./query */ "./node_modules/@syncfusion/ej2-data/src/query.js");
/* eslint-disable valid-jsdoc */

/* eslint-disable security/detect-object-injection */



var consts = {
  GroupGuid: '{271bbba0-1ee7}'
};
/**
 * Data manager common utility methods.
 *
 * @hidden
 */

var DataUtil =
/** @class */
function () {
  function DataUtil() {}
  /**
   * Returns the value by invoking the provided parameter function.
   * If the paramater is not of type function then it will be returned as it is.
   *
   * @param {Function|string|string[]|number} value
   * @param {Object} inst?
   * @param inst
   * @hidden
   */


  DataUtil.getValue = function (value, inst) {
    if (typeof value === 'function') {
      return value.call(inst || {});
    }

    return value;
  };
  /**
   * Returns true if the input string ends with given string.
   *
   * @param  {string} input
   * @param  {string} substr
   */


  DataUtil.endsWith = function (input, substr) {
    return input.slice && input.slice(-substr.length) === substr;
  };
  /**
   * Returns true if the input string not ends with given string.
   *
   * @param  {string} input
   * @param  {string} substr
   */


  DataUtil.notEndsWith = function (input, substr) {
    return input.slice && input.slice(-substr.length) !== substr;
  };
  /**
   * Returns true if the input string starts with given string.
   *
   * @param {string} str
   * @param {string} startstr
   * @param input
   * @param start
   */


  DataUtil.startsWith = function (input, start) {
    return input.slice(0, start.length) === start;
  };
  /**
   * Returns true if the input string not starts with given string.
   *
   * @param {string} str
   * @param {string} startstr
   * @param input
   * @param start
   */


  DataUtil.notStartsWith = function (input, start) {
    return input.slice(0, start.length) !== start;
  };
  /**
   * Returns true if the input string pattern(wildcard) matches with given string.
   *
   * @param {string} str
   * @param {string} startstr
   * @param input
   * @param pattern
   */


  DataUtil.wildCard = function (input, pattern) {
    var asteriskSplit;
    var optionalSplit; // special character allowed search

    if (pattern.indexOf('[') !== -1) {
      pattern = pattern.split('[').join('[[]');
    }

    if (pattern.indexOf('(') !== -1) {
      pattern = pattern.split('(').join('[(]');
    }

    if (pattern.indexOf(')') !== -1) {
      pattern = pattern.split(')').join('[)]');
    }

    if (pattern.indexOf('\\') !== -1) {
      pattern = pattern.split('\\').join('[\\\\]');
    }

    if (pattern.indexOf('*') !== -1) {
      if (pattern.charAt(0) !== '*') {
        pattern = '^' + pattern;
      }

      if (pattern.charAt(pattern.length - 1) !== '*') {
        pattern = pattern + '$';
      }

      asteriskSplit = pattern.split('*');

      for (var i = 0; i < asteriskSplit.length; i++) {
        if (asteriskSplit[i].indexOf('.') === -1) {
          asteriskSplit[i] = asteriskSplit[i] + '.*';
        } else {
          asteriskSplit[i] = asteriskSplit[i] + '*';
        }
      }

      pattern = asteriskSplit.join('');
    }

    if (pattern.indexOf('%3f') !== -1 || pattern.indexOf('?') !== -1) {
      optionalSplit = pattern.indexOf('%3f') !== -1 ? pattern.split('%3f') : pattern.split('?');
      pattern = optionalSplit.join('.');
    } // eslint-disable-next-line security/detect-non-literal-regexp


    var regexPattern = new RegExp(pattern, 'g');
    return regexPattern.test(input);
  };
  /**
   * Returns true if the input string pattern(like) matches with given string.
   *
   * @param {string} str
   * @param {string} startstr
   * @param input
   * @param pattern
   */


  DataUtil.like = function (input, pattern) {
    if (pattern.indexOf('%') !== -1) {
      if (pattern.charAt(0) === '%' && pattern.lastIndexOf('%') < 2) {
        pattern = pattern.substring(1, pattern.length);
        return DataUtil.startsWith(DataUtil.toLowerCase(input), DataUtil.toLowerCase(pattern));
      } else if (pattern.charAt(pattern.length - 1) === '%' && pattern.indexOf('%') > pattern.length - 3) {
        pattern = pattern.substring(0, pattern.length - 1);
        return DataUtil.endsWith(DataUtil.toLowerCase(input), DataUtil.toLowerCase(pattern));
      } else if (pattern.lastIndexOf('%') !== pattern.indexOf('%') && pattern.lastIndexOf('%') > pattern.indexOf('%') + 1) {
        pattern = pattern.substring(pattern.indexOf('%') + 1, pattern.lastIndexOf('%'));
        return input.indexOf(pattern) !== -1;
      } else {
        return input.indexOf(pattern) !== -1;
      }
    } else {
      return false;
    }
  };
  /**
   * To return the sorting function based on the string.
   *
   * @param  {string} order
   * @hidden
   */


  DataUtil.fnSort = function (order) {
    order = order ? DataUtil.toLowerCase(order) : 'ascending';

    if (order === 'ascending') {
      return this.fnAscending;
    }

    return this.fnDescending;
  };
  /**
   * Comparer function which is used to sort the data in ascending order.
   *
   * @param  {string|number} x
   * @param  {string|number} y
   * @returns number
   */


  DataUtil.fnAscending = function (x, y) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(x) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(y)) {
      return -1;
    }

    if (y === null || y === undefined) {
      return -1;
    }

    if (typeof x === 'string') {
      return x.localeCompare(y);
    }

    if (x === null || x === undefined) {
      return 1;
    }

    return x - y;
  };
  /**
   * Comparer function which is used to sort the data in descending order.
   *
   * @param  {string|number} x
   * @param  {string|number} y
   * @returns number
   */


  DataUtil.fnDescending = function (x, y) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(x) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(y)) {
      return -1;
    }

    if (y === null || y === undefined) {
      return 1;
    }

    if (typeof x === 'string') {
      return x.localeCompare(y) * -1;
    }

    if (x === null || x === undefined) {
      return -1;
    }

    return y - x;
  };

  DataUtil.extractFields = function (obj, fields) {
    var newObj = {};

    for (var i = 0; i < fields.length; i++) {
      newObj = this.setValue(fields[i], this.getObject(fields[i], obj), newObj);
    }

    return newObj;
  };
  /**
   * Select objects by given fields from jsonArray.
   *
   * @param  {Object[]} jsonArray
   * @param  {string[]} fields
   */


  DataUtil.select = function (jsonArray, fields) {
    var newData = [];

    for (var i = 0; i < jsonArray.length; i++) {
      newData.push(this.extractFields(jsonArray[i], fields));
    }

    return newData;
  };
  /**
   * Group the input data based on the field name.
   * It also performs aggregation of the grouped records based on the aggregates paramater.
   *
   * @param {Object[]} jsonArray
   * @param {string} field?
   * @param {Object[]} agg?
   * @param {number} level?
   * @param {Object[]} groupDs?
   * @param field
   * @param aggregates
   * @param level
   * @param groupDs
   * @param format
   * @param isLazyLoad
   */


  DataUtil.group = function (jsonArray, field, aggregates, level, groupDs, format, isLazyLoad) {
    level = level || 1;
    var jsonData = jsonArray;
    var guid = 'GroupGuid';

    if (jsonData.GroupGuid === consts[guid]) {
      var _loop_1 = function (j) {
        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(groupDs)) {
          var indx = -1;
          var temp = groupDs.filter(function (e) {
            return e.key === jsonData[j].key;
          });
          indx = groupDs.indexOf(temp[0]);
          jsonData[j].items = this_1.group(jsonData[j].items, field, aggregates, jsonData.level + 1, groupDs[indx].items, format, isLazyLoad);
          jsonData[j].count = groupDs[indx].count;
        } else {
          jsonData[j].items = this_1.group(jsonData[j].items, field, aggregates, jsonData.level + 1, null, format, isLazyLoad);
          jsonData[j].count = jsonData[j].items.length;
        }
      };

      var this_1 = this;

      for (var j = 0; j < jsonData.length; j++) {
        _loop_1(j);
      }

      jsonData.childLevels += 1;
      return jsonData;
    }

    var grouped = {};
    var groupedArray = [];
    groupedArray.GroupGuid = consts[guid];
    groupedArray.level = level;
    groupedArray.childLevels = 0;
    groupedArray.records = jsonData;

    var _loop_2 = function (i) {
      var val = this_2.getVal(jsonData, i, field);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(format)) {
        val = format(val, field);
      }

      if (!grouped[val]) {
        grouped[val] = {
          key: val,
          count: 0,
          items: [],
          aggregates: {},
          field: field
        };
        groupedArray.push(grouped[val]);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(groupDs)) {
          var tempObj = groupDs.filter(function (e) {
            return e.key === grouped[val].key;
          });
          grouped[val].count = tempObj[0].count;
        }
      }

      grouped[val].count = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(groupDs) ? grouped[val].count : grouped[val].count += 1;

      if (!isLazyLoad || isLazyLoad && aggregates.length) {
        grouped[val].items.push(jsonData[i]);
      }
    };

    var this_2 = this;

    for (var i = 0; i < jsonData.length; i++) {
      _loop_2(i);
    }

    if (aggregates && aggregates.length) {
      var _loop_3 = function (i) {
        var res = {};
        var fn = void 0;
        var aggs = aggregates;

        for (var j = 0; j < aggregates.length; j++) {
          fn = DataUtil.aggregates[aggregates[j].type];

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(groupDs)) {
            var temp = groupDs.filter(function (e) {
              return e.key === groupedArray[i].key;
            });

            if (fn) {
              res[aggs[j].field + ' - ' + aggs[j].type] = fn(temp[0].items, aggs[j].field);
            }
          } else {
            if (fn) {
              res[aggs[j].field + ' - ' + aggs[j].type] = fn(groupedArray[i].items, aggs[j].field);
            }
          }
        }

        groupedArray[i].aggregates = res;
      };

      for (var i = 0; i < groupedArray.length; i++) {
        _loop_3(i);
      }
    }

    if (isLazyLoad && groupedArray.length && aggregates.length) {
      for (var i = 0; i < groupedArray.length; i++) {
        groupedArray[i].items = [];
      }
    }

    return jsonData.length && groupedArray || jsonData;
  };
  /**
   * It is used to categorize the multiple items based on a specific field in jsonArray.
   * The hierarchical queries are commonly required when you use foreign key binding.
   *
   * @param {string} fKey
   * @param {string} from
   * @param {Object[]} source
   * @param {Group} lookup?
   * @param {string} pKey?
   * @param lookup
   * @param pKey
   * @hidden
   */


  DataUtil.buildHierarchy = function (fKey, from, source, lookup, pKey) {
    var i;
    var grp = {};
    var temp;

    if (lookup.result) {
      lookup = lookup.result;
    }

    if (lookup.GroupGuid) {
      this.throwError('DataManager: Do not have support Grouping in hierarchy');
    }

    for (i = 0; i < lookup.length; i++) {
      var fKeyData = this.getObject(fKey, lookup[i]);
      temp = grp[fKeyData] || (grp[fKeyData] = []);
      temp.push(lookup[i]);
    }

    for (i = 0; i < source.length; i++) {
      var fKeyData = this.getObject(pKey || fKey, source[i]);
      source[i][from] = grp[fKeyData];
    }
  };
  /**
   * The method used to get the field names which started with specified characters.
   *
   * @param {Object} obj
   * @param {string[]} fields?
   * @param {string} prefix?
   * @param fields
   * @param prefix
   * @hidden
   */


  DataUtil.getFieldList = function (obj, fields, prefix) {
    if (prefix === undefined) {
      prefix = '';
    }

    if (fields === undefined || fields === null) {
      return this.getFieldList(obj, [], prefix);
    }

    var copyObj = obj;
    var keys = Object.keys(obj);

    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
      var prop = keys_1[_i];

      if (typeof copyObj[prop] === 'object' && !(copyObj[prop] instanceof Array)) {
        this.getFieldList(copyObj[prop], fields, prefix + prop + '.');
      } else {
        fields.push(prefix + prop);
      }
    }

    return fields;
  };
  /**
   * Gets the value of the property in the given object.
   * The complex object can be accessed by providing the field names concatenated with dot(.).
   *
   * @param  {string} nameSpace - The name of the property to be accessed.
   * @param  {Object} from - Defines the source object.
   */


  DataUtil.getObject = function (nameSpace, from) {
    if (!nameSpace) {
      return from;
    }

    if (!from) {
      return undefined;
    }

    if (nameSpace.indexOf('.') === -1) {
      var lowerCaseNameSpace = nameSpace.charAt(0).toLowerCase() + nameSpace.slice(1);
      var upperCaseNameSpace = nameSpace.charAt(0).toUpperCase() + nameSpace.slice(1);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(from[nameSpace])) {
        return from[nameSpace];
      } else {
        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(from[lowerCaseNameSpace])) {
          return from[lowerCaseNameSpace];
        } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(from[upperCaseNameSpace])) {
          return from[upperCaseNameSpace];
        } else {
          return null;
        }
      }
    }

    var value = from;
    var splits = nameSpace.split('.');

    for (var i = 0; i < splits.length; i++) {
      if (value == null) {
        break;
      }

      value = value[splits[i]];

      if (value === undefined) {
        var casing = splits[i].charAt(0).toUpperCase() + splits[i].slice(1);
        value = from[casing] || from[casing.charAt(0).toLowerCase() + casing.slice(1)] || null;
      }

      from = value;
    }

    return value;
  };
  /**
   * To set value for the nameSpace in desired object.
   *
   * @param {string} nameSpace - String value to the get the inner object.
   * @param {Object} value - Value that you need to set.
   * @param {Object} obj - Object to get the inner object value.
   * @return { [key: string]: Object; } | Object
   * @hidden
   */


  DataUtil.setValue = function (nameSpace, value, obj) {
    var keys = nameSpace.toString().split('.');
    var start = obj || {};
    var fromObj = start;
    var i;
    var length = keys.length;
    var key;

    for (i = 0; i < length; i++) {
      key = keys[i];

      if (i + 1 === length) {
        fromObj[key] = value === undefined ? undefined : value;
      } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fromObj[key])) {
        fromObj[key] = {};
      }

      fromObj = fromObj[key];
    }

    return start;
  };
  /**
   * Sort the given data based on the field and comparer.
   *
   * @param  {Object[]} ds - Defines the input data.
   * @param  {string} field - Defines the field to be sorted.
   * @param  {Function} comparer - Defines the comparer function used to sort the records.
   */


  DataUtil.sort = function (ds, field, comparer) {
    if (ds.length <= 1) {
      return ds;
    }

    var middle = parseInt((ds.length / 2).toString(), 10);
    var left = ds.slice(0, middle);
    var right = ds.slice(middle);
    left = this.sort(left, field, comparer);
    right = this.sort(right, field, comparer);
    return this.merge(left, right, field, comparer);
  };

  DataUtil.ignoreDiacritics = function (value) {
    if (typeof value !== 'string') {
      return value;
    }

    var result = value.split('');
    var newValue = result.map(function (temp) {
      return temp in DataUtil.diacritics ? DataUtil.diacritics[temp] : temp;
    });
    return newValue.join('');
  };

  DataUtil.merge = function (left, right, fieldName, comparer) {
    var result = [];
    var current;

    while (left.length > 0 || right.length > 0) {
      if (left.length > 0 && right.length > 0) {
        if (comparer) {
          current = comparer(this.getVal(left, 0, fieldName), this.getVal(right, 0, fieldName), left[0], right[0]) <= 0 ? left : right;
        } else {
          current = left[0][fieldName] < left[0][fieldName] ? left : right;
        }
      } else {
        current = left.length > 0 ? left : right;
      }

      result.push(current.shift());
    }

    return result;
  };

  DataUtil.getVal = function (array, index, field) {
    return field ? this.getObject(field, array[index]) : array[index];
  };

  DataUtil.toLowerCase = function (val) {
    return val ? typeof val === 'string' ? val.toLowerCase() : val.toString() : val === 0 || val === false ? val.toString() : '';
  };
  /**
   * To perform the filter operation with specified adaptor and returns the result.
   *
   * @param {Object} adaptor
   * @param {string} fnName
   * @param {Object} param1?
   * @param {Object} param2?
   * @param param1
   * @param param2
   * @hidden
   */


  DataUtil.callAdaptorFunction = function (adaptor, fnName, param1, param2) {
    if (fnName in adaptor) {
      var res = adaptor[fnName](param1, param2);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(res)) {
        param1 = res;
      }
    }

    return param1;
  };

  DataUtil.getAddParams = function (adp, dm, query) {
    var req = {};
    DataUtil.callAdaptorFunction(adp, 'addParams', {
      dm: dm,
      query: query,
      params: query.params,
      reqParams: req
    });
    return req;
  };
  /**
   * Checks wheather the given input is a plain object or not.
   *
   * @param  {Object|Object[]} obj
   */


  DataUtil.isPlainObject = function (obj) {
    return !!obj && obj.constructor === Object;
  };
  /**
   * Returns true when the browser cross origin request.
   */


  DataUtil.isCors = function () {
    var xhr = null;
    var request = 'XMLHttpRequest';

    try {
      xhr = new window[request]();
    } catch (e) {// No exception handling
    }

    return !!xhr && 'withCredentials' in xhr;
  };
  /**
   * Generate random GUID value which will be prefixed with the given value.
   *
   * @param  {string} prefix
   */


  DataUtil.getGuid = function (prefix) {
    var hexs = '0123456789abcdef';
    var rand;
    return (prefix || '') + '00000000-0000-4000-0000-000000000000'.replace(/0/g, function (val, i) {
      if ('crypto' in window && 'getRandomValues' in crypto) {
        var arr = new Uint8Array(1);
        window.crypto.getRandomValues(arr);
        rand = arr[0] % 16 | 0;
      } else {
        rand = Math.random() * 16 | 0;
      }

      return hexs[i === 19 ? rand & 0x3 | 0x8 : rand];
    });
  };
  /**
   * Checks wheather the given value is null or not.
   *
   * @param  {string|Object} val
   * @returns boolean
   */


  DataUtil.isNull = function (val) {
    return val === undefined || val === null;
  };
  /**
   * To get the required items from collection of objects.
   *
   * @param  {Object[]} array
   * @param  {string} field
   * @param  {Function} comparer
   * @returns Object
   * @hidden
   */


  DataUtil.getItemFromComparer = function (array, field, comparer) {
    var keyVal;
    var current;
    var key;
    var i = 0;
    var castRequired = typeof DataUtil.getVal(array, 0, field) === 'string';

    if (array.length) {
      while (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(keyVal) && i < array.length) {
        keyVal = DataUtil.getVal(array, i, field);
        key = array[i++];
      }
    }

    for (; i < array.length; i++) {
      current = DataUtil.getVal(array, i, field);

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(current)) {
        continue;
      }

      if (castRequired) {
        keyVal = +keyVal;
        current = +current;
      }

      if (comparer(keyVal, current) > 0) {
        keyVal = current;
        key = array[i];
      }
    }

    return key;
  };
  /**
   * To get distinct values of Array or Array of Objects.
   *
   * @param {Object[]} json
   * @param {string} field
   * @param fieldName
   * @param {boolean} requiresCompleteRecord
   * @returns Object[]
   * * distinct array of objects is return when requiresCompleteRecord set as true.
   * @hidden
   */


  DataUtil.distinct = function (json, fieldName, requiresCompleteRecord) {
    requiresCompleteRecord = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(requiresCompleteRecord) ? false : requiresCompleteRecord;
    var result = [];
    var val;
    var tmp = {};
    json.forEach(function (data, index) {
      val = typeof json[index] === 'object' ? DataUtil.getVal(json, index, fieldName) : json[index];

      if (!(val in tmp)) {
        result.push(!requiresCompleteRecord ? val : json[index]);
        tmp[val] = 1;
      }
    });
    return result;
  };
  /**
   * Process the given records based on the datamanager string.
   *
   * @param {string} datamanager
   * @param dm
   * @param {Object[]} records
   */


  DataUtil.processData = function (dm, records) {
    var query = this.prepareQuery(dm);
    var sampledata = new _manager__WEBPACK_IMPORTED_MODULE_1__["DataManager"](records);

    if (dm.requiresCounts) {
      query.requiresCount();
    }
    /* eslint-disable @typescript-eslint/no-explicit-any */
    // tslint:disable-next-line:no-any


    var result = sampledata.executeLocal(query);
    /* eslint-enable @typescript-eslint/no-explicit-any */

    var returnValue = {
      result: dm.requiresCounts ? result.result : result,
      count: result.count,
      aggregates: JSON.stringify(result.aggregates)
    };
    return dm.requiresCounts ? returnValue : result;
  };

  DataUtil.prepareQuery = function (dm) {
    var _this = this;

    var query = new _query__WEBPACK_IMPORTED_MODULE_2__["Query"]();

    if (dm.select) {
      query.select(dm.select);
    }

    if (dm.where) {
      var where = DataUtil.parse.parseJson(dm.where);
      where.filter(function (pred) {
        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(pred.condition)) {
          query.where(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent);
        } else {
          var predicateList = [];

          if (pred.field) {
            predicateList.push(new _query__WEBPACK_IMPORTED_MODULE_2__["Predicate"](pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent));
          } else {
            predicateList = predicateList.concat(_this.getPredicate(pred.predicates));
          }

          if (pred.condition === 'or') {
            query.where(_query__WEBPACK_IMPORTED_MODULE_2__["Predicate"].or(predicateList));
          } else if (pred.condition === 'and') {
            query.where(_query__WEBPACK_IMPORTED_MODULE_2__["Predicate"].and(predicateList));
          }
        }
      });
    }

    if (dm.search) {
      var search = DataUtil.parse.parseJson(dm.search); // tslint:disable-next-line:no-string-literal

      search.filter(function (e) {
        return query.search(e.key, e.fields, e['operator'], // tslint:disable-next-line:no-string-literal
        e['ignoreCase'], e['ignoreAccent']);
      });
    }

    if (dm.aggregates) {
      dm.aggregates.filter(function (e) {
        return query.aggregate(e.type, e.field);
      });
    }

    if (dm.sorted) {
      dm.sorted.filter(function (e) {
        return query.sortBy(e.name, e.direction);
      });
    }

    if (dm.skip) {
      query.skip(dm.skip);
    }

    if (dm.take) {
      query.take(dm.take);
    }

    if (dm.group) {
      dm.group.filter(function (grp) {
        return query.group(grp);
      });
    }

    return query;
  };

  DataUtil.getPredicate = function (pred) {
    var mainPred = [];

    for (var i = 0; i < pred.length; i++) {
      var e = pred[i];

      if (e.field) {
        mainPred.push(new _query__WEBPACK_IMPORTED_MODULE_2__["Predicate"](e.field, e.operator, e.value, e.ignoreCase, e.ignoreAccent));
      } else {
        var childPred = []; // tslint:disable-next-line:typedef

        var cpre = this.getPredicate(e.predicates);

        for (var _i = 0, _a = Object.keys(cpre); _i < _a.length; _i++) {
          var prop = _a[_i];
          childPred.push(cpre[prop]);
        }

        mainPred.push(e.condition === 'or' ? _query__WEBPACK_IMPORTED_MODULE_2__["Predicate"].or(childPred) : _query__WEBPACK_IMPORTED_MODULE_2__["Predicate"].and(childPred));
      }
    }

    return mainPred;
  };
  /**
   * Specifies the value which will be used to adjust the date value to server timezone.
   *
   * @default null
   */


  DataUtil.serverTimezoneOffset = null;
  /**
   * Species whether are not to be parsed with serverTimezoneOffset value.
   *
   * @hidden
   */

  DataUtil.timeZoneHandling = true;
  /**
   * Throw error with the given string as message.
   *
   * @param {string} er
   * @param error
   */

  DataUtil.throwError = function (error) {
    try {
      throw new Error(error);
    } catch (e) {
      // eslint-disable-next-line no-throw-literal
      throw e.message + '\n' + e.stack;
    }
  };

  DataUtil.aggregates = {
    /**
     * Calculate sum of the given field in the data.
     *
     * @param  {Object[]} ds
     * @param  {string} field
     */
    sum: function (ds, field) {
      var result = 0;
      var val;
      var castRequired = typeof DataUtil.getVal(ds, 0, field) !== 'number';

      for (var i = 0; i < ds.length; i++) {
        val = DataUtil.getVal(ds, i, field);

        if (!isNaN(val) && val !== null) {
          if (castRequired) {
            val = +val;
          }

          result += val;
        }
      }

      return result;
    },

    /**
     * Calculate average value of the given field in the data.
     *
     * @param  {Object[]} ds
     * @param  {string} field
     */
    average: function (ds, field) {
      return DataUtil.aggregates.sum(ds, field) / ds.length;
    },

    /**
     * Returns the min value of the data based on the field.
     *
     * @param  {Object[]} ds
     * @param  {string|Function} field
     */
    min: function (ds, field) {
      var comparer;

      if (typeof field === 'function') {
        comparer = field;
        field = null;
      }

      return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnAscending));
    },

    /**
     * Returns the max value of the data based on the field.
     *
     * @param  {Object[]} ds
     * @param  {string} field
     * @returns number
     */
    max: function (ds, field) {
      var comparer;

      if (typeof field === 'function') {
        comparer = field;
        field = null;
      }

      return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnDescending));
    },

    /**
     * Returns the total number of true value present in the data based on the given boolean field name.
     *
     * @param  {Object[]} ds
     * @param  {string} field
     */
    truecount: function (ds, field) {
      return new _manager__WEBPACK_IMPORTED_MODULE_1__["DataManager"](ds).executeLocal(new _query__WEBPACK_IMPORTED_MODULE_2__["Query"]().where(field, 'equal', true, true)).length;
    },

    /**
     * Returns the total number of false value present in the data based on the given boolean field name.
     *
     * @param  {Object[]} ds
     * @param  {string} field
     */
    falsecount: function (ds, field) {
      return new _manager__WEBPACK_IMPORTED_MODULE_1__["DataManager"](ds).executeLocal(new _query__WEBPACK_IMPORTED_MODULE_2__["Query"]().where(field, 'equal', false, true)).length;
    },

    /**
     * Returns the length of the given data.
     *
     * @param {Object[]} ds
     * @param {string} field?
     * @param field
     * @returns number
     */
    count: function (ds, field) {
      return ds.length;
    }
  };
  /**
   * Specifies the Object with filter operators.
   */

  DataUtil.operatorSymbols = {
    '<': 'lessthan',
    '>': 'greaterthan',
    '<=': 'lessthanorequal',
    '>=': 'greaterthanorequal',
    '==': 'equal',
    '!=': 'notequal',
    '*=': 'contains',
    '$=': 'endswith',
    '^=': 'startswith'
  };
  /**
   * Specifies the Object with filter operators which will be used for OData filter query generation.
   * * It will be used for date/number type filter query.
   */

  DataUtil.odBiOperator = {
    '<': ' lt ',
    '>': ' gt ',
    '<=': ' le ',
    '>=': ' ge ',
    '==': ' eq ',
    '!=': ' ne ',
    'lessthan': ' lt ',
    'lessthanorequal': ' le ',
    'greaterthan': ' gt ',
    'greaterthanorequal': ' ge ',
    'equal': ' eq ',
    'notequal': ' ne '
  };
  /**
   * Specifies the Object with filter operators which will be used for OData filter query generation.
   * It will be used for string type filter query.
   */

  DataUtil.odUniOperator = {
    '$=': 'endswith',
    '^=': 'startswith',
    '*=': 'substringof',
    'endswith': 'endswith',
    'startswith': 'startswith',
    'contains': 'substringof',
    'doesnotendwith': 'not endswith',
    'doesnotstartwith': 'not startswith',
    'doesnotcontain': 'not substringof',
    'wildcard': 'wildcard',
    'like': 'like'
  };
  /**
   * Specifies the Object with filter operators which will be used for ODataV4 filter query generation.
   * It will be used for string type filter query.
   */

  DataUtil.odv4UniOperator = {
    '$=': 'endswith',
    '^=': 'startswith',
    '*=': 'contains',
    'endswith': 'endswith',
    'startswith': 'startswith',
    'contains': 'contains',
    'doesnotendwith': 'not endswith',
    'doesnotstartwith': 'not startswith',
    'doesnotcontain': 'not contains',
    'wildcard': 'wildcard',
    'like': 'like'
  };
  DataUtil.diacritics = {
    '\u24B6': 'A',
    '\uFF21': 'A',
    '\u00C0': 'A',
    '\u00C1': 'A',
    '\u00C2': 'A',
    '\u1EA6': 'A',
    '\u1EA4': 'A',
    '\u1EAA': 'A',
    '\u1EA8': 'A',
    '\u00C3': 'A',
    '\u0100': 'A',
    '\u0102': 'A',
    '\u1EB0': 'A',
    '\u1EAE': 'A',
    '\u1EB4': 'A',
    '\u1EB2': 'A',
    '\u0226': 'A',
    '\u01E0': 'A',
    '\u00C4': 'A',
    '\u01DE': 'A',
    '\u1EA2': 'A',
    '\u00C5': 'A',
    '\u01FA': 'A',
    '\u01CD': 'A',
    '\u0200': 'A',
    '\u0202': 'A',
    '\u1EA0': 'A',
    '\u1EAC': 'A',
    '\u1EB6': 'A',
    '\u1E00': 'A',
    '\u0104': 'A',
    '\u023A': 'A',
    '\u2C6F': 'A',
    '\uA732': 'AA',
    '\u00C6': 'AE',
    '\u01FC': 'AE',
    '\u01E2': 'AE',
    '\uA734': 'AO',
    '\uA736': 'AU',
    '\uA738': 'AV',
    '\uA73A': 'AV',
    '\uA73C': 'AY',
    '\u24B7': 'B',
    '\uFF22': 'B',
    '\u1E02': 'B',
    '\u1E04': 'B',
    '\u1E06': 'B',
    '\u0243': 'B',
    '\u0182': 'B',
    '\u0181': 'B',
    '\u24B8': 'C',
    '\uFF23': 'C',
    '\u0106': 'C',
    '\u0108': 'C',
    '\u010A': 'C',
    '\u010C': 'C',
    '\u00C7': 'C',
    '\u1E08': 'C',
    '\u0187': 'C',
    '\u023B': 'C',
    '\uA73E': 'C',
    '\u24B9': 'D',
    '\uFF24': 'D',
    '\u1E0A': 'D',
    '\u010E': 'D',
    '\u1E0C': 'D',
    '\u1E10': 'D',
    '\u1E12': 'D',
    '\u1E0E': 'D',
    '\u0110': 'D',
    '\u018B': 'D',
    '\u018A': 'D',
    '\u0189': 'D',
    '\uA779': 'D',
    '\u01F1': 'DZ',
    '\u01C4': 'DZ',
    '\u01F2': 'Dz',
    '\u01C5': 'Dz',
    '\u24BA': 'E',
    '\uFF25': 'E',
    '\u00C8': 'E',
    '\u00C9': 'E',
    '\u00CA': 'E',
    '\u1EC0': 'E',
    '\u1EBE': 'E',
    '\u1EC4': 'E',
    '\u1EC2': 'E',
    '\u1EBC': 'E',
    '\u0112': 'E',
    '\u1E14': 'E',
    '\u1E16': 'E',
    '\u0114': 'E',
    '\u0116': 'E',
    '\u00CB': 'E',
    '\u1EBA': 'E',
    '\u011A': 'E',
    '\u0204': 'E',
    '\u0206': 'E',
    '\u1EB8': 'E',
    '\u1EC6': 'E',
    '\u0228': 'E',
    '\u1E1C': 'E',
    '\u0118': 'E',
    '\u1E18': 'E',
    '\u1E1A': 'E',
    '\u0190': 'E',
    '\u018E': 'E',
    '\u24BB': 'F',
    '\uFF26': 'F',
    '\u1E1E': 'F',
    '\u0191': 'F',
    '\uA77B': 'F',
    '\u24BC': 'G',
    '\uFF27': 'G',
    '\u01F4': 'G',
    '\u011C': 'G',
    '\u1E20': 'G',
    '\u011E': 'G',
    '\u0120': 'G',
    '\u01E6': 'G',
    '\u0122': 'G',
    '\u01E4': 'G',
    '\u0193': 'G',
    '\uA7A0': 'G',
    '\uA77D': 'G',
    '\uA77E': 'G',
    '\u24BD': 'H',
    '\uFF28': 'H',
    '\u0124': 'H',
    '\u1E22': 'H',
    '\u1E26': 'H',
    '\u021E': 'H',
    '\u1E24': 'H',
    '\u1E28': 'H',
    '\u1E2A': 'H',
    '\u0126': 'H',
    '\u2C67': 'H',
    '\u2C75': 'H',
    '\uA78D': 'H',
    '\u24BE': 'I',
    '\uFF29': 'I',
    '\u00CC': 'I',
    '\u00CD': 'I',
    '\u00CE': 'I',
    '\u0128': 'I',
    '\u012A': 'I',
    '\u012C': 'I',
    '\u0130': 'I',
    '\u00CF': 'I',
    '\u1E2E': 'I',
    '\u1EC8': 'I',
    '\u01CF': 'I',
    '\u0208': 'I',
    '\u020A': 'I',
    '\u1ECA': 'I',
    '\u012E': 'I',
    '\u1E2C': 'I',
    '\u0197': 'I',
    '\u24BF': 'J',
    '\uFF2A': 'J',
    '\u0134': 'J',
    '\u0248': 'J',
    '\u24C0': 'K',
    '\uFF2B': 'K',
    '\u1E30': 'K',
    '\u01E8': 'K',
    '\u1E32': 'K',
    '\u0136': 'K',
    '\u1E34': 'K',
    '\u0198': 'K',
    '\u2C69': 'K',
    '\uA740': 'K',
    '\uA742': 'K',
    '\uA744': 'K',
    '\uA7A2': 'K',
    '\u24C1': 'L',
    '\uFF2C': 'L',
    '\u013F': 'L',
    '\u0139': 'L',
    '\u013D': 'L',
    '\u1E36': 'L',
    '\u1E38': 'L',
    '\u013B': 'L',
    '\u1E3C': 'L',
    '\u1E3A': 'L',
    '\u0141': 'L',
    '\u023D': 'L',
    '\u2C62': 'L',
    '\u2C60': 'L',
    '\uA748': 'L',
    '\uA746': 'L',
    '\uA780': 'L',
    '\u01C7': 'LJ',
    '\u01C8': 'Lj',
    '\u24C2': 'M',
    '\uFF2D': 'M',
    '\u1E3E': 'M',
    '\u1E40': 'M',
    '\u1E42': 'M',
    '\u2C6E': 'M',
    '\u019C': 'M',
    '\u24C3': 'N',
    '\uFF2E': 'N',
    '\u01F8': 'N',
    '\u0143': 'N',
    '\u00D1': 'N',
    '\u1E44': 'N',
    '\u0147': 'N',
    '\u1E46': 'N',
    '\u0145': 'N',
    '\u1E4A': 'N',
    '\u1E48': 'N',
    '\u0220': 'N',
    '\u019D': 'N',
    '\uA790': 'N',
    '\uA7A4': 'N',
    '\u01CA': 'NJ',
    '\u01CB': 'Nj',
    '\u24C4': 'O',
    '\uFF2F': 'O',
    '\u00D2': 'O',
    '\u00D3': 'O',
    '\u00D4': 'O',
    '\u1ED2': 'O',
    '\u1ED0': 'O',
    '\u1ED6': 'O',
    '\u1ED4': 'O',
    '\u00D5': 'O',
    '\u1E4C': 'O',
    '\u022C': 'O',
    '\u1E4E': 'O',
    '\u014C': 'O',
    '\u1E50': 'O',
    '\u1E52': 'O',
    '\u014E': 'O',
    '\u022E': 'O',
    '\u0230': 'O',
    '\u00D6': 'O',
    '\u022A': 'O',
    '\u1ECE': 'O',
    '\u0150': 'O',
    '\u01D1': 'O',
    '\u020C': 'O',
    '\u020E': 'O',
    '\u01A0': 'O',
    '\u1EDC': 'O',
    '\u1EDA': 'O',
    '\u1EE0': 'O',
    '\u1EDE': 'O',
    '\u1EE2': 'O',
    '\u1ECC': 'O',
    '\u1ED8': 'O',
    '\u01EA': 'O',
    '\u01EC': 'O',
    '\u00D8': 'O',
    '\u01FE': 'O',
    '\u0186': 'O',
    '\u019F': 'O',
    '\uA74A': 'O',
    '\uA74C': 'O',
    '\u01A2': 'OI',
    '\uA74E': 'OO',
    '\u0222': 'OU',
    '\u24C5': 'P',
    '\uFF30': 'P',
    '\u1E54': 'P',
    '\u1E56': 'P',
    '\u01A4': 'P',
    '\u2C63': 'P',
    '\uA750': 'P',
    '\uA752': 'P',
    '\uA754': 'P',
    '\u24C6': 'Q',
    '\uFF31': 'Q',
    '\uA756': 'Q',
    '\uA758': 'Q',
    '\u024A': 'Q',
    '\u24C7': 'R',
    '\uFF32': 'R',
    '\u0154': 'R',
    '\u1E58': 'R',
    '\u0158': 'R',
    '\u0210': 'R',
    '\u0212': 'R',
    '\u1E5A': 'R',
    '\u1E5C': 'R',
    '\u0156': 'R',
    '\u1E5E': 'R',
    '\u024C': 'R',
    '\u2C64': 'R',
    '\uA75A': 'R',
    '\uA7A6': 'R',
    '\uA782': 'R',
    '\u24C8': 'S',
    '\uFF33': 'S',
    '\u1E9E': 'S',
    '\u015A': 'S',
    '\u1E64': 'S',
    '\u015C': 'S',
    '\u1E60': 'S',
    '\u0160': 'S',
    '\u1E66': 'S',
    '\u1E62': 'S',
    '\u1E68': 'S',
    '\u0218': 'S',
    '\u015E': 'S',
    '\u2C7E': 'S',
    '\uA7A8': 'S',
    '\uA784': 'S',
    '\u24C9': 'T',
    '\uFF34': 'T',
    '\u1E6A': 'T',
    '\u0164': 'T',
    '\u1E6C': 'T',
    '\u021A': 'T',
    '\u0162': 'T',
    '\u1E70': 'T',
    '\u1E6E': 'T',
    '\u0166': 'T',
    '\u01AC': 'T',
    '\u01AE': 'T',
    '\u023E': 'T',
    '\uA786': 'T',
    '\uA728': 'TZ',
    '\u24CA': 'U',
    '\uFF35': 'U',
    '\u00D9': 'U',
    '\u00DA': 'U',
    '\u00DB': 'U',
    '\u0168': 'U',
    '\u1E78': 'U',
    '\u016A': 'U',
    '\u1E7A': 'U',
    '\u016C': 'U',
    '\u00DC': 'U',
    '\u01DB': 'U',
    '\u01D7': 'U',
    '\u01D5': 'U',
    '\u01D9': 'U',
    '\u1EE6': 'U',
    '\u016E': 'U',
    '\u0170': 'U',
    '\u01D3': 'U',
    '\u0214': 'U',
    '\u0216': 'U',
    '\u01AF': 'U',
    '\u1EEA': 'U',
    '\u1EE8': 'U',
    '\u1EEE': 'U',
    '\u1EEC': 'U',
    '\u1EF0': 'U',
    '\u1EE4': 'U',
    '\u1E72': 'U',
    '\u0172': 'U',
    '\u1E76': 'U',
    '\u1E74': 'U',
    '\u0244': 'U',
    '\u24CB': 'V',
    '\uFF36': 'V',
    '\u1E7C': 'V',
    '\u1E7E': 'V',
    '\u01B2': 'V',
    '\uA75E': 'V',
    '\u0245': 'V',
    '\uA760': 'VY',
    '\u24CC': 'W',
    '\uFF37': 'W',
    '\u1E80': 'W',
    '\u1E82': 'W',
    '\u0174': 'W',
    '\u1E86': 'W',
    '\u1E84': 'W',
    '\u1E88': 'W',
    '\u2C72': 'W',
    '\u24CD': 'X',
    '\uFF38': 'X',
    '\u1E8A': 'X',
    '\u1E8C': 'X',
    '\u24CE': 'Y',
    '\uFF39': 'Y',
    '\u1EF2': 'Y',
    '\u00DD': 'Y',
    '\u0176': 'Y',
    '\u1EF8': 'Y',
    '\u0232': 'Y',
    '\u1E8E': 'Y',
    '\u0178': 'Y',
    '\u1EF6': 'Y',
    '\u1EF4': 'Y',
    '\u01B3': 'Y',
    '\u024E': 'Y',
    '\u1EFE': 'Y',
    '\u24CF': 'Z',
    '\uFF3A': 'Z',
    '\u0179': 'Z',
    '\u1E90': 'Z',
    '\u017B': 'Z',
    '\u017D': 'Z',
    '\u1E92': 'Z',
    '\u1E94': 'Z',
    '\u01B5': 'Z',
    '\u0224': 'Z',
    '\u2C7F': 'Z',
    '\u2C6B': 'Z',
    '\uA762': 'Z',
    '\u24D0': 'a',
    '\uFF41': 'a',
    '\u1E9A': 'a',
    '\u00E0': 'a',
    '\u00E1': 'a',
    '\u00E2': 'a',
    '\u1EA7': 'a',
    '\u1EA5': 'a',
    '\u1EAB': 'a',
    '\u1EA9': 'a',
    '\u00E3': 'a',
    '\u0101': 'a',
    '\u0103': 'a',
    '\u1EB1': 'a',
    '\u1EAF': 'a',
    '\u1EB5': 'a',
    '\u1EB3': 'a',
    '\u0227': 'a',
    '\u01E1': 'a',
    '\u00E4': 'a',
    '\u01DF': 'a',
    '\u1EA3': 'a',
    '\u00E5': 'a',
    '\u01FB': 'a',
    '\u01CE': 'a',
    '\u0201': 'a',
    '\u0203': 'a',
    '\u1EA1': 'a',
    '\u1EAD': 'a',
    '\u1EB7': 'a',
    '\u1E01': 'a',
    '\u0105': 'a',
    '\u2C65': 'a',
    '\u0250': 'a',
    '\uA733': 'aa',
    '\u00E6': 'ae',
    '\u01FD': 'ae',
    '\u01E3': 'ae',
    '\uA735': 'ao',
    '\uA737': 'au',
    '\uA739': 'av',
    '\uA73B': 'av',
    '\uA73D': 'ay',
    '\u24D1': 'b',
    '\uFF42': 'b',
    '\u1E03': 'b',
    '\u1E05': 'b',
    '\u1E07': 'b',
    '\u0180': 'b',
    '\u0183': 'b',
    '\u0253': 'b',
    '\u24D2': 'c',
    '\uFF43': 'c',
    '\u0107': 'c',
    '\u0109': 'c',
    '\u010B': 'c',
    '\u010D': 'c',
    '\u00E7': 'c',
    '\u1E09': 'c',
    '\u0188': 'c',
    '\u023C': 'c',
    '\uA73F': 'c',
    '\u2184': 'c',
    '\u24D3': 'd',
    '\uFF44': 'd',
    '\u1E0B': 'd',
    '\u010F': 'd',
    '\u1E0D': 'd',
    '\u1E11': 'd',
    '\u1E13': 'd',
    '\u1E0F': 'd',
    '\u0111': 'd',
    '\u018C': 'd',
    '\u0256': 'd',
    '\u0257': 'd',
    '\uA77A': 'd',
    '\u01F3': 'dz',
    '\u01C6': 'dz',
    '\u24D4': 'e',
    '\uFF45': 'e',
    '\u00E8': 'e',
    '\u00E9': 'e',
    '\u00EA': 'e',
    '\u1EC1': 'e',
    '\u1EBF': 'e',
    '\u1EC5': 'e',
    '\u1EC3': 'e',
    '\u1EBD': 'e',
    '\u0113': 'e',
    '\u1E15': 'e',
    '\u1E17': 'e',
    '\u0115': 'e',
    '\u0117': 'e',
    '\u00EB': 'e',
    '\u1EBB': 'e',
    '\u011B': 'e',
    '\u0205': 'e',
    '\u0207': 'e',
    '\u1EB9': 'e',
    '\u1EC7': 'e',
    '\u0229': 'e',
    '\u1E1D': 'e',
    '\u0119': 'e',
    '\u1E19': 'e',
    '\u1E1B': 'e',
    '\u0247': 'e',
    '\u025B': 'e',
    '\u01DD': 'e',
    '\u24D5': 'f',
    '\uFF46': 'f',
    '\u1E1F': 'f',
    '\u0192': 'f',
    '\uA77C': 'f',
    '\u24D6': 'g',
    '\uFF47': 'g',
    '\u01F5': 'g',
    '\u011D': 'g',
    '\u1E21': 'g',
    '\u011F': 'g',
    '\u0121': 'g',
    '\u01E7': 'g',
    '\u0123': 'g',
    '\u01E5': 'g',
    '\u0260': 'g',
    '\uA7A1': 'g',
    '\u1D79': 'g',
    '\uA77F': 'g',
    '\u24D7': 'h',
    '\uFF48': 'h',
    '\u0125': 'h',
    '\u1E23': 'h',
    '\u1E27': 'h',
    '\u021F': 'h',
    '\u1E25': 'h',
    '\u1E29': 'h',
    '\u1E2B': 'h',
    '\u1E96': 'h',
    '\u0127': 'h',
    '\u2C68': 'h',
    '\u2C76': 'h',
    '\u0265': 'h',
    '\u0195': 'hv',
    '\u24D8': 'i',
    '\uFF49': 'i',
    '\u00EC': 'i',
    '\u00ED': 'i',
    '\u00EE': 'i',
    '\u0129': 'i',
    '\u012B': 'i',
    '\u012D': 'i',
    '\u00EF': 'i',
    '\u1E2F': 'i',
    '\u1EC9': 'i',
    '\u01D0': 'i',
    '\u0209': 'i',
    '\u020B': 'i',
    '\u1ECB': 'i',
    '\u012F': 'i',
    '\u1E2D': 'i',
    '\u0268': 'i',
    '\u0131': 'i',
    '\u24D9': 'j',
    '\uFF4A': 'j',
    '\u0135': 'j',
    '\u01F0': 'j',
    '\u0249': 'j',
    '\u24DA': 'k',
    '\uFF4B': 'k',
    '\u1E31': 'k',
    '\u01E9': 'k',
    '\u1E33': 'k',
    '\u0137': 'k',
    '\u1E35': 'k',
    '\u0199': 'k',
    '\u2C6A': 'k',
    '\uA741': 'k',
    '\uA743': 'k',
    '\uA745': 'k',
    '\uA7A3': 'k',
    '\u24DB': 'l',
    '\uFF4C': 'l',
    '\u0140': 'l',
    '\u013A': 'l',
    '\u013E': 'l',
    '\u1E37': 'l',
    '\u1E39': 'l',
    '\u013C': 'l',
    '\u1E3D': 'l',
    '\u1E3B': 'l',
    '\u017F': 'l',
    '\u0142': 'l',
    '\u019A': 'l',
    '\u026B': 'l',
    '\u2C61': 'l',
    '\uA749': 'l',
    '\uA781': 'l',
    '\uA747': 'l',
    '\u01C9': 'lj',
    '\u24DC': 'm',
    '\uFF4D': 'm',
    '\u1E3F': 'm',
    '\u1E41': 'm',
    '\u1E43': 'm',
    '\u0271': 'm',
    '\u026F': 'm',
    '\u24DD': 'n',
    '\uFF4E': 'n',
    '\u01F9': 'n',
    '\u0144': 'n',
    '\u00F1': 'n',
    '\u1E45': 'n',
    '\u0148': 'n',
    '\u1E47': 'n',
    '\u0146': 'n',
    '\u1E4B': 'n',
    '\u1E49': 'n',
    '\u019E': 'n',
    '\u0272': 'n',
    '\u0149': 'n',
    '\uA791': 'n',
    '\uA7A5': 'n',
    '\u01CC': 'nj',
    '\u24DE': 'o',
    '\uFF4F': 'o',
    '\u00F2': 'o',
    '\u00F3': 'o',
    '\u00F4': 'o',
    '\u1ED3': 'o',
    '\u1ED1': 'o',
    '\u1ED7': 'o',
    '\u1ED5': 'o',
    '\u00F5': 'o',
    '\u1E4D': 'o',
    '\u022D': 'o',
    '\u1E4F': 'o',
    '\u014D': 'o',
    '\u1E51': 'o',
    '\u1E53': 'o',
    '\u014F': 'o',
    '\u022F': 'o',
    '\u0231': 'o',
    '\u00F6': 'o',
    '\u022B': 'o',
    '\u1ECF': 'o',
    '\u0151': 'o',
    '\u01D2': 'o',
    '\u020D': 'o',
    '\u020F': 'o',
    '\u01A1': 'o',
    '\u1EDD': 'o',
    '\u1EDB': 'o',
    '\u1EE1': 'o',
    '\u1EDF': 'o',
    '\u1EE3': 'o',
    '\u1ECD': 'o',
    '\u1ED9': 'o',
    '\u01EB': 'o',
    '\u01ED': 'o',
    '\u00F8': 'o',
    '\u01FF': 'o',
    '\u0254': 'o',
    '\uA74B': 'o',
    '\uA74D': 'o',
    '\u0275': 'o',
    '\u01A3': 'oi',
    '\u0223': 'ou',
    '\uA74F': 'oo',
    '\u24DF': 'p',
    '\uFF50': 'p',
    '\u1E55': 'p',
    '\u1E57': 'p',
    '\u01A5': 'p',
    '\u1D7D': 'p',
    '\uA751': 'p',
    '\uA753': 'p',
    '\uA755': 'p',
    '\u24E0': 'q',
    '\uFF51': 'q',
    '\u024B': 'q',
    '\uA757': 'q',
    '\uA759': 'q',
    '\u24E1': 'r',
    '\uFF52': 'r',
    '\u0155': 'r',
    '\u1E59': 'r',
    '\u0159': 'r',
    '\u0211': 'r',
    '\u0213': 'r',
    '\u1E5B': 'r',
    '\u1E5D': 'r',
    '\u0157': 'r',
    '\u1E5F': 'r',
    '\u024D': 'r',
    '\u027D': 'r',
    '\uA75B': 'r',
    '\uA7A7': 'r',
    '\uA783': 'r',
    '\u24E2': 's',
    '\uFF53': 's',
    '\u00DF': 's',
    '\u015B': 's',
    '\u1E65': 's',
    '\u015D': 's',
    '\u1E61': 's',
    '\u0161': 's',
    '\u1E67': 's',
    '\u1E63': 's',
    '\u1E69': 's',
    '\u0219': 's',
    '\u015F': 's',
    '\u023F': 's',
    '\uA7A9': 's',
    '\uA785': 's',
    '\u1E9B': 's',
    '\u24E3': 't',
    '\uFF54': 't',
    '\u1E6B': 't',
    '\u1E97': 't',
    '\u0165': 't',
    '\u1E6D': 't',
    '\u021B': 't',
    '\u0163': 't',
    '\u1E71': 't',
    '\u1E6F': 't',
    '\u0167': 't',
    '\u01AD': 't',
    '\u0288': 't',
    '\u2C66': 't',
    '\uA787': 't',
    '\uA729': 'tz',
    '\u24E4': 'u',
    '\uFF55': 'u',
    '\u00F9': 'u',
    '\u00FA': 'u',
    '\u00FB': 'u',
    '\u0169': 'u',
    '\u1E79': 'u',
    '\u016B': 'u',
    '\u1E7B': 'u',
    '\u016D': 'u',
    '\u00FC': 'u',
    '\u01DC': 'u',
    '\u01D8': 'u',
    '\u01D6': 'u',
    '\u01DA': 'u',
    '\u1EE7': 'u',
    '\u016F': 'u',
    '\u0171': 'u',
    '\u01D4': 'u',
    '\u0215': 'u',
    '\u0217': 'u',
    '\u01B0': 'u',
    '\u1EEB': 'u',
    '\u1EE9': 'u',
    '\u1EEF': 'u',
    '\u1EED': 'u',
    '\u1EF1': 'u',
    '\u1EE5': 'u',
    '\u1E73': 'u',
    '\u0173': 'u',
    '\u1E77': 'u',
    '\u1E75': 'u',
    '\u0289': 'u',
    '\u24E5': 'v',
    '\uFF56': 'v',
    '\u1E7D': 'v',
    '\u1E7F': 'v',
    '\u028B': 'v',
    '\uA75F': 'v',
    '\u028C': 'v',
    '\uA761': 'vy',
    '\u24E6': 'w',
    '\uFF57': 'w',
    '\u1E81': 'w',
    '\u1E83': 'w',
    '\u0175': 'w',
    '\u1E87': 'w',
    '\u1E85': 'w',
    '\u1E98': 'w',
    '\u1E89': 'w',
    '\u2C73': 'w',
    '\u24E7': 'x',
    '\uFF58': 'x',
    '\u1E8B': 'x',
    '\u1E8D': 'x',
    '\u24E8': 'y',
    '\uFF59': 'y',
    '\u1EF3': 'y',
    '\u00FD': 'y',
    '\u0177': 'y',
    '\u1EF9': 'y',
    '\u0233': 'y',
    '\u1E8F': 'y',
    '\u00FF': 'y',
    '\u1EF7': 'y',
    '\u1E99': 'y',
    '\u1EF5': 'y',
    '\u01B4': 'y',
    '\u024F': 'y',
    '\u1EFF': 'y',
    '\u24E9': 'z',
    '\uFF5A': 'z',
    '\u017A': 'z',
    '\u1E91': 'z',
    '\u017C': 'z',
    '\u017E': 'z',
    '\u1E93': 'z',
    '\u1E95': 'z',
    '\u01B6': 'z',
    '\u0225': 'z',
    '\u0240': 'z',
    '\u2C6C': 'z',
    '\uA763': 'z',
    '\u0386': '\u0391',
    '\u0388': '\u0395',
    '\u0389': '\u0397',
    '\u038A': '\u0399',
    '\u03AA': '\u0399',
    '\u038C': '\u039F',
    '\u038E': '\u03A5',
    '\u03AB': '\u03A5',
    '\u038F': '\u03A9',
    '\u03AC': '\u03B1',
    '\u03AD': '\u03B5',
    '\u03AE': '\u03B7',
    '\u03AF': '\u03B9',
    '\u03CA': '\u03B9',
    '\u0390': '\u03B9',
    '\u03CC': '\u03BF',
    '\u03CD': '\u03C5',
    '\u03CB': '\u03C5',
    '\u03B0': '\u03C5',
    '\u03C9': '\u03C9',
    '\u03C2': '\u03C3'
  };
  DataUtil.fnOperators = {
    /**
     * Returns true when the actual input is equal to the given input.
     *
     * @param {string|number|boolean} actual
     * @param {string|number|boolean} expected
     * @param {boolean} ignoreCase?
     * @param {boolean} ignoreAccent?
     * @param ignoreCase
     * @param ignoreAccent
     */
    equal: function (actual, expected, ignoreCase, ignoreAccent) {
      if (ignoreAccent) {
        actual = DataUtil.ignoreDiacritics(actual);
        expected = DataUtil.ignoreDiacritics(expected);
      }

      if (ignoreCase) {
        return DataUtil.toLowerCase(actual) === DataUtil.toLowerCase(expected);
      }

      return actual === expected;
    },

    /**
     * Returns true when the actual input is not equal to the given input.
     *
     * @param {string|number|boolean} actual
     * @param {string|number|boolean} expected
     * @param {boolean} ignoreCase?
     * @param ignoreCase
     * @param ignoreAccent
     */
    notequal: function (actual, expected, ignoreCase, ignoreAccent) {
      if (ignoreAccent) {
        actual = DataUtil.ignoreDiacritics(actual);
        expected = DataUtil.ignoreDiacritics(expected);
      }

      return !DataUtil.fnOperators.equal(actual, expected, ignoreCase);
    },

    /**
     * Returns true when the actual input is less than to the given input.
     *
     * @param {string|number|boolean} actual
     * @param {string|number|boolean} expected
     * @param {boolean} ignoreCase?
     * @param ignoreCase
     */
    lessthan: function (actual, expected, ignoreCase) {
      if (ignoreCase) {
        return DataUtil.toLowerCase(actual) < DataUtil.toLowerCase(expected);
      }

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(actual)) {
        actual = undefined;
      }

      return actual < expected;
    },

    /**
     * Returns true when the actual input is greater than to the given input.
     *
     * @param {string|number|boolean} actual
     * @param {string|number|boolean} expected
     * @param {boolean} ignoreCase?
     * @param ignoreCase
     */
    greaterthan: function (actual, expected, ignoreCase) {
      if (ignoreCase) {
        return DataUtil.toLowerCase(actual) > DataUtil.toLowerCase(expected);
      }

      return actual > expected;
    },

    /**
     * Returns true when the actual input is less than or equal to the given input.
     *
     * @param {string|number|boolean} actual
     * @param {string|number|boolean} expected
     * @param {boolean} ignoreCase?
     * @param ignoreCase
     */
    lessthanorequal: function (actual, expected, ignoreCase) {
      if (ignoreCase) {
        return DataUtil.toLowerCase(actual) <= DataUtil.toLowerCase(expected);
      }

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(actual)) {
        actual = undefined;
      }

      return actual <= expected;
    },

    /**
     * Returns true when the actual input is greater than or equal to the given input.
     *
     * @param {string|number|boolean} actual
     * @param {string|number|boolean} expected
     * @param {boolean} ignoreCase?
     * @param ignoreCase
     */
    greaterthanorequal: function (actual, expected, ignoreCase) {
      if (ignoreCase) {
        return DataUtil.toLowerCase(actual) >= DataUtil.toLowerCase(expected);
      }

      return actual >= expected;
    },

    /**
     * Returns true when the actual input contains the given string.
     *
     * @param {string|number} actual
     * @param {string|number} expected
     * @param {boolean} ignoreCase?
     * @param ignoreCase
     * @param ignoreAccent
     */
    contains: function (actual, expected, ignoreCase, ignoreAccent) {
      if (ignoreAccent) {
        actual = DataUtil.ignoreDiacritics(actual);
        expected = DataUtil.ignoreDiacritics(expected);
      }

      if (ignoreCase) {
        return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(actual) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(expected) && DataUtil.toLowerCase(actual).indexOf(DataUtil.toLowerCase(expected)) !== -1;
      }

      return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(actual) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(expected) && actual.toString().indexOf(expected) !== -1;
    },

    /**
     * Returns true when the actual input not contains the given string.
     *
     * @param  {string|number} actual
     * @param  {string|number} expected
     * @param  {boolean} ignoreCase?
     */
    doesnotcontain: function (actual, expected, ignoreCase, ignoreAccent) {
      if (ignoreAccent) {
        actual = DataUtil.ignoreDiacritics(actual);
        expected = DataUtil.ignoreDiacritics(expected);
      }

      if (ignoreCase) {
        return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(actual) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(expected) && DataUtil.toLowerCase(actual).indexOf(DataUtil.toLowerCase(expected)) === -1;
      }

      return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(actual) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(expected) && actual.toString().indexOf(expected) === -1;
    },

    /**
     * Returns true when the given input value is not null.
     *
     * @param  {string|number} actual
     * @returns boolean
     */
    isnotnull: function (actual) {
      return actual !== null && actual !== undefined;
    },

    /**
     * Returns true when the given input value is null.
     *
     * @param  {string|number} actual
     * @returns boolean
     */
    isnull: function (actual) {
      return actual === null || actual === undefined;
    },

    /**
     * Returns true when the actual input starts with the given string
     *
     * @param {string} actual
     * @param {string} expected
     * @param {boolean} ignoreCase?
     * @param ignoreCase
     * @param ignoreAccent
     */
    startswith: function (actual, expected, ignoreCase, ignoreAccent) {
      if (ignoreAccent) {
        actual = DataUtil.ignoreDiacritics(actual);
        expected = DataUtil.ignoreDiacritics(expected);
      }

      if (ignoreCase) {
        return actual && expected && DataUtil.startsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));
      }

      return actual && expected && DataUtil.startsWith(actual, expected);
    },

    /**
     * Returns true when the actual input not starts with the given string
     *
     * @param  {string} actual
     * @param  {string} expected
     * @param  {boolean} ignoreCase?
     */
    doesnotstartwith: function (actual, expected, ignoreCase, ignoreAccent) {
      if (ignoreAccent) {
        actual = DataUtil.ignoreDiacritics(actual);
        expected = DataUtil.ignoreDiacritics(expected);
      }

      if (ignoreCase) {
        return actual && expected && DataUtil.notStartsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));
      }

      return actual && expected && DataUtil.notStartsWith(actual, expected);
    },

    /**
     * Returns true when the actual input like with the given string.
     *
     * @param  {string} actual
     * @param  {string} expected
     * @param  {boolean} ignoreCase?
     */
    like: function (actual, expected, ignoreCase, ignoreAccent) {
      if (ignoreAccent) {
        actual = DataUtil.ignoreDiacritics(actual);
        expected = DataUtil.ignoreDiacritics(expected);
      }

      if (ignoreCase) {
        return actual && expected && DataUtil.like(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));
      }

      return actual && expected && DataUtil.like(actual, expected);
    },

    /**
     * Returns true when the given input value is empty.
     *
     * @param  {string|number} actual
     * @returns boolean
     */
    isempty: function (actual) {
      return actual === undefined || actual === '';
    },

    /**
     * Returns true when the given input value is not empty.
     *
     * @param  {string|number} actual
     * @returns boolean
     */
    isnotempty: function (actual) {
      return actual !== undefined && actual !== '';
    },

    /**
     * Returns true when the actual input pattern(wildcard) matches with the given string.
     *
     * @param  {string|Date} actual
     * @param  {string} expected
     * @param  {boolean} ignoreCase?
     */
    wildcard: function (actual, expected, ignoreCase, ignoreAccent) {
      if (ignoreAccent) {
        actual = DataUtil.ignoreDiacritics(actual);
        expected = DataUtil.ignoreDiacritics(expected);
      }

      if (ignoreCase) {
        return (actual || typeof actual === 'boolean') && expected && typeof actual !== 'object' && DataUtil.wildCard(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));
      }

      return (actual || typeof actual === 'boolean') && expected && DataUtil.wildCard(actual, expected);
    },

    /**
     * Returns true when the actual input ends with the given string.
     *
     * @param {string} actual
     * @param {string} expected
     * @param {boolean} ignoreCase?
     * @param ignoreCase
     * @param ignoreAccent
     */
    endswith: function (actual, expected, ignoreCase, ignoreAccent) {
      if (ignoreAccent) {
        actual = DataUtil.ignoreDiacritics(actual);
        expected = DataUtil.ignoreDiacritics(expected);
      }

      if (ignoreCase) {
        return actual && expected && DataUtil.endsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));
      }

      return actual && expected && DataUtil.endsWith(actual, expected);
    },

    /**
     * Returns true when the actual input not ends with the given string.
     *
     * @param  {string} actual
     * @param  {string} expected
     * @param  {boolean} ignoreCase?
     */
    doesnotendwith: function (actual, expected, ignoreCase, ignoreAccent) {
      if (ignoreAccent) {
        actual = DataUtil.ignoreDiacritics(actual);
        expected = DataUtil.ignoreDiacritics(expected);
      }

      if (ignoreCase) {
        return actual && expected && DataUtil.notEndsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));
      }

      return actual && expected && DataUtil.notEndsWith(actual, expected);
    },

    /**
     * It will return the filter operator based on the filter symbol.
     *
     * @param  {string} operator
     * @hidden
     */
    processSymbols: function (operator) {
      var fnName = DataUtil.operatorSymbols[operator];

      if (fnName) {
        var fn = DataUtil.fnOperators[fnName];
        return fn;
      }

      return DataUtil.throwError('Query - Process Operator : Invalid operator');
    },

    /**
     * It will return the valid filter operator based on the specified operators.
     *
     * @param  {string} operator
     * @hidden
     */
    processOperator: function (operator) {
      var fn = DataUtil.fnOperators[operator];

      if (fn) {
        return fn;
      }

      return DataUtil.fnOperators.processSymbols(operator);
    }
  };
  /**
   * To perform the parse operation on JSON data, like convert to string from JSON or convert to JSON from string.
   */

  DataUtil.parse = {
    /**
     * Parse the given string to the plain JavaScript object.
     *
     * @param  {string|Object|Object[]} jsonText
     */
    parseJson: function (jsonText) {
      if (typeof jsonText === 'string') {
        jsonText = JSON.parse(jsonText, DataUtil.parse.jsonReviver);
      } else if (jsonText instanceof Array) {
        DataUtil.parse.iterateAndReviveArray(jsonText);
      } else if (typeof jsonText === 'object' && jsonText !== null) {
        DataUtil.parse.iterateAndReviveJson(jsonText);
      }

      return jsonText;
    },

    /**
     * It will perform on array of values.
     *
     * @param  {string[]|Object[]} array
     * @hidden
     */
    iterateAndReviveArray: function (array) {
      for (var i = 0; i < array.length; i++) {
        if (typeof array[i] === 'object' && array[i] !== null) {
          DataUtil.parse.iterateAndReviveJson(array[i]); // eslint-disable-next-line no-useless-escape
        } else if (typeof array[i] === 'string' && !/^[\s]*\[|^[\s]*\{(.)+:|\"/g.test(array[i])) {
          array[i] = DataUtil.parse.jsonReviver('', array[i]);
        } else {
          array[i] = DataUtil.parse.parseJson(array[i]);
        }
      }
    },

    /**
     * It will perform on JSON values
     *
     * @param  {JSON} json
     * @hidden
     */
    iterateAndReviveJson: function (json) {
      var value;
      var keys = Object.keys(json);

      for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
        var prop = keys_2[_i];

        if (DataUtil.startsWith(prop, '__')) {
          continue;
        }

        value = json[prop];

        if (typeof value === 'object') {
          if (value instanceof Array) {
            DataUtil.parse.iterateAndReviveArray(value);
          } else if (value) {
            DataUtil.parse.iterateAndReviveJson(value);
          }
        } else {
          json[prop] = DataUtil.parse.jsonReviver(json[prop], value);
        }
      }
    },

    /**
     * It will perform on JSON values
     *
     * @param  {string} field
     * @param  {string|Date} value
     * @hidden
     */
    jsonReviver: function (field, value) {
      if (typeof value === 'string') {
        // eslint-disable-next-line security/detect-unsafe-regex
        var ms = /^\/Date\(([+-]?[0-9]+)([+-][0-9]{4})?\)\/$/.exec(value);
        var offSet = DataUtil.timeZoneHandling ? DataUtil.serverTimezoneOffset : null;

        if (ms) {
          return DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), offSet, true); // eslint-disable-next-line no-useless-escape, security/detect-unsafe-regex
        } else if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*){1})([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(value)) {
          var isUTC = value.indexOf('Z') > -1 || value.indexOf('z') > -1;
          var arr = value.split(/[^0-9.]/);

          if (isUTC) {
            if (arr[5].indexOf('.') > -1) {
              var secondsMs = arr[5].split('.');
              arr[5] = secondsMs[0];
              arr[6] = new Date(value).getUTCMilliseconds().toString();
            } else {
              arr[6] = '00';
            }

            value = DataUtil.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5] ? arr[5] : '00', 10), parseInt(arr[6], 10)), DataUtil.serverTimezoneOffset, false);
          } else {
            var utcFormat = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5] ? arr[5] : '00', 10));
            var hrs = parseInt(arr[6], 10);
            var mins = parseInt(arr[7], 10);

            if (isNaN(hrs) && isNaN(mins)) {
              return utcFormat;
            }

            if (value.indexOf('+') > -1) {
              utcFormat.setHours(utcFormat.getHours() - hrs, utcFormat.getMinutes() - mins);
            } else {
              utcFormat.setHours(utcFormat.getHours() + hrs, utcFormat.getMinutes() + mins);
            }

            value = DataUtil.dateParse.toTimeZone(utcFormat, DataUtil.serverTimezoneOffset, false);
          }

          if (DataUtil.serverTimezoneOffset == null) {
            value = DataUtil.dateParse.addSelfOffset(value);
          }
        } else if (/^\d{4}-\d{2}-\d{2}$/.test(value)) {
          var arr = value.split(/[^0-9.]/);
          return new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10));
        }
      }

      return value;
    },

    /**
     * Check wheather the given value is JSON or not.
     *
     * @param  {Object[]} jsonData
     */
    isJson: function (jsonData) {
      if (typeof jsonData[0] === 'string') {
        return jsonData;
      }

      return DataUtil.parse.parseJson(jsonData);
    },

    /**
     * Checks wheather the given value is GUID or not.
     *
     * @param  {string} value
     */
    isGuid: function (value) {
      // eslint-disable-next-line security/detect-unsafe-regex
      var regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;
      var match = regex.exec(value);
      return match != null;
    },

    /**
     * The method used to replace the value based on the type.
     *
     * @param  {Object} value
     * @param  {boolean} stringify
     * @hidden
     */
    replacer: function (value, stringify) {
      if (DataUtil.isPlainObject(value)) {
        return DataUtil.parse.jsonReplacer(value, stringify);
      }

      if (value instanceof Array) {
        return DataUtil.parse.arrayReplacer(value);
      }

      if (value instanceof Date) {
        return DataUtil.parse.jsonReplacer({
          val: value
        }, stringify).val;
      }

      return value;
    },

    /**
     * It will replace the JSON value.
     *
     * @param {string} key
     * @param {Object} val
     * @param stringify
     * @hidden
     */
    jsonReplacer: function (val, stringify) {
      var value;
      var keys = Object.keys(val);

      for (var _i = 0, keys_3 = keys; _i < keys_3.length; _i++) {
        var prop = keys_3[_i];
        value = val[prop];

        if (!(value instanceof Date)) {
          continue;
        }

        var d = value;

        if (DataUtil.serverTimezoneOffset == null) {
          val[prop] = DataUtil.dateParse.toTimeZone(d, null).toJSON();
        } else {
          d = new Date(+d + DataUtil.serverTimezoneOffset * 3600000);
          val[prop] = DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(d), null).toJSON();
        }
      }

      return val;
    },

    /**
     * It will replace the Array of value.
     *
     * @param  {string} key
     * @param  {Object[]} val
     * @hidden
     */
    arrayReplacer: function (val) {
      for (var i = 0; i < val.length; i++) {
        if (DataUtil.isPlainObject(val[i])) {
          val[i] = DataUtil.parse.jsonReplacer(val[i]);
        } else if (val[i] instanceof Date) {
          val[i] = DataUtil.parse.jsonReplacer({
            date: val[i]
          }).date;
        }
      }

      return val;
    },

    /**
     * It will replace the Date object with respective to UTC format value.
     *
     * @param  {string} key
     * @param  {any} value
     * @hidden
     */

    /* eslint-disable @typescript-eslint/no-explicit-any */

    /* tslint:disable-next-line:no-any */
    jsonDateReplacer: function (key, value) {
      /* eslint-enable @typescript-eslint/no-explicit-any */
      if (key === 'value' && value) {
        if (typeof value === 'string') {
          // eslint-disable-next-line security/detect-unsafe-regex
          var ms = /^\/Date\(([+-]?[0-9]+)([+-][0-9]{4})?\)\/$/.exec(value);

          if (ms) {
            value = DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), null, true); // eslint-disable-next-line no-useless-escape, security/detect-unsafe-regex
          } else if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*){1})([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(value)) {
            var arr = value.split(/[^0-9]/);
            value = DataUtil.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), null, true);
          }
        }

        if (value instanceof Date) {
          value = DataUtil.dateParse.addSelfOffset(value);

          if (DataUtil.serverTimezoneOffset === null) {
            return DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(value), null).toJSON();
          } else {
            value = DataUtil.dateParse.toTimeZone(value, value.getTimezoneOffset() / 60 * 2 - DataUtil.serverTimezoneOffset, false);
            return value.toJSON();
          }
        }
      }

      return value;
    }
  };
  /**
   * @hidden
   */

  DataUtil.dateParse = {
    addSelfOffset: function (input) {
      return new Date(+input - input.getTimezoneOffset() * 60000);
    },
    toUTC: function (input) {
      return new Date(+input + input.getTimezoneOffset() * 60000);
    },
    toTimeZone: function (input, offset, utc) {
      if (offset === null) {
        return input;
      }

      var unix = utc ? DataUtil.dateParse.toUTC(input) : input;
      return new Date(+unix - offset * 3600000);
    },
    toLocalTime: function (input) {
      var datefn = input;
      var timeZone = -datefn.getTimezoneOffset();
      var differenceString = timeZone >= 0 ? '+' : '-';

      var localtimefn = function (num) {
        var norm = Math.floor(Math.abs(num));
        return (norm < 10 ? '0' : '') + norm;
      };

      var val = datefn.getFullYear() + '-' + localtimefn(datefn.getMonth() + 1) + '-' + localtimefn(datefn.getDate()) + 'T' + localtimefn(datefn.getHours()) + ':' + localtimefn(datefn.getMinutes()) + ':' + localtimefn(datefn.getSeconds()) + differenceString + localtimefn(timeZone / 60) + ':' + localtimefn(timeZone % 60);
      return val;
    }
  };
  return DataUtil;
}();



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/index.js ***!
  \******************************************************/
/*! exports provided: NumericTextBox, regularExpressions, createMask, applyMask, wireEvents, unwireEvents, bindClearEvent, unstrippedValue, strippedValue, maskInputMouseDownHandler, maskInputMouseUpHandler, maskInputFocusHandler, triggerFocus, escapeRegExp, maskInputBlurHandler, maskInputDropHandler, mobileRemoveFunction, setMaskValue, setElementValue, maskInput, getVal, getMaskedVal, MaskUndo, MaskedTextBox, Input, TicksData, ColorRangeData, LimitData, TooltipData, Slider, regex, ErrorOption, FormValidator, FilesProp, ButtonsProps, AsyncSettings, Uploader, ColorPicker, TextBox, Signature, LabelPosition, PrecisionType, Rating, SignatureBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/index */ "./node_modules/@syncfusion/ej2-inputs/src/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NumericTextBox", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["NumericTextBox"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "regularExpressions", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["regularExpressions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createMask", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["createMask"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "applyMask", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["applyMask"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "wireEvents", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["wireEvents"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unwireEvents", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["unwireEvents"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "bindClearEvent", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["bindClearEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unstrippedValue", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["unstrippedValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "strippedValue", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["strippedValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInputMouseDownHandler", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["maskInputMouseDownHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInputMouseUpHandler", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["maskInputMouseUpHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInputFocusHandler", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["maskInputFocusHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "triggerFocus", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["triggerFocus"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "escapeRegExp", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["escapeRegExp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInputBlurHandler", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["maskInputBlurHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInputDropHandler", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["maskInputDropHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mobileRemoveFunction", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["mobileRemoveFunction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setMaskValue", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["setMaskValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setElementValue", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["setElementValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInput", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["maskInput"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getVal", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["getVal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getMaskedVal", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["getMaskedVal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MaskUndo", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["MaskUndo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MaskedTextBox", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["MaskedTextBox"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Input", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Input"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TicksData", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["TicksData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ColorRangeData", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["ColorRangeData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LimitData", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["LimitData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TooltipData", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["TooltipData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Slider", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Slider"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "regex", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["regex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ErrorOption", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["ErrorOption"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FormValidator", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["FormValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FilesProp", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["FilesProp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtonsProps", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["ButtonsProps"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AsyncSettings", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["AsyncSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Uploader", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Uploader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ColorPicker", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["ColorPicker"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TextBox", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["TextBox"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Signature", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Signature"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LabelPosition", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["LabelPosition"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PrecisionType", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["PrecisionType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Rating", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Rating"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SignatureBase", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["SignatureBase"]; });

/**
 * index
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/color-picker/color-picker.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/color-picker/color-picker.js ***!
  \******************************************************************************/
/*! exports provided: ColorPicker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColorPicker", function() { return ColorPicker; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-splitbuttons */ "./node_modules/@syncfusion/ej2-splitbuttons/index.js");
/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-popups */ "./node_modules/@syncfusion/ej2-popups/index.js");
/* harmony import */ var _input_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../input/index */ "./node_modules/@syncfusion/ej2-inputs/src/input/index.js");
/* harmony import */ var _numerictextbox_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../numerictextbox/index */ "./node_modules/@syncfusion/ej2-inputs/src/numerictextbox/index.js");
/* harmony import */ var _slider_slider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../slider/slider */ "./node_modules/@syncfusion/ej2-inputs/src/slider/slider.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/* eslint-disable prefer-spread */












var APPLY = 'e-apply';
var CANCEL = 'e-cancel';
var CURRENT = 'e-current';
var CONTAINER = 'e-container';
var CTRLBTN = 'e-ctrl-btn';
var CTRLSWITCH = 'e-switch-ctrl-btn';
var DISABLED = 'e-disabled';
var FORMATSWITCH = 'e-value-switch-btn';
var HANDLER = 'e-handler';
var HEX = 'e-hex';
var HIDEHEX = 'e-hide-hex-value';
var HIDEOPACITY = 'e-hide-opacity';
var HIDERGBA = 'e-hide-switchable-value';
var HIDEVALUE = 'e-hide-value';
var HIDEVALUESWITCH = 'e-hide-valueswitcher';
var HSVAREA = 'e-hsv-color';
var HSVCONTAINER = 'e-hsv-container';
var INPUTWRAPPER = 'e-selected-value';
var MODESWITCH = 'e-mode-switch-btn';
var NOCOLOR = 'e-nocolor-item';
var OPACITY = 'e-opacity-value';
var PALETTES = 'e-palette';
var PALETTECONTENT = 'e-color-palette';
var PICKERCONTENT = 'e-color-picker';
var PREVIEW = 'e-preview-container';
var PREVIOUS = 'e-previous';
var RTL = 'e-rtl';
var SHOWVALUE = 'e-show-value';
var SELECT = 'e-selected';
var SPLITPREVIEW = 'e-split-preview';
var TILE = 'e-tile';
var presets = {
  default: ['#000000', '#f44336', '#e91e63', '#9c27b0', '#673ab7', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#ffeb3b', '#ffffff', '#ffebee', '#fce4ec', '#f3e5f5', '#ede7f6', '#e3f2fd', '#e1f5fe', '#e0f7fa', '#e0f2f1', '#fffde7', '#f2f2f2', '#ffcdd2', '#f8bbd0', '#e1bee7', '#d1c4e9', '#bbdefb', '#b3e5fc', '#b2ebf2', '#b2dfdb', '#fff9c4', '#e6e6e6', '#ef9a9a', '#f48fb1', '#ce93d8', '#b39ddb', '#90caf9', '#81d4fa', '#80deea', '#80cbc4', '#fff59d', '#cccccc', '#e57373', '#f06292', '#ba68c8', '#9575cd', '#64b5f6', '#4fc3f7', '#4dd0e1', '#4db6ac', '#fff176', '#b3b3b3', '#ef5350', '#ec407a', '#ab47bc', '#7e57c2', '#42a5f5', '#29b6f6', '#26c6da', '#26a69a', '#ffee58', '#999999', '#e53935', '#d81b60', '#8e24aa', '#5e35b1', '#1e88e5', '#039be5', '#00acc1', '#00897b', '#fdd835', '#808080', '#d32f2f', '#c2185b', '#7b1fa2', '#512da8', '#1976d2', '#0288d1', '#0097a7', '#00796b', '#fbc02d', '#666666', '#c62828', '#ad1457', '#6a1b9a', '#4527a0', '#1565c0', '#0277bd', '#00838f', '#00695c', '#f9a825', '#4d4d4d', '#b71c1c', '#880e4f', '#4a148c', '#311b92', '#0d47a1', '#01579b', '#006064', '#004d40', '#f57f17']
};
/**
 * ColorPicker component is a user interface to select and adjust color values. It provides supports for various
 * color specification like Red Green Blue, Hue Saturation Value and Hex codes.
 * ```html
 * <input type="color" id="color-picker">
 * ```
 * ```typescript
 * <script>
 *   let colorPickerObj: ColorPicker = new ColorPicker(null , "#color-picker");
 * </script>
 * ```
 */

var ColorPicker =
/** @class */
function (_super) {
  __extends(ColorPicker, _super);

  function ColorPicker(options, element) {
    return _super.call(this, options, element) || this;
  }

  ColorPicker.prototype.preRender = function () {
    var ele = this.element;
    this.formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');

    if (this.formElement) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.formElement, 'reset', this.formResetHandler, this);
    }

    var localeText = {
      Apply: 'Apply',
      Cancel: 'Cancel',
      ModeSwitcher: 'Switch Mode'
    };
    this.l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"]('colorpicker', localeText, this.locale);

    if (ele.getAttribute('ejs-for') && !ele.getAttribute('name')) {
      ele.setAttribute('name', ele.id);
    }
  };
  /**
   * To Initialize the component rendering
   *
   * @private
   * @returns {void}
   */


  ColorPicker.prototype.render = function () {
    this.initWrapper();

    if (this.inline) {
      this.createWidget();
    } else {
      this.createSplitBtn();
    }

    if (!this.enableOpacity) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.container.parentElement], HIDEOPACITY);
    }

    this.renderComplete();
  };

  ColorPicker.prototype.initWrapper = function () {
    var wrapper = this.createElement('div', {
      className: 'e-' + this.getModuleName() + '-wrapper'
    });
    this.element.parentNode.insertBefore(wrapper, this.element);
    wrapper.appendChild(this.element);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
      'tabindex': '-1',
      'spellcheck': 'false',
      'aria-label': 'colorpicker'
    });
    this.container = this.createElement('div', {
      className: CONTAINER
    });
    this.getWrapper().appendChild(this.container);
    var value = this.value ? this.roundValue(this.value).toLowerCase() : '#008000ff';

    if (this.noColor && this.mode === 'Palette' && this.value === '') {
      value = '';
    }

    var slicedValue = value.slice(0, 7);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.initialInputValue)) {
      this.initialInputValue = slicedValue;
    }

    this.element.value = slicedValue;

    if (this.enableOpacity) {
      this.setProperties({
        'value': value
      }, true);
    } else {
      this.setProperties({
        'value': slicedValue
      }, true);
    }

    if (this.enableRtl) {
      wrapper.classList.add(RTL);
    }

    if (this.cssClass) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([wrapper], this.cssClass.replace(/\s+/g, ' ').trim().split(' '));
    }

    this.tileRipple = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(this.container, {
      selector: '.' + TILE
    });
    this.ctrlBtnRipple = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(this.container, {
      selector: '.e-btn'
    });
  };

  ColorPicker.prototype.getWrapper = function () {
    return this.element.parentElement;
  };

  ColorPicker.prototype.createWidget = function () {
    if (this.mode === 'Palette') {
      this.createPalette();

      if (!this.inline) {
        this.firstPaletteFocus();
      }
    } else {
      this.createPicker();

      if (!this.inline) {
        this.getDragHandler().focus();
      }
    }

    this.isRgb = true;
    this.createInput();
    this.createCtrlBtn();

    if (!this.disabled) {
      this.wireEvents();
    }

    if (this.inline && this.disabled) {
      this.toggleDisabled(true);
    }

    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
      this.refreshPopupPos();
    }
  };

  ColorPicker.prototype.createSplitBtn = function () {
    var _this = this;

    var splitButton = this.createElement('button', {
      className: 'e-split-colorpicker'
    });
    this.getWrapper().appendChild(splitButton);
    this.splitBtn = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__["SplitButton"]({
      iconCss: 'e-selected-color',
      target: this.container,
      disabled: this.disabled,
      enableRtl: this.enableRtl,
      createPopupOnClick: this.createPopupOnClick,
      open: this.onOpen.bind(this),
      click: function () {
        _this.trigger('change', {
          currentValue: {
            hex: _this.value.slice(0, 7),
            rgba: _this.convertToRgbString(_this.hexToRgb(_this.value))
          },
          previousValue: {
            hex: null,
            rgba: null
          },
          value: _this.value
        });
      }
    });
    this.splitBtn.createElement = this.createElement;
    this.splitBtn.appendTo(splitButton);
    var preview = this.createElement('span', {
      className: SPLITPREVIEW
    });
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-selected-color', splitButton).appendChild(preview);
    preview.style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
    var popupEle = this.getPopupEle();
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([popupEle], 'e-colorpicker-popup');

    if (this.cssClass) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([popupEle], this.cssClass.replace(/\s+/g, ' ').trim().split(' '));
    }

    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
      var popupInst = this.getPopupInst();
      popupInst.relateTo = document.body;
      popupInst.position = {
        X: 'center',
        Y: 'center'
      };
      popupInst.targetType = 'container';
      popupInst.collision = {
        X: 'fit',
        Y: 'fit'
      };
      popupInst.offsetY = 4;
      popupEle.style.zIndex = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["getZindexPartial"])(this.splitBtn.element).toString();
    }

    this.bindCallBackEvent();
  };

  ColorPicker.prototype.onOpen = function () {
    this.trigger('open', {
      element: this.container
    });

    if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
      var popupInst = this.getPopupInst();
      var collision = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["isCollide"])(popupInst.element);

      if (collision.length > 0) {
        popupInst.collision = {
          X: 'flip',
          Y: 'fit'
        };
        popupInst.position = {
          X: 'right',
          Y: 'bottom'
        };
        popupInst.targetType = 'container';
      }
    }
  };

  ColorPicker.prototype.getPopupInst = function () {
    return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(this.getPopupEle(), _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["Popup"]);
  };

  ColorPicker.prototype.bindCallBackEvent = function () {
    var _this = this;

    this.splitBtn.beforeOpen = function (args) {
      var callBackPromise = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__["Deferred"]();

      _this.trigger('beforeOpen', args, function (observeOpenArgs) {
        if (!observeOpenArgs.cancel) {
          var popupEle = _this.getPopupEle();

          popupEle.style.top = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(0 + pageYOffset);
          popupEle.style.left = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(0 + pageXOffset);
          popupEle.style.display = 'block';

          _this.createWidget();

          popupEle.style.display = '';

          if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
            _this.modal = _this.createElement('div');
            _this.modal.className = 'e-' + _this.getModuleName() + ' e-modal';
            _this.modal.style.display = 'none';
            document.body.insertBefore(_this.modal, popupEle);
            document.body.className += ' e-colorpicker-overflow';
            _this.modal.style.display = 'block';
            _this.modal.style.zIndex = (Number(popupEle.style.zIndex) - 1).toString();
          }
        }

        args.cancel = observeOpenArgs.cancel;
        callBackPromise.resolve(observeOpenArgs);
      });

      return callBackPromise;
    };

    this.splitBtn.beforeClose = function (args) {
      var callBackPromise = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__["Deferred"]();

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.event)) {
        var beforeCloseArgs = {
          element: _this.container,
          event: args.event,
          cancel: false
        };

        _this.trigger('beforeClose', beforeCloseArgs, function (observedCloseArgs) {
          if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && args.event.target === _this.modal) {
            observedCloseArgs.cancel = true;
          }

          if (!observedCloseArgs.cancel) {
            _this.onPopupClose();
          }

          args.cancel = observedCloseArgs.cancel;
          callBackPromise.resolve(observedCloseArgs);
        });
      } else {
        callBackPromise.resolve(args);
      }

      return callBackPromise;
    };
  };

  ColorPicker.prototype.onPopupClose = function () {
    this.unWireEvents();
    this.destroyOtherComp();
    this.container.style.width = '';
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + SPLITPREVIEW, this.splitBtn.element).style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
    this.container.innerHTML = '';
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.container], [PICKERCONTENT, PALETTECONTENT]);

    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && this.modal) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([document.body], 'e-colorpicker-overflow');
      this.modal.style.display = 'none';
      this.modal.outerHTML = '';
      this.modal = null;
    }
  };

  ColorPicker.prototype.createPalette = function () {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(this.container, [PALETTECONTENT], [PICKERCONTENT]);

    if (this.presetColors) {
      var paletteGroup = this.createElement('div', {
        className: 'e-custom-palette'
      });
      this.appendElement(paletteGroup);
      var keys = Object.keys(this.presetColors);

      if (keys.length === 1) {
        this.appendPalette(this.presetColors[keys[0]], keys[0], paletteGroup);
      } else {
        for (var i = 0, len = keys.length; i < len; i++) {
          this.appendPalette(this.presetColors[keys[i]], keys[i], paletteGroup);
        }
      }

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.e-row', paletteGroup).length > 10) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([paletteGroup], 'e-palette-group');
      }
    } else {
      this.appendPalette(presets.default, 'default');
    }

    if (this.mode === 'Palette' && !this.modeSwitcher && this.noColor) {
      this.setNoColor();
    }

    var width = parseInt(getComputedStyle(this.container).borderBottomWidth, 10);
    this.container.style.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.container.children[0].offsetWidth + width + width);
    this.rgb = this.hexToRgb(this.roundValue(this.value));
    this.hsv = this.rgbToHsv.apply(this, this.rgb);
  };

  ColorPicker.prototype.firstPaletteFocus = function () {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + SELECT, this.container.children[0])) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + PALETTES, this.container)[0].focus();
    }
  };

  ColorPicker.prototype.appendPalette = function (colors, key, refEle) {
    var palette = this.createElement('div', {
      className: PALETTES,
      attrs: {
        'tabindex': '0',
        'role': 'grid'
      }
    });

    if (refEle) {
      refEle.appendChild(palette);
    } else {
      this.appendElement(palette);
    }

    var row;
    var tile;
    var roundedColor;

    for (var i = 0, len = colors.length; i < len; i++) {
      if (i === 0 || i % this.columns === 0) {
        row = this.createElement('div', {
          className: 'e-row',
          attrs: {
            'role': 'row'
          }
        });
        palette.appendChild(row);
      }

      roundedColor = this.roundValue(colors[i]).toLowerCase();
      tile = this.createElement('span', {
        className: TILE,
        attrs: {
          'role': 'gridcell',
          'aria-label': roundedColor,
          'aria-selected': 'false',
          'tabindex': '0'
        }
      });
      this.trigger('beforeTileRender', {
        element: tile,
        presetName: key,
        value: colors[i]
      });
      row.appendChild(tile);

      if (this.value === roundedColor) {
        this.addTileSelection(tile);
        palette.focus();
      }

      tile.style.backgroundColor = this.convertToRgbString(this.hexToRgb(roundedColor));
    }
  };

  ColorPicker.prototype.setNoColor = function () {
    var noColorEle = this.container.querySelector('.e-row').children[0];
    noColorEle.classList.add(NOCOLOR);

    if (!this.value) {
      noColorEle.classList.add(SELECT);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(noColorEle, '.' + PALETTES).focus();
    }

    ['aria-selected', 'aria-label'].forEach(function (attr) {
      noColorEle.removeAttribute(attr);
    });
    noColorEle.style.backgroundColor = '';
  };

  ColorPicker.prototype.appendElement = function (ele, insertPos) {
    if (insertPos === void 0) {
      insertPos = 0;
    }

    var refEle = this.container.children[insertPos];

    if (refEle) {
      this.container.insertBefore(ele, refEle);
    } else {
      this.container.appendChild(ele);
    }
  };

  ColorPicker.prototype.addTileSelection = function (ele) {
    ele.classList.add(SELECT);
    ele.setAttribute('aria-selected', 'true');
  };

  ColorPicker.prototype.createPicker = function () {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(this.container, [PICKERCONTENT], [PALETTECONTENT]);
    var hsvContainer = this.createElement('div', {
      className: HSVCONTAINER
    });
    this.appendElement(hsvContainer);
    hsvContainer.appendChild(this.createElement('div', {
      className: HSVAREA
    }));
    var dragHandler = this.createElement('span', {
      className: HANDLER,
      attrs: {
        'tabindex': '0'
      }
    });
    hsvContainer.appendChild(dragHandler);

    if (this.value === null || this.value === '') {
      this.value = '#008000ff';
    }

    this.rgb = this.hexToRgb(this.value);
    this.hsv = this.rgbToHsv.apply(this, this.rgb);
    this.setHsvContainerBg();
    this.setHandlerPosition();
    this.createSlider();
    this.createDragTooltip();
  };

  ColorPicker.prototype.setHsvContainerBg = function (h) {
    if (h === void 0) {
      h = this.hsv[0];
    }

    this.getHsvContainer().style.backgroundColor = this.convertToRgbString(this.hsvToRgb(h, 100, 100, 1));
  };

  ColorPicker.prototype.getHsvContainer = function () {
    return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + HSVCONTAINER, this.container);
  };

  ColorPicker.prototype.setHandlerPosition = function () {
    var dragHandler = this.getDragHandler();
    var hsvArea = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + HSVAREA, this.container);

    if (this.enableRtl) {
      dragHandler.style.left = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(hsvArea.offsetWidth * Math.abs(100 - this.hsv[1]) / 100);
    } else {
      dragHandler.style.left = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(hsvArea.offsetWidth * this.hsv[1] / 100);
    }

    dragHandler.style.top = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(hsvArea.offsetHeight * (100 - this.hsv[2]) / 100);
  };

  ColorPicker.prototype.createSlider = function () {
    var sliderPreviewWrapper = this.createElement('div', {
      className: 'e-slider-preview'
    });
    this.appendElement(sliderPreviewWrapper, 1);
    this.createPreview(sliderPreviewWrapper);
    var sliderWrapper = this.createElement('div', {
      className: 'e-colorpicker-slider'
    });
    sliderPreviewWrapper.insertBefore(sliderWrapper, sliderPreviewWrapper.children[0]);
    var slider = this.createElement('div', {
      className: 'e-hue-slider'
    });
    sliderWrapper.appendChild(slider);
    this.hueSlider = new _slider_slider__WEBPACK_IMPORTED_MODULE_5__["Slider"]({
      value: this.hsv[0],
      min: 0,
      max: 359,
      enableRtl: this.enableRtl,
      enabled: !this.disabled,
      change: this.hueChange.bind(this)
    });
    this.hueSlider.createElement = this.createElement;
    this.hueSlider.appendTo(slider);

    if (this.enableOpacity) {
      slider = this.createElement('div', {
        className: 'e-opacity-slider'
      });
      sliderWrapper.appendChild(slider);
      this.createOpacitySlider(slider);
    }
  };

  ColorPicker.prototype.createOpacitySlider = function (slider) {
    this.opacitySlider = new _slider_slider__WEBPACK_IMPORTED_MODULE_5__["Slider"]({
      value: this.rgb[3] * 100,
      min: 0,
      max: 100,
      enableRtl: this.enableRtl,
      enabled: !this.disabled,
      change: this.opacityChange.bind(this)
    });
    this.opacitySlider.createElement = this.createElement;
    this.opacitySlider.appendTo(slider);
    var opacityBgTrack = this.createElement('div', {
      className: 'e-opacity-empty-track'
    });
    slider.appendChild(opacityBgTrack);
    this.updateOpacitySliderBg();
  };

  ColorPicker.prototype.updateOpacitySliderBg = function () {
    var direction = this.enableRtl ? 'to left' : 'to right';
    var opacityEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-opacity-empty-track', this.opacitySlider.element);

    if (opacityEle) {
      opacityEle.style.background = 'linear-gradient(' + direction + ', rgba(' + this.rgb.slice(0, 3) + ', 0) 0%, ' + this.convertToRgbString(this.rgb.slice(0, 3)) + ' 100%)';
    }
  };

  ColorPicker.prototype.hueChange = function (args) {
    this.hsv[0] = args.value;
    this.setHsvContainerBg();
    this.convertToOtherFormat();
  };

  ColorPicker.prototype.opacityChange = function (args) {
    var value = args.value;
    var pValue = this.rgbToHex(this.rgb);
    this.hsv[3] = value / 100;
    this.rgb[3] = value / 100;
    var cValue = this.rgbToHex(this.rgb);
    this.updateOpacityInput(value);
    var rgb = this.convertToRgbString(this.rgb);
    this.updatePreview(rgb);
    this.triggerEvent(cValue, pValue, rgb);
  };

  ColorPicker.prototype.updateOpacityInput = function (value) {
    if (this.enableOpacity && !this.getWrapper().classList.contains(HIDEVALUE)) {
      var opacityTextBoxInst = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + OPACITY, this.container), _numerictextbox_index__WEBPACK_IMPORTED_MODULE_4__["NumericTextBox"]);
      opacityTextBoxInst.value = value;
      opacityTextBoxInst.dataBind();
    }
  };

  ColorPicker.prototype.createPreview = function (parentEle) {
    var previewContainer = this.createElement('div', {
      className: PREVIEW
    });
    parentEle.appendChild(previewContainer);
    var preview = this.createElement('span', {
      className: 'e-preview ' + CURRENT
    });
    previewContainer.appendChild(preview);
    var colorValue = this.convertToRgbString(this.rgb);
    preview.style.backgroundColor = colorValue;
    preview = this.createElement('span', {
      className: 'e-preview ' + PREVIOUS
    });
    previewContainer.appendChild(preview);
    preview.style.backgroundColor = colorValue;
  };

  ColorPicker.prototype.isPicker = function () {
    return !this.container.classList.contains(PALETTECONTENT);
  };

  ColorPicker.prototype.getPopupEle = function () {
    return this.container.parentElement;
  };

  ColorPicker.prototype.createNumericInput = function (element, value, label, max) {
    var _this = this;

    var numericInput = new _numerictextbox_index__WEBPACK_IMPORTED_MODULE_4__["NumericTextBox"]({
      value: value,
      placeholder: label,
      min: 0,
      max: max,
      format: '###.##',
      showSpinButton: false,
      floatLabelType: 'Always',
      enableRtl: this.enableRtl,
      enabled: !this.disabled,
      readonly: this.isPicker() ? false : true,
      change: function (args) {
        if (args.event) {
          _this.inputHandler(args.event);
        }
      }
    });
    numericInput.createElement = this.createElement;
    numericInput.appendTo(element);
  };

  ColorPicker.prototype.createInput = function () {
    var isPicker = this.isPicker();
    var wrapper = this.getWrapper();

    if (isPicker && !wrapper.classList.contains(HIDEVALUE) || !isPicker && wrapper.classList.contains(SHOWVALUE)) {
      var inputWrap = this.createElement('div', {
        className: INPUTWRAPPER
      });

      if (isPicker) {
        this.appendElement(inputWrap, 2);
      } else {
        this.appendElement(inputWrap, 1);
      }

      var container = this.createElement('div', {
        className: 'e-input-container'
      });
      inputWrap.appendChild(container);

      if (!wrapper.classList.contains(HIDEVALUESWITCH)) {
        this.appendValueSwitchBtn(inputWrap);
      }

      if (!wrapper.classList.contains(HIDEHEX)) {
        var hexInput = this.createElement('input', {
          className: HEX,
          attrs: {
            'maxlength': '7',
            'spellcheck': 'false',
            'aria-label': 'HEX'
          }
        });
        container.appendChild(hexInput);
        _input_index__WEBPACK_IMPORTED_MODULE_3__["Input"].createInput({
          element: hexInput,
          floatLabelType: 'Always',
          properties: {
            placeholder: 'HEX',
            enableRtl: this.enableRtl,
            enabled: !this.disabled,
            readonly: this.isPicker() ? false : true
          }
        }, this.createElement);
        _input_index__WEBPACK_IMPORTED_MODULE_3__["Input"].setValue(this.value.slice(0, 7), hexInput);
        hexInput.addEventListener('input', this.inputHandler.bind(this));
      }

      if (!wrapper.classList.contains(HIDERGBA)) {
        var label = void 0;
        var value = void 0;

        if (this.isRgb) {
          label = 'RGB';
          value = this.rgb;
        } else {
          label = 'HSV';
          value = this.hsv;
        }

        var clsName = ['rh', 'gs', 'bv'];

        for (var i = 0; i < 3; i++) {
          this.createNumericInput(container.appendChild(this.createElement('input', {
            className: 'e-' + clsName[i] + '-value'
          })), value[i], label[i], 255);
        }

        if (this.enableOpacity) {
          this.appendOpacityValue(container);
        }
      }
    }
  };

  ColorPicker.prototype.appendOpacityValue = function (container) {
    this.createNumericInput(container.appendChild(this.createElement('input', {
      className: OPACITY
    })), this.rgb[3] * 100, 'A', 100);
  };

  ColorPicker.prototype.appendValueSwitchBtn = function (targetEle) {
    var valueSwitchBtn = this.createElement('button', {
      className: 'e-icons e-css e-btn e-flat e-icon-btn ' + FORMATSWITCH,
      attrs: {
        'title': 'Toggle format'
      }
    });
    targetEle.appendChild(valueSwitchBtn);

    if (this.isPicker() && !this.getWrapper().classList.contains(HIDERGBA)) {
      valueSwitchBtn.addEventListener('click', this.formatSwitchHandler.bind(this));
    }
  };

  ColorPicker.prototype.createCtrlBtn = function () {
    if (this.modeSwitcher || this.showButtons) {
      this.l10n.setLocale(this.locale);
      var btnWrapper = this.createElement('div', {
        className: CTRLSWITCH
      });
      this.container.appendChild(btnWrapper);

      if (this.showButtons) {
        var controlBtnWrapper = this.createElement('div', {
          className: CTRLBTN
        });
        btnWrapper.appendChild(controlBtnWrapper);
        var apply = this.l10n.getConstant('Apply');
        controlBtnWrapper.appendChild(this.createElement('button', {
          innerHTML: apply,
          className: 'e-btn e-css e-flat e-primary e-small ' + APPLY,
          attrs: {
            'title': apply
          }
        }));
        var cancel = this.l10n.getConstant('Cancel');
        controlBtnWrapper.appendChild(this.createElement('button', {
          innerHTML: cancel,
          className: 'e-btn e-css e-flat e-small ' + CANCEL,
          attrs: {
            'title': cancel
          }
        }));
      }

      if (this.modeSwitcher) {
        this.appendModeSwitchBtn();
      }
    }
  };

  ColorPicker.prototype.appendModeSwitchBtn = function () {
    var modeSwitcher = this.createElement('button', {
      className: 'e-icons e-btn e-flat e-icon-btn ' + MODESWITCH,
      attrs: {
        title: this.l10n.getConstant('ModeSwitcher')
      }
    });
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CTRLSWITCH, this.container).insertBefore(modeSwitcher, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CTRLBTN, this.container));
  };

  ColorPicker.prototype.createDragTooltip = function () {
    var _this = this;

    var tooltip = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["Tooltip"]({
      opensOn: 'Custom',
      showTipPointer: false,
      cssClass: 'e-color-picker-tooltip',
      beforeOpen: function (args) {
        _this.tooltipEle = args.element;
      },
      animation: {
        open: {
          effect: 'None'
        },
        close: {
          effect: 'None'
        }
      }
    });
    tooltip.createElement = this.createElement;
    tooltip.appendTo(this.container);
    tooltip.open(this.container);
    this.tooltipEle.style.zIndex = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["getZindexPartial"])(this.tooltipEle).toString();
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-tip-content', this.tooltipEle).appendChild(this.createElement('div', {
      className: 'e-tip-transparent'
    }));
  };

  ColorPicker.prototype.getTooltipInst = function () {
    return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(this.container, _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["Tooltip"]);
  };

  ColorPicker.prototype.setTooltipOffset = function (value) {
    this.getTooltipInst().offsetY = value;
  };

  ColorPicker.prototype.toggleDisabled = function (enable) {
    if (enable) {
      this.getWrapper().classList.add(DISABLED);
    } else {
      this.getWrapper().classList.remove(DISABLED);
    }

    if (this.showButtons) {
      [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.e-btn', this.container)).forEach(function (ele) {
        if (enable) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(ele, {
            'disabled': ''
          });
        } else {
          ele.removeAttribute('disabled');
        }
      });
    }
  };

  ColorPicker.prototype.convertToRgbString = function (rgb) {
    return rgb.length ? rgb.length === 4 ? 'rgba(' + rgb.join() + ')' : 'rgb(' + rgb.join() + ')' : '';
  };

  ColorPicker.prototype.convertToHsvString = function (hsv) {
    return hsv.length === 4 ? 'hsva(' + hsv.join() + ')' : 'hsv(' + hsv.join() + ')';
  };

  ColorPicker.prototype.updateHsv = function () {
    this.hsv[1] = this.hsv[1] > 100 ? 100 : this.hsv[1];
    this.hsv[2] = this.hsv[2] > 100 ? 100 : this.hsv[2];
    this.setHandlerPosition();
  };

  ColorPicker.prototype.convertToOtherFormat = function (isKey) {
    if (isKey === void 0) {
      isKey = false;
    }

    var pValue = this.rgbToHex(this.rgb);
    this.rgb = this.hsvToRgb.apply(this, this.hsv);
    var cValue = this.rgbToHex(this.rgb);
    var rgba = this.convertToRgbString(this.rgb);
    this.updatePreview(rgba);
    this.updateInput(cValue);
    this.triggerEvent(cValue, pValue, rgba, isKey);
  };

  ColorPicker.prototype.updateInput = function (value) {
    var wrapper = this.getWrapper();

    if (!wrapper.classList.contains(HIDEVALUE)) {
      if (!wrapper.classList.contains(HIDEHEX)) {
        _input_index__WEBPACK_IMPORTED_MODULE_3__["Input"].setValue(value.substr(0, 7), Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + HEX, this.container));
      }

      if (!wrapper.classList.contains(HIDERGBA)) {
        if (this.isRgb) {
          this.updateValue(this.rgb, false);
        } else {
          this.updateValue(this.hsv, false);
        }
      }
    }
  };

  ColorPicker.prototype.updatePreview = function (value) {
    if (this.enableOpacity) {
      this.updateOpacitySliderBg();
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-tip-transparent', this.tooltipEle).style.backgroundColor = value;
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PREVIEW + ' .' + CURRENT, this.container).style.backgroundColor = value;
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PREVIEW + ' .' + PREVIOUS, this.container).style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
  };

  ColorPicker.prototype.getDragHandler = function () {
    return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + HANDLER, this.container);
  };

  ColorPicker.prototype.removeTileSelection = function () {
    var selectedEle = [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + SELECT, this.container.children[0]));
    selectedEle.forEach(function (ele) {
      ele.classList.remove(SELECT);
      ele.setAttribute('aria-selected', 'false');
    });
  };

  ColorPicker.prototype.convertRgbToNumberArray = function (value) {
    return value.slice(value.indexOf('(') + 1, value.indexOf(')')).split(',').map(function (n, i) {
      return i !== 3 ? parseInt(n, 10) : parseFloat(n);
    });
  };
  /**
   * To get color value in specified type.
   *
   * @param {string} value - Specify the color value.
   * @param {string} type - Specify the type to which the specified color needs to be converted.
   * @method getValue
   * @returns {string} - Color value
   */


  ColorPicker.prototype.getValue = function (value, type) {
    if (!value) {
      value = this.value;
    }

    type = !type ? 'hex' : type.toLowerCase();

    if (value[0] === 'r') {
      var cValue = this.convertRgbToNumberArray(value);

      if (type === 'hex' || type === 'hexa') {
        var hex = this.rgbToHex(cValue);
        return type === 'hex' ? hex.slice(0, 7) : hex;
      } else {
        if (type === 'hsv') {
          return this.convertToHsvString(this.rgbToHsv.apply(this, cValue.slice(0, 3)));
        } else {
          if (type === 'hsva') {
            return this.convertToHsvString(this.rgbToHsv.apply(this, cValue));
          } else {
            return 'null';
          }
        }
      }
    } else {
      if (value[0] === 'h') {
        var cValue = this.hsvToRgb.apply(this, this.convertRgbToNumberArray(value));

        if (type === 'rgba') {
          return this.convertToRgbString(cValue);
        } else {
          if (type === 'hex' || type === 'hexa') {
            var hex = this.rgbToHex(cValue);
            return type === 'hex' ? hex.slice(0, 7) : hex;
          } else {
            if (type === 'rgb') {
              return this.convertToRgbString(cValue.slice(0, 3));
            } else {
              return 'null';
            }
          }
        }
      } else {
        value = this.roundValue(value);
        var rgb = this.hexToRgb(value);

        if (type === 'rgb' || type === 'hsv') {
          rgb = rgb.slice(0, 3);
        }

        if (type === 'rgba' || type === 'rgb') {
          return this.convertToRgbString(rgb);
        } else {
          if (type === 'hsva' || type === 'hsv') {
            return this.convertToHsvString(this.rgbToHsv.apply(this, rgb));
          } else {
            if (type === 'hex') {
              return value.slice(0, 7);
            } else {
              if (type === 'a') {
                return rgb[3].toString();
              } else {
                return 'null';
              }
            }
          }
        }
      }
    }
  };
  /**
   * To show/hide ColorPicker popup based on current state of the SplitButton.
   *
   * @method toggle
   * @returns {void}
   */


  ColorPicker.prototype.toggle = function () {
    if (this.container.parentElement.classList.contains('e-popup-close')) {
      this.splitBtn.toggle();
    } else {
      this.closePopup(null);
    }
  };
  /**
   * Get component name.
   *
   * @returns {string} - Module Name
   * @private
   */


  ColorPicker.prototype.getModuleName = function () {
    return 'colorpicker';
  };
  /**
   * Gets the properties to be maintained in the persisted state.
   *
   * @returns {string} - Persist data
   */


  ColorPicker.prototype.getPersistData = function () {
    return this.addOnPersist(['value']);
  };

  ColorPicker.prototype.wireEvents = function () {
    if (this.isPicker()) {
      var dragHandler = this.getDragHandler();
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(dragHandler, 'keydown', this.pickerKeyDown, this);
      var ctrlBtn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CTRLBTN, this.container);

      if (ctrlBtn) {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(ctrlBtn, 'keydown', this.ctrlBtnKeyDown, this);
      }

      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.getHsvContainer(), 'mousedown touchstart', this.handlerDown, this);

      if (this.modeSwitcher || this.showButtons) {
        this.addCtrlSwitchEvent();
      }

      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PREVIOUS, this.container), 'click', this.previewHandler, this);
    } else {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.container, 'click', this.paletteClickHandler, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.container, 'keydown', this.paletteKeyDown, this);
    }
  };

  ColorPicker.prototype.formResetHandler = function () {
    this.value = this.initialInputValue;
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
      'value': this.initialInputValue
    });
  };

  ColorPicker.prototype.addCtrlSwitchEvent = function () {
    var ctrlSwitchBtn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CTRLSWITCH, this.container);

    if (ctrlSwitchBtn) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(ctrlSwitchBtn, 'click', this.btnClickHandler, this);
    }
  };

  ColorPicker.prototype.ctrlBtnKeyDown = function (e) {
    if (e.keyCode === 13) {
      var applyBtn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + APPLY, this.container);

      if (applyBtn) {
        var cValue = this.rgbToHex(this.rgb);
        this.triggerChangeEvent(cValue);
      }

      this.splitBtn.element.focus();
    }
  };

  ColorPicker.prototype.pickerKeyDown = function (e) {
    switch (e.keyCode) {
      case 39:
        this.handlerDragPosition(1, this.enableRtl ? -1 : 1, e);
        break;

      case 37:
        this.handlerDragPosition(1, this.enableRtl ? 1 : -1, e);
        break;

      case 38:
        this.handlerDragPosition(2, 1, e);
        break;

      case 40:
        this.handlerDragPosition(2, -1, e);
        break;

      case 13:
        {
          e.preventDefault();
          var cValue = this.rgbToHex(this.rgb);
          this.enterKeyHandler(cValue, e);
        }
    }
  };

  ColorPicker.prototype.enterKeyHandler = function (value, e) {
    this.triggerChangeEvent(value);

    if (!this.inline) {
      this.splitBtn.element.focus();
    }
  };

  ColorPicker.prototype.closePopup = function (e) {
    var _this = this;

    var beforeCloseArgs = {
      element: this.container,
      event: e,
      cancel: false
    };
    this.trigger('beforeClose', beforeCloseArgs, function (observedcloseArgs) {
      if (!observedcloseArgs.cancel) {
        _this.splitBtn.toggle();

        _this.onPopupClose();
      }
    });
  };

  ColorPicker.prototype.triggerChangeEvent = function (value) {
    var hex = value.slice(0, 7);
    this.trigger('change', {
      currentValue: {
        hex: hex,
        rgba: this.convertToRgbString(this.rgb)
      },
      previousValue: {
        hex: this.value.slice(0, 7),
        rgba: this.convertToRgbString(this.hexToRgb(this.value))
      },
      value: this.enableOpacity ? value : hex
    });

    if (this.enableOpacity) {
      this.setProperties({
        'value': value
      }, true);
    } else {
      this.setProperties({
        'value': hex
      }, true);
    }

    this.element.value = hex ? hex : '#000000';
  };

  ColorPicker.prototype.handlerDragPosition = function (prob, value, e) {
    e.preventDefault();
    this.hsv[prob] += value * (e.ctrlKey ? 1 : 3);

    if (this.hsv[prob] < 0) {
      this.hsv[prob] = 0;
    }

    this.updateHsv();
    this.convertToOtherFormat(true);
  };

  ColorPicker.prototype.handlerDown = function (e) {
    e.preventDefault();

    if (e.type === 'mousedown') {
      this.clientX = Math.abs(e.pageX - pageXOffset);
      this.clientY = Math.abs(e.pageY - pageYOffset);
      this.setTooltipOffset(8);
    } else {
      this.clientX = Math.abs(e.changedTouches[0].pageX - pageXOffset);
      this.clientY = Math.abs(e.changedTouches[0].pageY - pageYOffset);
      this.setTooltipOffset(-8);
    }

    this.setHsv(this.clientX, this.clientY);
    this.getDragHandler().style.transition = 'left .4s cubic-bezier(.25, .8, .25, 1), top .4s cubic-bezier(.25, .8, .25, 1)';
    this.updateHsv();
    this.convertToOtherFormat();
    this.getDragHandler().focus();
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mousemove touchmove', this.handlerMove, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mouseup touchend', this.handlerEnd, this);
  };

  ColorPicker.prototype.handlerMove = function (e) {
    if (e.type !== 'touchmove') {
      e.preventDefault();
    }

    var x;
    var y;

    if (e.type === 'mousemove') {
      x = Math.abs(e.pageX - pageXOffset);
      y = Math.abs(e.pageY - pageYOffset);
    } else {
      x = Math.abs(e.changedTouches[0].pageX - pageXOffset);
      y = Math.abs(e.changedTouches[0].pageY - pageYOffset);
    }

    this.setHsv(x, y);
    var dragHandler = this.getDragHandler();
    this.updateHsv();
    this.convertToOtherFormat();
    this.getTooltipInst().refresh(dragHandler);

    if (!this.tooltipEle.style.transform) {
      if (Math.abs(this.clientX - x) > 8 || Math.abs(this.clientY - y) > 8) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + HSVAREA, this.container).style.cursor = 'pointer';
        dragHandler.style.transition = 'none';

        if (!this.inline) {
          this.tooltipEle.style.zIndex = (parseInt(this.getPopupEle().style.zIndex, 10) + 1).toString();
        }

        this.tooltipEle.style.transform = 'rotate(45deg)';
        dragHandler.classList.add('e-hide-handler');
      }
    }
  };

  ColorPicker.prototype.setHsv = function (clientX, clientY) {
    var ele = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + HSVAREA, this.container);
    var position = ele.getBoundingClientRect();

    if (this.enableRtl) {
      clientX = clientX > position.right ? 0 : Math.abs(clientX - position.right);
    } else {
      clientX = clientX > position.left ? Math.abs(clientX - position.left) : 0;
    }

    clientY = clientY > position.top ? Math.abs(clientY - position.top) : 0;
    this.hsv[2] = Math.round(Number(100 * (ele.offsetHeight - Math.max(0, Math.min(ele.offsetHeight, clientY - ele.offsetTop))) / ele.offsetHeight) * 10) / 10;
    this.hsv[1] = Math.round(Number(100 * Math.max(0, Math.min(ele.offsetWidth, clientX - ele.offsetLeft)) / ele.offsetWidth) * 10) / 10;
  };

  ColorPicker.prototype.handlerEnd = function (e) {
    if (e.type !== 'touchend') {
      e.preventDefault();
    }

    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mousemove touchmove', this.handlerMove);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mouseup touchend', this.handlerEnd);
    var dragHandler = this.getDragHandler();
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + HSVAREA, this.container).style.cursor = '';

    if (this.tooltipEle.style.transform) {
      this.tooltipEle.style.transform = '';
      dragHandler.classList.remove('e-hide-handler');
    }

    if (!this.inline && !this.showButtons) {
      this.closePopup(e);
    }
  };

  ColorPicker.prototype.btnClickHandler = function (e) {
    var target = e.target;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + MODESWITCH)) {
      e.stopPropagation();
      this.switchToPalette();
    } else {
      if (target.classList.contains(APPLY) || target.classList.contains(CANCEL)) {
        this.ctrlBtnClick(target, e);
      }
    }
  };

  ColorPicker.prototype.switchToPalette = function () {
    this.trigger('beforeModeSwitch', {
      element: this.container,
      mode: 'Palette'
    });
    this.unWireEvents();
    this.destroyOtherComp();
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-slider-preview', this.container));

    if (!this.getWrapper().classList.contains(HIDEVALUE)) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + INPUTWRAPPER, this.container));
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.getHsvContainer());
    this.createPalette();
    this.firstPaletteFocus();
    this.createInput();
    this.refreshPopupPos();
    this.wireEvents();
    this.trigger('onModeSwitch', {
      element: this.container,
      mode: 'Palette'
    });
  };

  ColorPicker.prototype.refreshPopupPos = function () {
    if (!this.inline) {
      var popupEle = this.getPopupEle();
      popupEle.style.left = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(0 + pageXOffset);
      popupEle.style.top = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(0 + pageYOffset);
      this.getPopupInst().refreshPosition(this.splitBtn.element.parentElement);
    }
  };

  ColorPicker.prototype.formatSwitchHandler = function () {
    if (this.isRgb) {
      this.updateValue(this.hsv, true, 3, [360, 100, 100]);
      this.isRgb = false;
    } else {
      this.updateValue(this.rgb, true, 2);
      this.isRgb = true;
    }
  };

  ColorPicker.prototype.updateValue = function (value, format, idx, max) {
    var clsName = ['e-rh-value', 'e-gs-value', 'e-bv-value'];
    var inst;

    for (var i = 0, len = clsName.length; i < len; i++) {
      inst = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + clsName[i], this.container), _numerictextbox_index__WEBPACK_IMPORTED_MODULE_4__["NumericTextBox"]);
      inst.value = Math.round(value[i]);

      if (format) {
        inst.placeholder = clsName[i].substr(idx, 1).toUpperCase();
        inst.max = max ? max[i] : 255;
      }

      inst.dataBind();
    }
  };

  ColorPicker.prototype.previewHandler = function (e) {
    var target = e.target;
    var pValue = this.rgbToHex(this.rgb);
    this.rgb = this.convertRgbToNumberArray(target.style.backgroundColor);

    if (!this.rgb[3]) {
      this.rgb[3] = 1;
    }

    var cValue = this.rgbToHex(this.rgb);
    var hsv = this.rgbToHsv.apply(this, this.rgb);

    if (hsv[0] !== this.hsv[0]) {
      this.hueSlider.setProperties({
        'value': hsv[0]
      }, true);
      this.hueSlider.refresh();
    }

    this.setHsvContainerBg(hsv[0]);

    if (this.enableOpacity && hsv[3] !== this.hsv[3]) {
      this.opacitySlider.setProperties({
        'value': hsv[3] * 100
      }, true);
      this.opacitySlider.refresh();
      this.updateOpacitySliderBg();
    }

    this.hsv = hsv;
    this.setHandlerPosition();
    this.updateInput(cValue);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PREVIEW + ' .' + CURRENT, this.container).style.backgroundColor = this.convertToRgbString(this.rgb);
    this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb));
  };

  ColorPicker.prototype.paletteClickHandler = function (e) {
    e.preventDefault();
    var target = e.target;

    if (target.classList.contains(TILE)) {
      this.removeTileSelection();
      this.addTileSelection(target);

      if (target.classList.contains(NOCOLOR)) {
        this.noColorTile();
      } else {
        var cValue = target.getAttribute('aria-label');
        var pValue = this.rgbToHex(this.rgb);
        this.rgb = this.hexToRgb(this.roundValue(cValue));
        this.hsv = this.rgbToHsv.apply(this, this.rgb);

        if (this.getWrapper().classList.contains(SHOWVALUE)) {
          this.updateInput(cValue);
        }

        this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb));
      }

      if (!this.inline && !this.showButtons) {
        this.closePopup(e);
      }
    } else {
      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + MODESWITCH)) {
        this.switchToPicker();
      } else {
        if (target.classList.contains(APPLY) || target.classList.contains(CANCEL)) {
          this.ctrlBtnClick(target, e);
        } else {
          if (this.getWrapper().classList.contains(SHOWVALUE) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + FORMATSWITCH)) {
            this.formatSwitchHandler();
          }
        }
      }
    }
  };

  ColorPicker.prototype.noColorTile = function (isKey) {
    if (isKey === void 0) {
      isKey = false;
    }

    var pValue = this.rgbToHex(this.rgb);
    this.rgb = [];
    this.hsv = [];
    this.triggerEvent('', pValue, '', isKey);
  };

  ColorPicker.prototype.switchToPicker = function () {
    var wrapper = this.getWrapper();
    this.trigger('beforeModeSwitch', {
      element: this.container,
      mode: 'Picker'
    });
    this.unWireEvents();
    [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + PALETTES, this.container)).forEach(function (ele) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(ele);
    });

    if (wrapper.classList.contains(SHOWVALUE)) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + INPUTWRAPPER, this.container));
    }

    this.container.style.width = '';
    var grpEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-custom-palette', this.container);

    if (this.presetColors) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(grpEle);
    }

    this.createPicker();
    this.getDragHandler().focus();
    this.createInput();
    this.refreshPopupPos();
    this.wireEvents();
    this.trigger('onModeSwitch', {
      element: this.container,
      mode: 'Picker'
    });
  };

  ColorPicker.prototype.ctrlBtnClick = function (ele, e) {
    if (ele.classList.contains(APPLY)) {
      var cValue = this.rgbToHex(this.rgb);
      this.triggerChangeEvent(cValue);
    }

    if (!this.inline) {
      this.closePopup(e);
      this.splitBtn.element.focus();
    }
  };

  ColorPicker.prototype.paletteKeyDown = function (e) {
    var target = e.target;

    if (!target.classList.contains(PALETTES)) {
      return;
    }

    var selectedEle;
    var idx;
    var tiles = [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + TILE, target));
    var prevSelectedEle = tiles.filter(function (tile) {
      return tile.classList.contains('e-selected');
    }).pop();

    switch (!e.altKey && e.keyCode) {
      case 39:
        e.preventDefault();
        selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? -1 : 1)] : tiles[this.enableRtl ? tiles.length - 1 : 0];
        this.keySelectionChanges(selectedEle);
        break;

      case 37:
        e.preventDefault();
        selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? 1 : -1)] : tiles[this.enableRtl ? 0 : tiles.length - 1];
        this.keySelectionChanges(selectedEle);
        break;

      case 38:
        e.preventDefault();
        idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, -this.columns) : 0;
        selectedEle = tiles[idx] ? tiles[idx] : tiles[idx - this.columns];
        this.keySelectionChanges(selectedEle);
        break;

      case 40:
        e.preventDefault();
        idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, this.columns) : tiles.length - 1;

        if (tiles[idx]) {
          selectedEle = tiles[idx];
        } else {
          idx %= tiles.length;
          idx += tiles[tiles.length - 1].parentElement.childElementCount;
          selectedEle = tiles[idx];
        }

        this.keySelectionChanges(selectedEle);
        break;

      case 13:
        e.preventDefault();

        if (prevSelectedEle) {
          var cValue = prevSelectedEle.getAttribute('aria-label');
          this.enterKeyHandler(cValue ? cValue : '', e);
        }

    }
  };

  ColorPicker.prototype.keySelectionChanges = function (newEle) {
    this.removeTileSelection();
    this.addTileSelection(newEle);

    if (newEle.classList.contains(NOCOLOR)) {
      this.noColorTile(true);
    } else {
      var cValue = newEle.getAttribute('aria-label');
      var pValue = this.rgbToHex(this.rgb);
      this.rgb = this.hexToRgb(cValue);
      this.hsv = this.rgbToHsv.apply(this, this.rgb);

      if (this.getWrapper().classList.contains(SHOWVALUE)) {
        this.updateInput(cValue);
      }

      this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb), true);
    }
  };

  ColorPicker.prototype.tilePosition = function (items, element, cIdx) {
    items = Array.prototype.slice.call(items);
    var n = items.length;
    var emptyCount = this.columns - items[n - 1].parentElement.childElementCount;
    var idx = items.indexOf(element);
    idx += cIdx;

    if (idx < 0) {
      idx += n + emptyCount;
    } else {
      idx %= n + emptyCount;
    }

    return idx;
  };

  ColorPicker.prototype.inputHandler = function (e) {
    var target = e.target;

    if (!target.value.length) {
      return;
    }

    var hsv;
    var pValue;
    var label = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-float-text', target.parentElement).textContent;

    switch (label) {
      case 'HEX':
        {
          var value = '';

          if (target.value[0] === '#' && target.value.length !== 5 || target.value[0] !== '#' && target.value.length !== 4) {
            value = this.roundValue(target.value);
          }

          if (value.length === 9) {
            pValue = this.rgbToHex(this.rgb);
            this.rgb = this.hexToRgb(value + value.substr(-2));
            this.inputValueChange(this.rgbToHsv.apply(this, this.rgb), pValue, target.value);
          } else {
            return;
          }

          break;
        }

      case 'R':
        if (this.rgb[0] !== Number(target.value)) {
          pValue = this.rgbToHex(this.rgb);
          this.rgb[0] = Number(target.value);
          hsv = this.rgbToHsv.apply(this, this.rgb);
          this.inputValueChange(hsv, pValue);
        }

        break;

      case 'G':
        if (this.rgb[1] !== Number(target.value)) {
          pValue = this.rgbToHex(this.rgb);
          this.rgb[1] = Number(target.value);
          hsv = this.rgbToHsv.apply(this, this.rgb);
          this.inputValueChange(hsv, pValue);
        }

        break;

      case 'B':
        if (this.rgb[2] !== Number(target.value)) {
          pValue = this.rgbToHex(this.rgb);
          this.rgb[2] = Number(target.value);
          hsv = this.rgbToHsv.apply(this, this.rgb);
          this.inputValueChange(hsv, pValue);
        }

        break;

      case 'H':
        this.hueSlider.value = Number(target.value);
        break;

      case 'S':
        if (this.hsv[1] !== Number(target.value)) {
          this.hsv[1] = Number(target.value);
          this.updateHsv();
          this.convertToOtherFormat();
        }

        break;

      case 'V':
        if (this.hsv[2] !== Number(target.value)) {
          this.hsv[2] = Number(target.value);
          this.updateHsv();
          this.convertToOtherFormat();
        }

        break;

      case 'A':
        this.opacitySlider.value = Number(target.value);
        break;
    }
  };

  ColorPicker.prototype.inputValueChange = function (hsv, pValue, value) {
    if (hsv[0] !== this.hsv[0]) {
      this.hueSlider.setProperties({
        'value': hsv[0]
      }, true);
      this.hueSlider.refresh();
      this.setHsvContainerBg(hsv[0]);
    }

    this.hsv = hsv;
    var cValue = this.rgbToHex(this.rgb);
    this.setHandlerPosition();
    this.updateInput(value ? value : cValue);
    var rgba = this.convertToRgbString(this.rgb);
    this.updatePreview(rgba);
    this.triggerEvent(cValue, pValue, rgba);
  };

  ColorPicker.prototype.triggerEvent = function (cValue, pValue, rgba, isKey) {
    if (isKey === void 0) {
      isKey = false;
    }

    var hex = cValue.slice(0, 7);

    if (!this.showButtons && !isKey) {
      this.trigger('change', {
        currentValue: {
          hex: hex,
          rgba: rgba
        },
        previousValue: {
          hex: this.value.slice(0, 7),
          rgba: this.convertToRgbString(this.hexToRgb(this.value))
        },
        value: cValue
      });

      if (this.enableOpacity) {
        this.setProperties({
          'value': cValue
        }, true);
      } else {
        this.setProperties({
          'value': hex
        }, true);
      }

      this.element.value = hex ? hex : '#000000';
    } else {
      this.trigger('select', {
        currentValue: {
          hex: hex,
          rgba: rgba
        },
        previousValue: {
          hex: pValue.slice(0, 7),
          rgba: this.convertToRgbString(this.hexToRgb(pValue))
        }
      });
    }
  };
  /**
   * Removes the component from the DOM and detaches all its related event handlers.
   * Also it maintains the initial input element from the DOM.
   *
   * @method destroy
   * @returns {void}
   */


  ColorPicker.prototype.destroy = function () {
    var _this = this;

    var wrapper = this.getWrapper();

    _super.prototype.destroy.call(this);

    ['tabindex', 'spellcheck'].forEach(function (attr) {
      _this.element.removeAttribute(attr);
    });

    if (this.inline) {
      this.unWireEvents();
      this.destroyOtherComp();
    } else {
      if (this.isPopupOpen()) {
        this.unWireEvents();
        this.destroyOtherComp();
      }

      this.splitBtn.destroy();
      this.splitBtn = null;
    }

    this.tileRipple();
    this.tileRipple = null;
    this.ctrlBtnRipple();
    this.ctrlBtnRipple = null;

    if (this.element.nextElementSibling) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.element.nextElementSibling);
    }

    if (wrapper) {
      wrapper.parentElement.insertBefore(this.element, wrapper);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(wrapper);
    }

    this.container = null;

    if (this.formElement) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.formElement, 'reset', this.formResetHandler);
    }
  };

  ColorPicker.prototype.destroyOtherComp = function () {
    if (this.isPicker()) {
      var popup = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.hueSlider.element, '.e-color-picker');
      var numericElemColl = popup.querySelectorAll('.e-numerictextbox');

      for (var i = 0; i < numericElemColl.length; i++) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(numericElemColl[i], _numerictextbox_index__WEBPACK_IMPORTED_MODULE_4__["NumericTextBox"]).destroy();
      }

      this.hueSlider.destroy();

      if (this.enableOpacity) {
        this.opacitySlider.destroy();
        this.opacitySlider = null;
      }

      this.hueSlider = null;
      var tooltipInst = this.getTooltipInst();
      tooltipInst.close();
      tooltipInst.destroy();
      this.tooltipEle = null;
    }
  };

  ColorPicker.prototype.isPopupOpen = function () {
    return this.getPopupEle().classList.contains('e-popup-open');
  };

  ColorPicker.prototype.unWireEvents = function () {
    if (this.isPicker()) {
      var dragHandler = this.getDragHandler();
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(dragHandler, 'keydown', this.pickerKeyDown);
      var ctrlBtn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CTRLBTN, this.container);

      if (ctrlBtn) {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(ctrlBtn, 'keydown', this.ctrlBtnKeyDown);
      }

      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.getHsvContainer(), 'mousedown touchstart', this.handlerDown);

      if (this.modeSwitcher || this.showButtons) {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CTRLSWITCH, this.container), 'click', this.btnClickHandler);
      }

      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PREVIOUS, this.container), 'click', this.previewHandler);
    } else {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.container, 'click', this.paletteClickHandler);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.container, 'keydown', this.paletteKeyDown);
    }
  };

  ColorPicker.prototype.roundValue = function (value) {
    if (!value) {
      return '';
    }

    if (value[0] !== '#') {
      value = '#' + value;
    }

    var len = value.length;

    if (len === 4) {
      value += 'f';
      len = 5;
    }

    if (len === 5) {
      var tempValue = '';

      for (var i = 1, len_1 = value.length; i < len_1; i++) {
        tempValue += value.charAt(i) + value.charAt(i);
      }

      value = '#' + tempValue;
      len = 9;
    }

    if (len === 7) {
      value += 'ff';
    }

    return value;
  };

  ColorPicker.prototype.hexToRgb = function (hex) {
    if (!hex) {
      return [];
    }

    hex = hex.trim();

    if (hex.length !== 9) {
      hex = this.roundValue(hex);
    }

    var opacity = Number((parseInt(hex.slice(-2), 16) / 255).toFixed(2));
    hex = hex.slice(1, 7);
    var bigInt = parseInt(hex, 16);
    var h = [];
    h.push(bigInt >> 16 & 255);
    h.push(bigInt >> 8 & 255);
    h.push(bigInt & 255);
    h.push(opacity);
    return h;
  };

  ColorPicker.prototype.rgbToHsv = function (r, g, b, opacity) {
    if (this.rgb && !this.rgb.length) {
      return [];
    }

    r /= 255;
    g /= 255;
    b /= 255;
    var max = Math.max(r, g, b);
    var min = Math.min(r, g, b);
    var h;
    var v = max;
    var d = max - min;
    var s = max === 0 ? 0 : d / max;

    if (max === min) {
      h = 0;
    } else {
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;

        case g:
          h = (b - r) / d + 2;
          break;

        case b:
          h = (r - g) / d + 4;
          break;
      }

      h /= 6;
    }

    var hsv = [Math.round(h * 360), Math.round(s * 1000) / 10, Math.round(v * 1000) / 10];

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(opacity)) {
      hsv.push(opacity);
    }

    return hsv;
  };

  ColorPicker.prototype.hsvToRgb = function (h, s, v, opacity) {
    var r;
    var g;
    var b;
    s /= 100;
    v /= 100;

    if (s === 0) {
      r = g = b = v;
      return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), opacity];
    }

    h /= 60;
    var i = Math.floor(h);
    var f = h - i;
    var p = v * (1 - s);
    var q = v * (1 - s * f);
    var t = v * (1 - s * (1 - f));

    switch (i) {
      case 0:
        r = v;
        g = t;
        b = p;
        break;

      case 1:
        r = q;
        g = v;
        b = p;
        break;

      case 2:
        r = p;
        g = v;
        b = t;
        break;

      case 3:
        r = p;
        g = q;
        b = v;
        break;

      case 4:
        r = t;
        g = p;
        b = v;
        break;

      default:
        r = v;
        g = p;
        b = q;
    }

    var rgb = [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(opacity)) {
      rgb.push(opacity);
    }

    return rgb;
  };

  ColorPicker.prototype.rgbToHex = function (rgb) {
    return rgb.length ? '#' + this.hex(rgb[0]) + this.hex(rgb[1]) + this.hex(rgb[2]) + (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(rgb[3]) ? rgb[3] !== 0 ? (Math.round(rgb[3] * 255) + 0x10000).toString(16).substr(-2) : '00' : '') : '';
  };

  ColorPicker.prototype.hex = function (x) {
    return ('0' + x.toString(16)).slice(-2);
  };

  ColorPicker.prototype.changeModeSwitcherProp = function (prop) {
    var ctrlSwitchWrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CTRLSWITCH, this.container);

    if (prop) {
      if (ctrlSwitchWrapper) {
        this.appendModeSwitchBtn();
      } else {
        this.createCtrlBtn();

        if (this.isPicker() && !this.disabled) {
          this.addCtrlSwitchEvent();
        }
      }
    } else {
      if (ctrlSwitchWrapper) {
        if (this.showButtons) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + MODESWITCH, ctrlSwitchWrapper));
        } else {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(ctrlSwitchWrapper);
        }
      }
    }
  };

  ColorPicker.prototype.changeShowBtnProps = function (prop) {
    var ctrlBtnWrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CTRLSWITCH, this.container);

    if (prop) {
      if (ctrlBtnWrapper) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(ctrlBtnWrapper);
      }

      this.createCtrlBtn();

      if (this.isPicker() && !this.disabled) {
        this.addCtrlSwitchEvent();
      }
    } else {
      if (this.modeSwitcher) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CTRLBTN, ctrlBtnWrapper));
      } else {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(ctrlBtnWrapper);
      }
    }
  };

  ColorPicker.prototype.changeValueProp = function (newProp) {
    if (this.isPicker()) {
      this.rgb = this.hexToRgb(newProp);
      this.hsv = this.rgbToHsv.apply(this, this.rgb);
      this.setHandlerPosition();
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.hueSlider.element, '.e-slider-preview'));
      this.createSlider();
      this.setHsvContainerBg();
      this.updateInput(newProp);

      if (this.rgb.length === 4) {
        this.updateOpacityInput(this.rgb[3] * 100);
      }
    } else {
      this.removeTileSelection();
      var ele = this.container.querySelector('span[aria-label="' + this.roundValue(newProp) + '"]');

      if (ele) {
        this.addTileSelection(ele);
      }
    }
  };

  ColorPicker.prototype.setInputEleProps = function () {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + INPUTWRAPPER, this.container));
    this.createInput();
  };

  ColorPicker.prototype.changeDisabledProp = function (newProp) {
    if (this.isPicker()) {
      this.hueSlider.enabled = !newProp;
      this.opacitySlider.enabled = !newProp;
      this.setInputEleProps();
    }

    if (newProp) {
      this.toggleDisabled(true);
      this.unWireEvents();
    } else {
      this.toggleDisabled(false);
      this.wireEvents();
    }
  };

  ColorPicker.prototype.changeCssClassProps = function (newProp, oldProp) {
    var wrapper = this.getWrapper();
    var popupWrapper = this.getPopupEle();

    if (oldProp) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([wrapper, popupWrapper], oldProp.split(' '));
    }

    if (newProp) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([wrapper, popupWrapper], newProp.replace(/\s+/g, ' ').trim().split(' '));
    }
  };

  ColorPicker.prototype.changeRtlProps = function (newProp) {
    if (newProp) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.getWrapper()], 'e-rtl');
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.getWrapper()], 'e-rtl');
    }
  };

  ColorPicker.prototype.changePaletteProps = function () {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.container.children[0]);
    this.container.style.width = '';
    this.createPalette();
  };

  ColorPicker.prototype.changeOpacityProps = function (newProp) {
    var wrapper = this.getWrapper();

    if (newProp) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.container.parentElement], HIDEOPACITY);
      this.createOpacitySlider(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-colorpicker-slider', this.container).appendChild(this.createElement('div', {
        className: 'e-opacity-slider'
      })));

      if (!wrapper.classList.contains(HIDEVALUE) && !wrapper.classList.contains(HIDERGBA)) {
        this.appendOpacityValue(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-input-container', this.container));
      }
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.container.parentElement], HIDEOPACITY);
      this.opacitySlider.destroy();
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.opacitySlider.element);
      this.opacitySlider = null;

      if (!wrapper.classList.contains(HIDEVALUE) && !wrapper.classList.contains(HIDERGBA)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + OPACITY, this.container).parentElement);
      }
    }
  };
  /**
   * Called internally if any of the property value changed.
   *
   * @param  {ColorPickerModel} newProp - Specifies new properties
   * @param  {ColorPickerModel} oldProp - Specifies old properties
   * @returns {void}
   * @private
   */


  ColorPicker.prototype.onPropertyChanged = function (newProp, oldProp) {
    var _this = this;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newProp.value)) {
      var value = this.roundValue(newProp.value);

      if (value.length === 9) {
        this.element.value = this.roundValue(value).slice(0, 7);
        var preview = this.splitBtn && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + SPLITPREVIEW, this.splitBtn.element);

        if (preview) {
          preview.style.backgroundColor = this.convertToRgbString(this.hexToRgb(newProp.value));
        }
      } else if (this.noColor && this.mode === 'Palette' && this.value === '') {
        var preview = this.splitBtn && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + SPLITPREVIEW, this.splitBtn.element);
        preview.style.backgroundColor = '';
      } else {
        this.value = oldProp.value;
      }
    }

    if (!this.inline && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newProp.inline)) {
      var otherCompModel = ['disabled', 'enableRtl'];
      this.splitBtn.setProperties(Object(_syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__["getModel"])(newProp, otherCompModel));

      if (!this.isPopupOpen()) {
        this.changeCssClassProps(newProp.cssClass, oldProp.cssClass);
        this.changeRtlProps(newProp.enableRtl);
        return;
      }
    }

    var _loop_1 = function (prop) {
      switch (prop) {
        case 'inline':
          if (newProp.inline) {
            this_1.getWrapper().appendChild(this_1.container);
            this_1.splitBtn.destroy();
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this_1.element.nextElementSibling);

            if (!this_1.container.children.length) {
              this_1.createWidget();
            }
          } else {
            this_1.destroyOtherComp();
            this_1.unWireEvents();
            this_1.container.innerHTML = '';
            this_1.createSplitBtn();
          }

          break;

        case 'cssClass':
          {
            this_1.changeCssClassProps(newProp.cssClass, oldProp.cssClass);
            var props = newProp.cssClass.split(' ').concat(oldProp.cssClass.split(' '));
            props = props.reduce(function (a, b) {
              if (a.indexOf(b) < 0) {
                a.push(b);
              }

              return a;
            }, []);
            var count_1 = 0;
            props.forEach(function (cls) {
              if (count_1 === 0 && (cls === HIDEVALUE || cls === HIDEVALUESWITCH || cls === SHOWVALUE || cls === HIDEHEX || cls === HIDERGBA)) {
                var inputWrap = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + INPUTWRAPPER, _this.container);

                if (inputWrap) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + INPUTWRAPPER, _this.container));
                }

                _this.createInput();

                count_1++;
              }
            });
            break;
          }

        case 'enableRtl':
          if (this_1.isPicker()) {
            this_1.hueSlider.enableRtl = newProp.enableRtl;

            if (this_1.enableOpacity) {
              this_1.opacitySlider.enableRtl = newProp.enableRtl;
            }

            this_1.setInputEleProps();
          }

          this_1.changeRtlProps(newProp.enableRtl);
          break;

        case 'disabled':
          this_1.changeDisabledProp(newProp.disabled);
          break;

        case 'value':
          if (this_1.value !== oldProp.value) {
            this_1.changeValueProp(newProp.value);
          }

          break;

        case 'showButtons':
          this_1.changeShowBtnProps(newProp.showButtons);
          break;

        case 'mode':
          if (newProp.mode === 'Picker') {
            this_1.switchToPicker();
          } else {
            this_1.switchToPalette();
          }

          break;

        case 'modeSwitcher':
          this_1.changeModeSwitcherProp(newProp.modeSwitcher);
          break;

        case 'columns':
        case 'presetColors':
          if (!this_1.isPicker()) {
            this_1.changePaletteProps();
          }

          break;

        case 'noColor':
          if (newProp.noColor) {
            if (this_1.mode === 'Palette' && !this_1.modeSwitcher) {
              this_1.setNoColor();
            }
          } else {
            this_1.changePaletteProps();
          }

          break;

        case 'enableOpacity':
          this_1.changeOpacityProps(newProp.enableOpacity);
          break;
      }
    };

    var this_1 = this;

    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      _loop_1(prop);
    }
  };
  /**
   * Sets the focus to Colorpicker
   * its native method
   *
   * @public
   * @returns {void}
   */


  ColorPicker.prototype.focusIn = function () {
    this.element.parentElement.focus();
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('#008000ff')], ColorPicker.prototype, "value", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ColorPicker.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ColorPicker.prototype, "disabled", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Picker')], ColorPicker.prototype, "mode", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], ColorPicker.prototype, "modeSwitcher", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ColorPicker.prototype, "presetColors", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], ColorPicker.prototype, "showButtons", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(10)], ColorPicker.prototype, "columns", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ColorPicker.prototype, "inline", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ColorPicker.prototype, "noColor", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ColorPicker.prototype, "enablePersistence", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], ColorPicker.prototype, "enableOpacity", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ColorPicker.prototype, "createPopupOnClick", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ColorPicker.prototype, "select", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ColorPicker.prototype, "change", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ColorPicker.prototype, "beforeTileRender", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ColorPicker.prototype, "beforeOpen", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ColorPicker.prototype, "open", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ColorPicker.prototype, "beforeClose", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ColorPicker.prototype, "beforeModeSwitch", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ColorPicker.prototype, "onModeSwitch", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ColorPicker.prototype, "created", void 0);

  ColorPicker = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], ColorPicker);
  return ColorPicker;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/color-picker/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/color-picker/index.js ***!
  \***********************************************************************/
/*! exports provided: ColorPicker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _color_picker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./color-picker */ "./node_modules/@syncfusion/ej2-inputs/src/color-picker/color-picker.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ColorPicker", function() { return _color_picker__WEBPACK_IMPORTED_MODULE_0__["ColorPicker"]; });

/**
 * ColorPicker modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/common/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/common/index.js ***!
  \*****************************************************************/
/*! exports provided: SignatureBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _signature_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./signature-base */ "./node_modules/@syncfusion/ej2-inputs/src/common/signature-base.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SignatureBase", function() { return _signature_base__WEBPACK_IMPORTED_MODULE_0__["SignatureBase"]; });

/**
 * Signature base modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/common/signature-base.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/common/signature-base.js ***!
  \**************************************************************************/
/*! exports provided: SignatureBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SignatureBase", function() { return SignatureBase; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();




var SignatureBase =
/** @class */
function (_super) {
  __extends(SignatureBase, _super);

  function SignatureBase() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    /* minDistance(distance between the two point) was calaculated for smoothness.*/


    _this.minDistance = 5;
    _this.previous = 0;
    /* interval handles for the smoothness in the mouse move event.*/

    _this.interval = 30;
    _this.timeout = null;
    _this.isSignatureEmpty = true;
    _this.backgroundLoaded = null;
    _this.clearArray = [];
    _this.isBlazor = false;
    _this.isResponsive = false;
    _this.signPointsColl = [];
    _this.signRatioPointsColl = [];
    return _this;
  }
  /**
   * To Initialize the component rendering
   *
   * @private
   * @param {HTMLCanvasElement} element - Specifies the canvas element.
   * @param {BlazorDotnetObject} dotnetRef - Specifies for blazor client to server communication.
   * @returns {void}
   */


  SignatureBase.prototype.initialize = function (element, dotnetRef) {
    this.element = element;
    this.canvasContext = this.element.getContext('2d');
    this.canvasContext.canvas.tabIndex = -1;

    if (dotnetRef) {
      this.dotnetRef = dotnetRef;
      this.isBlazor = true;

      if (this.signatureValue) {
        this.loadPersistedSignature();
      }
    }

    this.setHTMLProperties();

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.signatureValue)) {
      this.updateSnapCollection(true);
    }

    this.wireEvents();

    if (!this.isBlazor) {
      this.trigger('created', null);
    }
  };

  SignatureBase.prototype.wireEvents = function () {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.pointColl) && !this.isReadOnly && !this.disabled) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.canvasContext.canvas, 'mousedown touchstart', this.mouseDownHandler, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.canvasContext.canvas, 'keydown', this.keyboardHandler, this);
      window.addEventListener('resize', this.resizeHandler.bind(this));
    } else if (this.pointColl) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.canvasContext.canvas, 'mousemove touchmove', this.mouseMoveHandler, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.canvasContext.canvas, 'mouseup touchend', this.mouseUpHandler, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mouseup', this.mouseUpHandler, this);
    }
  };

  SignatureBase.prototype.unwireEvents = function (type) {
    if (type === 'mouseup' || type === 'touchend') {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.canvasContext.canvas, 'mousemove touchmove', this.mouseMoveHandler);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.canvasContext.canvas, 'mouseup touchend', this.mouseUpHandler);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mouseup', this.mouseUpHandler);
    } else {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.canvasContext.canvas, 'mousedown touchstart', this.mouseDownHandler);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.canvasContext.canvas, 'keydown', this.keyboardHandler);
      window.removeEventListener('resize', this.resizeHandler);
    }
  };

  SignatureBase.prototype.setHTMLProperties = function () {
    if (this.element.height === 150 && this.element.width === 300 && this.element.offsetHeight !== 0 && this.element.offsetWidth !== 0) {
      this.element.height = this.element.offsetHeight;
      this.element.width = this.element.offsetWidth;
      this.isResponsive = true;
    } else if ((this.element.height !== this.element.offsetHeight - 1 || this.element.width !== this.element.offsetWidth - 1) && this.element.offsetHeight !== 0 && this.element.offsetWidth !== 0) {
      this.element.height = this.element.offsetHeight;
      this.element.width = this.element.offsetWidth;
    }

    this.canvasContext.scale(1, 1);
    this.canvasContext.fillStyle = this.strokeColor;
    this.tempCanvas = this.createElement('canvas', {
      className: 'e-' + this.getModuleName() + '-temp'
    });
    this.tempContext = this.tempCanvas.getContext('2d');
    this.tempCanvas.width = this.element.width;
    this.tempCanvas.height = this.element.height;

    if (this.backgroundImage) {
      this.canvasContext.canvas.style.backgroundImage = 'url(' + this.backgroundImage + ')';
      this.canvasContext.canvas.style.backgroundRepeat = 'no-repeat';

      if (this.saveWithBackground) {
        this.setBackgroundImage(this.backgroundImage, 'temp');
      }
    } else if (this.backgroundColor) {
      this.canvasContext.canvas.style.backgroundColor = this.backgroundColor;
    }
  }; // eslint-disable-next-line


  SignatureBase.prototype.mouseDownHandler = function (e) {
    if (e.buttons === 1 || e.buttons === 2 || e.type === 'touchstart') {
      if (e.type === 'touchstart') {
        e.preventDefault();
        e.stopPropagation();
      }

      this.beginStroke(e);
      this.wireEvents();
    }
  };

  SignatureBase.prototype.mouseMoveHandler = function (e) {
    if (e.buttons === 1 || e.buttons === 2 || e.type === 'touchmove') {
      if (e.type === 'touchmove') {
        e.preventDefault();
        e.stopPropagation();
      }

      if (this.interval) {
        this.updateStrokeWithThrottle(e);
      } else {
        this.updateStroke(e);
      }
    }
  };

  SignatureBase.prototype.mouseUpHandler = function (e) {
    var args = {
      actionName: 'strokeUpdate'
    };

    if (e.type === 'touchstart') {
      e.preventDefault();
      e.stopPropagation();
    }

    this.endDraw();
    this.updateSnapCollection();
    this.unwireEvents(e.type);

    if (!this.isBlazor) {
      this.trigger('change', args);
    } else {
      this.dotnetRef.invokeMethodAsync('TriggerEventAsync', 'mouseUp');
    }

    this.signatureValue = this.snapColl[this.incStep];

    for (var i = 0; i < this.signPointsColl.length; i++) {
      this.signRatioPointsColl.push({
        x: this.signPointsColl[i].x / this.canvasContext.canvas.width,
        y: this.signPointsColl[i].y / this.canvasContext.canvas.height
      });
    }

    this.signPointsColl = [];
  };

  SignatureBase.prototype.keyboardHandler = function (e) {
    var _this = this;

    var args = {
      fileName: 'Signature',
      type: 'Png',
      cancel: false
    };

    switch (e.key) {
      case 'Delete':
        this.clear();
        break;

      case e.ctrlKey && 's':
        if (!this.isBlazor) {
          this.trigger('beforeSave', args, function (observableSaveArgs) {
            if (!args.cancel) {
              _this.save(observableSaveArgs.type, observableSaveArgs.fileName);
            }
          });
        } else {
          this.dotnetRef.invokeMethodAsync('TriggerEventAsync', 'beforeSave');
        }

        e.preventDefault();
        e.stopImmediatePropagation();
        break;

      case e.ctrlKey && 'z':
        this.undo();
        break;

      case e.ctrlKey && 'y':
        this.redo();
        break;
    }
  };

  SignatureBase.prototype.resizeHandler = function () {
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    var proxy = this;

    if (this.isResponsive) {
      this.canvasContext.canvas.width = this.element.offsetWidth;
      this.canvasContext.canvas.height = this.element.offsetHeight;
      this.canvasContext.scale(1, 1);
      var pointSize = (this.minStrokeWidth + this.maxStrokeWidth) / 2;

      for (var i = 0; i < this.signRatioPointsColl.length; i++) {
        this.arcDraw(this.signRatioPointsColl[i].x * this.canvasContext.canvas.width, this.signRatioPointsColl[i].y * this.canvasContext.canvas.height, pointSize);
      }

      this.signPointsColl = [];
      this.canvasContext.closePath();
      this.canvasContext.fill();
    } else {
      var restoreImg_1 = new Image();
      restoreImg_1.src = this.snapColl[this.incStep];

      restoreImg_1.onload = function () {
        proxy.canvasContext.clearRect(0, 0, proxy.element.width, proxy.element.height);
        proxy.canvasContext.drawImage(restoreImg_1, 0, 0, proxy.element.width, proxy.element.height);
      };
    }
  };

  SignatureBase.prototype.beginStroke = function (e) {
    this.internalRefresh();
    this.updateStroke(e);
  };

  SignatureBase.prototype.updateStroke = function (e) {
    var point = this.createPoint(e);
    this.addPoint(point);
  };

  SignatureBase.prototype.updateStrokeWithThrottle = function (args) {
    var now = Date.now();
    var remaining = this.interval - (now - this.previous);
    this.storedArgs = args;

    if (remaining <= 0 || remaining > this.interval) {
      if (this.timeout) {
        clearTimeout(this.timeout);
        this.timeout = null;
      }

      this.previous = now;
      this.updateStroke(this.storedArgs);

      if (!this.timeout) {
        this.storedArgs = null;
      }
    } else if (!this.timeout) {
      this.timeout = window.setTimeout(this.delay.bind(this), remaining);
    }
  };

  SignatureBase.prototype.delay = function () {
    this.previous = Date.now();
    this.timeout = null;
    this.updateStroke(this.storedArgs);

    if (!this.timeout) {
      this.storedArgs = null;
    }
  };

  SignatureBase.prototype.createPoint = function (e) {
    var rect = this.canvasContext.canvas.getBoundingClientRect();

    if (e.type === 'mousedown' || e.type === 'mousemove') {
      return this.point(e.clientX - rect.left, e.clientY - rect.top, new Date().getTime());
    } else {
      return this.point(e.touches[0].clientX - rect.left, e.touches[0].clientY - rect.top, new Date().getTime());
    }
  };
  /* Returns the current point corrdinates(x, y) and time.*/


  SignatureBase.prototype.point = function (pointX, pointY, time) {
    this.pointX = pointX;
    this.pointY = pointY;
    this.time = time || new Date().getTime();
    return {
      x: this.pointX,
      y: this.pointY,
      time: this.time
    };
  };

  SignatureBase.prototype.addPoint = function (point) {
    var points = this.pointColl;
    var controlPoint1;
    var controlPoint2;
    var lastPoint = points.length > 0 && points[points.length - 1];
    var isLastPointTooClose = lastPoint ? this.distanceTo(lastPoint) <= this.minDistance : false;

    if (!lastPoint || !(lastPoint && isLastPointTooClose)) {
      points.push(point);

      if (points.length > 2) {
        if (points.length === 3) {
          points.unshift(points[0]);
        }

        controlPoint1 = this.calculateCurveControlPoints(points[0], points[1], points[2]).controlPoint2;
        controlPoint2 = this.calculateCurveControlPoints(points[1], points[2], points[3]).controlPoint1;
        this.startPoint = points[1];
        this.controlPoint1 = controlPoint1;
        this.controlPoint2 = controlPoint2;
        this.endPoint = points[2];
        this.startDraw();
        points.shift();
      }
    }
  };

  SignatureBase.prototype.startDraw = function () {
    var velocity;
    velocity = this.pointVelocityCalc(this.startPoint);
    velocity = this.velocity * velocity + (1 - this.velocity) * this.lastVelocity;
    var newWidth = Math.max(this.maxStrokeWidth / (velocity + 1), this.minStrokeWidth);
    this.curveDraw(this.lastWidth, newWidth);
    this.lastVelocity = velocity;
    this.lastWidth = newWidth;
  };

  SignatureBase.prototype.endDraw = function () {
    var canDrawCurve = this.pointColl.length > 2;
    var point = this.pointColl[0];

    if (!canDrawCurve && point) {
      this.strokeDraw(point);
    }
  };
  /* Calculate the Bezier (x, y) coordinate of the curve. */


  SignatureBase.prototype.curveDraw = function (startWidth, endWidth) {
    var context = this.canvasContext;
    var width;
    var i;
    var t1;
    var t2;
    var t3;
    var u1;
    var u2;
    var u3;
    var x;
    var y;
    var widthValue = endWidth - startWidth;
    var bezierLength = this.bezierLengthCalc();
    var drawSteps = Math.ceil(bezierLength) * 2;
    context.beginPath();

    for (i = 0; i < drawSteps; i++) {
      t1 = i / drawSteps;
      t2 = t1 * t1;
      t3 = t2 * t1;
      u1 = 1 - t1;
      u2 = u1 * u1;
      u3 = u2 * u1;
      x = u3 * this.startPoint.x;
      x += 3 * u2 * t1 * this.controlPoint1.x;
      x += 3 * u1 * t2 * this.controlPoint2.x;
      x += t3 * this.endPoint.x;
      y = u3 * this.startPoint.y;
      y += 3 * u2 * t1 * this.controlPoint1.y;
      y += 3 * u1 * t2 * this.controlPoint2.y;
      y += t3 * this.endPoint.y;
      width = Math.min(startWidth + t3 * widthValue, this.maxStrokeWidth);
      this.arcDraw(x, y, width);
    }

    context.closePath();
    context.fill();
    this.isSignatureEmpty = false;
  };

  SignatureBase.prototype.strokeDraw = function (point) {
    var context = this.canvasContext;
    var pointSize = (this.minStrokeWidth + this.maxStrokeWidth) / 2;
    context.beginPath();
    this.arcDraw(point.x, point.y, pointSize);
    context.closePath();
    context.fill();
    this.isSignatureEmpty = false;
  };

  SignatureBase.prototype.arcDraw = function (x, y, size) {
    this.signPointsColl.push({
      x: x,
      y: y
    });
    var context = this.canvasContext;
    context.moveTo(x, y);
    context.arc(x, y, size, 0, 2 * Math.PI, false);
  };
  /* Utility functions for Bezier algorithm*/


  SignatureBase.prototype.calculateCurveControlPoints = function (p1, p2, p3) {
    var dx1 = p1.x - p2.x;
    var dy1 = p1.y - p2.y;
    var dx2 = p2.x - p3.x;
    var dy2 = p2.y - p3.y;
    var m1 = {
      x: (p1.x + p2.x) / 2.0,
      y: (p1.y + p2.y) / 2.0
    };
    var m2 = {
      x: (p2.x + p3.x) / 2.0,
      y: (p2.y + p3.y) / 2.0
    };
    var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
    var l2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);
    var dxm = m1.x - m2.x;
    var dym = m1.y - m2.y;
    var k = l2 / (l1 + l2);
    var cm = {
      x: m2.x + dxm * k,
      y: m2.y + dym * k
    };
    var tx = p2.x - cm.x;
    var ty = p2.y - cm.y;
    return {
      controlPoint1: this.point(m1.x + tx, m1.y + ty, 0),
      controlPoint2: this.point(m2.x + tx, m2.y + ty, 0)
    };
  };
  /* Returns approximated bezier length of the curuve.*/


  SignatureBase.prototype.bezierLengthCalc = function () {
    var steps = 10;
    var length = 0;
    var i;
    var t;
    var pointx1;
    var pointy1;
    var pointx2;
    var pointy2;
    var pointx3;
    var pointy3;

    for (i = 0; i <= steps; i++) {
      t = i / steps;
      pointx1 = this.bezierPointCalc(t, this.startPoint.x, this.controlPoint1.x, this.controlPoint2.x, this.endPoint.x);
      pointy1 = this.bezierPointCalc(t, this.startPoint.y, this.controlPoint1.y, this.controlPoint2.y, this.endPoint.y);

      if (i > 0) {
        pointx3 = pointx1 - pointx2;
        pointy3 = pointy1 - pointy2;
        length += Math.sqrt(pointx3 * pointx3 + pointy3 * pointy3);
      }

      pointx2 = pointx1;
      pointy2 = pointy1;
    }

    return length;
  };
  /* Calculate parametric value of x or y given t and the
     four point(startpoint, controlpoint1, controlpoint2, endpoint) coordinates of a cubic bezier curve.*/


  SignatureBase.prototype.bezierPointCalc = function (t, startpoint, cp1, cp2, endpoint) {
    return startpoint * (1.0 - t) * (1.0 - t) * (1.0 - t) + 3.0 * cp1 * (1.0 - t) * (1.0 - t) * t + 3.0 * cp2 * (1.0 - t) * t * t + endpoint * t * t * t;
  };
  /* Velocity between the current point and last point.*/


  SignatureBase.prototype.pointVelocityCalc = function (startPoint) {
    return this.time !== startPoint.time ? this.distanceTo(startPoint) / (this.time - startPoint.time) : 0;
  };
  /* Distance between the current point and last point.*/


  SignatureBase.prototype.distanceTo = function (start) {
    return Math.sqrt(Math.pow(this.pointX - start.x, 2) + Math.pow(this.pointY - start.y, 2));
  };

  SignatureBase.prototype.isRead = function (isRead) {
    if (isRead) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.canvasContext.canvas, 'mousedown touchstart', this.mouseDownHandler);
    } else if (!this.disabled) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.canvasContext.canvas, 'mousedown touchstart', this.mouseDownHandler, this);
    }
  };

  SignatureBase.prototype.enableOrDisable = function (isDisable) {
    this.disabled = isDisable;

    if (isDisable) {
      this.canvasContext.canvas.style.filter = 'opacity(0.5)';
      this.isRead(true);
    } else {
      this.canvasContext.canvas.style.filter = '';
      this.isRead(false);
    }
  };

  SignatureBase.prototype.updateSnapCollection = function (isClear) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.incStep)) {
      this.incStep = -1;
      this.incStep++;
      this.snapColl = [];
      this.clearArray = [];
    } else {
      this.incStep++;
    }

    if (this.incStep < this.snapColl.length) {
      this.snapColl.length = this.incStep;
    }

    if (this.incStep > 0) {
      var canvasNew = this.createElement('canvas', {
        className: 'e-' + this.getModuleName() + '-wrapper'
      });
      var canvasContextNew = canvasNew.getContext('2d');
      canvasNew.width = this.canvasContext.canvas.width;
      canvasNew.height = this.canvasContext.canvas.height;
      canvasContextNew.drawImage(this.canvasContext.canvas, 0, 0, canvasNew.width, canvasNew.height);
      this.snapColl.push(canvasNew.toDataURL());
    } else {
      this.snapColl.push(this.canvasContext.canvas.toDataURL());
    }

    if (isClear) {
      this.clearArray.push(this.incStep);
    }
  };

  SignatureBase.prototype.setBackgroundImage = function (imageSrc, type) {
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    var proxy = this;
    var imageObj = new Image();
    imageObj.crossOrigin = 'anonymous';
    imageObj.src = imageSrc;

    if (type == 'temp') {
      imageObj.onload = function () {
        proxy.tempContext.globalCompositeOperation = 'source-over';
        proxy.tempContext.drawImage(imageObj, 0, 0, proxy.element.width, proxy.element.height);
      };
    } else {
      imageObj.onload = function () {
        proxy.canvasContext.globalCompositeOperation = 'source-over';
        proxy.canvasContext.drawImage(imageObj, 0, 0, proxy.element.width, proxy.element.height);
        proxy.updateSnapCollection();
        proxy.saveBackground(true);
      };

      this.canvasContext.clearRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
    }
  };

  SignatureBase.prototype.setBackgroundColor = function (color) {
    var canvasEle = this.canvasContext;
    canvasEle.strokeStyle = color;
    var i;
    var j;

    for (i = 1; i <= canvasEle.canvas.width; i++) {
      for (j = 1; j <= canvasEle.canvas.height; j++) {
        canvasEle.strokeRect(0, 0, i, j);
      }
    }

    this.updateSnapCollection();
  };

  SignatureBase.prototype.loadPersistedSignature = function () {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.signatureValue)) {
      return;
    } // eslint-disable-next-line @typescript-eslint/no-this-alias


    var proxy = this;
    var lastImage = new Image();
    lastImage.src = this.signatureValue;

    lastImage.onload = function () {
      proxy.canvasContext.clearRect(0, 0, proxy.element.width, proxy.element.height);
      proxy.canvasContext.drawImage(lastImage, 0, 0);
      proxy.updateSnapCollection();
    };

    this.isSignatureEmpty = false;
  };
  /**
   * To get the signature as Blob.
   *
   * @param {string} url - specify the url/base 64 string to get blob of the signature.
   * @returns {Blob}.
   */


  SignatureBase.prototype.getBlob = function (url) {
    var arr = url.split(',');
    var type = arr[0].match(/:(.*?);/)[1];
    var bstr = atob(arr[1]);
    var n = bstr.length;
    var u8arr = new Uint8Array(n);

    while (n--) {
      u8arr[n] = bstr.charCodeAt(n);
    }

    return new Blob([u8arr], {
      type: type
    });
  };

  SignatureBase.prototype.download = function (blob, fileName) {
    var blobUrl = URL.createObjectURL(blob);
    var a = document.createElement('a');
    a.href = blobUrl;
    a.target = '_parent';
    a.download = fileName;
    (document.body || document.documentElement).appendChild(a);
    a.click();
    a.parentNode.removeChild(a);
  };

  SignatureBase.prototype.internalRefresh = function () {
    this.pointColl = [];
    this.lastVelocity = 0;
    this.lastWidth = (this.minStrokeWidth + this.maxStrokeWidth) / 2;
  };
  /**
   * To refresh the signature.
   *
   * @returns {void}.
   */


  SignatureBase.prototype.refresh = function () {
    this.isResponsive = false;
    this.setHTMLProperties();
    this.resizeHandler();
    this.internalRefresh();
  };
  /**
   * Erases all the signature strokes signed by user.
   *
   * @returns {void}.
   */


  SignatureBase.prototype.clear = function () {
    var args = {
      actionName: 'clear'
    };
    this.canvasContext.clearRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
    this.internalRefresh();
    this.signRatioPointsColl = [];
    this.updateSnapCollection(true);
    this.isSignatureEmpty = true;

    if (!this.isBlazor) {
      this.trigger('change', args);
    } else {
      this.dotnetRef.invokeMethodAsync('TriggerEventAsync', 'Clear');
    }
  };
  /**
   * Undo the last user action.
   *
   * @returns {void}.
   */


  SignatureBase.prototype.undo = function () {
    var args = {
      actionName: 'undo'
    }; // eslint-disable-next-line @typescript-eslint/no-this-alias

    var proxy = this;

    if (this.incStep > 0) {
      this.incStep--;
      var undoImg_1 = new Image();
      undoImg_1.src = this.snapColl[this.incStep];

      undoImg_1.onload = function () {
        proxy.canvasContext.clearRect(0, 0, proxy.element.width, proxy.element.height);
        proxy.canvasContext.drawImage(undoImg_1, 0, 0, proxy.element.width, proxy.element.height);
      };
    }

    this.isClear();

    if (!this.isBlazor) {
      this.trigger('change', args);
    } else {
      this.dotnetRef.invokeMethodAsync('TriggerEventAsync', 'Undo');
    }
  };
  /**
   * Redo the last user action.
   *
   * @returns {void}.
   */


  SignatureBase.prototype.redo = function () {
    var args = {
      actionName: 'redo'
    }; // eslint-disable-next-line @typescript-eslint/no-this-alias

    var proxy = this;

    if (this.incStep < this.snapColl.length - 1) {
      this.incStep++;
      var redoImg_1 = new Image();
      redoImg_1.src = this.snapColl[this.incStep];

      redoImg_1.onload = function () {
        proxy.canvasContext.clearRect(0, 0, proxy.element.width, proxy.element.height);
        proxy.canvasContext.drawImage(redoImg_1, 0, 0, proxy.element.width, proxy.element.height);
      };
    }

    this.isClear();

    if (!this.isBlazor) {
      this.trigger('change', args);
    } else {
      this.dotnetRef.invokeMethodAsync('TriggerEventAsync', 'Redo');
    }
  };

  SignatureBase.prototype.isClear = function () {
    if (this.clearArray) {
      var empty = false;

      for (var i = 0; i < this.clearArray.length; i++) {
        if (this.clearArray[i] === this.incStep) {
          this.isSignatureEmpty = true;
          empty = true;
        }
      }

      if (!empty) {
        this.isSignatureEmpty = false;
      }
    }
  };
  /**
   * To check whether the signature is empty or not.
   *
   * @returns {boolean}.
   */


  SignatureBase.prototype.isEmpty = function () {
    return this.isSignatureEmpty;
  };
  /**
   * To check whether the undo collection is empty or not.
   *
   * @returns {boolean}.
   */


  SignatureBase.prototype.canUndo = function () {
    return this.incStep > 0;
  };
  /**
   * To check whether the redo collection is empty or not.
   *
   * @returns {boolean}.
   */


  SignatureBase.prototype.canRedo = function () {
    return this.incStep < this.snapColl.length - 1;
  };
  /**
   * To draw the signature based on the given text, with the font family and font size.
   *
   * @param {string} text - specify text to be drawn as signature.
   * @param {string} fontFamily - specify font family of a signature.
   * @param {number} fontSize - specify font size of a signature.
   * @param {number} x- Specifies the x-coordinate to start the text of a signature. Default to the center point of the image if it not specified.
   * @param {number} y - Specifies the y-coordinate to start the text of a signature. Default to the center point of the image if it not specified.
   *
   * @returns {void}.
   */


  SignatureBase.prototype.draw = function (text, fontFamily, fontSize, x, y) {
    var args = {
      actionName: 'draw-text'
    };
    this.canvasContext.clearRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
    fontFamily = fontFamily || 'Arial';
    fontSize = fontSize || 30;
    this.canvasContext.font = fontSize + 'px ' + fontFamily;
    var startX = this.element.width / 2;
    var startY = this.element.height / 2;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(x) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(y)) {
      this.canvasContext.textAlign = 'center';
      this.canvasContext.textBaseline = 'middle';
    } else {
      startX = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(x) ? startX : x;
      startY = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(y) ? startY + fontSize / 2 : y + fontSize / 2;
    }

    this.canvasContext.fillText(text, startX, startY);
    this.updateSnapCollection();
    this.isSignatureEmpty = false;
    this.trigger('change', args);
  };
  /**
   * To load the signature with the given base 64 string, height and width.
   *
   * @param {string} signature - specify the url/base 64 string to be drawn as signature.
   * @param {number} width - specify the width of the loaded signature image.
   * @param {number} height - specify the height of the loaded signature image.
   * @returns {void}.
   */


  SignatureBase.prototype.load = function (signature, width, height) {
    height = height || this.element.height;
    width = width || this.element.width;
    this.canvasContext.clearRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height); // eslint-disable-next-line @typescript-eslint/no-this-alias

    var proxy = this;
    var bitmapImage = new Image();
    bitmapImage.src = signature;

    if (signature.slice(0, 4) !== 'data') {
      bitmapImage.crossOrigin = 'anonymous';
    }

    bitmapImage.onload = function () {
      Promise.all([createImageBitmap(bitmapImage, 0, 0, width, height)]).then(function (results) {
        var tempCanvas = document.createElement('canvas');
        tempCanvas.width = width;
        tempCanvas.height = height;
        tempCanvas.getContext('2d').drawImage(results[0], 0, 0);

        if (signature.slice(0, 4) !== 'data') {
          proxy.canvasContext.globalCompositeOperation = 'source-over';
        }

        proxy.canvasContext.drawImage(tempCanvas, 0, 0, width, height, 0, 0, proxy.element.width, proxy.element.height);
        proxy.updateSnapCollection();
      });
    };

    this.isSignatureEmpty = false;
  };

  SignatureBase.prototype.saveBackground = function (savebg) {
    var imageSrc;

    if (savebg && this.backgroundImage) {
      imageSrc = this.snapColl[this.incStep - 1];
    } else {
      imageSrc = this.snapColl[this.incStep];
    }

    if (!savebg) {
      this.canvasContext.clearRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);

      if (this.backgroundImage) {
        this.setBackgroundImage(this.backgroundImage);
      } else if (this.backgroundColor) {
        this.setBackgroundColor(this.backgroundColor);
        savebg = true;
      }
    }

    if (savebg) {
      // eslint-disable-next-line @typescript-eslint/no-this-alias
      var proxy_1 = this;
      var imageObj_1 = new Image();
      imageObj_1.crossOrigin = 'anonymous';
      imageObj_1.src = imageSrc;

      imageObj_1.onload = function () {
        proxy_1.backgroundLoaded = true;
        proxy_1.canvasContext.globalCompositeOperation = 'source-over';
        proxy_1.canvasContext.drawImage(imageObj_1, 0, 0, proxy_1.element.width, proxy_1.element.height);
        proxy_1.save(proxy_1.fileType, proxy_1.fileName);
      };
    }
  };
  /**
   * To save the signature with the given file type and file name.
   *
   * @param {SignatureFileType} type - specify type of the file to be saved a signature.
   * @param {string} fileName - specify name of the file to be saved a signature.
   *
   * @returns {void}.
   */


  SignatureBase.prototype.save = function (type, fileName) {
    if (this.saveWithBackground && this.backgroundLoaded == null && (this.backgroundImage || this.backgroundColor)) {
      this.backgroundLoaded = false;
      this.fileType = type;
      this.fileName = fileName;
      this.saveBackground(false);
    } else if (type === 'Svg') {
      fileName = fileName || 'Signature';
      this.toSVG(fileName);
    } else if (type === 'Jpeg') {
      fileName = fileName || 'Signature';

      if (!this.saveWithBackground || this.saveWithBackground && !(this.backgroundImage || this.backgroundColor)) {
        this.toJPEG(fileName);
      } else {
        var dataURL = this.canvasContext.canvas.toDataURL('image/jpeg');
        this.download(this.getBlob(dataURL), fileName + '.' + 'jpeg');
      }
    } else {
      fileName = fileName || 'Signature';
      var dataURL = this.canvasContext.canvas.toDataURL('image/png');
      this.download(this.getBlob(dataURL), fileName + '.' + 'png');
    }

    if (this.saveWithBackground && this.backgroundLoaded) {
      this.resetSnap();
    }
  };

  SignatureBase.prototype.resetSnap = function () {
    this.canvasContext.clearRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height); // eslint-disable-next-line @typescript-eslint/no-this-alias

    var proxy = this;
    var restoreObj = new Image();
    restoreObj.src = this.snapColl[this.incStep - 1];

    restoreObj.onload = function () {
      proxy.canvasContext.drawImage(restoreObj, 0, 0, proxy.element.width, proxy.element.height);
      proxy.updateSnapCollection();
    };

    this.backgroundLoaded = null;
    this.snapColl.pop();
    this.incStep--;
    this.snapColl.pop();
    this.incStep--;
  };

  SignatureBase.prototype.toJPEG = function (fileName) {
    var _this = this;

    var imageSrc = this.snapColl[this.incStep];
    this.setBackgroundColor('#ffffff'); // eslint-disable-next-line @typescript-eslint/no-this-alias

    var proxy = this;
    var imageObj = new Image();
    imageObj.crossOrigin = 'anonymous';
    imageObj.src = imageSrc;

    imageObj.onload = function () {
      proxy.canvasContext.globalCompositeOperation = 'source-over';
      proxy.canvasContext.drawImage(imageObj, 0, 0, proxy.element.width, proxy.element.height);
      var dataURL = proxy.canvasContext.canvas.toDataURL('image/jpeg');
      proxy.download(proxy.getBlob(dataURL), fileName + '.' + 'jpeg');
      proxy.canvasContext.clearRect(0, 0, proxy.canvasContext.canvas.width, proxy.canvasContext.canvas.height);

      _this.resizeHandler();
    };

    this.snapColl.pop();
    this.incStep--;
  };

  SignatureBase.prototype.toSVG = function (fileName, dataUrl) {
    var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.setAttribute('width', this.canvasContext.canvas.width.toString());
    svg.setAttribute('height', this.canvasContext.canvas.height.toString());
    var XLinkNS = 'http://www.w3.org/1999/xlink';
    var img = document.createElementNS('http://www.w3.org/2000/svg', 'image');
    img.setAttributeNS(null, 'height', this.canvasContext.canvas.height.toString());
    img.setAttributeNS(null, 'width', this.canvasContext.canvas.width.toString());
    img.setAttributeNS(XLinkNS, 'xlink:href', dataUrl);
    svg.appendChild(img);
    var prefix = 'data:image/svg+xml;base64,';
    var header = '<svg' + ' xmlns="http://www.w3.org/2000/svg"' + ' xmlns:xlink="http://www.w3.org/1999/xlink"' + (" width=\"" + this.canvasContext.canvas.width + "\"") + (" height=\"" + this.canvasContext.canvas.height + "\"") + '>';
    var footer = '</svg>';
    var body = svg.innerHTML;
    var data = header + body + footer;
    var svgDataUrl = prefix + btoa(data);

    if (fileName == null) {
      return svgDataUrl;
    } else {
      this.download(this.getBlob(svgDataUrl), fileName + '.' + 'svg');
      return null;
    }
  };
  /**
   * To save the signature as Blob.
   *
   * @returns {Blob}.
   */


  SignatureBase.prototype.saveAsBlob = function () {
    return this.getBlob(this.canvasContext.canvas.toDataURL('image/png'));
  };
  /**
   * To get the signature as Base 64.
   *
   * @private
   * @param {SignatureFileType} type - Specifies the type of the image format.
   * @returns {string}.
   */


  SignatureBase.prototype.getSignature = function (type) {
    if (this.saveWithBackground && this.backgroundColor && !this.backgroundImage) {
      this.tempContext.fillStyle = this.backgroundColor;
      this.tempContext.fillRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
    } else if (!this.backgroundColor && !this.backgroundImage && type === 'Jpeg') {
      this.tempContext.fillStyle = "#fff";
      this.tempContext.fillRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
    }

    this.tempContext.drawImage(this.element, 0, 0);

    if (type === 'Jpeg') {
      return this.tempCanvas.toDataURL('image/jpeg');
    } else if (type === 'Svg') {
      return this.toSVG(null, this.tempCanvas.toDataURL('image/png'));
    } else {
      return this.tempCanvas.toDataURL('image/png');
    }
  };
  /**
   * Get component name.
   *
   * @returns {string} - Module Name
   * @private
   */


  SignatureBase.prototype.getModuleName = function () {
    return 'signature';
  };
  /**
   * To get the properties to be maintained in the persisted state.
   *
   * @returns {string} - Persist data
   */


  SignatureBase.prototype.getPersistData = function () {
    this.signatureValue = this.snapColl[this.incStep];
    return this.addOnPersist(['signatureValue']);
  };
  /**
   * Removes the component from the DOM and detaches all its related event handlers.
   * Also it maintains the initial input element from the DOM.
   *
   * @method destroy
   * @returns {void}
   */


  SignatureBase.prototype.destroy = function () {
    if (this.getModuleName() !== 'image-editor') {
      this.unwireEvents(null);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], 'e-' + this.getModuleName());
      this.element.removeAttribute('tabindex');
      this.pointColl = null;
    }

    _super.prototype.destroy.call(this);
  };
  /**
   * Modified onPropertyChanged method for both blazor and EJ2 signature component.
   *
   * @private
   * @param {string} key - Specifies the property, which changed.
   * @param {string} value - Specifies the property value changed.
   * @returns {void}
   */


  SignatureBase.prototype.propertyChanged = function (key, value) {
    var canvasNew = this.canvasContext;

    switch (key) {
      case 'backgroundColor':
        canvasNew.canvas.style.backgroundColor = value;
        this.backgroundColor = value;
        break;

      case 'backgroundImage':
        canvasNew.canvas.style.backgroundImage = 'url(' + value + ')';
        this.backgroundImage = value;

        if (this.saveWithBackground) {
          this.setBackgroundImage(this.backgroundImage, 'temp');
        }

        break;

      case 'strokeColor':
        canvasNew.fillStyle = value;
        this.strokeColor = value;
        break;

      case 'saveWithBackground':
        this.saveWithBackground = value;
        break;

      case 'maxStrokeWidth':
        this.maxStrokeWidth = value;
        break;

      case 'minStrokeWidth':
        this.minStrokeWidth = value;
        break;

      case 'velocity':
        this.velocity = value;
        break;

      case 'isReadOnly':
        this.isRead(value);
        break;

      case 'disabled':
        this.enableOrDisable(value);
        break;
    }
  };

  return SignatureBase;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/form-validator/form-validator.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/form-validator/form-validator.js ***!
  \**********************************************************************************/
/*! exports provided: regex, ErrorOption, FormValidator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "regex", function() { return regex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorOption", function() { return ErrorOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormValidator", function() { return FormValidator; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};





/**
 * global declarations
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any

var regex = {
  /* eslint-disable no-useless-escape */
  EMAIL: new RegExp('^[A-Za-z0-9._%+-]{1,}@[A-Za-z0-9._%+-]{1,}([.]{1}[a-zA-Z0-9]{2,}' + '|[.]{1}[a-zA-Z0-9]{2,4}[.]{1}[a-zA-Z0-9]{2,4})$'),

  /* eslint-disable-next-line security/detect-unsafe-regex */
  URL: /^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+$/m,
  DATE_ISO: new RegExp('^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$'),
  DIGITS: new RegExp('^[0-9]*$'),
  PHONE: new RegExp('^[+]?[0-9]{9,13}$'),
  CREDITCARD: new RegExp('^\\d{13,16}$')
  /* eslint-enable no-useless-escape */

};
/**
 * ErrorOption values
 *
 * @private
 */

var ErrorOption;

(function (ErrorOption) {
  /**
   * Defines the error message.
   */
  ErrorOption[ErrorOption["Message"] = 0] = "Message";
  /**
   * Defines the error element type.
   */

  ErrorOption[ErrorOption["Label"] = 1] = "Label";
})(ErrorOption || (ErrorOption = {}));
/**
 * FormValidator class enables you to validate the form fields based on your defined rules
 * ```html
 * <form id='formId'>
 *  <input type='text' name='Name' />
 *  <input type='text' name='Age' />
 * </form>
 * <script>
 *   let formObject = new FormValidator('#formId', {
 *      rules: { Name: { required: true }, Age: { range: [18, 30] } };
 *   });
 *   formObject.validate();
 * </script>
 * ```
 */


var FormValidator =
/** @class */
function (_super) {
  __extends(FormValidator, _super);
  /**
   * Initializes the FormValidator.
   *
   * @param {string | HTMLFormElement} element - Specifies the element to render as component.
   * @param {FormValidatorModel} options - Specifies the FormValidator model.
   * @private
   */


  function FormValidator(element, options) {
    var _this = _super.call(this, options, element) || this;

    _this.validated = [];
    _this.errorRules = [];
    _this.allowSubmit = false;
    _this.required = 'required';
    _this.infoElement = null;
    _this.inputElement = null;
    _this.selectQuery = 'input:not([type=reset]):not([type=button]), select, textarea'; // eslint-disable-next-line @typescript-eslint/no-explicit-any

    _this.localyMessage = {};
    /**
     * Specifies the default messages for validation rules.
     *
     * @default { List of validation message }
     */

    _this.defaultMessages = {
      required: 'This field is required.',
      email: 'Please enter a valid email address.',
      url: 'Please enter a valid URL.',
      date: 'Please enter a valid date.',
      dateIso: 'Please enter a valid date ( ISO ).',
      creditcard: 'Please enter valid card number',
      number: 'Please enter a valid number.',
      digits: 'Please enter only digits.',
      maxLength: 'Please enter no more than {0} characters.',
      minLength: 'Please enter at least {0} characters.',
      rangeLength: 'Please enter a value between {0} and {1} characters long.',
      range: 'Please enter a value between {0} and {1}.',
      max: 'Please enter a value less than or equal to {0}.',
      min: 'Please enter a value greater than or equal to {0}.',
      regex: 'Please enter a correct value.',
      tel: 'Please enter a valid phone number.',
      pattern: 'Please enter a correct pattern value.',
      equalTo: 'Please enter the valid match text'
    };

    if (typeof _this.rules === 'undefined') {
      _this.rules = {};
    }

    _this.l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"]('formValidator', _this.defaultMessages, _this.locale);

    if (_this.locale) {
      _this.localeFunc();
    }

    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["onIntlChange"].on('notifyExternalChange', _this.afterLocalization, _this);
    element = typeof element === 'string' ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])(element, document) : element; // Set novalidate to prevent default HTML5 form validation

    if (_this.element != null) {
      _this.element.setAttribute('novalidate', '');

      _this.inputElements = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])(_this.selectQuery, _this.element);

      _this.createHTML5Rules();

      _this.wireEvents();
    } else {
      return undefined;
    }

    return _this;
  }

  FormValidator_1 = FormValidator;
  /* eslint-enable @typescript-eslint/no-explicit-any */

  /**
   * Add validation rules to the corresponding input element based on `name` attribute.
   *
   * @param {string} name `name` of form field.
   * @param {Object} rules Validation rules for the corresponding element.
   * @returns {void}
   */

  FormValidator.prototype.addRules = function (name, rules) {
    if (name) {
      // eslint-disable-next-line no-prototype-builtins
      if (this.rules.hasOwnProperty(name)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(this.rules["" + name], rules, {});
      } else {
        this.rules["" + name] = rules;
      }
    }
  };
  /**
   * Remove validation to the corresponding field based on name attribute.
   * When no parameter is passed, remove all the validations in the form.
   *
   * @param {string} name Input name attribute value.
   * @param {string[]} rules List of validation rules need to be remove from the corresponding element.
   * @returns {void}
   */


  FormValidator.prototype.removeRules = function (name, rules) {
    if (!name && !rules) {
      this.rules = {};
    } else if (this.rules["" + name] && !rules) {
      delete this.rules["" + name];
    } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.rules["" + name] && rules)) {
      for (var i = 0; i < rules.length; i++) {
        delete this.rules["" + name][rules[parseInt(i.toString())]];
      }
    } else {
      return;
    }
  };
  /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */

  /**
   * Validate the current form values using defined rules.
   * Returns `true` when the form is valid otherwise `false`
   *
   * @param {string} selected - Optional parameter to validate specified element.
   * @returns {boolean}
   */


  FormValidator.prototype.validate = function (selected) {
    var rules = Object.keys(this.rules);

    if (selected && rules.length) {
      this.validateRules(selected); //filter the selected element it don't have any valid input element

      return rules.indexOf(selected) !== -1 && this.errorRules.filter(function (data) {
        return data.name === selected;
      }).length === 0;
    } else {
      this.errorRules = [];

      for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {
        var name_1 = rules_1[_i];
        this.validateRules(name_1);
      }

      return this.errorRules.length === 0;
    }
  };
  /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */

  /**
   * Reset the value of all the fields in form.
   *
   * @returns {void}
   */


  FormValidator.prototype.reset = function () {
    this.element.reset();
    this.clearForm();
  };
  /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */

  /**
   * Get input element by name.
   *
   * @param {string} name - Input element name attribute value.
   * @returns {HTMLInputElement}
   */


  FormValidator.prototype.getInputElement = function (name) {
    this.inputElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('[name="' + name + '"]', this.element);
    return this.inputElement;
  };
  /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */

  /**
   * Destroy the form validator object and error elements.
   *
   * @returns {void}
   */


  FormValidator.prototype.destroy = function () {
    this.reset();
    this.unwireEvents();
    this.rules = {};
    var elements = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + this.errorClass + ', .' + this.validClass, this.element);

    for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
      var element = elements_1[_i];
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(element);
    }

    _super.prototype.destroy.call(this);

    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["onIntlChange"].off('notifyExternalChange', this.afterLocalization);
  };
  /**
   * @param {FormValidatorModel} newProp - Returns the dynamic property value of the component.
   * @param {FormValidatorModel} oldProp - Returns the previous property value of the component.
   * @returns {void}
   * @private
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  FormValidator.prototype.onPropertyChanged = function (newProp, oldProp) {
    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'locale':
          this.localeFunc();
          break;
      }
    }
  };
  /**
   * @private
   * @returns {void}
   */


  FormValidator.prototype.localeFunc = function () {
    for (var _i = 0, _a = Object.keys(this.defaultMessages); _i < _a.length; _i++) {
      var key = _a[_i];
      this.l10n.setLocale(this.locale);
      var value = this.l10n.getConstant(key);
      this.localyMessage["" + key] = value;
    }
  };
  /**
   * @private
   * @returns {string} - Returns the component name.
   */


  FormValidator.prototype.getModuleName = function () {
    return 'formValidator';
  };
  /**
   * @param {any} args - Specifies the culture name.
   * @private
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types


  FormValidator.prototype.afterLocalization = function (args) {
    this.locale = args.locale;
    this.localeFunc();
  };
  /**
   * Allows you to refresh the form validator base events to the elements inside the form.
   *
   * @returns {void}
   */


  FormValidator.prototype.refresh = function () {
    this.unwireEvents();
    this.inputElements = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])(this.selectQuery, this.element);
    this.wireEvents();
  };

  FormValidator.prototype.clearForm = function () {
    this.errorRules = [];
    this.validated = [];
    var elements = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])(this.selectQuery, this.element);

    for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {
      var element = elements_2[_i];
      var input = element;
      input.removeAttribute('aria-invalid');
      var inputParent = input.parentElement;
      var grandParent = inputParent.parentElement;

      if (inputParent.classList.contains('e-control-wrapper') || inputParent.classList.contains('e-wrapper') || input.classList.contains('e-input') && inputParent.classList.contains('e-input-group')) {
        inputParent.classList.remove(this.errorClass);
      } else if (grandParent != null && (grandParent.classList.contains('e-control-wrapper') || grandParent.classList.contains('e-wrapper'))) {
        grandParent.classList.remove(this.errorClass);
      } else {
        input.classList.remove(this.errorClass);
      }

      if (input.name.length > 0) {
        this.getInputElement(input.name);
        this.getErrorElement(input.name);
        this.hideMessage(input.name);
      }

      if (inputParent.classList.contains('e-control-wrapper') || inputParent.classList.contains('e-wrapper') || input.classList.contains('e-input') && inputParent.classList.contains('e-input-group')) {
        inputParent.classList.remove(this.validClass);
      } else if (grandParent != null && (grandParent.classList.contains('e-control-wrapper') || grandParent.classList.contains('e-wrapper'))) {
        grandParent.classList.remove(this.validClass);
      } else {
        input.classList.remove(this.validClass);
      }
    }
  };

  FormValidator.prototype.createHTML5Rules = function () {
    var defRules = ['required', 'validateHidden', 'regex', 'rangeLength', 'maxLength', 'minLength', 'dateIso', 'digits', 'pattern', 'data-val-required', 'type', 'data-validation', 'min', 'max', 'range', 'equalTo', 'data-val-minlength-min', 'data-val-equalto-other', 'data-val-maxlength-max', 'data-val-range-min', 'data-val-regex-pattern', 'data-val-length-max', 'data-val-creditcard', 'data-val-phone'];
    var acceptedTypes = ['hidden', 'email', 'url', 'date', 'number', 'tel'];

    for (var _i = 0, _a = this.inputElements; _i < _a.length; _i++) {
      var input = _a[_i]; // Default attribute rules

      var allRule = {};

      for (var _b = 0, defRules_1 = defRules; _b < defRules_1.length; _b++) {
        var rule = defRules_1[_b];

        if (input.getAttribute(rule) !== null) {
          switch (rule) {
            case 'required':
              this.defRule(input, allRule, rule, input.required);
              break;

            case 'data-validation':
              rule = input.getAttribute(rule);
              this.defRule(input, allRule, rule, true);
              break;

            case 'type':
              if (acceptedTypes.indexOf(input.type) !== -1) {
                this.defRule(input, allRule, input.type, true);
              }

              break;

            case 'rangeLength':
            case 'range':
              this.defRule(input, allRule, rule, JSON.parse(input.getAttribute(rule)));
              break;

            case 'equalTo':
              {
                var id = input.getAttribute(rule);
                this.defRule(input, allRule, rule, id);
              }
              break;

            default:
              if (input.getAttribute('data-val') === 'true') {
                this.annotationRule(input, allRule, rule, input.getAttribute(rule));
              } else {
                this.defRule(input, allRule, rule, input.getAttribute(rule));
              }

          }
        }
      } //adding pattern type validation


      if (Object.keys(allRule).length !== 0) {
        this.addRules(input.name, allRule);
      }
    }
  };

  FormValidator.prototype.annotationRule = function (input, ruleCon, ruleName, value) {
    var annotationRule = ruleName.split('-');
    var rulesList = ['required', 'creditcard', 'phone', 'maxlength', 'minlength', 'range', 'regex', 'equalto'];
    var ruleFirstName = annotationRule[annotationRule.length - 1];
    var ruleSecondName = annotationRule[annotationRule.length - 2];

    if (rulesList.indexOf(ruleFirstName) !== -1) {
      switch (ruleFirstName) {
        case 'required':
          this.defRule(input, ruleCon, 'required', value);
          break;

        case 'creditcard':
          this.defRule(input, ruleCon, 'creditcard', value);
          break;

        case 'phone':
          this.defRule(input, ruleCon, 'tel', value);
          break;
      }
    } else if (rulesList.indexOf(ruleSecondName) !== -1) {
      switch (ruleSecondName) {
        case 'maxlength':
          this.defRule(input, ruleCon, 'maxLength', value);
          break;

        case 'minlength':
          this.defRule(input, ruleCon, 'minLength', value);
          break;

        case 'range':
          {
            var minvalue = input.getAttribute('data-val-range-min');
            var maxvalue = input.getAttribute('data-val-range-max');
            this.defRule(input, ruleCon, 'range', [minvalue, maxvalue]);
          }
          break;

        case 'equalto':
          {
            var id = input.getAttribute(ruleName).split('.');
            this.defRule(input, ruleCon, 'equalTo', id[id.length - 1]);
          }
          break;

        case 'regex':
          this.defRule(input, ruleCon, 'regex', value);
          break;
      }
    }
  };

  FormValidator.prototype.defRule = function (input, ruleCon, ruleName, value) {
    var message = input.getAttribute('data-' + ruleName + '-message');
    var annotationMessage = input.getAttribute('data-val-' + ruleName);
    var customMessage;

    if (this.rules[input.name] && ruleName !== 'validateHidden' && ruleName !== 'hidden') {
      this.getInputElement(input.name);
      customMessage = this.getErrorMessage(this.rules[input.name]["" + ruleName], ruleName);
    }

    if (message) {
      value = [value, message];
    } else if (annotationMessage) {
      value = [value, annotationMessage];
    } else if (customMessage) {
      value = [value, customMessage];
    }

    ruleCon["" + ruleName] = value;
  }; // Wire events to the form elements


  FormValidator.prototype.wireEvents = function () {
    for (var _i = 0, _a = this.inputElements; _i < _a.length; _i++) {
      var input = _a[_i];

      if (FormValidator_1.isCheckable(input)) {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(input, 'click', this.clickHandler, this);
      } else if (input.tagName === 'SELECT') {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(input, 'change', this.changeHandler, this);
      } else {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(input, 'focusout', this.focusOutHandler, this);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(input, 'keyup', this.keyUpHandler, this);
      }
    }

    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'submit', this.submitHandler, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'reset', this.resetHandler, this);
  }; // UnWire events to the form elements


  FormValidator.prototype.unwireEvents = function () {
    for (var _i = 0, _a = this.inputElements; _i < _a.length; _i++) {
      var input = _a[_i];
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].clearEvents(input);
    }

    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'submit', this.submitHandler);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'reset', this.resetHandler);
  }; // Handle input element focusout event


  FormValidator.prototype.focusOutHandler = function (e) {
    this.trigger('focusout', e); //FormValidator.triggerCallback(this.focusout, e);

    var element = e.target;

    if (this.rules[element.name]) {
      if (this.rules[element.name][this.required] || element.value.length > 0) {
        this.validate(element.name);
      } else if (this.validated.indexOf(element.name) === -1) {
        this.validated.push(element.name);
      }
    }
  }; // Handle input element keyup event


  FormValidator.prototype.keyUpHandler = function (e) {
    this.trigger('keyup', e);
    var element = e.target; // List of keys need to prevent while validation

    var excludeKeys = [16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225];

    if (e.which === 9 && (!this.rules[element.name] || this.rules[element.name] && !this.rules[element.name][this.required])) {
      return;
    }

    if (this.validated.indexOf(element.name) !== -1 && this.rules[element.name] && excludeKeys.indexOf(e.which) === -1) {
      this.validate(element.name);
    }
  }; // Handle input click event


  FormValidator.prototype.clickHandler = function (e) {
    this.trigger('click', e);
    var element = e.target; // If element type is not submit allow validation

    if (element.type !== 'submit') {
      this.validate(element.name);
    } else if (element.getAttribute('formnovalidate') !== null) {
      // Prevent form validation, if submit button has formnovalidate attribute
      this.allowSubmit = true;
    }
  }; // Handle input change event


  FormValidator.prototype.changeHandler = function (e) {
    this.trigger('change', e);
    var element = e.target;
    this.validate(element.name);
  }; // Handle form submit event


  FormValidator.prototype.submitHandler = function (e) {
    this.trigger('submit', e); //FormValidator.triggerCallback(this.submit, e);
    // Prevent form submit if validation failed

    if (!this.allowSubmit && !this.validate()) {
      e.preventDefault();
    } else {
      this.allowSubmit = false;
    }
  }; // Handle form reset


  FormValidator.prototype.resetHandler = function () {
    this.clearForm();
  }; // Validate each rule based on input element name


  FormValidator.prototype.validateRules = function (name) {
    if (!this.rules["" + name]) {
      return;
    }

    var rules = Object.keys(this.rules["" + name]);
    var hiddenType = false;
    var validateHiddenType = false;
    var vhPos = rules.indexOf('validateHidden');
    var hPos = rules.indexOf('hidden');
    this.getInputElement(name);

    if (hPos !== -1) {
      hiddenType = true;
    }

    if (vhPos !== -1) {
      validateHiddenType = true;
    }

    if (!hiddenType || hiddenType && validateHiddenType) {
      if (vhPos !== -1) {
        rules.splice(vhPos, 1);
      }

      if (hPos !== -1) {
        rules.splice(hPos - 1, 1);
      }

      this.getErrorElement(name);

      for (var _i = 0, rules_2 = rules; _i < rules_2.length; _i++) {
        var rule = rules_2[_i];
        var errorMessage = this.getErrorMessage(this.rules["" + name]["" + rule], rule);
        var errorRule = {
          name: name,
          message: errorMessage
        };
        var eventArgs = {
          inputName: name,
          element: this.inputElement,
          message: errorMessage
        };

        if (!this.isValid(name, rule) && !this.inputElement.classList.contains(this.ignore)) {
          this.removeErrorRules(name);
          this.errorRules.push(errorRule); // Set aria attributes to invalid elements

          this.inputElement.setAttribute('aria-invalid', 'true');
          this.inputElement.setAttribute('aria-describedby', this.inputElement.id + '-info');
          var inputParent = this.inputElement.parentElement;
          var grandParent = inputParent.parentElement;

          if (inputParent.classList.contains('e-control-wrapper') || inputParent.classList.contains('e-wrapper') || this.inputElement.classList.contains('e-input') && inputParent.classList.contains('e-input-group')) {
            inputParent.classList.add(this.errorClass);
            inputParent.classList.remove(this.validClass);
          } else if (grandParent != null && (grandParent.classList.contains('e-control-wrapper') || grandParent.classList.contains('e-wrapper'))) {
            grandParent.classList.add(this.errorClass);
            grandParent.classList.remove(this.validClass);
          } else {
            this.inputElement.classList.add(this.errorClass);
            this.inputElement.classList.remove(this.validClass);
          }

          if (!this.infoElement) {
            this.createErrorElement(name, errorRule.message, this.inputElement);
          } else {
            this.showMessage(errorRule);
          }

          eventArgs.errorElement = this.infoElement;
          eventArgs.status = 'failure';

          if (inputParent.classList.contains('e-control-wrapper') || inputParent.classList.contains('e-wrapper') || this.inputElement.classList.contains('e-input') && inputParent.classList.contains('e-input-group')) {
            inputParent.classList.add(this.errorClass);
            inputParent.classList.remove(this.validClass);
          } else if (grandParent != null && (grandParent.classList.contains('e-control-wrapper') || grandParent.classList.contains('e-wrapper'))) {
            grandParent.classList.add(this.errorClass);
            grandParent.classList.remove(this.validClass);
          } else {
            this.inputElement.classList.add(this.errorClass);
            this.inputElement.classList.remove(this.validClass);
          }

          this.optionalValidationStatus(name, eventArgs);
          this.trigger('validationComplete', eventArgs); // Set aria-required to required rule elements

          if (rule === 'required') {
            this.inputElement.setAttribute('aria-required', 'true');
          }

          break;
        } else {
          this.hideMessage(name);
          eventArgs.status = 'success';
          this.trigger('validationComplete', eventArgs);
        }
      }
    } else {
      return;
    }
  }; // Update the optional validation status


  FormValidator.prototype.optionalValidationStatus = function (name, refer) {
    if (!this.rules["" + name][this.required] && !this.inputElement.value.length && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.infoElement)) {
      this.infoElement.innerHTML = this.inputElement.value;
      this.infoElement.setAttribute('aria-invalid', 'false');
      refer.status = '';
      this.hideMessage(name);
    }
  }; // Check the input element whether it's value satisfy the validation rule or not


  FormValidator.prototype.isValid = function (name, rule) {
    var params = this.rules["" + name]["" + rule];
    var param = params instanceof Array && typeof params[1] === 'string' ? params[0] : params;
    var currentRule = this.rules["" + name]["" + rule];
    var args = {
      value: this.inputElement.value,
      param: param,
      element: this.inputElement,
      formElement: this.element
    };
    this.trigger('validationBegin', args);

    if (!args.param && rule === 'required') {
      return true;
    }

    if (currentRule && typeof currentRule[0] === 'function') {
      var fn = currentRule[0];
      return fn.call(this, {
        element: this.inputElement,
        value: this.inputElement.value
      });
    } else if (FormValidator_1.isCheckable(this.inputElement)) {
      if (rule !== 'required') {
        return true;
      }

      return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('input[name="' + name + '"]:checked', this.element).length > 0;
    } else {
      return FormValidator_1.checkValidator["" + rule](args);
    }
  }; // Return default error message or custom error message


  FormValidator.prototype.getErrorMessage = function (ruleValue, rule) {
    var message = this.inputElement.getAttribute('data-' + rule + '-message') ? this.inputElement.getAttribute('data-' + rule + '-message') : ruleValue instanceof Array && typeof ruleValue[1] === 'string' ? ruleValue[1] : Object.keys(this.localyMessage).length !== 0 ? this.localyMessage["" + rule] : this.defaultMessages["" + rule];
    var formats = message.match(/{(\d)}/g);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(formats)) {
      for (var i = 0; i < formats.length; i++) {
        var value = ruleValue instanceof Array ? ruleValue[parseInt(i.toString())] : ruleValue;
        message = message.replace(formats[parseInt(i.toString())], value);
      }
    }

    return message;
  }; // Create error element based on name and error message


  FormValidator.prototype.createErrorElement = function (name, message, input) {
    var errorElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])(this.errorElement, {
      className: this.errorClass,
      innerHTML: message,
      attrs: {
        for: name
      }
    }); // Create message design if errorOption is message

    if (this.errorOption === ErrorOption.Message) {
      errorElement.classList.remove(this.errorClass);
      errorElement.classList.add('e-message');
      errorElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])(this.errorContainer, {
        className: this.errorClass,
        innerHTML: errorElement.outerHTML
      });
    }

    errorElement.id = this.inputElement.name + '-info'; // Append error message into MVC error message element

    if (this.element.querySelector('[data-valmsg-for="' + input.id + '"]')) {
      this.element.querySelector('[data-valmsg-for="' + input.id + '"]').appendChild(errorElement);
    } else if (input.hasAttribute('data-msg-containerid') === true) {
      // Append error message into custom div element
      var containerId = input.getAttribute('data-msg-containerid');
      var divElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + containerId, this.element);
      divElement.appendChild(errorElement);
    } else if (this.customPlacement != null) {
      // Call custom placement function if customPlacement is not null
      this.customPlacement.call(this, this.inputElement, errorElement);
    } else {
      var inputParent = this.inputElement.parentElement;
      var grandParent = inputParent.parentElement;

      if (inputParent.classList.contains('e-control-wrapper') || inputParent.classList.contains('e-wrapper')) {
        grandParent.insertBefore(errorElement, inputParent.nextSibling);
      } else if (grandParent.classList.contains('e-control-wrapper') || grandParent.classList.contains('e-wrapper')) {
        grandParent.parentElement.insertBefore(errorElement, grandParent.nextSibling);
      } else {
        inputParent.insertBefore(errorElement, this.inputElement.nextSibling);
      }
    }

    errorElement.style.display = 'block';
    this.getErrorElement(name);
    this.validated.push(name);
    this.checkRequired(name);
  }; // Get error element by name


  FormValidator.prototype.getErrorElement = function (name) {
    this.infoElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])(this.errorElement + '.' + this.errorClass, this.inputElement.parentElement);

    if (!this.infoElement) {
      this.infoElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])(this.errorElement + '.' + this.errorClass + '[for="' + name + '"]', this.element);
    }

    return this.infoElement;
  }; // Remove existing rule from errorRules object


  FormValidator.prototype.removeErrorRules = function (name) {
    for (var i = 0; i < this.errorRules.length; i++) {
      var rule = this.errorRules[parseInt(i.toString())];

      if (rule.name === name) {
        this.errorRules.splice(i, 1);
      }
    }
  }; // Show error message to the input element


  FormValidator.prototype.showMessage = function (errorRule) {
    this.infoElement.style.display = 'block';
    this.infoElement.innerHTML = errorRule.message;
    this.checkRequired(errorRule.name);
  }; // Hide error message based on input name


  FormValidator.prototype.hideMessage = function (name) {
    if (this.infoElement) {
      this.infoElement.style.display = 'none';
      this.removeErrorRules(name);
      var inputParent = this.inputElement.parentElement;
      var grandParent = inputParent.parentElement;

      if (inputParent.classList.contains('e-control-wrapper') || inputParent.classList.contains('e-wrapper') || this.inputElement.classList.contains('e-input') && inputParent.classList.contains('e-input-group')) {
        inputParent.classList.add(this.validClass);
        inputParent.classList.remove(this.errorClass);
      } else if (grandParent != null && (grandParent.classList.contains('e-control-wrapper') || grandParent.classList.contains('e-wrapper'))) {
        grandParent.classList.add(this.validClass);
        grandParent.classList.remove(this.errorClass);
      } else {
        this.inputElement.classList.add(this.validClass);
        this.inputElement.classList.remove(this.errorClass);
      }

      this.inputElement.setAttribute('aria-invalid', 'false');
    }
  }; // Check whether the input element have required rule and its value is not empty


  FormValidator.prototype.checkRequired = function (name) {
    if (!this.rules["" + name][this.required] && !this.inputElement.value.length && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.infoElement)) {
      this.infoElement.innerHTML = this.inputElement.value;
      this.infoElement.setAttribute('aria-invalid', 'false');
      this.hideMessage(name);
    }
  }; // Return boolean result if the input have chekcable or submit types


  FormValidator.isCheckable = function (input) {
    var inputType = input.getAttribute('type');
    return inputType && (inputType === 'checkbox' || inputType === 'radio' || inputType === 'submit');
  };

  var FormValidator_1; // List of function to validate the rules

  FormValidator.checkValidator = {
    required: function (option) {
      return !isNaN(Date.parse(option.value)) ? !isNaN(new Date(option.value).getTime()) : option.value.toString().length > 0;
    },
    email: function (option) {
      return regex.EMAIL.test(option.value);
    },
    url: function (option) {
      return regex.URL.test(option.value);
    },
    dateIso: function (option) {
      return regex.DATE_ISO.test(option.value);
    },
    tel: function (option) {
      return regex.PHONE.test(option.value);
    },
    creditcard: function (option) {
      return regex.CREDITCARD.test(option.value);
    },
    number: function (option) {
      return !isNaN(Number(option.value)) && option.value.indexOf(' ') === -1;
    },
    digits: function (option) {
      return regex.DIGITS.test(option.value);
    },
    maxLength: function (option) {
      return option.value.length <= option.param;
    },
    minLength: function (option) {
      return option.value.length >= option.param;
    },
    rangeLength: function (option) {
      var param = option.param;
      return option.value.length >= param[0] && option.value.length <= param[1];
    },
    range: function (option) {
      var param = option.param;
      return !isNaN(Number(option.value)) && Number(option.value) >= param[0] && Number(option.value) <= param[1];
    },
    date: function (option) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.param) && typeof option.param === 'string' && option.param !== '') {
        var globalize = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Internationalization"]();
        var dateOptions = {
          format: option.param.toString(),
          type: 'dateTime',
          skeleton: 'yMd'
        };
        var dateValue = globalize.parseDate(option.value, dateOptions);
        return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dateValue) && dateValue instanceof Date && !isNaN(+dateValue);
      } else {
        return !isNaN(new Date(option.value).getTime());
      }
    },
    max: function (option) {
      if (!isNaN(Number(option.value))) {
        // Maximum rule validation for number
        return +option.value <= option.param;
      } // Maximum rule validation for date


      return new Date(option.value).getTime() <= new Date(JSON.parse(JSON.stringify(option.param))).getTime();
    },
    min: function (option) {
      if (!isNaN(Number(option.value))) {
        // Minimum rule validation for number
        return +option.value >= option.param;
      } else if (option.value.indexOf(',') !== -1) {
        var uNum = option.value.replace(/,/g, '');
        return parseFloat(uNum) >= option.param;
      } else {
        // Minimum rule validation for date
        return new Date(option.value).getTime() >= new Date(JSON.parse(JSON.stringify(option.param))).getTime();
      }
    },
    regex: function (option) {
      /* eslint-disable-next-line security/detect-non-literal-regexp */
      return new RegExp(option.param).test(option.value);
    },
    equalTo: function (option) {
      var compareTo = option.formElement.querySelector('#' + option.param);
      option.param = compareTo.value;
      return option.param === option.value;
    }
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], FormValidator.prototype, "locale", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('e-hidden')], FormValidator.prototype, "ignore", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], FormValidator.prototype, "rules", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('e-error')], FormValidator.prototype, "errorClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('e-valid')], FormValidator.prototype, "validClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('label')], FormValidator.prototype, "errorElement", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('div')], FormValidator.prototype, "errorContainer", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(ErrorOption.Label)], FormValidator.prototype, "errorOption", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], FormValidator.prototype, "focusout", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], FormValidator.prototype, "keyup", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], FormValidator.prototype, "click", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], FormValidator.prototype, "change", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], FormValidator.prototype, "submit", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], FormValidator.prototype, "validationBegin", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], FormValidator.prototype, "validationComplete", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], FormValidator.prototype, "customPlacement", void 0);

  FormValidator = FormValidator_1 = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], FormValidator);
  return FormValidator;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Base"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/form-validator/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/form-validator/index.js ***!
  \*************************************************************************/
/*! exports provided: regex, ErrorOption, FormValidator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _form_validator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form-validator */ "./node_modules/@syncfusion/ej2-inputs/src/form-validator/form-validator.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "regex", function() { return _form_validator__WEBPACK_IMPORTED_MODULE_0__["regex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ErrorOption", function() { return _form_validator__WEBPACK_IMPORTED_MODULE_0__["ErrorOption"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FormValidator", function() { return _form_validator__WEBPACK_IMPORTED_MODULE_0__["FormValidator"]; });

/**
 * Input box Component
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/index.js ***!
  \**********************************************************/
/*! exports provided: NumericTextBox, regularExpressions, createMask, applyMask, wireEvents, unwireEvents, bindClearEvent, unstrippedValue, strippedValue, maskInputMouseDownHandler, maskInputMouseUpHandler, maskInputFocusHandler, triggerFocus, escapeRegExp, maskInputBlurHandler, maskInputDropHandler, mobileRemoveFunction, setMaskValue, setElementValue, maskInput, getVal, getMaskedVal, MaskUndo, MaskedTextBox, Input, TicksData, ColorRangeData, LimitData, TooltipData, Slider, regex, ErrorOption, FormValidator, FilesProp, ButtonsProps, AsyncSettings, Uploader, ColorPicker, TextBox, Signature, LabelPosition, PrecisionType, Rating, SignatureBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _numerictextbox_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./numerictextbox/index */ "./node_modules/@syncfusion/ej2-inputs/src/numerictextbox/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NumericTextBox", function() { return _numerictextbox_index__WEBPACK_IMPORTED_MODULE_0__["NumericTextBox"]; });

/* harmony import */ var _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./maskedtextbox/index */ "./node_modules/@syncfusion/ej2-inputs/src/maskedtextbox/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "regularExpressions", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["regularExpressions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createMask", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["createMask"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "applyMask", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["applyMask"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "wireEvents", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["wireEvents"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unwireEvents", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["unwireEvents"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "bindClearEvent", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["bindClearEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unstrippedValue", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["unstrippedValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "strippedValue", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["strippedValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInputMouseDownHandler", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["maskInputMouseDownHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInputMouseUpHandler", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["maskInputMouseUpHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInputFocusHandler", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["maskInputFocusHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "triggerFocus", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["triggerFocus"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "escapeRegExp", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["escapeRegExp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInputBlurHandler", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["maskInputBlurHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInputDropHandler", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["maskInputDropHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mobileRemoveFunction", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["mobileRemoveFunction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setMaskValue", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["setMaskValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setElementValue", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["setElementValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInput", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["maskInput"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getVal", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["getVal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getMaskedVal", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["getMaskedVal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MaskUndo", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["MaskUndo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MaskedTextBox", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["MaskedTextBox"]; });

/* harmony import */ var _input_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./input/index */ "./node_modules/@syncfusion/ej2-inputs/src/input/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Input", function() { return _input_index__WEBPACK_IMPORTED_MODULE_2__["Input"]; });

/* harmony import */ var _slider_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./slider/index */ "./node_modules/@syncfusion/ej2-inputs/src/slider/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TicksData", function() { return _slider_index__WEBPACK_IMPORTED_MODULE_3__["TicksData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ColorRangeData", function() { return _slider_index__WEBPACK_IMPORTED_MODULE_3__["ColorRangeData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LimitData", function() { return _slider_index__WEBPACK_IMPORTED_MODULE_3__["LimitData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TooltipData", function() { return _slider_index__WEBPACK_IMPORTED_MODULE_3__["TooltipData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Slider", function() { return _slider_index__WEBPACK_IMPORTED_MODULE_3__["Slider"]; });

/* harmony import */ var _form_validator_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./form-validator/index */ "./node_modules/@syncfusion/ej2-inputs/src/form-validator/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "regex", function() { return _form_validator_index__WEBPACK_IMPORTED_MODULE_4__["regex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ErrorOption", function() { return _form_validator_index__WEBPACK_IMPORTED_MODULE_4__["ErrorOption"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FormValidator", function() { return _form_validator_index__WEBPACK_IMPORTED_MODULE_4__["FormValidator"]; });

/* harmony import */ var _uploader_index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./uploader/index */ "./node_modules/@syncfusion/ej2-inputs/src/uploader/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FilesProp", function() { return _uploader_index__WEBPACK_IMPORTED_MODULE_5__["FilesProp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtonsProps", function() { return _uploader_index__WEBPACK_IMPORTED_MODULE_5__["ButtonsProps"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AsyncSettings", function() { return _uploader_index__WEBPACK_IMPORTED_MODULE_5__["AsyncSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Uploader", function() { return _uploader_index__WEBPACK_IMPORTED_MODULE_5__["Uploader"]; });

/* harmony import */ var _color_picker_index__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./color-picker/index */ "./node_modules/@syncfusion/ej2-inputs/src/color-picker/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ColorPicker", function() { return _color_picker_index__WEBPACK_IMPORTED_MODULE_6__["ColorPicker"]; });

/* harmony import */ var _textbox_index__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./textbox/index */ "./node_modules/@syncfusion/ej2-inputs/src/textbox/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TextBox", function() { return _textbox_index__WEBPACK_IMPORTED_MODULE_7__["TextBox"]; });

/* harmony import */ var _signature_index__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./signature/index */ "./node_modules/@syncfusion/ej2-inputs/src/signature/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Signature", function() { return _signature_index__WEBPACK_IMPORTED_MODULE_8__["Signature"]; });

/* harmony import */ var _rating_index__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./rating/index */ "./node_modules/@syncfusion/ej2-inputs/src/rating/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LabelPosition", function() { return _rating_index__WEBPACK_IMPORTED_MODULE_9__["LabelPosition"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PrecisionType", function() { return _rating_index__WEBPACK_IMPORTED_MODULE_9__["PrecisionType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Rating", function() { return _rating_index__WEBPACK_IMPORTED_MODULE_9__["Rating"]; });

/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./common/index */ "./node_modules/@syncfusion/ej2-inputs/src/common/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SignatureBase", function() { return _common_index__WEBPACK_IMPORTED_MODULE_10__["SignatureBase"]; });

/**
 * NumericTextBox all modules
 */












/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/input/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/input/index.js ***!
  \****************************************************************/
/*! exports provided: Input */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _input__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./input */ "./node_modules/@syncfusion/ej2-inputs/src/input/input.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Input", function() { return _input__WEBPACK_IMPORTED_MODULE_0__["Input"]; });

/**
 * Input box Component
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/input/input.js":
/*!****************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/input/input.js ***!
  \****************************************************************/
/*! exports provided: Input */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Input", function() { return Input; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* eslint-disable valid-jsdoc, jsdoc/require-jsdoc, jsdoc/require-returns, jsdoc/require-param */


var CLASSNAMES = {
  RTL: 'e-rtl',
  DISABLE: 'e-disabled',
  INPUT: 'e-input',
  TEXTAREA: 'e-multi-line-input',
  INPUTGROUP: 'e-input-group',
  FLOATINPUT: 'e-float-input',
  FLOATLINE: 'e-float-line',
  FLOATTEXT: 'e-float-text',
  FLOATTEXTCONTENT: 'e-float-text-content',
  CLEARICON: 'e-clear-icon',
  CLEARICONHIDE: 'e-clear-icon-hide',
  LABELTOP: 'e-label-top',
  LABELBOTTOM: 'e-label-bottom',
  NOFLOATLABEL: 'e-no-float-label',
  INPUTCUSTOMTAG: 'e-input-custom-tag',
  FLOATCUSTOMTAG: 'e-float-custom-tag'
};
/**
 * Base for Input creation through util methods.
 */
// eslint-disable-next-line @typescript-eslint/no-namespace

var Input;

(function (Input) {
  var privateInputObj = {
    container: null,
    buttons: [],
    clearButton: null
  };
  var floatType;
  var isBindClearAction = true;
  /**
   * Create a wrapper to input element with multiple span elements and set the basic properties to input based components.
   * ```
   * E.g : Input.createInput({ element: element, floatLabelType : "Auto", properties: { placeholder: 'Search' } });
   * ```
   *
   */

  function createInput(args, internalCreateElement) {
    var makeElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"];
    var inputObject = {
      container: null,
      buttons: [],
      clearButton: null
    };
    floatType = args.floatLabelType;
    isBindClearAction = args.bindClearAction;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.floatLabelType) || args.floatLabelType === 'Never') {
      inputObject.container = createInputContainer(args, CLASSNAMES.INPUTGROUP, CLASSNAMES.INPUTCUSTOMTAG, 'span', makeElement);
      args.element.parentNode.insertBefore(inputObject.container, args.element);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([args.element], CLASSNAMES.INPUT);
      inputObject.container.appendChild(args.element);
    } else {
      createFloatingInput(args, inputObject, makeElement);
    }

    bindInitialEvent(args);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.properties) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.properties.showClearButton) && args.properties.showClearButton) {
      setClearButton(args.properties.showClearButton, args.element, inputObject, true, makeElement);
      inputObject.clearButton.setAttribute('role', 'button');

      if (inputObject.container.classList.contains(CLASSNAMES.FLOATINPUT)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([inputObject.container], CLASSNAMES.INPUTGROUP);
      }
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.buttons)) {
      for (var i = 0; i < args.buttons.length; i++) {
        inputObject.buttons.push(appendSpan(args.buttons[i], inputObject.container, makeElement));
      }
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.element) && args.element.tagName === 'TEXTAREA') {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([inputObject.container], CLASSNAMES.TEXTAREA);
    }

    validateInputType(inputObject.container, args.element);
    inputObject = setPropertyValue(args, inputObject);
    createSpanElement(inputObject.container, makeElement); // eslint-disable-next-line @typescript-eslint/no-unused-vars

    privateInputObj = inputObject;
    return inputObject;
  }

  Input.createInput = createInput;

  function bindInitialEvent(args) {
    checkInputValue(args.floatLabelType, args.element);
    args.element.addEventListener('focus', function () {
      var parent = getParentNode(this);

      if (parent.classList.contains('e-input-group') || parent.classList.contains('e-outline') || parent.classList.contains('e-filled')) {
        parent.classList.add('e-input-focus');
      }

      if (args.floatLabelType === 'Auto') {
        setTimeout(function () {
          Input.calculateWidth(args.element, parent);
        }, 80);
      }
    });
    args.element.addEventListener('blur', function () {
      var parent = getParentNode(this);

      if (parent.classList.contains('e-input-group') || parent.classList.contains('e-outline') || parent.classList.contains('e-filled')) {
        parent.classList.remove('e-input-focus');
      }

      if (args.floatLabelType === 'Auto' && args.element.value === '') {
        setTimeout(function () {
          Input.calculateWidth(args.element, parent);
        }, 80);
      }
    });
    args.element.addEventListener('input', function () {
      checkInputValue(floatType, args.element);
    });
  }

  Input.bindInitialEvent = bindInitialEvent;

  function checkInputValue(floatLabelType, inputElement) {
    var inputValue = inputElement.value;
    var inputParent = inputElement.parentElement;
    var grandParent = inputParent.parentElement;

    if (inputValue !== '' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(inputValue)) {
      if (inputParent && inputParent.classList.contains('e-input-group')) {
        inputParent.classList.add('e-valid-input');
      } else if (grandParent && grandParent.classList.contains('e-input-group')) {
        grandParent.classList.add('e-valid-input');
      }
    } else if (floatLabelType !== 'Always') {
      if (inputParent && inputParent.classList.contains('e-input-group')) {
        inputParent.classList.remove('e-valid-input');
      } else if (grandParent && grandParent.classList.contains('e-input-group')) {
        grandParent.classList.remove('e-valid-input');
      }
    }
  }

  function _focusFn() {
    var label = getParentNode(this).getElementsByClassName('e-float-text')[0];

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(label)) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([label], CLASSNAMES.LABELTOP);

      if (label.classList.contains(CLASSNAMES.LABELBOTTOM)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([label], CLASSNAMES.LABELBOTTOM);
      }
    }
  }

  function _blurFn() {
    var parent = getParentNode(this);

    if (parent.getElementsByTagName('textarea')[0] ? parent.getElementsByTagName('textarea')[0].value === '' : parent.getElementsByTagName('input')[0].value === '') {
      var label = parent.getElementsByClassName('e-float-text')[0];

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(label)) {
        if (label.classList.contains(CLASSNAMES.LABELTOP)) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([label], CLASSNAMES.LABELTOP);
        }

        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([label], CLASSNAMES.LABELBOTTOM);
      }
    }
  }

  function wireFloatingEvents(element) {
    element.addEventListener('focus', _focusFn);
    element.addEventListener('blur', _blurFn);
  }

  Input.wireFloatingEvents = wireFloatingEvents;

  function unwireFloatingEvents(element) {
    element.removeEventListener('focus', _focusFn);
    element.removeEventListener('blur', _blurFn);
  }

  function createFloatingInput(args, inputObject, internalCreateElement) {
    var makeElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"];

    if (args.floatLabelType === 'Auto') {
      wireFloatingEvents(args.element);
    }

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(inputObject.container)) {
      inputObject.container = createInputContainer(args, CLASSNAMES.FLOATINPUT, CLASSNAMES.FLOATCUSTOMTAG, 'div', makeElement);
      inputObject.container.classList.add(CLASSNAMES.INPUTGROUP);

      if (args.element.parentNode) {
        args.element.parentNode.insertBefore(inputObject.container, args.element);
      }
    } else {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.customTag)) {
        inputObject.container.classList.add(CLASSNAMES.FLOATCUSTOMTAG);
      }

      inputObject.container.classList.add(CLASSNAMES.FLOATINPUT);
    }

    var floatLinelement = makeElement('span', {
      className: CLASSNAMES.FLOATLINE
    });
    var floatLabelElement = makeElement('label', {
      className: CLASSNAMES.FLOATTEXT
    });

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.element.id) && args.element.id !== '') {
      floatLabelElement.id = 'label_' + args.element.id.replace(/ /g, '_');
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(args.element, {
        'aria-labelledby': floatLabelElement.id
      });
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.element.placeholder) && args.element.placeholder !== '') {
      floatLabelElement.innerText = encodePlaceHolder(args.element.placeholder);
      args.element.removeAttribute('placeholder');
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.properties) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.properties.placeholder) && args.properties.placeholder !== '') {
      floatLabelElement.innerText = encodePlaceHolder(args.properties.placeholder);
    }

    if (!floatLabelElement.innerText) {
      inputObject.container.classList.add(CLASSNAMES.NOFLOATLABEL);
    }

    if (inputObject.container.classList.contains('e-float-icon-left')) {
      var inputWrap = inputObject.container.querySelector('.e-input-in-wrap');
      inputWrap.appendChild(args.element);
      inputWrap.appendChild(floatLinelement);
      inputWrap.appendChild(floatLabelElement);
    } else {
      inputObject.container.appendChild(args.element);
      inputObject.container.appendChild(floatLinelement);
      inputObject.container.appendChild(floatLabelElement);
    }

    updateLabelState(args.element.value, floatLabelElement);

    if (args.floatLabelType === 'Always') {
      if (floatLabelElement.classList.contains(CLASSNAMES.LABELBOTTOM)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([floatLabelElement], CLASSNAMES.LABELBOTTOM);
      }

      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([floatLabelElement], CLASSNAMES.LABELTOP);
    }

    if (args.floatLabelType === 'Auto') {
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      args.element.addEventListener('input', function (event) {
        updateLabelState(args.element.value, floatLabelElement, args.element);
      }); // eslint-disable-next-line @typescript-eslint/no-unused-vars

      args.element.addEventListener('blur', function (event) {
        updateLabelState(args.element.value, floatLabelElement);
      });
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.element.getAttribute('id'))) {
      floatLabelElement.setAttribute('for', args.element.getAttribute('id'));
    }
  }

  function checkFloatLabelType(type, container) {
    if (type === 'Always' && container.classList.contains('e-outline')) {
      container.classList.add('e-valid-input');
    }
  }

  function setPropertyValue(args, inputObject) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.properties)) {
      for (var _i = 0, _a = Object.keys(args.properties); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'cssClass':
            setCssClass(args.properties.cssClass, [inputObject.container]);
            checkFloatLabelType(args.floatLabelType, inputObject.container);
            break;

          case 'enabled':
            setEnabled(args.properties.enabled, args.element, args.floatLabelType, inputObject.container);
            break;

          case 'enableRtl':
            setEnableRtl(args.properties.enableRtl, [inputObject.container]);
            break;

          case 'placeholder':
            setPlaceholder(args.properties.placeholder, args.element);
            break;

          case 'readonly':
            setReadonly(args.properties.readonly, args.element);
            break;
        }
      }
    }

    return inputObject;
  }

  function updateIconState(value, button, readonly) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(button)) {
      if (value && !readonly) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([button], CLASSNAMES.CLEARICONHIDE);
      } else {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([button], CLASSNAMES.CLEARICONHIDE);
      }
    }
  }

  function updateLabelState(value, label, element) {
    if (element === void 0) {
      element = null;
    }

    if (value) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([label], CLASSNAMES.LABELTOP);

      if (label.classList.contains(CLASSNAMES.LABELBOTTOM)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([label], CLASSNAMES.LABELBOTTOM);
      }
    } else {
      var isNotFocused = element != null ? element !== document.activeElement : true;

      if (isNotFocused) {
        if (label.classList.contains(CLASSNAMES.LABELTOP)) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([label], CLASSNAMES.LABELTOP);
        }

        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([label], CLASSNAMES.LABELBOTTOM);
      }
    }
  }

  function getParentNode(element) {
    var parentNode = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element.parentNode) ? element : element.parentNode;

    if (parentNode && parentNode.classList.contains('e-input-in-wrap')) {
      parentNode = parentNode.parentNode;
    }

    return parentNode;
  }
  /**
   * To create clear button.
   */


  function createClearButton(element, inputObject, initial, internalCreateElement) {
    var makeElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"];
    var button = makeElement('span', {
      className: CLASSNAMES.CLEARICON
    });
    var container = inputObject.container;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(initial)) {
      container.appendChild(button);
    } else {
      var baseElement = inputObject.container.classList.contains(CLASSNAMES.FLOATINPUT) ? inputObject.container.querySelector('.' + CLASSNAMES.FLOATTEXT) : element;
      baseElement.insertAdjacentElement('afterend', button);
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([button], CLASSNAMES.CLEARICONHIDE);
    wireClearBtnEvents(element, button, container);
    button.setAttribute('aria-label', 'close');
    return button;
  } // eslint-disable-next-line @typescript-eslint/no-unused-vars


  function wireClearBtnEvents(element, button, container) {
    if (isBindClearAction === undefined || isBindClearAction) {
      button.addEventListener('click', function (event) {
        if (!(element.classList.contains(CLASSNAMES.DISABLE) || element.readOnly)) {
          event.preventDefault();

          if (element !== document.activeElement) {
            element.focus();
          }

          element.value = '';
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([button], CLASSNAMES.CLEARICONHIDE);
        }
      });
    } // eslint-disable-next-line @typescript-eslint/no-unused-vars


    element.addEventListener('input', function (event) {
      updateIconState(element.value, button);
    }); // eslint-disable-next-line @typescript-eslint/no-unused-vars

    element.addEventListener('focus', function (event) {
      updateIconState(element.value, button, element.readOnly);
    }); // eslint-disable-next-line @typescript-eslint/no-unused-vars

    element.addEventListener('blur', function (event) {
      setTimeout(function () {
        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(button)) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([button], CLASSNAMES.CLEARICONHIDE);
          button = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element) && element.classList.contains('e-combobox') ? null : button;
        }
      }, 200);
    });
  }

  Input.wireClearBtnEvents = wireClearBtnEvents;

  function destroy() {
    privateInputObj = null;
  }

  Input.destroy = destroy;

  function validateLabel(element, floatLabelType) {
    var parent = getParentNode(element);

    if (parent.classList.contains(CLASSNAMES.FLOATINPUT) && floatLabelType === 'Auto') {
      var label = getParentNode(element).getElementsByClassName('e-float-text')[0];
      updateLabelState(element.value, label, element);
    }
  }
  /**
   * To create input box contianer.
   */


  function createInputContainer(args, className, tagClass, tag, internalCreateElement) {
    var makeElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"];
    var container;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.customTag)) {
      container = makeElement(args.customTag, {
        className: className
      });
      container.classList.add(tagClass);
    } else {
      container = makeElement(tag, {
        className: className
      });
    }

    container.classList.add('e-control-wrapper');
    return container;
  }

  function encodePlaceHolder(placeholder) {
    var result = '';

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(placeholder) && placeholder !== '') {
      var spanEle = document.createElement('span');
      spanEle.innerHTML = '<input  placeholder="' + placeholder + '"/>';
      var hiddenInput = spanEle.children[0];
      result = hiddenInput.placeholder;
    }

    return result;
  }
  /**
   * Sets the value to the input element.
   * ```
   * E.g : Input.setValue('content', element, "Auto", true );
   * ```
   *
   * @param {string} value - Specify the value of the input element.
   * @param {HTMLInputElement | HTMLTextAreaElement} element - The element on which the specified value is updated.
   * @param {string} floatLabelType - Specify the float label type of the input element.
   * @param {boolean} clearButton - Boolean value to specify whether the clear icon is enabled / disabled on the input.
   */


  function setValue(value, element, floatLabelType, clearButton) {
    element.value = value;

    if (floatLabelType === 'Auto' && value === '') {
      calculateWidth(element, element.parentElement);
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(floatLabelType) && floatLabelType === 'Auto') {
      validateLabel(element, floatLabelType);
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(clearButton) && clearButton) {
      var parentElement = getParentNode(element);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(parentElement)) {
        var button = parentElement.getElementsByClassName(CLASSNAMES.CLEARICON)[0];

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(button)) {
          if (element.value && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(parentElement) && parentElement.classList.contains('e-input-focus')) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([button], CLASSNAMES.CLEARICONHIDE);
          } else {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([button], CLASSNAMES.CLEARICONHIDE);
          }
        }
      }
    }

    checkInputValue(floatLabelType, element);
  }

  Input.setValue = setValue;
  /**
   * Sets the single or multiple cssClass to wrapper of input element.
   * ```
   * E.g : Input.setCssClass('e-custom-class', [element]);
   * ```
   *
   * @param {string} cssClass - Css class names which are needed to add.
   * @param {Element[] | NodeList} elements - The elements which are needed to add / remove classes.
   * @param {string} oldClass
   * - Css class names which are needed to remove. If old classes are need to remove, can give this optional parameter.
   */

  function setCssClass(cssClass, elements, oldClass) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldClass) && oldClass !== '') {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(elements, oldClass.split(' '));
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cssClass) && cssClass !== '') {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])(elements, cssClass.split(' '));
    }
  }

  Input.setCssClass = setCssClass;
  /**
   * Set the width to the placeholder when it overflows on the button such as spinbutton, clearbutton, icon etc
   * ```
   * E.g : Input.calculateWidth(element, container);
   * ```
   *
   * @param {any} element - Input element which is need to add.
   * @param {HTMLElement} container - The parent element which is need to get the label span to calculate width
   */

  function calculateWidth(element, container, moduleName) {
    var elementWidth = moduleName === 'multiselect' ? element : element.clientWidth - parseInt(getComputedStyle(element, null).getPropertyValue('padding-left'), 10);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(container.getElementsByClassName('e-float-text-content')[0])) {
      if (container.getElementsByClassName('e-float-text-content')[0].classList.contains('e-float-text-overflow')) {
        container.getElementsByClassName('e-float-text-content')[0].classList.remove('e-float-text-overflow');
      }

      if (elementWidth < container.getElementsByClassName('e-float-text-content')[0].clientWidth || elementWidth === container.getElementsByClassName('e-float-text-content')[0].clientWidth) {
        container.getElementsByClassName('e-float-text-content')[0].classList.add('e-float-text-overflow');
      }
    }
  }

  Input.calculateWidth = calculateWidth;
  /**
   * Set the width to the wrapper of input element.
   * ```
   * E.g : Input.setWidth('200px', container);
   * ```
   *
   * @param {number | string} width - Width value which is need to add.
   * @param {HTMLElement} container - The element on which the width is need to add.
   */

  function setWidth(width, container) {
    if (typeof width === 'number') {
      container.style.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
    } else if (typeof width === 'string') {
      container.style.width = width.match(/px|%|em/) ? width : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
    }

    calculateWidth(container.firstChild, container);
  }

  Input.setWidth = setWidth;
  /**
   * Set the placeholder attribute to the input element.
   * ```
   * E.g : Input.setPlaceholder('Search here', element);
   * ```
   *
   * @param {string} placeholder - Placeholder value which is need to add.
   * @param {HTMLInputElement | HTMLTextAreaElement} element - The element on which the placeholder is need to add.
   */

  function setPlaceholder(placeholder, element) {
    placeholder = encodePlaceHolder(placeholder);
    var parentElement = getParentNode(element);

    if (parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(placeholder) && placeholder !== '') {
        parentElement.getElementsByClassName('e-float-text-content')[0] ? parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].children[0].textContent = placeholder : parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = placeholder;
        parentElement.classList.remove(CLASSNAMES.NOFLOATLABEL);
        element.removeAttribute('placeholder');
      } else {
        parentElement.classList.add(CLASSNAMES.NOFLOATLABEL);
        parentElement.getElementsByClassName('e-float-text-content')[0] ? parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].children[0].textContent = '' : parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = '';
      }
    } else {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(placeholder) && placeholder !== '') {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, {
          'placeholder': placeholder
        });
      } else {
        element.removeAttribute('placeholder');
      }
    }
  }

  Input.setPlaceholder = setPlaceholder;
  /**
   * Set the read only attribute to the input element
   * ```
   * E.g : Input.setReadonly(true, element);
   * ```
   *
   * @param {boolean} isReadonly
   * - Boolean value to specify whether to set read only. Setting "True" value enables read only.
   * @param {HTMLInputElement | HTMLTextAreaElement} element
   * - The element which is need to enable read only.
   */

  function setReadonly(isReadonly, element, floatLabelType) {
    if (isReadonly) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, {
        readonly: ''
      });
    } else {
      element.removeAttribute('readonly');
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(floatLabelType)) {
      validateLabel(element, floatLabelType);
    }
  }

  Input.setReadonly = setReadonly;
  /**
   * Displays the element direction from right to left when its enabled.
   * ```
   * E.g : Input.setEnableRtl(true, [inputObj.container]);
   * ```
   *
   * @param {boolean} isRtl
   * - Boolean value to specify whether to set RTL. Setting "True" value enables the RTL mode.
   * @param {Element[] | NodeList} elements
   * - The elements that are needed to enable/disable RTL.
   */

  function setEnableRtl(isRtl, elements) {
    if (isRtl) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])(elements, CLASSNAMES.RTL);
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(elements, CLASSNAMES.RTL);
    }
  }

  Input.setEnableRtl = setEnableRtl;
  /**
   * Enables or disables the given input element.
   * ```
   * E.g : Input.setEnabled(false, element);
   * ```
   *
   * @param {boolean} isEnable
   * - Boolean value to specify whether to enable or disable.
   * @param {HTMLInputElement | HTMLTextAreaElement} element
   * - Element to be enabled or disabled.
   */

  function setEnabled(isEnable, element, floatLabelType, inputContainer) {
    var disabledAttrs = {
      'disabled': 'disabled',
      'aria-disabled': 'true'
    };
    var considerWrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(inputContainer) ? false : true;

    if (isEnable) {
      element.classList.remove(CLASSNAMES.DISABLE);
      removeAttributes(disabledAttrs, element);

      if (considerWrapper) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([inputContainer], CLASSNAMES.DISABLE);
      }
    } else {
      element.classList.add(CLASSNAMES.DISABLE);
      addAttributes(disabledAttrs, element);

      if (considerWrapper) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([inputContainer], CLASSNAMES.DISABLE);
      }
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(floatLabelType)) {
      validateLabel(element, floatLabelType);
    }
  }

  Input.setEnabled = setEnabled;

  function setClearButton(isClear, element, inputObject, initial, internalCreateElement) {
    var makeElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"];

    if (isClear) {
      inputObject.clearButton = createClearButton(element, inputObject, initial, makeElement);
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(inputObject.clearButton);
      inputObject.clearButton = null;
    }
  }

  Input.setClearButton = setClearButton;
  /**
   * Removing the multiple attributes from the given element such as "disabled","id" , etc.
   * ```
   * E.g : Input.removeAttributes({ 'disabled': 'disabled', 'aria-disabled': 'true' }, element);
   * ```
   *
   * @param {string} attrs
   * - Array of attributes which are need to removed from the element.
   * @param {HTMLInputElement | HTMLElement} element
   * - Element on which the attributes are needed to be removed.
   */

  function removeAttributes(attrs, element) {
    for (var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++) {
      var key = _a[_i];
      var parentElement = getParentNode(element);

      if (key === 'disabled') {
        element.classList.remove(CLASSNAMES.DISABLE);
      }

      if (key === 'disabled' && parentElement.classList.contains(CLASSNAMES.INPUTGROUP)) {
        parentElement.classList.remove(CLASSNAMES.DISABLE);
      }

      if (key === 'placeholder' && parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {
        parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = '';
      } else {
        element.removeAttribute(key);
      }
    }
  }

  Input.removeAttributes = removeAttributes;
  /**
   * Adding the multiple attributes to the given element such as "disabled","id" , etc.
   * ```
   * E.g : Input.addAttributes({ 'id': 'inputpopup' }, element);
   * ```
   *
   * @param {string} attrs
   * - Array of attributes which is added to element.
   * @param {HTMLInputElement | HTMLElement} element
   * - Element on which the attributes are needed to be added.
   */

  function addAttributes(attrs, element) {
    for (var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++) {
      var key = _a[_i];
      var parentElement = getParentNode(element);

      if (key === 'disabled') {
        element.classList.add(CLASSNAMES.DISABLE);
      }

      if (key === 'disabled' && parentElement.classList.contains(CLASSNAMES.INPUTGROUP)) {
        parentElement.classList.add(CLASSNAMES.DISABLE);
      }

      if (key === 'placeholder' && parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {
        parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = attrs["" + key];
      } else {
        element.setAttribute(key, attrs["" + key]);
      }
    }
  }

  Input.addAttributes = addAttributes;

  function removeFloating(input) {
    var container = input.container;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(container) && container.classList.contains(CLASSNAMES.FLOATINPUT)) {
      var inputEle = container.querySelector('textarea') ? container.querySelector('textarea') : container.querySelector('input');
      var placeholder = container.querySelector('.' + CLASSNAMES.FLOATTEXT).textContent;
      var clearButton = container.querySelector('.e-clear-icon') !== null;
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(container.querySelector('.' + CLASSNAMES.FLOATLINE));
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(container.querySelector('.' + CLASSNAMES.FLOATTEXT));
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(container, [CLASSNAMES.INPUTGROUP], [CLASSNAMES.FLOATINPUT]);
      unwireFloatingEvents(inputEle);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(inputEle, {
        'placeholder': placeholder
      });
      inputEle.classList.add(CLASSNAMES.INPUT);

      if (!clearButton && inputEle.tagName === 'INPUT') {
        inputEle.removeAttribute('required');
      }
    }
  }

  Input.removeFloating = removeFloating;

  function addFloating(input, type, placeholder, internalCreateElement) {
    var makeElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"];
    var container = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(input, '.' + CLASSNAMES.INPUTGROUP);
    floatType = type;

    if (type !== 'Never') {
      var customTag = container.tagName;
      customTag = customTag !== 'DIV' && customTag !== 'SPAN' ? customTag : null;
      var args = {
        element: input,
        floatLabelType: type,
        customTag: customTag,
        properties: {
          placeholder: placeholder
        }
      };
      var iconEle = container.querySelector('.e-clear-icon');
      var inputObj = {
        container: container
      };
      input.classList.remove(CLASSNAMES.INPUT);
      createFloatingInput(args, inputObj, makeElement);
      createSpanElement(inputObj.container, makeElement);
      calculateWidth(args.element, inputObj.container);
      var isPrependIcon = container.classList.contains('e-float-icon-left');

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(iconEle)) {
        if (isPrependIcon) {
          var inputWrap = container.querySelector('.e-input-in-wrap');
          iconEle = inputWrap.querySelector('.e-input-group-icon');
        } else {
          iconEle = container.querySelector('.e-input-group-icon');
        }
      }

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(iconEle)) {
        if (isPrependIcon) {
          iconEle = container.querySelector('.e-input-group-icon');
        }
      } else {
        var floatLine = container.querySelector('.' + CLASSNAMES.FLOATLINE);
        var floatText = container.querySelector('.' + CLASSNAMES.FLOATTEXT);
        var wrapper = isPrependIcon ? container.querySelector('.e-input-in-wrap') : container;
        wrapper.insertBefore(input, iconEle);
        wrapper.insertBefore(floatLine, iconEle);
        wrapper.insertBefore(floatText, iconEle);
      }
    }

    checkFloatLabelType(type, input.parentElement);
  }

  Input.addFloating = addFloating;
  /**
   * Create the span inside the label and add the label text into the span textcontent
   * ```
   * E.g : Input.createSpanElement(inputObject, makeElement);
   * ```
   *
   * @param {InputObject} inputObject
   * - Element which is need to get the label
   * @param {createElementParams} makeElement
   * - Element which is need to create the span
   */

  function createSpanElement(inputObject, makeElement) {
    if (inputObject.classList.contains('e-outline') && inputObject.getElementsByClassName('e-float-text')[0]) {
      var labelSpanElement = makeElement('span', {
        className: CLASSNAMES.FLOATTEXTCONTENT
      });
      labelSpanElement.innerHTML = inputObject.getElementsByClassName('e-float-text')[0].innerHTML;
      inputObject.getElementsByClassName('e-float-text')[0].innerHTML = '';
      inputObject.getElementsByClassName('e-float-text')[0].appendChild(labelSpanElement);
    }
  }

  Input.createSpanElement = createSpanElement;
  /**
   * Enable or Disable the ripple effect on the icons inside the Input. Ripple effect is only applicable for material theme.
   * ```
   * E.g : Input.setRipple(true, [inputObjects]);
   * ```
   *
   * @param {boolean} isRipple
   * - Boolean value to specify whether to enable the ripple effect.
   * @param {InputObject[]} inputObj
   * - Specify the collection of input objects.
   */

  function setRipple(isRipple, inputObj) {
    for (var i = 0; i < inputObj.length; i++) {
      _internalRipple(isRipple, inputObj[parseInt(i.toString())].container);
    }
  }

  Input.setRipple = setRipple;

  function _internalRipple(isRipple, container, button) {
    var argsButton = [];
    argsButton.push(button);
    var buttons = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(button) ? container.querySelectorAll('.e-input-group-icon') : argsButton;

    if (isRipple && buttons.length > 0) {
      for (var index = 0; index < buttons.length; index++) {
        buttons[parseInt(index.toString())].addEventListener('mousedown', _onMouseDownRipple, false);
        buttons[parseInt(index.toString())].addEventListener('mouseup', _onMouseUpRipple, false);
      }
    } else if (buttons.length > 0) {
      for (var index = 0; index < buttons.length; index++) {
        buttons[parseInt(index.toString())].removeEventListener('mousedown', _onMouseDownRipple, this);
        buttons[parseInt(index.toString())].removeEventListener('mouseup', _onMouseUpRipple, this);
      }
    }
  }

  function _onMouseRipple(container, button) {
    if (!container.classList.contains('e-disabled') && !container.querySelector('input').readOnly) {
      button.classList.add('e-input-btn-ripple');
    }
  }

  function _onMouseDownRipple() {
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    var ele = this;
    var parentEle = this.parentElement;

    while (!parentEle.classList.contains('e-input-group')) {
      parentEle = parentEle.parentElement;
    }

    _onMouseRipple(parentEle, ele);
  }

  function _onMouseUpRipple() {
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    var ele = this;
    setTimeout(function () {
      ele.classList.remove('e-input-btn-ripple');
    }, 500);
  }

  function createIconEle(iconClass, makeElement) {
    var button = makeElement('span', {
      className: iconClass
    });
    button.classList.add('e-input-group-icon');
    return button;
  }
  /**
   * Creates a new span element with the given icons added and append it in container element.
   * ```
   * E.g : Input.addIcon('append', 'e-icon-spin', inputObj.container, inputElement);
   * ```
   *
   * @param {string} position - Specify the icon placement on the input.Possible values are append and prepend.
   * @param {string | string[]} icons - Icon classes which are need to add to the span element which is going to created.
   * Span element acts as icon or button element for input.
   * @param {HTMLElement} container - The container on which created span element is going to append.
   * @param {HTMLElement} input - The inputElement on which created span element is going to prepend.
   */

  /* eslint-disable @typescript-eslint/indent */


  function addIcon(position, icons, container, input, internalCreate) {
    /* eslint-enable @typescript-eslint/indent */
    var result = typeof icons === 'string' ? icons.split(',') : icons;

    if (position.toLowerCase() === 'append') {
      for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {
        var icon = result_1[_i];
        appendSpan(icon, container, internalCreate);
      }
    } else {
      for (var _a = 0, result_2 = result; _a < result_2.length; _a++) {
        var icon = result_2[_a];
        prependSpan(icon, container, input, internalCreate);
      }
    }

    if (container.getElementsByClassName('e-input-group-icon')[0] && container.getElementsByClassName('e-float-text-overflow')[0]) {
      container.getElementsByClassName('e-float-text-overflow')[0].classList.add('e-icon');
    }
  }

  Input.addIcon = addIcon;
  /**
   * Creates a new span element with the given icons added and prepend it in input element.
   * ```
   * E.g : Input.prependSpan('e-icon-spin', inputObj.container, inputElement);
   * ```
   *
   * @param {string} iconClass - Icon classes which are need to add to the span element which is going to created.
   * Span element acts as icon or button element for input.
   * @param {HTMLElement} container - The container on which created span element is going to append.
   * @param {HTMLElement} inputElement - The inputElement on which created span element is going to prepend.
   */

  /* eslint-disable @typescript-eslint/indent */

  function prependSpan(iconClass, container, inputElement, internalCreateElement) {
    /* eslint-enable @typescript-eslint/indent */
    var makeElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"];
    var button = createIconEle(iconClass, makeElement);
    container.classList.add('e-float-icon-left');
    var innerWrapper = container.querySelector('.e-input-in-wrap');

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(innerWrapper)) {
      innerWrapper = makeElement('span', {
        className: 'e-input-in-wrap'
      });
      inputElement.parentNode.insertBefore(innerWrapper, inputElement);
      var result = container.querySelectorAll(inputElement.tagName + ' ~ *');
      innerWrapper.appendChild(inputElement);

      for (var i = 0; i < result.length; i++) {
        var element = result[parseInt(i.toString())];
        var parentElement = innerWrapper.parentElement;

        if (!element.classList.contains('e-float-line') || !(parentElement && parentElement.classList.contains('e-filled')) && parentElement) {
          innerWrapper.appendChild(element);
        }
      }
    }

    innerWrapper.parentNode.insertBefore(button, innerWrapper);

    _internalRipple(true, container, button);

    return button;
  }

  Input.prependSpan = prependSpan;
  /**
   * Creates a new span element with the given icons added and append it in container element.
   * ```
   * E.g : Input.appendSpan('e-icon-spin', inputObj.container);
   * ```
   *
   * @param {string} iconClass - Icon classes which are need to add to the span element which is going to created.
   * Span element acts as icon or button element for input.
   * @param {HTMLElement} container - The container on which created span element is going to append.
   */

  function appendSpan(iconClass, container, internalCreateElement) {
    var makeElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"];
    var button = createIconEle(iconClass, makeElement);
    var wrap = container.classList.contains('e-float-icon-left') ? container.querySelector('.e-input-in-wrap') : container;
    wrap.appendChild(button);

    _internalRipple(true, container, button);

    return button;
  }

  Input.appendSpan = appendSpan;

  function validateInputType(containerElement, input) {
    if (input.type === 'hidden') {
      containerElement.classList.add('e-hidden');
    } else if (containerElement.classList.contains('e-hidden')) {
      containerElement.classList.remove('e-hidden');
    }
  }

  Input.validateInputType = validateInputType;
})(Input || (Input = {}));
/* eslint-enable valid-jsdoc, jsdoc/require-jsdoc, jsdoc/require-returns, jsdoc/require-param */

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/maskedtextbox/base/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/maskedtextbox/base/index.js ***!
  \*****************************************************************************/
/*! exports provided: regularExpressions, createMask, applyMask, wireEvents, unwireEvents, bindClearEvent, unstrippedValue, strippedValue, maskInputMouseDownHandler, maskInputMouseUpHandler, maskInputFocusHandler, triggerFocus, escapeRegExp, maskInputBlurHandler, maskInputDropHandler, mobileRemoveFunction, setMaskValue, setElementValue, maskInput, getVal, getMaskedVal, MaskUndo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _mask_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mask-base */ "./node_modules/@syncfusion/ej2-inputs/src/maskedtextbox/base/mask-base.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "regularExpressions", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["regularExpressions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createMask", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["createMask"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "applyMask", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["applyMask"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "wireEvents", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["wireEvents"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unwireEvents", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["unwireEvents"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "bindClearEvent", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["bindClearEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unstrippedValue", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["unstrippedValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "strippedValue", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["strippedValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInputMouseDownHandler", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["maskInputMouseDownHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInputMouseUpHandler", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["maskInputMouseUpHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInputFocusHandler", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["maskInputFocusHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "triggerFocus", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["triggerFocus"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "escapeRegExp", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["escapeRegExp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInputBlurHandler", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["maskInputBlurHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInputDropHandler", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["maskInputDropHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mobileRemoveFunction", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["mobileRemoveFunction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setMaskValue", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["setMaskValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setElementValue", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["setElementValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInput", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["maskInput"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getVal", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["getVal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getMaskedVal", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["getMaskedVal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MaskUndo", function() { return _mask_base__WEBPACK_IMPORTED_MODULE_0__["MaskUndo"]; });

/**
 * MaskedTextbox base modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/maskedtextbox/base/mask-base.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/maskedtextbox/base/mask-base.js ***!
  \*********************************************************************************/
/*! exports provided: regularExpressions, createMask, applyMask, wireEvents, unwireEvents, bindClearEvent, unstrippedValue, strippedValue, maskInputMouseDownHandler, maskInputMouseUpHandler, maskInputFocusHandler, triggerFocus, escapeRegExp, maskInputBlurHandler, maskInputDropHandler, mobileRemoveFunction, setMaskValue, setElementValue, maskInput, getVal, getMaskedVal, MaskUndo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "regularExpressions", function() { return regularExpressions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createMask", function() { return createMask; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyMask", function() { return applyMask; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wireEvents", function() { return wireEvents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unwireEvents", function() { return unwireEvents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bindClearEvent", function() { return bindClearEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unstrippedValue", function() { return unstrippedValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "strippedValue", function() { return strippedValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maskInputMouseDownHandler", function() { return maskInputMouseDownHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maskInputMouseUpHandler", function() { return maskInputMouseUpHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maskInputFocusHandler", function() { return maskInputFocusHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "triggerFocus", function() { return triggerFocus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "escapeRegExp", function() { return escapeRegExp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maskInputBlurHandler", function() { return maskInputBlurHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maskInputDropHandler", function() { return maskInputDropHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mobileRemoveFunction", function() { return mobileRemoveFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setMaskValue", function() { return setMaskValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setElementValue", function() { return setElementValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maskInput", function() { return maskInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getVal", function() { return getVal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMaskedVal", function() { return getMaskedVal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaskUndo", function() { return MaskUndo; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _input_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../input/input */ "./node_modules/@syncfusion/ej2-inputs/src/input/input.js");
/* eslint-disable valid-jsdoc, jsdoc/require-jsdoc, jsdoc/require-returns, jsdoc/require-param */

/**
 * MaskedTextBox base module
 */


var ERROR = 'e-error';
var INPUTGROUP = 'e-input-group';
var FLOATINPUT = 'e-float-input';
var UTILMASK = 'e-utility-mask';
var TOPLABEL = 'e-label-top';
var BOTTOMLABEL = 'e-label-bottom';
/**
 * @hidden
 * Built-in masking elements collection.
 */

var regularExpressions = {
  '0': '[0-9]',
  '9': '[0-9 ]',
  '#': '[0-9 +-]',
  'L': '[A-Za-z]',
  '?': '[A-Za-z ]',
  '&': '[^\x7f ]+',
  'C': '[^\x7f]+',
  'A': '[A-Za-z0-9]',
  'a': '[A-Za-z0-9 ]'
};
/**
 * Generate required masking elements to the MaskedTextBox from user mask input.
 *
 * @hidden
 */

function createMask() {
  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
    'role': 'textbox',
    'autocomplete': 'off',
    'autocapitalize': 'off',
    'spellcheck': 'false',
    'aria-live': 'assertive'
  });

  if (this.mask) {
    var splitMask = this.mask.split(']');

    for (var i = 0; i < splitMask.length; i++) {
      if (splitMask[i][splitMask[i].length - 1] === '\\') {
        splitMask[i] = splitMask[i] + ']';
        var splitInnerMask = splitMask[i].split('[');

        for (var j = 0; j < splitInnerMask.length; j++) {
          if (splitInnerMask[j][splitInnerMask[j].length - 1] === '\\') {
            splitInnerMask[j] = splitInnerMask[j] + '[';
          }

          pushIntoRegExpCollec.call(this, splitInnerMask[j]);
        }
      } else {
        var splitInnerMask = splitMask[i].split('[');

        if (splitInnerMask.length > 1) {
          var chkSpace = false;

          for (var j = 0; j < splitInnerMask.length; j++) {
            if (splitInnerMask[j] === '\\') {
              this.customRegExpCollec.push('[');
              this.hiddenMask += splitInnerMask[j] + '[';
            } else if (splitInnerMask[j] === '') {
              chkSpace = true;
            } else if (splitInnerMask[j] !== '' && chkSpace || j === splitInnerMask.length - 1) {
              this.customRegExpCollec.push('[' + splitInnerMask[j] + ']');
              this.hiddenMask += this.promptChar;
              chkSpace = false;
            } else {
              pushIntoRegExpCollec.call(this, splitInnerMask[j]);
            }
          }
        } else {
          pushIntoRegExpCollec.call(this, splitInnerMask[0]);
        }
      }
    }

    this.escapeMaskValue = this.hiddenMask;
    this.promptMask = this.hiddenMask.replace(/[09?LCAa#&]/g, this.promptChar);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters)) {
      for (var i = 0; i < this.promptMask.length; i++) {
        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters[this.promptMask[i]])) {
          /* eslint-disable-next-line security/detect-non-literal-regexp */
          this.promptMask = this.promptMask.replace(new RegExp(this.promptMask[i], 'g'), this.promptChar);
        }
      }
    }

    var escapeNumber = 0;

    if (this.hiddenMask.match(new RegExp(/\\/))) {
      for (var i = 0; i < this.hiddenMask.length; i++) {
        var j = 0;

        if (i >= 1) {
          j = i;
        }

        escapeNumber = this.hiddenMask.length - this.promptMask.length;
        j = j - escapeNumber;

        if (i > 0 && this.hiddenMask[i - 1] !== '\\' && (this.hiddenMask[i] === '>' || this.hiddenMask[i] === '<' || this.hiddenMask[i] === '|')) {
          this.promptMask = this.promptMask.substring(0, j) + this.promptMask.substring(i + 1 - escapeNumber, this.promptMask.length);
          this.escapeMaskValue = this.escapeMaskValue.substring(0, j) + this.escapeMaskValue.substring(i + 1 - escapeNumber, this.escapeMaskValue.length);
        }

        if (this.hiddenMask[i] === '\\') {
          this.promptMask = this.promptMask.substring(0, j) + this.hiddenMask[i + 1] + this.promptMask.substring(i + 2 - escapeNumber, this.promptMask.length);
          this.escapeMaskValue = this.escapeMaskValue.substring(0, j) + this.escapeMaskValue[i + 1] + this.escapeMaskValue.substring(i + 2 - escapeNumber, this.escapeMaskValue.length);
        }
      }
    } else {
      this.promptMask = this.promptMask.replace(/[>|<]/g, '');
      this.escapeMaskValue = this.hiddenMask.replace(/[>|<]/g, '');
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
      'aria-invalid': 'false'
    });
  }
}
/**
 * Apply mask ability with masking elements to the MaskedTextBox.
 *
 * @hidden
 */

function applyMask() {
  setElementValue.call(this, this.promptMask);
  setMaskValue.call(this, this.value);
}
/**
 * To wire required events to the MaskedTextBox.
 *
 * @hidden
 */

function wireEvents() {
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keydown', maskInputKeyDownHandler, this);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keypress', maskInputKeyPressHandler, this);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keyup', maskInputKeyUpHandler, this);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'input', maskInputHandler, this);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'focus', maskInputFocusHandler, this);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'blur', maskInputBlurHandler, this);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'paste', maskInputPasteHandler, this);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'cut', maskInputCutHandler, this);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'drop', maskInputDropHandler, this);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'mousedown', maskInputMouseDownHandler, this);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'mouseup', maskInputMouseUpHandler, this);

  if (this.enabled) {
    bindClearEvent.call(this);

    if (this.formElement) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.formElement, 'reset', resetFormHandler, this);
    }
  }
}
/**
 * To unwire events attached to the MaskedTextBox.
 *
 * @hidden
 */

function unwireEvents() {
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keydown', maskInputKeyDownHandler);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keypress', maskInputKeyPressHandler);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keyup', maskInputKeyUpHandler);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'input', maskInputHandler);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'focus', maskInputFocusHandler);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'blur', maskInputBlurHandler);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'paste', maskInputPasteHandler);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'cut', maskInputCutHandler);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mousedown', maskInputMouseDownHandler);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseup', maskInputMouseUpHandler);

  if (this.formElement) {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.formElement, 'reset', resetFormHandler);
  }
}
/**
 * To bind required events to the MaskedTextBox clearButton.
 *
 * @hidden
 */

function bindClearEvent() {
  if (this.showClearButton) {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputObj.clearButton, 'mousedown touchstart', resetHandler, this);
  }
}

function resetHandler(e) {
  e.preventDefault();

  if (!this.inputObj.clearButton.classList.contains('e-clear-icon-hide') || this.inputObj.container.classList.contains('e-static-clear')) {
    clear.call(this, e);
    this.value = '';
  }
}

function clear(event) {
  var value = this.element.value;
  setElementValue.call(this, this.promptMask);
  this.redoCollec.unshift({
    value: this.promptMask,
    startIndex: this.element.selectionStart,
    endIndex: this.element.selectionEnd
  });
  triggerMaskChangeEvent.call(this, event, value);
  this.element.setSelectionRange(0, 0);
}

function resetFormHandler() {
  if (this.element.tagName === 'EJS-MASKEDTEXTBOX') {
    setElementValue.call(this, this.promptMask);
  } else {
    this.value = this.initInputValue;
  }
}
/**
 * To get masked value from the MaskedTextBox.
 *
 * @hidden
 */


function unstrippedValue(element) {
  return element.value;
}
/**
 * To extract raw value from the MaskedTextBox.
 *
 * @hidden
 */

function strippedValue(element, maskValues) {
  var value = '';
  var k = 0;
  var checkMask = false;
  var maskValue = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(maskValues) ? maskValues : !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this) ? element.value : maskValues;

  if (maskValue !== this.promptMask) {
    for (var i = 0; i < this.customRegExpCollec.length; i++) {
      if (checkMask) {
        checkMask = false;
      }

      if (this.customRegExpCollec[k] === '>' || this.customRegExpCollec[k] === '<' || this.customRegExpCollec[k] === '|' || this.customRegExpCollec[k] === '\\') {
        --i;
        checkMask = true;
      }

      if (!checkMask) {
        if (maskValue[i] !== this.promptChar && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customRegExpCollec[k]) && (this._callPasteHandler || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.regExpCollec[this.customRegExpCollec[k]]) || this.customRegExpCollec[k].length > 2 && this.customRegExpCollec[k][0] === '[' && this.customRegExpCollec[k][this.customRegExpCollec[k].length - 1] === ']' || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters[this.customRegExpCollec[k]])) && maskValue !== '') {
          value += maskValue[i];
        }
      }

      ++k;
    }
  }

  if (this.mask === null || this.mask === '' && this.value !== undefined) {
    value = maskValue;
  }

  return value;
}

function pushIntoRegExpCollec(value) {
  for (var k = 0; k < value.length; k++) {
    this.hiddenMask += value[k];

    if (value[k] !== '\\') {
      this.customRegExpCollec.push(value[k]);
    }
  }
}

function maskInputMouseDownHandler() {
  this.isClicked = true;
}
function maskInputMouseUpHandler() {
  this.isClicked = false;
}
function maskInputFocusHandler(event) {
  var _this = this;

  var inputElement = this.element;
  var startIndex = 0;
  var modelValue = strippedValue.call(this, inputElement);
  var toAllowForward = false;
  var toAllowBackward = false;
  var eventArgs = {
    selectionStart: inputElement.selectionStart,
    event: event,
    value: this.value,
    maskedValue: inputElement.value,
    container: !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.inputObj) ? this.inputObj.container : this.inputObj,
    selectionEnd: inputElement.selectionEnd
  };

  if (!this.isClicked) {
    triggerFocus.call(this, eventArgs, inputElement);
  }

  if (this.mask) {
    if (!(!(modelValue === null || modelValue === '') || this.floatLabelType === 'Always' || this.placeholder === null || this.placeholder === '')) {
      inputElement.value = this.promptMask;
    }

    setTimeout(function () {
      if (inputElement.selectionStart === _this.promptMask.length || inputElement.value[inputElement.selectionStart] === _this.promptChar) {
        toAllowForward = true;
      } else {
        for (var i = inputElement.selectionStart; i < _this.promptMask.length; i++) {
          if (inputElement.value[i] !== _this.promptChar) {
            if (inputElement.value[i] !== _this.promptMask[i]) {
              toAllowForward = false;
              break;
            }
          } else {
            toAllowForward = true;
            break;
          }
        }
      }
    });
    setTimeout(function () {
      var backSelectionStart = inputElement.selectionStart - 1;

      if (backSelectionStart === _this.promptMask.length - 1 || inputElement.value[backSelectionStart] === _this.promptChar) {
        toAllowBackward = true;
      } else {
        for (var i = backSelectionStart; i >= 0; i--) {
          if (inputElement.value[i] !== _this.promptChar) {
            if (inputElement.value[i] !== _this.promptMask[i]) {
              toAllowBackward = false;
              break;
            }
          } else {
            toAllowBackward = true;
            break;
          }
        }
      }
    });

    if (this.isClicked || this.floatLabelType !== 'Always' && (modelValue === null || modelValue === '') && this.placeholder !== null && this.placeholder !== '') {
      for (startIndex = 0; startIndex < this.promptMask.length; startIndex++) {
        if (inputElement.value[startIndex] === this.promptChar) {
          setTimeout(function () {
            if (toAllowForward || toAllowBackward) {
              inputElement.selectionEnd = startIndex;
              inputElement.selectionStart = startIndex;
            }

            eventArgs = {
              selectionStart: inputElement.selectionStart,
              event: event,
              value: _this.value,
              maskedValue: inputElement.value,
              container: !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this.inputObj) ? _this.inputObj.container : _this.inputObj,
              selectionEnd: inputElement.selectionEnd
            };
            triggerFocus.call(_this, eventArgs, inputElement);
          }, 110);
          break;
        }
      }

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(inputElement.value.match(escapeRegExp(this.promptChar)))) {
        eventArgs = {
          selectionStart: inputElement.selectionStart,
          event: event,
          value: this.value,
          maskedValue: inputElement.value,
          container: !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.inputObj) ? this.inputObj.container : this.inputObj,
          selectionEnd: inputElement.selectionEnd
        };
        triggerFocus.call(this, eventArgs, inputElement);
      }

      this.isClicked = false;
    }
  }
}
function triggerFocus(eventArgs, inputElement) {
  this.trigger('focus', eventArgs, function (eventArgs) {
    inputElement.selectionStart = eventArgs.selectionStart;
    inputElement.selectionEnd = eventArgs.selectionEnd;
  });
}
function escapeRegExp(text) {
  return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(text) ? text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&') : text;
}
function maskInputBlurHandler(event) {
  this.blurEventArgs = {
    event: event,
    value: this.value,
    maskedValue: this.element.value,
    container: !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.inputObj) ? this.inputObj.container : this.inputObj
  };
  this.trigger('blur', this.blurEventArgs);

  if (this.mask) {
    this.isFocus = false;

    if (this.placeholder && this.element.value === this.promptMask && this.floatLabelType !== 'Always') {
      setElementValue.call(this, '');
      var labelElement = this.element.parentNode.querySelector('.e-float-text');

      if (this.floatLabelType === 'Auto' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(labelElement) && labelElement.classList.contains(TOPLABEL)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([labelElement], TOPLABEL);
      }
    }
  }
}

function maskInputPasteHandler(event) {
  var _this = this;

  if (this.mask && !this.readonly) {
    var sIndex_1 = this.element.selectionStart;
    var eIndex_1 = this.element.selectionEnd;
    var oldValue_1 = this.element.value;
    setElementValue.call(this, '');
    this._callPasteHandler = true;
    setTimeout(function () {
      var value = _this.element.value.replace(/ /g, '');

      if (_this.redoCollec.length > 0 && _this.redoCollec[0].value === _this.element.value) {
        value = strippedValue.call(_this, _this.element);
      }

      setElementValue.call(_this, oldValue_1);
      _this.element.selectionStart = sIndex_1;
      _this.element.selectionEnd = eIndex_1;
      var i = 0;
      _this.maskKeyPress = true;

      do {
        validateValue.call(_this, value[i], false, null);
        ++i;
      } while (i < value.length);

      _this.maskKeyPress = false;
      _this._callPasteHandler = false;

      if (_this.element.value === oldValue_1) {
        var i_1 = 0;
        _this.maskKeyPress = true;

        do {
          validateValue.call(_this, value[i_1], false, null);
          ++i_1;
        } while (i_1 < value.length);

        _this.maskKeyPress = false;
      } else {
        triggerMaskChangeEvent.call(_this, event, oldValue_1);
      }
    }, 1);
  }
}

function maskInputCutHandler(event) {
  var _this = this;

  if (this.mask && !this.readonly) {
    var preValue_1 = this.element.value;
    var sIndex_2 = this.element.selectionStart;
    var eIndex = this.element.selectionEnd;
    this.undoCollec.push({
      value: this.element.value,
      startIndex: this.element.selectionStart,
      endIndex: this.element.selectionEnd
    });
    var value_1 = this.element.value.substring(0, sIndex_2) + this.promptMask.substring(sIndex_2, eIndex) + this.element.value.substring(eIndex);
    setTimeout(function () {
      setElementValue.call(_this, value_1);
      _this.element.selectionStart = _this.element.selectionEnd = sIndex_2;

      if (_this.element.value !== preValue_1) {
        triggerMaskChangeEvent.call(_this, event, null);
      }
    }, 0);
  }
}

function maskInputDropHandler(event) {
  event.preventDefault();
}

function maskInputHandler(event) {
  if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIE === true && this.element.value === '' && this.floatLabelType === 'Never') {
    return;
  }

  var eventArgs = {
    ctrlKey: false,
    keyCode: 229
  };
  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(event, eventArgs);

  if (this.mask) {
    if (this.element.value === '') {
      this.redoCollec.unshift({
        value: this.promptMask,
        startIndex: this.element.selectionStart,
        endIndex: this.element.selectionEnd
      });
    }

    if (this.element.value.length === 1) {
      this.element.value = this.element.value + this.promptMask;
      this.element.setSelectionRange(1, 1);
    }

    if (!this._callPasteHandler) {
      removeMaskInputValues.call(this, event);
    }

    if (this.element.value.length > this.promptMask.length) {
      var startIndex = this.element.selectionStart;
      var addedValues = this.element.value.length - this.promptMask.length;
      var value = this.element.value.substring(startIndex - addedValues, startIndex);
      this.maskKeyPress = false;
      var i = 0;

      do {
        validateValue.call(this, value[i], event.ctrlKey, event);
        ++i;
      } while (i < value.length);

      if (this.element.value !== this.preEleVal) {
        triggerMaskChangeEvent.call(this, event, null);
      }
    }

    var val = strippedValue.call(this, this.element);
    this.prevValue = val;
    this.value = val;

    if (val === '') {
      setElementValue.call(this, this.promptMask);
      this.element.setSelectionRange(0, 0);
    }
  }
}

function maskInputKeyDownHandler(event) {
  if (this.mask && !this.readonly) {
    if (event.keyCode !== 229) {
      if (event.ctrlKey && (event.keyCode === 89 || event.keyCode === 90)) {
        event.preventDefault();
      }

      removeMaskInputValues.call(this, event);
    }

    var startValue = this.element.value;

    if (event.ctrlKey && (event.keyCode === 89 || event.keyCode === 90)) {
      var collec = void 0;

      if (event.keyCode === 90 && this.undoCollec.length > 0 && startValue !== this.undoCollec[this.undoCollec.length - 1].value) {
        collec = this.undoCollec[this.undoCollec.length - 1];
        this.redoCollec.unshift({
          value: this.element.value,
          startIndex: this.element.selectionStart,
          endIndex: this.element.selectionEnd
        });
        setElementValue.call(this, collec.value);
        this.element.selectionStart = collec.startIndex;
        this.element.selectionEnd = collec.endIndex;
        this.undoCollec.splice(this.undoCollec.length - 1, 1);
      } else if (event.keyCode === 89 && this.redoCollec.length > 0 && startValue !== this.redoCollec[0].value) {
        collec = this.redoCollec[0];
        this.undoCollec.push({
          value: this.element.value,
          startIndex: this.element.selectionStart,
          endIndex: this.element.selectionEnd
        });
        setElementValue.call(this, collec.value);
        this.element.selectionStart = collec.startIndex;
        this.element.selectionEnd = collec.endIndex;
        this.redoCollec.splice(0, 1);
      }
    }
  }
}

function mobileRemoveFunction() {
  var collec;
  var sIndex = this.element.selectionStart;
  var eIndex = this.element.selectionEnd;

  if (this.redoCollec.length > 0) {
    collec = this.redoCollec[0];
    setElementValue.call(this, collec.value);

    if (collec.startIndex - sIndex === 1) {
      this.element.selectionStart = collec.startIndex;
      this.element.selectionEnd = collec.endIndex;
    } else {
      this.element.selectionStart = sIndex + 1;
      this.element.selectionEnd = eIndex + 1;
    }
  } else {
    setElementValue.call(this, this.promptMask);
    this.element.selectionStart = this.element.selectionEnd = sIndex;
  }
}

function autoFillMaskInputValues(isRemove, oldEventVal, event) {
  if (event.type === 'input') {
    isRemove = false;
    oldEventVal = this.element.value;
    setElementValue.call(this, this.promptMask);
    setMaskValue.call(this, oldEventVal);
  }

  return isRemove;
}

function removeMaskInputValues(event) {
  var isRemove = false;
  var oldEventVal;
  var isDeleted = false;

  if (this.element.value.length < this.promptMask.length) {
    isRemove = true;
    oldEventVal = this.element.value;
    isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event);
    mobileRemoveFunction.call(this);
  }

  if (this.element.value.length >= this.promptMask.length && event.type === 'input') {
    isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event);
  }

  var initStartIndex = this.element.selectionStart;
  var initEndIndex = this.element.selectionEnd;
  var startIndex = this.element.selectionStart;
  var endIndex = this.element.selectionEnd;
  var maskValue = this.hiddenMask.replace(/[>|\\<]/g, '');
  var curMask = maskValue[startIndex - 1];
  var deleteEndIndex = this.element.selectionEnd;

  if (isRemove || event.keyCode === 8 || event.keyCode === 46) {
    this.undoCollec.push({
      value: this.element.value,
      startIndex: this.element.selectionStart,
      endIndex: endIndex
    });
    var multipleDel = false;
    var preValue = this.element.value;

    if (startIndex > 0 || (event.keyCode === 8 || event.keyCode === 46) && startIndex < this.element.value.length && this.element.selectionEnd - startIndex !== this.element.value.length) {
      var index = startIndex;

      if (startIndex !== endIndex) {
        startIndex = endIndex;

        if (event.keyCode === 46) {
          multipleDel = true;
        }
      } else if (event.keyCode === 46) {
        ++index;
      } else {
        --index;
      }

      for (var k = startIndex; event.keyCode === 8 || isRemove || multipleDel ? k > index : k < index; event.keyCode === 8 || isRemove || multipleDel ? k-- : k++) {
        for (var i = startIndex; event.keyCode === 8 || isRemove || multipleDel ? i > 0 : i < this.element.value.length; event.keyCode === 8 || isRemove || multipleDel ? i-- : i++) {
          var sIndex = void 0;

          if ((event.keyCode === 8 || multipleDel) && (initStartIndex !== initEndIndex && initStartIndex !== startIndex || initStartIndex === initEndIndex) || isRemove) {
            curMask = maskValue[i - 1];
            sIndex = startIndex - 1;
          } else {
            curMask = maskValue[i];
            sIndex = startIndex;
            ++startIndex;
          }

          var oldValue = this.element.value[sIndex];

          if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.regExpCollec["" + curMask]) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters["" + curMask]) && this.hiddenMask[sIndex] !== this.promptChar && this.customRegExpCollec[sIndex][0] !== '[' && this.customRegExpCollec[sIndex][this.customRegExpCollec[sIndex].length - 1] !== ']' || this.promptMask[sIndex] !== this.promptChar && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters)) {
            this.element.selectionStart = this.element.selectionEnd = sIndex;
            event.preventDefault();

            if (event.keyCode === 46 && !multipleDel) {
              ++this.element.selectionStart;
            }
          } else {
            var value = this.element.value;
            var prompt_1 = this.promptChar;
            var elementValue = value.substring(0, sIndex) + prompt_1 + value.substring(startIndex, value.length);
            setElementValue.call(this, elementValue);
            event.preventDefault();

            if (event.keyCode === 46 && !multipleDel) {
              sIndex++;
            }

            this.element.selectionStart = this.element.selectionEnd = sIndex;
            isDeleted = true;
          }

          startIndex = this.element.selectionStart;

          if (!isDeleted && event.keyCode === 8 || multipleDel || !isDeleted && !(event.keyCode === 46)) {
            sIndex = startIndex - 1;
          } else {
            sIndex = startIndex;
            isDeleted = false;
          }

          oldValue = this.element.value[sIndex];

          if (initStartIndex !== initEndIndex && this.element.selectionStart === initStartIndex || this.promptMask[sIndex] === this.promptChar || oldValue !== this.promptMask[sIndex] && this.promptMask[sIndex] !== this.promptChar && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters)) {
            break;
          }
        }
      }
    }

    if (event.keyCode === 46 && multipleDel && isDeleted) {
      this.element.selectionStart = this.element.selectionEnd = deleteEndIndex;
    }

    if (this.element.selectionStart === 0 && this.element.selectionEnd === this.element.value.length) {
      setElementValue.call(this, this.promptMask);
      event.preventDefault();
      this.element.selectionStart = this.element.selectionEnd = startIndex;
    }

    this.redoCollec.unshift({
      value: this.element.value,
      startIndex: this.element.selectionStart,
      endIndex: this.element.selectionEnd
    });

    if (this.element.value !== preValue) {
      triggerMaskChangeEvent.call(this, event, oldEventVal);
    }
  }
}

function maskInputKeyPressHandler(event) {
  if (this.mask && !this.readonly) {
    var oldValue = this.element.value;

    if (!(event.ctrlKey || event.metaKey) || (event.ctrlKey || event.metaKey) && event.code !== 'KeyA' && event.code !== 'KeyY' && event.code !== 'KeyZ' && event.code !== 'KeyX' && event.code !== 'KeyC' && event.code !== 'KeyV') {
      this.maskKeyPress = true;
      var key = event.key;

      if (key === 'Spacebar') {
        key = String.fromCharCode(event.keyCode);
      }

      if (!key) {
        this.isIosInvalid = true;
        validateValue.call(this, String.fromCharCode(event.keyCode), event.ctrlKey, event);
        event.preventDefault();
        this.isIosInvalid = false;
      } else if (key && key.length === 1) {
        validateValue.call(this, key, event.ctrlKey, event);
        event.preventDefault();
      }

      if (event.keyCode === 32 && key === ' ' && this.promptChar === ' ') {
        this.element.selectionStart = this.element.selectionEnd = this.element.selectionStart - key.length;
      }
    }

    if (this.element.value !== oldValue) {
      triggerMaskChangeEvent.call(this, event, oldValue);
    }
  }
} // eslint-disable-next-line @typescript-eslint/no-unused-vars


function triggerMaskChangeEvent(event, oldValue) {
  var prevOnChange = this.isProtectedOnChange;

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.changeEventArgs) && !this.isInitial) {
    var eventArgs = {};
    this.changeEventArgs = {
      value: this.element.value,
      maskedValue: this.element.value,
      isInteraction: false,
      isInteracted: false
    };

    if (this.mask) {
      this.changeEventArgs.value = strippedValue.call(this, this.element);
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(event)) {
      this.changeEventArgs.isInteracted = true;
      this.changeEventArgs.isInteraction = true;
      this.changeEventArgs.event = event;
    }

    this.isProtectedOnChange = true;
    this.value = this.changeEventArgs.value;
    this.isProtectedOnChange = prevOnChange;
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(eventArgs, this.changeEventArgs);
    /* istanbul ignore next */

    if (this.isAngular && this.preventChange) {
      this.preventChange = false;
    } else {
      this.trigger('change', eventArgs);
    }
  }

  this.preEleVal = this.element.value;
  this.prevValue = strippedValue.call(this, this.element);
}

function maskInputKeyUpHandler(event) {
  if (this.mask && !this.readonly) {
    var collec = void 0;

    if (!this.maskKeyPress && event.keyCode === 229) {
      var oldEventVal = void 0;

      if (this.element.value.length === 1) {
        this.element.value = this.element.value + this.promptMask;
        this.element.setSelectionRange(1, 1);
      }

      if (this.element.value.length > this.promptMask.length) {
        var startIndex = this.element.selectionStart;
        var addedValues = this.element.value.length - this.promptMask.length;
        var val_1 = this.element.value.substring(startIndex - addedValues, startIndex);

        if (this.undoCollec.length > 0) {
          collec = this.undoCollec[this.undoCollec.length - 1];
          var startIndex_1 = this.element.selectionStart;
          oldEventVal = collec.value;
          var oldVal = collec.value.substring(startIndex_1 - addedValues, startIndex_1);
          collec = this.redoCollec[0];
          val_1 = val_1.trim();
          var isSpace = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isAndroid && val_1 === '';

          if (!isSpace && oldVal !== val_1 && collec.value.substring(startIndex_1 - addedValues, startIndex_1) !== val_1) {
            validateValue.call(this, val_1, event.ctrlKey, event);
          } else if (isSpace) {
            preventUnsupportedValues.call(this, event, startIndex_1 - 1, this.element.selectionEnd - 1, val_1, event.ctrlKey, false);
          }
        } else {
          oldEventVal = this.promptMask;
          validateValue.call(this, val_1, event.ctrlKey, event);
        }

        this.maskKeyPress = false;
        triggerMaskChangeEvent.call(this, event, oldEventVal);
      }
    } else {
      removeMaskError.call(this);
    }

    var val = strippedValue.call(this, this.element);

    if (!(this.element.selectionStart === 0 && this.promptMask === this.element.value && val === '') || val === '' && this.value !== val) {
      this.prevValue = val;
      this.value = val;
    }
  } else {
    triggerMaskChangeEvent.call(this, event);
  }

  if (this.element.selectionStart === 0 && this.element.selectionEnd === 0) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var temp_1 = this.element;
    setTimeout(function () {
      temp_1.setSelectionRange(0, 0);
    }, 0);
  }
}

function mobileSwipeCheck(key) {
  if (key.length > 1 && this.promptMask.length + key.length < this.element.value.length) {
    var elementValue = this.redoCollec[0].value.substring(0, this.redoCollec[0].startIndex) + key + this.redoCollec[0].value.substring(this.redoCollec[0].startIndex, this.redoCollec[0].value.length);
    setElementValue.call(this, elementValue);
    this.element.selectionStart = this.element.selectionEnd = this.redoCollec[0].startIndex + key.length;
  }

  this.element.selectionStart = this.element.selectionStart - key.length;
  this.element.selectionEnd = this.element.selectionEnd - key.length;
}

function mobileValidation(key) {
  if (!this.maskKeyPress) {
    mobileSwipeCheck.call(this, key);
  }
}

function validateValue(key, isCtrlKey, event) {
  mobileValidation.call(this, key);

  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(key)) {
    return;
  }

  var startIndex = this.element.selectionStart;
  var initStartIndex = startIndex;
  var curMask;
  var allowText = false;
  var value = this.element.value;
  var eventOldVal;
  var prevSupport = false;
  var isEqualVal = false;

  for (var k = 0; k < key.length; k++) {
    var keyValue = key[k];
    startIndex = this.element.selectionStart;

    if (!this.maskKeyPress && initStartIndex === startIndex) {
      startIndex = startIndex + k;
    }

    if (!this.maskKeyPress || startIndex < this.promptMask.length) {
      for (var i = startIndex; i < this.promptMask.length; i++) {
        var maskValue = this.escapeMaskValue;
        curMask = maskValue[startIndex];

        if (this.hiddenMask[startIndex] === '\\' && this.hiddenMask[startIndex + 1] === key) {
          isEqualVal = true;
        }

        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.regExpCollec["" + curMask]) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters["" + curMask])) && this.hiddenMask[startIndex] !== this.promptChar && this.customRegExpCollec[startIndex][0] !== '[' && this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] !== ']' || this.promptMask[startIndex] !== this.promptChar && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters) || this.promptChar === curMask && this.escapeMaskValue === this.mask) {
          this.element.selectionStart = this.element.selectionEnd = startIndex + 1;
          startIndex = this.element.selectionStart;
          curMask = this.hiddenMask[startIndex];
        }
      }

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters["" + curMask])) {
        var customValStr = this.customCharacters["" + curMask];
        var customValArr = customValStr.split(',');

        for (var i = 0; i < customValArr.length; i++) {
          /* eslint-disable-next-line security/detect-non-literal-regexp */
          if (keyValue.match(new RegExp('[' + customValArr[i] + ']'))) {
            allowText = true;
            break;
          }
        }
        /* eslint-disable-next-line security/detect-non-literal-regexp */

      } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.regExpCollec["" + curMask]) && keyValue.match(new RegExp(this.regExpCollec["" + curMask])) && this.promptMask[startIndex] === this.promptChar) {
        allowText = true;
      } else if (this.promptMask[startIndex] === this.promptChar && this.customRegExpCollec[startIndex][0] === '[' && this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] === ']'
      /* eslint-disable-next-line security/detect-non-literal-regexp */
      && keyValue.match(new RegExp(this.customRegExpCollec[startIndex]))) {
        allowText = true;
      }

      if ((!this.maskKeyPress || startIndex < this.hiddenMask.length) && allowText) {
        if (k === 0) {
          if (this.maskKeyPress) {
            this.undoCollec.push({
              value: value,
              startIndex: startIndex,
              endIndex: startIndex
            });
          } else {
            var sIndex = this.element.selectionStart;
            var eIndex = this.element.selectionEnd;

            if (this.redoCollec.length > 0) {
              eventOldVal = this.redoCollec[0].value;
              setElementValue.call(this, eventOldVal);
              this.undoCollec.push(this.redoCollec[0]);
            } else {
              this.undoCollec.push({
                value: this.promptMask,
                startIndex: startIndex,
                endIndex: startIndex
              });
              eventOldVal = this.promptMask;
              setElementValue.call(this, eventOldVal);
            }

            this.element.selectionStart = sIndex;
            this.element.selectionEnd = eIndex;
          }
        }

        startIndex = this.element.selectionStart;
        applySupportedValues.call(this, event, startIndex, keyValue, eventOldVal, isEqualVal);
        prevSupport = true;

        if (k === key.length - 1) {
          this.redoCollec.unshift({
            value: this.element.value,
            startIndex: this.element.selectionStart,
            endIndex: this.element.selectionEnd
          });
        }

        allowText = false;
      } else {
        startIndex = this.element.selectionStart;
        preventUnsupportedValues.call(this, event, startIndex, initStartIndex, key, isCtrlKey, prevSupport);
      }

      if (k === key.length - 1 && !allowText) {
        if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isAndroid || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isAndroid && startIndex < this.promptMask.length) {
          this.redoCollec.unshift({
            value: this.element.value,
            startIndex: this.element.selectionStart,
            endIndex: this.element.selectionEnd
          });
        }
      }
    } else {
      if (key.length === 1 && !isCtrlKey && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(event)) {
        addMaskErrorClass.call(this);
      }
    }
  }
}

function applySupportedValues(event, startIndex, keyValue, eventOldVal, isEqualVal) {
  if (this.hiddenMask.length > this.promptMask.length) {
    keyValue = changeToLowerUpperCase.call(this, keyValue, this.element.value);
  }

  if (!isEqualVal) {
    var value = this.element.value;
    var elementValue = value.substring(0, startIndex) + keyValue + value.substring(startIndex + 1, value.length);
    setElementValue.call(this, elementValue);
    this.element.selectionStart = this.element.selectionEnd = startIndex + 1;
  }
}

function preventUnsupportedValues(event, sIdx, idx, key, ctrl, chkSupport) {
  if (!this.maskKeyPress) {
    var value = this.element.value;

    if (sIdx >= this.promptMask.length) {
      setElementValue.call(this, value.substring(0, sIdx));
    } else {
      if (idx === sIdx) {
        setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx + 1, value.length));
      } else {
        if (this.promptMask.length === this.element.value.length) {
          setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx, value.length));
        } else {
          setElementValue.call(this, value.substring(0, idx) + value.substring(idx + 1, value.length));
        }
      }

      this.element.selectionStart = this.element.selectionEnd = chkSupport || this.element.value[idx] !== this.promptChar ? sIdx : idx;
    }

    addMaskErrorClass.call(this);
  }

  if (key.length === 1 && !ctrl && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(event)) {
    addMaskErrorClass.call(this);
  }
}

function addMaskErrorClass() {
  var _this = this;

  var parentElement = this.element.parentNode;
  var timer = 200;

  if (parentElement.classList.contains(INPUTGROUP) || parentElement.classList.contains(FLOATINPUT)) {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([parentElement], ERROR);
  } else {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], ERROR);
  }

  if (this.isIosInvalid === true) {
    timer = 400;
  }

  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
    'aria-invalid': 'true'
  });
  setTimeout(function () {
    if (!_this.maskKeyPress) {
      removeMaskError.call(_this);
    }
  }, timer);
}

function removeMaskError() {
  var parentElement = this.element.parentNode;

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(parentElement)) {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([parentElement], ERROR);
  }

  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], ERROR);
  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
    'aria-invalid': 'false'
  });
}
/**
 * Validates user input using masking elements '<' , '>' and '|'.
 *
 * @hidden
 */


function changeToLowerUpperCase(key, value) {
  var promptMask;
  var i;
  var curVal = value;
  var caseCount = 0;

  for (i = 0; i < this.hiddenMask.length; i++) {
    if (this.hiddenMask[i] === '\\') {
      promptMask = curVal.substring(0, i) + '\\' + curVal.substring(i, curVal.length);
    }

    if (this.hiddenMask[i] === '>' || this.hiddenMask[i] === '<' || this.hiddenMask[i] === '|') {
      if (this.hiddenMask[i] !== curVal[i]) {
        promptMask = curVal.substring(0, i) + this.hiddenMask[i] + curVal.substring(i, curVal.length);
      }

      ++caseCount;
    }

    if (promptMask) {
      if (promptMask[i] === this.promptChar && i > this.element.selectionStart || this.element.value.indexOf(this.promptChar) < 0 && this.element.selectionStart + caseCount === i) {
        caseCount = 0;
        break;
      }

      curVal = promptMask;
    }
  }

  while (i >= 0 && promptMask) {
    if (i === 0 || promptMask[i - 1] !== '\\') {
      if (promptMask[i] === '>') {
        key = key.toUpperCase();
        break;
      } else if (promptMask[i] === '<') {
        key = key.toLowerCase();
        break;
      } else if (promptMask[i] === '|') {
        break;
      }
    }

    --i;
  }

  return key;
}
/**
 * To set updated values in the MaskedTextBox.
 *
 * @hidden
 */


function setMaskValue(val) {
  if (this.mask && val !== undefined && (this.prevValue === undefined || this.prevValue !== val)) {
    this.maskKeyPress = true;
    setElementValue.call(this, this.promptMask);

    if (val !== '' && !(val === null && this.floatLabelType === 'Never' && this.placeholder)) {
      this.element.selectionStart = 0;
      this.element.selectionEnd = 0;
    }

    if (val !== null) {
      for (var i = 0; i < val.length; i++) {
        validateValue.call(this, val[i], false, null);
      }
    }

    var newVal = strippedValue.call(this, this.element);
    this.prevValue = newVal;
    this.value = newVal;
    triggerMaskChangeEvent.call(this, null, null);
    this.maskKeyPress = false;
    var labelElement = this.element.parentNode.querySelector('.e-float-text');

    if (this.element.value === this.promptMask && this.floatLabelType === 'Auto' && this.placeholder && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(labelElement) && labelElement.classList.contains(TOPLABEL) && !this.isFocus) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([labelElement], TOPLABEL);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([labelElement], BOTTOMLABEL);
      setElementValue.call(this, '');
    }
  }

  if (this.mask === null || this.mask === '' && this.value !== undefined) {
    setElementValue.call(this, this.value);
  }
}
/**
 * To set updated values in the input element.
 *
 * @hidden
 */

function setElementValue(val, element) {
  if (!this.isFocus && this.floatLabelType === 'Auto' && this.placeholder && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
    val = '';
  }

  var value = strippedValue.call(this, element ? element : this.element, val);

  if (value === null || value === '') {
    _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setValue(val, element ? element : this.element, this.floatLabelType, false);

    if (this.showClearButton) {
      this.inputObj.clearButton.classList.add('e-clear-icon-hide');
    }
  } else {
    _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setValue(val, element ? element : this.element, this.floatLabelType, this.showClearButton);
  }
}
/**
 * Provide mask support to input textbox through utility method.
 *
 * @hidden
 */

function maskInput(args) {
  var inputEle = getMaskInput(args);
  applyMask.call(inputEle);
  var val = strippedValue.call(this, this.element);
  this.prevValue = val;
  this.value = val;

  if (args.mask) {
    unwireEvents.call(inputEle);
    wireEvents.call(inputEle);
  }
}

function getMaskInput(args) {
  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([args.element], UTILMASK);
  var inputEle = {
    element: args.element,
    mask: args.mask,
    promptMask: '',
    hiddenMask: '',
    escapeMaskValue: '',
    promptChar: args.promptChar ? args.promptChar.length > 1 ? args.promptChar = args.promptChar[0] : args.promptChar : '_',
    value: args.value ? args.value : null,
    regExpCollec: regularExpressions,
    customRegExpCollec: [],
    customCharacters: args.customCharacters,
    undoCollec: [],
    redoCollec: [],
    maskKeyPress: false,
    prevValue: ''
  };
  createMask.call(inputEle);
  return inputEle;
}
/**
 * Gets raw value of the textbox which has been masked through utility method.
 *
 * @hidden
 */


function getVal(args) {
  return strippedValue.call(getUtilMaskEle(args), args.element);
}
/**
 * Gets masked value of the textbox which has been masked through utility method.
 *
 * @hidden
 */

function getMaskedVal(args) {
  return unstrippedValue.call(getUtilMaskEle(args), args.element);
}

function getUtilMaskEle(args) {
  var inputEle;

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args) && args.element.classList.contains(UTILMASK)) {
    inputEle = getMaskInput(args);
  }

  return inputEle;
}
/**
 * Arguments to perform undo and redo functionalities.
 *
 * @hidden
 */


var MaskUndo =
/** @class */
function () {
  function MaskUndo() {}

  return MaskUndo;
}();

 // eslint-disable-next-line @typescript-eslint/no-unused-vars

var maskUndo = new MaskUndo();
/* eslint-enable valid-jsdoc, jsdoc/require-jsdoc, jsdoc/require-returns, jsdoc/require-param */

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/maskedtextbox/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/maskedtextbox/index.js ***!
  \************************************************************************/
/*! exports provided: regularExpressions, createMask, applyMask, wireEvents, unwireEvents, bindClearEvent, unstrippedValue, strippedValue, maskInputMouseDownHandler, maskInputMouseUpHandler, maskInputFocusHandler, triggerFocus, escapeRegExp, maskInputBlurHandler, maskInputDropHandler, mobileRemoveFunction, setMaskValue, setElementValue, maskInput, getVal, getMaskedVal, MaskUndo, MaskedTextBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _base_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base/index */ "./node_modules/@syncfusion/ej2-inputs/src/maskedtextbox/base/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "regularExpressions", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["regularExpressions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createMask", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["createMask"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "applyMask", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["applyMask"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "wireEvents", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["wireEvents"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unwireEvents", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["unwireEvents"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "bindClearEvent", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["bindClearEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unstrippedValue", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["unstrippedValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "strippedValue", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["strippedValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInputMouseDownHandler", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["maskInputMouseDownHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInputMouseUpHandler", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["maskInputMouseUpHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInputFocusHandler", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["maskInputFocusHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "triggerFocus", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["triggerFocus"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "escapeRegExp", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["escapeRegExp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInputBlurHandler", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["maskInputBlurHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInputDropHandler", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["maskInputDropHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mobileRemoveFunction", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["mobileRemoveFunction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setMaskValue", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["setMaskValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setElementValue", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["setElementValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maskInput", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["maskInput"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getVal", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["getVal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getMaskedVal", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["getMaskedVal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MaskUndo", function() { return _base_index__WEBPACK_IMPORTED_MODULE_0__["MaskUndo"]; });

/* harmony import */ var _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./maskedtextbox/index */ "./node_modules/@syncfusion/ej2-inputs/src/maskedtextbox/maskedtextbox/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MaskedTextBox", function() { return _maskedtextbox_index__WEBPACK_IMPORTED_MODULE_1__["MaskedTextBox"]; });

/**
 * MaskedTextbox modules
 */



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/maskedtextbox/maskedtextbox/index.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/maskedtextbox/maskedtextbox/index.js ***!
  \**************************************************************************************/
/*! exports provided: MaskedTextBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _maskedtextbox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./maskedtextbox */ "./node_modules/@syncfusion/ej2-inputs/src/maskedtextbox/maskedtextbox/maskedtextbox.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MaskedTextBox", function() { return _maskedtextbox__WEBPACK_IMPORTED_MODULE_0__["MaskedTextBox"]; });

/**
 * MaskedTextbox modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/maskedtextbox/maskedtextbox/maskedtextbox.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/maskedtextbox/maskedtextbox/maskedtextbox.js ***!
  \**********************************************************************************************/
/*! exports provided: MaskedTextBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaskedTextBox", function() { return MaskedTextBox; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _input_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../input/input */ "./node_modules/@syncfusion/ej2-inputs/src/input/input.js");
/* harmony import */ var _base_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../base/index */ "./node_modules/@syncfusion/ej2-inputs/src/maskedtextbox/base/index.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};







var ROOT = 'e-control-wrapper e-mask';
var INPUT = 'e-input';
var COMPONENT = 'e-maskedtextbox';
var CONTROL = 'e-control';
var MASKINPUT_FOCUS = 'e-input-focus';
var wrapperAttr = ['title', 'style', 'class'];
/**
 * The MaskedTextBox allows the user to enter the valid input only based on the provided mask.
 * ```html
 * <input id="mask" type="text" />
 * ```
 * ```typescript
 * <script>
 * var maskObj = new MaskedTextBox({ mask: "(999) 9999-999" });
 * maskObj.appendTo('#mask');
 * </script>
 * ```
 */

var MaskedTextBox =
/** @class */
function (_super) {
  __extends(MaskedTextBox, _super);
  /**
   *
   * @param {MaskedTextBoxModel} options - Specifies the MaskedTextBox model.
   * @param {string | HTMLElement | HTMLInputElement} element - Specifies the element to render as component.
   * @private
   */


  function MaskedTextBox(options, element) {
    var _this = _super.call(this, options, element) || this;

    _this.initInputValue = '';
    _this.isAngular = false;
    _this.preventChange = false;
    _this.isClicked = false;
    _this.maskOptions = options;
    return _this;
  }
  /**
   * Gets the component name.
   *
   * @returns {string} Returns the component name.
   * @private
   */


  MaskedTextBox.prototype.getModuleName = function () {
    return 'maskedtextbox';
  };
  /**
   * Initializes the event handler
   *
   * @returns {void}
   * @private
   */


  MaskedTextBox.prototype.preRender = function () {
    this.promptMask = '';
    this.hiddenMask = '';
    this.escapeMaskValue = '';
    this.regExpCollec = _base_index__WEBPACK_IMPORTED_MODULE_2__["regularExpressions"];
    this.customRegExpCollec = [];
    this.undoCollec = [];
    this.redoCollec = [];
    this.changeEventArgs = {};
    this.focusEventArgs = {};
    this.blurEventArgs = {};
    this.maskKeyPress = false;
    this.isFocus = false;
    this.isInitial = false;
    this.isIosInvalid = false;
    var ejInstance = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('ej2_instances', this.element);
    this.cloneElement = this.element.cloneNode(true);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.cloneElement], [CONTROL, COMPONENT, 'e-lib']);
    this.angularTagName = null;
    this.formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');

    if (this.element.tagName === 'EJS-MASKEDTEXTBOX') {
      this.angularTagName = this.element.tagName;
      var input = this.createElement('input');

      for (var i = 0; i < this.element.attributes.length; i++) {
        input.setAttribute(this.element.attributes[i].nodeName, this.element.attributes[i].nodeValue);
        input.innerHTML = this.element.innerHTML;
      }

      if (this.element.hasAttribute('id')) {
        this.element.removeAttribute('id');
      }

      this.element.classList.remove('e-control', 'e-maskedtextbox');
      this.element.classList.add('e-mask-container');
      this.element.appendChild(input);
      this.element = input;
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('ej2_instances', ejInstance, this.element);
    }

    this.updateHTMLAttrToElement();
    this.checkHtmlAttributes(false);

    if (this.formElement) {
      this.initInputValue = this.value;
    }
  };
  /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */

  /**
   * Gets the properties to be maintained in the persisted state.
   *
   * @returns {string}
   */


  MaskedTextBox.prototype.getPersistData = function () {
    var keyEntity = ['value'];
    return this.addOnPersist(keyEntity);
  };
  /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */

  /**
   * Initializes the component rendering.
   *
   * @returns {void}
   * @private
   */


  MaskedTextBox.prototype.render = function () {
    if (this.element.tagName.toLowerCase() === 'input') {
      if (this.floatLabelType === 'Never') {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], INPUT);
      }

      this.createWrapper();
      this.updateHTMLAttrToWrapper();

      if (this.element.name === '') {
        this.element.setAttribute('name', this.element.id);
      }

      this.isInitial = true;
      this.resetMaskedTextBox();
      this.isInitial = false;
      this.setMaskPlaceholder(true, false);
      this.setWidth(this.width);
      this.preEleVal = this.element.value;

      if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.version === '11.0' || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'edge')) {
        this.element.blur();
      }

      if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIos) {
        this.element.blur();
      }

      if (this.element.getAttribute('value') || this.value) {
        this.element.setAttribute('value', this.element.value);
      }

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, "fieldset")) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, "fieldset").disabled) {
        this.enabled = false;
      }

      this.renderComplete();
    }
  };

  MaskedTextBox.prototype.updateHTMLAttrToElement = function () {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes)) {
      for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
        var key = _a[_i];

        if (wrapperAttr.indexOf(key) < 0) {
          this.element.setAttribute(key, this.htmlAttributes["" + key]);
        }
      }
    }
  };

  MaskedTextBox.prototype.updateCssClass = function (newClass, oldClass) {
    _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setCssClass(this.getValidClassList(newClass), [this.inputObj.container], this.getValidClassList(oldClass));
  };

  MaskedTextBox.prototype.getValidClassList = function (maskClassName) {
    var result = maskClassName;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(maskClassName) && maskClassName !== '') {
      result = maskClassName.replace(/\s+/g, ' ').trim();
    }

    return result;
  };

  MaskedTextBox.prototype.updateHTMLAttrToWrapper = function () {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes)) {
      for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
        var key = _a[_i];

        if (wrapperAttr.indexOf(key) > -1) {
          if (key === 'class') {
            var updatedClassValues = this.htmlAttributes["" + key].replace(/\s+/g, ' ').trim();

            if (updatedClassValues !== '') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputObj.container], updatedClassValues.split(' '));
            }
          } else if (key === 'style') {
            var maskStyle = this.inputObj.container.getAttribute(key);
            maskStyle = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(maskStyle) ? maskStyle + this.htmlAttributes["" + key] : this.htmlAttributes["" + key];
            this.inputObj.container.setAttribute(key, maskStyle);
          } else {
            this.inputObj.container.setAttribute(key, this.htmlAttributes["" + key]);
          }
        }
      }
    }
  };

  MaskedTextBox.prototype.resetMaskedTextBox = function () {
    this.promptMask = '';
    this.hiddenMask = '';
    this.escapeMaskValue = '';
    this.customRegExpCollec = [];
    this.undoCollec = [];
    this.redoCollec = [];

    if (this.promptChar.length > 1) {
      this.promptChar = this.promptChar[0];
    }

    _base_index__WEBPACK_IMPORTED_MODULE_2__["createMask"].call(this);
    _base_index__WEBPACK_IMPORTED_MODULE_2__["applyMask"].call(this);

    if (this.mask === null || this.mask === '' && this.value !== undefined) {
      _base_index__WEBPACK_IMPORTED_MODULE_2__["setElementValue"].call(this, this.value);
    }

    var val = _base_index__WEBPACK_IMPORTED_MODULE_2__["strippedValue"].call(this, this.element);
    this.prevValue = val;
    this.value = val;

    if (!this.isInitial) {
      _base_index__WEBPACK_IMPORTED_MODULE_2__["unwireEvents"].call(this);
    }

    _base_index__WEBPACK_IMPORTED_MODULE_2__["wireEvents"].call(this);
  };

  MaskedTextBox.prototype.setMaskPlaceholder = function (setVal, dynamicPlaceholder) {
    if (dynamicPlaceholder || this.placeholder) {
      _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setPlaceholder(this.placeholder, this.element);

      if (this.element.value === this.promptMask && setVal && this.floatLabelType !== 'Always' || this.element.value === this.promptMask && this.floatLabelType === 'Never') {
        _base_index__WEBPACK_IMPORTED_MODULE_2__["setElementValue"].call(this, '');
      }
    }
  };

  MaskedTextBox.prototype.setWidth = function (width) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(width)) {
      if (typeof width === 'number') {
        this.inputObj.container.style.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
        this.element.style.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
      } else if (typeof width === 'string') {
        var elementWidth = width.match(/px|%|em/) ? width : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
        this.inputObj.container.style.width = elementWidth;
        this.element.style.width = elementWidth;
      }
    }
  };

  MaskedTextBox.prototype.checkHtmlAttributes = function (isDynamic) {
    var attributes = isDynamic ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ['placeholder', 'disabled', 'value', 'readonly'];

    for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {
      var key = attributes_1[_i];

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.getAttribute(key))) {
        switch (key) {
          case 'placeholder':
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.maskOptions) || this.maskOptions['placeholder'] === undefined || isDynamic) {
              this.setProperties({
                placeholder: this.element.placeholder
              }, !isDynamic);
            }

            break;

          case 'disabled':
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.maskOptions) || this.maskOptions['enabled'] === undefined || isDynamic) {
              var isEnabled = this.element.getAttribute(key) === 'disabled' || this.element.getAttribute(key) === '' || this.element.getAttribute(key) === 'true' ? false : true;
              this.setProperties({
                enabled: isEnabled
              }, !isDynamic);
            }

            break;

          case 'value':
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.maskOptions) || this.maskOptions['value'] === undefined || isDynamic) {
              this.setProperties({
                value: this.element.value
              }, !isDynamic);
            }

            break;

          case 'readonly':
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.maskOptions) || this.maskOptions['readonly'] === undefined || isDynamic) {
              var isReadonly = this.element.getAttribute(key) === 'readonly' || this.element.getAttribute(key) === '' || this.element.getAttribute(key) === 'true' ? true : false;
              this.setProperties({
                readonly: isReadonly
              }, !isDynamic);
            }

            break;
        }
      }
    }
  };

  MaskedTextBox.prototype.createWrapper = function () {
    var updatedCssClassValues = this.cssClass;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cssClass) && this.cssClass !== '') {
      updatedCssClassValues = this.getValidClassList(this.cssClass);
    }

    this.inputObj = _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].createInput({
      element: this.element,
      floatLabelType: this.floatLabelType,
      properties: {
        enableRtl: this.enableRtl,
        cssClass: updatedCssClassValues,
        enabled: this.enabled,
        readonly: this.readonly,
        placeholder: this.placeholder,
        showClearButton: this.showClearButton
      }
    }, this.createElement);
    this.inputObj.container.setAttribute('class', ROOT + ' ' + this.inputObj.container.getAttribute('class'));
  };
  /**
   * Calls internally if any of the property value is changed.
   *
   * @param {MaskedTextBoxModel} newProp - Returns the dynamic property value of the component.
   * @param {MaskedTextBoxModel} oldProp - Returns the previous property value of the component.
   * @returns {void}
   * @hidden
   */


  MaskedTextBox.prototype.onPropertyChanged = function (newProp, oldProp) {
    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'value':
          _base_index__WEBPACK_IMPORTED_MODULE_2__["setMaskValue"].call(this, this.value);

          if (this.placeholder && !this.isFocus) {
            this.setMaskPlaceholder(false, false);
          }

          if (this.value === "") {
            this.element.selectionStart = 0;
            this.element.selectionEnd = 0;
          }

          break;

        case 'placeholder':
          this.setMaskPlaceholder(true, true);
          break;

        case 'width':
          this.setWidth(newProp.width);
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].calculateWidth(this.element, this.inputObj.container);
          break;

        case 'cssClass':
          this.updateCssClass(newProp.cssClass, oldProp.cssClass);
          break;

        case 'enabled':
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setEnabled(newProp.enabled, this.element, this.floatLabelType, this.inputObj.container);
          break;

        case 'readonly':
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setReadonly(newProp.readonly, this.element);
          break;

        case 'enableRtl':
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setEnableRtl(newProp.enableRtl, [this.inputObj.container]);
          break;

        case 'customCharacters':
          this.customCharacters = newProp.customCharacters;
          this.resetMaskedTextBox();
          break;

        case 'showClearButton':
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setClearButton(newProp.showClearButton, this.element, this.inputObj, undefined, this.createElement);
          _base_index__WEBPACK_IMPORTED_MODULE_2__["bindClearEvent"].call(this);
          break;

        case 'floatLabelType':
          this.floatLabelType = newProp.floatLabelType;
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].removeFloating(this.inputObj);
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement);
          break;

        case 'htmlAttributes':
          this.updateHTMLAttrToElement();
          this.updateHTMLAttrToWrapper();
          this.checkHtmlAttributes(true);
          break;

        case 'mask':
          {
            var strippedValue_1 = this.value;
            this.mask = newProp.mask;
            this.updateValue(strippedValue_1);
          }
          break;

        case 'promptChar':
          {
            if (newProp.promptChar.length > 1) {
              newProp.promptChar = newProp.promptChar[0];
            }

            if (newProp.promptChar) {
              this.promptChar = newProp.promptChar;
            } else {
              this.promptChar = '_';
            }
            /* eslint-disable-next-line security/detect-non-literal-regexp */


            var value = this.element.value.replace(new RegExp('[' + oldProp.promptChar + ']', 'g'), this.promptChar);

            if (this.promptMask === this.element.value) {
              /* eslint-disable-next-line security/detect-non-literal-regexp */
              value = this.promptMask.replace(new RegExp('[' + oldProp.promptChar + ']', 'g'), this.promptChar);
            }
            /* eslint-disable-next-line security/detect-non-literal-regexp */


            this.promptMask = this.promptMask.replace(new RegExp('[' + oldProp.promptChar + ']', 'g'), this.promptChar);
            this.undoCollec = this.redoCollec = [];
            _base_index__WEBPACK_IMPORTED_MODULE_2__["setElementValue"].call(this, value);
            break;
          }
      }
    }

    this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
  };

  MaskedTextBox.prototype.updateValue = function (strippedVal) {
    this.resetMaskedTextBox();
    _base_index__WEBPACK_IMPORTED_MODULE_2__["setMaskValue"].call(this, strippedVal);
  };
  /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */

  /**
   * Gets the value of the MaskedTextBox with the masked format.
   * By using `value` property, you can get the raw value of maskedtextbox without literals and prompt characters.
   *
   * @returns {string}
   */


  MaskedTextBox.prototype.getMaskedValue = function () {
    return _base_index__WEBPACK_IMPORTED_MODULE_2__["unstrippedValue"].call(this, this.element);
  };
  /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */

  /**
   * Sets the focus to widget for interaction.
   *
   * @returns {void}
   */


  MaskedTextBox.prototype.focusIn = function () {
    if (document.activeElement !== this.element && this.enabled) {
      this.isFocus = true;
      this.element.focus();
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputObj.container], [MASKINPUT_FOCUS]);
    }
  };
  /**
   * Remove the focus from widget, if the widget is in focus state.
   *
   * @returns {void}
   */


  MaskedTextBox.prototype.focusOut = function () {
    if (document.activeElement === this.element && this.enabled) {
      this.isFocus = false;
      this.element.blur();
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputObj.container], [MASKINPUT_FOCUS]);
    }
  };
  /**
   * Removes the component from the DOM and detaches all its related event handlers.
   * Also it maintains the initial input element from the DOM.
   *
   * @method destroy
   * @returns {void}
   */


  MaskedTextBox.prototype.destroy = function () {
    _base_index__WEBPACK_IMPORTED_MODULE_2__["unwireEvents"].call(this);
    var attrArray = ['aria-labelledby', 'role', 'autocomplete', 'aria-readonly', 'aria-disabled', 'autocapitalize', 'spellcheck', 'aria-autocomplete', 'aria-live', 'aria-invalid'];

    for (var i = 0; i < attrArray.length; i++) {
      this.element.removeAttribute(attrArray[i]);
    }

    this.element.classList.remove('e-input');

    if (this.inputObj) {
      this.inputObj.container.insertAdjacentElement('afterend', this.element);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.inputObj.container);
    }

    this.blurEventArgs = null;
    _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].destroy();
    this.changeEventArgs = null;
    this.inputObj = null;

    _super.prototype.destroy.call(this);
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MaskedTextBox.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MaskedTextBox.prototype, "width", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MaskedTextBox.prototype, "placeholder", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Never')], MaskedTextBox.prototype, "floatLabelType", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({})], MaskedTextBox.prototype, "htmlAttributes", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], MaskedTextBox.prototype, "enabled", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MaskedTextBox.prototype, "readonly", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MaskedTextBox.prototype, "showClearButton", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MaskedTextBox.prototype, "enablePersistence", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MaskedTextBox.prototype, "mask", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('_')], MaskedTextBox.prototype, "promptChar", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MaskedTextBox.prototype, "value", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MaskedTextBox.prototype, "customCharacters", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MaskedTextBox.prototype, "created", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MaskedTextBox.prototype, "destroyed", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MaskedTextBox.prototype, "change", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MaskedTextBox.prototype, "focus", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MaskedTextBox.prototype, "blur", void 0);

  MaskedTextBox = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], MaskedTextBox);
  return MaskedTextBox;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/numerictextbox/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/numerictextbox/index.js ***!
  \*************************************************************************/
/*! exports provided: NumericTextBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _numerictextbox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./numerictextbox */ "./node_modules/@syncfusion/ej2-inputs/src/numerictextbox/numerictextbox.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NumericTextBox", function() { return _numerictextbox__WEBPACK_IMPORTED_MODULE_0__["NumericTextBox"]; });

/**
 * NumericTextBox modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/numerictextbox/numerictextbox.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/numerictextbox/numerictextbox.js ***!
  \**********************************************************************************/
/*! exports provided: NumericTextBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumericTextBox", function() { return NumericTextBox; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _input_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../input/input */ "./node_modules/@syncfusion/ej2-inputs/src/input/input.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};







var ROOT = 'e-control-wrapper e-numeric';
var SPINICON = 'e-input-group-icon';
var SPINUP = 'e-spin-up';
var SPINDOWN = 'e-spin-down';
var ERROR = 'e-error';
var INCREMENT = 'increment';
var DECREMENT = 'decrement';
var INTREGEXP = new RegExp('^(-)?(\\d*)$');
var DECIMALSEPARATOR = '.';
var COMPONENT = 'e-numerictextbox';
var CONTROL = 'e-control';
var NUMERIC_FOCUS = 'e-input-focus';
var HIDDENELEMENT = 'e-numeric-hidden';
var wrapperAttributes = ['title', 'style', 'class'];
var selectionTimeOut = 0;
/**
 * Represents the NumericTextBox component that allows the user to enter only numeric values.
 * ```html
 * <input type='text' id="numeric"/>
 * ```
 * ```typescript
 * <script>
 *   var numericObj = new NumericTextBox({ value: 10 });
 *   numericObj.appendTo("#numeric");
 * </script>
 * ```
 */

var NumericTextBox =
/** @class */
function (_super) {
  __extends(NumericTextBox, _super);
  /**
   *
   * @param {NumericTextBoxModel} options - Specifies the NumericTextBox model.
   * @param {string | HTMLInputElement} element - Specifies the element to render as component.
   * @private
   */


  function NumericTextBox(options, element) {
    var _this = _super.call(this, options, element) || this;

    _this.isVue = false;
    _this.preventChange = false;
    _this.isAngular = false;
    _this.isDynamicChange = false;
    _this.numericOptions = options;
    return _this;
  }

  NumericTextBox.prototype.preRender = function () {
    this.isPrevFocused = false;
    this.decimalSeparator = '.'; // eslint-disable-next-line no-useless-escape

    this.intRegExp = new RegExp('/^(-)?(\d*)$/');
    this.isCalled = false;
    var ejInstance = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('ej2_instances', this.element);
    this.cloneElement = this.element.cloneNode(true);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.cloneElement], [CONTROL, COMPONENT, 'e-lib']);
    this.angularTagName = null;
    this.formEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');

    if (this.element.tagName === 'EJS-NUMERICTEXTBOX') {
      this.angularTagName = this.element.tagName;
      var input = this.createElement('input');
      var index = 0;

      for (index; index < this.element.attributes.length; index++) {
        var attributeName = this.element.attributes[index].nodeName;

        if (attributeName !== 'id' && attributeName !== 'class') {
          input.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);
          input.innerHTML = this.element.innerHTML;
        } else if (attributeName === 'class') {
          input.setAttribute(attributeName, this.element.className.split(' ').filter(function (item) {
            return item.indexOf('ng-') !== 0;
          }).join(' '));
        }
      }

      if (this.element.hasAttribute('name')) {
        this.element.removeAttribute('name');
      }

      this.element.classList.remove('e-control', 'e-numerictextbox');
      this.element.appendChild(input);
      this.element = input;
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('ej2_instances', ejInstance, this.element);
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
      'role': 'spinbutton',
      'tabindex': '0',
      'autocomplete': 'off'
    });
    var localeText = {
      incrementTitle: 'Increment value',
      decrementTitle: 'Decrement value',
      placeholder: this.placeholder
    };
    this.l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"]('numerictextbox', localeText, this.locale);

    if (this.l10n.getConstant('placeholder') !== '') {
      this.setProperties({
        placeholder: this.placeholder || this.l10n.getConstant('placeholder')
      }, true);
    }

    if (!this.element.hasAttribute('id')) {
      this.element.setAttribute('id', Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('numerictextbox'));
    }

    this.isValidState = true;
    this.inputStyle = null;
    this.inputName = null;
    this.cultureInfo = {};
    this.initCultureInfo();
    this.initCultureFunc();
    this.prevValue = this.value;
    this.updateHTMLAttrToElement();
    this.checkAttributes(false);

    if (this.formEle) {
      this.inputEleValue = this.value;
    }

    this.validateMinMax();
    this.validateStep();

    if (this.placeholder === null) {
      this.updatePlaceholder();
    }
  };
  /**
   * To Initialize the control rendering
   *
   * @returns {void}
   * @private
   */


  NumericTextBox.prototype.render = function () {
    if (this.element.tagName.toLowerCase() === 'input') {
      this.createWrapper();

      if (this.showSpinButton) {
        this.spinBtnCreation();
      }

      this.setElementWidth(this.width);

      if (!this.container.classList.contains('e-input-group')) {
        this.container.classList.add('e-input-group');
      }

      this.changeValue(this.value === null || isNaN(this.value) ? null : this.strictMode ? this.trimValue(this.value) : this.value);
      this.wireEvents();

      if (this.value !== null && !isNaN(this.value)) {
        if (this.decimals) {
          this.setProperties({
            value: this.roundNumber(this.value, this.decimals)
          }, true);
        }
      }

      if (this.element.getAttribute('value') || this.value) {
        this.element.setAttribute('value', this.element.value);
        this.hiddenInput.setAttribute('value', this.hiddenInput.value);
      }

      this.elementPrevValue = this.element.value;

      if (this.element.hasAttribute('data-val')) {
        this.element.setAttribute('data-val', 'false');
      }

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'fieldset')) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'fieldset').disabled) {
        this.enabled = false;
      }

      this.renderComplete();
    }
  };

  NumericTextBox.prototype.checkAttributes = function (isDynamic) {
    var attributes = isDynamic ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ['value', 'min', 'max', 'step', 'disabled', 'readonly', 'style', 'name', 'placeholder'];

    for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {
      var prop = attributes_1[_i];

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.getAttribute(prop))) {
        switch (prop) {
          case 'disabled':
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.numericOptions) || this.numericOptions['enabled'] === undefined || isDynamic) {
              var enabled = this.element.getAttribute(prop) === 'disabled' || this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? false : true;
              this.setProperties({
                enabled: enabled
              }, !isDynamic);
            }

            break;

          case 'readonly':
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.numericOptions) || this.numericOptions['readonly'] === undefined || isDynamic) {
              var readonly = this.element.getAttribute(prop) === 'readonly' || this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? true : false;
              this.setProperties({
                readonly: readonly
              }, !isDynamic);
            }

            break;

          case 'placeholder':
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.numericOptions) || this.numericOptions['placeholder'] === undefined || isDynamic) {
              this.setProperties({
                placeholder: this.element.placeholder
              }, !isDynamic);
            }

            break;

          case 'value':
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.numericOptions) || this.numericOptions['value'] === undefined || isDynamic) {
              var setNumber = this.instance.getNumberParser({
                format: 'n'
              })(this.element.getAttribute(prop));
              this.setProperties(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(prop, setNumber, {}), !isDynamic);
            }

            break;

          case 'min':
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.numericOptions) || this.numericOptions['min'] === undefined || isDynamic) {
              var minValue = this.instance.getNumberParser({
                format: 'n'
              })(this.element.getAttribute(prop));

              if (minValue !== null && !isNaN(minValue)) {
                this.setProperties(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(prop, minValue, {}), !isDynamic);
              }
            }

            break;

          case 'max':
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.numericOptions) || this.numericOptions['max'] === undefined || isDynamic) {
              var maxValue = this.instance.getNumberParser({
                format: 'n'
              })(this.element.getAttribute(prop));

              if (maxValue !== null && !isNaN(maxValue)) {
                this.setProperties(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(prop, maxValue, {}), !isDynamic);
              }
            }

            break;

          case 'step':
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.numericOptions) || this.numericOptions['step'] === undefined || isDynamic) {
              var stepValue = this.instance.getNumberParser({
                format: 'n'
              })(this.element.getAttribute(prop));

              if (stepValue !== null && !isNaN(stepValue)) {
                this.setProperties(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(prop, stepValue, {}), !isDynamic);
              }
            }

            break;

          case 'style':
            this.inputStyle = this.element.getAttribute(prop);
            break;

          case 'name':
            this.inputName = this.element.getAttribute(prop);
            break;

          default:
            {
              var value = this.instance.getNumberParser({
                format: 'n'
              })(this.element.getAttribute(prop));

              if (value !== null && !isNaN(value) || prop === 'value') {
                this.setProperties(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(prop, value, {}), true);
              }
            }
            break;
        }
      }
    }
  };

  NumericTextBox.prototype.updatePlaceholder = function () {
    this.setProperties({
      placeholder: this.l10n.getConstant('placeholder')
    }, true);
  };

  NumericTextBox.prototype.initCultureFunc = function () {
    this.instance = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Internationalization"](this.locale);
  };

  NumericTextBox.prototype.initCultureInfo = function () {
    this.cultureInfo.format = this.format;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('currency', this) !== null) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('currency', this.currency, this.cultureInfo);
      this.setProperties({
        currencyCode: this.currency
      }, true);
    }
  };
  /* Wrapper creation */


  NumericTextBox.prototype.createWrapper = function () {
    var updatedCssClassValue = this.cssClass;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cssClass) && this.cssClass !== '') {
      updatedCssClassValue = this.getNumericValidClassList(this.cssClass);
    }

    var inputObj = _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].createInput({
      element: this.element,
      floatLabelType: this.floatLabelType,
      properties: {
        readonly: this.readonly,
        placeholder: this.placeholder,
        cssClass: updatedCssClassValue,
        enableRtl: this.enableRtl,
        showClearButton: this.showClearButton,
        enabled: this.enabled
      }
    }, this.createElement);
    this.inputWrapper = inputObj;
    this.container = inputObj.container;
    this.container.setAttribute('class', ROOT + ' ' + this.container.getAttribute('class'));
    this.updateHTMLAttrToWrapper();

    if (this.readonly) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
        'aria-readonly': 'true'
      });
    }

    this.hiddenInput = this.createElement('input', {
      attrs: {
        type: 'text',
        'validateHidden': 'true',
        'class': HIDDENELEMENT
      }
    });
    this.inputName = this.inputName !== null ? this.inputName : this.element.id;
    this.element.removeAttribute('name');

    if (this.isAngular && this.angularTagName === 'EJS-NUMERICTEXTBOX' && this.cloneElement.id.length > 0) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.hiddenInput, {
        'name': this.cloneElement.id
      });
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.hiddenInput, {
        'name': this.inputName
      });
    }

    this.container.insertBefore(this.hiddenInput, this.container.childNodes[1]);
    this.updateDataAttribute(false);

    if (this.inputStyle !== null) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.container, {
        'style': this.inputStyle
      });
    }
  };

  NumericTextBox.prototype.updateDataAttribute = function (isDynamic) {
    var attr = {};

    if (!isDynamic) {
      for (var a = 0; a < this.element.attributes.length; a++) {
        attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);
      }
    } else {
      attr = this.htmlAttributes;
    }

    for (var _i = 0, _a = Object.keys(attr); _i < _a.length; _i++) {
      var key = _a[_i];

      if (key.indexOf('data') === 0) {
        this.hiddenInput.setAttribute(key, attr["" + key]);
      }
    }
  };

  NumericTextBox.prototype.updateHTMLAttrToElement = function () {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes)) {
      for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
        var pro = _a[_i];

        if (wrapperAttributes.indexOf(pro) < 0) {
          this.element.setAttribute(pro, this.htmlAttributes["" + pro]);
        }
      }
    }
  };

  NumericTextBox.prototype.updateCssClass = function (newClass, oldClass) {
    _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setCssClass(this.getNumericValidClassList(newClass), [this.container], this.getNumericValidClassList(oldClass));
  };

  NumericTextBox.prototype.getNumericValidClassList = function (numericClassName) {
    var result = numericClassName;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(numericClassName) && numericClassName !== '') {
      result = numericClassName.replace(/\s+/g, ' ').trim();
    }

    return result;
  };

  NumericTextBox.prototype.updateHTMLAttrToWrapper = function () {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes)) {
      for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
        var pro = _a[_i];

        if (wrapperAttributes.indexOf(pro) > -1) {
          if (pro === 'class') {
            var updatedClassValue = this.getNumericValidClassList(this.htmlAttributes["" + pro]);

            if (updatedClassValue !== '') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.container], updatedClassValue.split(' '));
            }
          } else if (pro === 'style') {
            var numericStyle = this.container.getAttribute(pro);
            numericStyle = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(numericStyle) ? numericStyle + this.htmlAttributes["" + pro] : this.htmlAttributes["" + pro];
            this.container.setAttribute(pro, numericStyle);
          } else {
            this.container.setAttribute(pro, this.htmlAttributes["" + pro]);
          }
        }
      }
    }
  };

  NumericTextBox.prototype.setElementWidth = function (width) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(width)) {
      if (typeof width === 'number') {
        this.container.style.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
      } else if (typeof width === 'string') {
        this.container.style.width = width.match(/px|%|em/) ? width : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
      }
    }
  };
  /* Spinner creation */


  NumericTextBox.prototype.spinBtnCreation = function () {
    this.spinDown = _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].appendSpan(SPINICON + ' ' + SPINDOWN, this.container, this.createElement);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.spinDown, {
      'title': this.l10n.getConstant('decrementTitle')
    });
    this.spinUp = _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].appendSpan(SPINICON + ' ' + SPINUP, this.container, this.createElement);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.spinUp, {
      'title': this.l10n.getConstant('incrementTitle')
    });
    this.wireSpinBtnEvents();
  };

  NumericTextBox.prototype.validateMinMax = function () {
    if (!(typeof this.min === 'number' && !isNaN(this.min))) {
      this.setProperties({
        min: -Number.MAX_VALUE
      }, true);
    }

    if (!(typeof this.max === 'number' && !isNaN(this.max))) {
      this.setProperties({
        max: Number.MAX_VALUE
      }, true);
    }

    if (this.decimals !== null) {
      if (this.min !== -Number.MAX_VALUE) {
        this.setProperties({
          min: this.instance.getNumberParser({
            format: 'n'
          })(this.formattedValue(this.decimals, this.min))
        }, true);
      }

      if (this.max !== Number.MAX_VALUE) {
        this.setProperties({
          max: this.instance.getNumberParser({
            format: 'n'
          })(this.formattedValue(this.decimals, this.max))
        }, true);
      }
    }

    this.setProperties({
      min: this.min > this.max ? this.max : this.min
    }, true);

    if (this.min !== -Number.MAX_VALUE) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
        'aria-valuemin': this.min.toString()
      });
    }

    if (this.max !== Number.MAX_VALUE) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
        'aria-valuemax': this.max.toString()
      });
    }
  };

  NumericTextBox.prototype.formattedValue = function (decimals, value) {
    return this.instance.getNumberFormat({
      maximumFractionDigits: decimals,
      minimumFractionDigits: decimals,
      useGrouping: false
    })(value);
  };

  NumericTextBox.prototype.validateStep = function () {
    if (this.decimals !== null) {
      this.setProperties({
        step: this.instance.getNumberParser({
          format: 'n'
        })(this.formattedValue(this.decimals, this.step))
      }, true);
    }
  };

  NumericTextBox.prototype.action = function (operation, event) {
    this.isInteract = true;
    var value = this.isFocused ? this.instance.getNumberParser({
      format: 'n'
    })(this.element.value) : this.value;
    this.changeValue(this.performAction(value, this.step, operation));
    this.raiseChangeEvent(event);
  };

  NumericTextBox.prototype.checkErrorClass = function () {
    if (this.isValidState) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.container], ERROR);
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.container], ERROR);
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
      'aria-invalid': this.isValidState ? 'false' : 'true'
    });
  };

  NumericTextBox.prototype.bindClearEvent = function () {
    if (this.showClearButton) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputWrapper.clearButton, 'mousedown touchstart', this.resetHandler, this);
    }
  };

  NumericTextBox.prototype.resetHandler = function (e) {
    e.preventDefault();

    if (!this.inputWrapper.clearButton.classList.contains('e-clear-icon-hide') || this.inputWrapper.container.classList.contains('e-static-clear')) {
      this.clear(e);
    }

    this.isInteract = true;
    this.raiseChangeEvent(e);
  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars


  NumericTextBox.prototype.clear = function (event) {
    this.setProperties({
      value: null
    }, true);
    this.setElementValue('');
    this.hiddenInput.value = '';
    var formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');

    if (formElement) {
      var element = this.element.nextElementSibling;
      var keyupEvent = document.createEvent('KeyboardEvent');
      keyupEvent.initEvent('keyup', false, true);
      element.dispatchEvent(keyupEvent);
    }
  };

  NumericTextBox.prototype.resetFormHandler = function () {
    if (this.element.tagName === 'EJS-NUMERICTEXTBOX') {
      this.updateValue(null);
    } else {
      this.updateValue(this.inputEleValue);
    }
  };

  NumericTextBox.prototype.setSpinButton = function () {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.spinDown)) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.spinDown, {
        'title': this.l10n.getConstant('decrementTitle'),
        'aria-label': this.l10n.getConstant('decrementTitle')
      });
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.spinUp)) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.spinUp, {
        'title': this.l10n.getConstant('incrementTitle'),
        'aria-label': this.l10n.getConstant('incrementTitle')
      });
    }
  };

  NumericTextBox.prototype.wireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'focus', this.focusHandler, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'blur', this.focusOutHandler, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keydown', this.keyDownHandler, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keyup', this.keyUpHandler, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'input', this.inputHandler, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keypress', this.keyPressHandler, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'change', this.changeHandler, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'paste', this.pasteHandler, this);

    if (this.enabled) {
      this.bindClearEvent();

      if (this.formEle) {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.formEle, 'reset', this.resetFormHandler, this);
      }
    }
  };

  NumericTextBox.prototype.wireSpinBtnEvents = function () {
    /* bind spin button events */
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.spinUp, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchStartEvent, this.mouseDownOnSpinner, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.spinDown, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchStartEvent, this.mouseDownOnSpinner, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.spinUp, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchEndEvent, this.mouseUpOnSpinner, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.spinDown, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchEndEvent, this.mouseUpOnSpinner, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.spinUp, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchMoveEvent, this.touchMoveOnSpinner, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.spinDown, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchMoveEvent, this.touchMoveOnSpinner, this);
  };

  NumericTextBox.prototype.unwireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'focus', this.focusHandler);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'blur', this.focusOutHandler);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keyup', this.keyUpHandler);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'input', this.inputHandler);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keydown', this.keyDownHandler);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keypress', this.keyPressHandler);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'change', this.changeHandler);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'paste', this.pasteHandler);

    if (this.formEle) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.formEle, 'reset', this.resetFormHandler);
    }
  };

  NumericTextBox.prototype.unwireSpinBtnEvents = function () {
    /* unbind spin button events */
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.spinUp, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchStartEvent, this.mouseDownOnSpinner);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.spinDown, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchStartEvent, this.mouseDownOnSpinner);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.spinUp, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchEndEvent, this.mouseUpOnSpinner);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.spinDown, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchEndEvent, this.mouseUpOnSpinner);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.spinUp, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchMoveEvent, this.touchMoveOnSpinner);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.spinDown, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchMoveEvent, this.touchMoveOnSpinner);
  };

  NumericTextBox.prototype.changeHandler = function (event) {
    event.stopPropagation();

    if (!this.element.value.length) {
      this.setProperties({
        value: null
      }, true);
    }

    var parsedInput = this.instance.getNumberParser({
      format: 'n'
    })(this.element.value);
    this.updateValue(parsedInput, event);
  };

  NumericTextBox.prototype.raiseChangeEvent = function (event) {
    if (this.prevValue !== this.value || this.prevValue !== this.inputValue) {
      var eventArgs = {};
      this.changeEventArgs = {
        value: this.value,
        previousValue: this.prevValue,
        isInteracted: this.isInteract,
        isInteraction: this.isInteract,
        event: event
      };

      if (event) {
        this.changeEventArgs.event = event;
      }

      if (this.changeEventArgs.event === undefined) {
        this.changeEventArgs.isInteracted = false;
        this.changeEventArgs.isInteraction = false;
      }

      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(eventArgs, this.changeEventArgs);
      this.prevValue = this.value;
      this.isInteract = false;
      this.elementPrevValue = this.element.value;
      this.preventChange = false;
      this.trigger('change', eventArgs);
    }
  };

  NumericTextBox.prototype.pasteHandler = function () {
    var _this = this;

    if (!this.enabled || this.readonly) {
      return;
    }

    var beforeUpdate = this.element.value;
    setTimeout(function () {
      if (!_this.numericRegex().test(_this.element.value)) {
        _this.setElementValue(beforeUpdate);
      }
    });
  };

  NumericTextBox.prototype.preventHandler = function () {
    var _this = this;

    var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
    setTimeout(function () {
      if (_this.element.selectionStart > 0) {
        var currentPos = _this.element.selectionStart;
        var prevPos = _this.element.selectionStart - 1;
        var start = 0;

        var valArray = _this.element.value.split('');

        var numericObject = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getNumericObject"])(_this.locale);
        var decimalSeparator = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('decimal', numericObject);
        var ignoreKeyCode = decimalSeparator.charCodeAt(0);

        if (_this.element.value[prevPos] === ' ' && _this.element.selectionStart > 0 && !iOS) {
          if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this.prevVal)) {
            _this.element.value = _this.element.value.trim();
          } else if (prevPos !== 0) {
            _this.element.value = _this.prevVal;
          } else if (prevPos === 0) {
            _this.element.value = _this.element.value.trim();
          }

          _this.element.setSelectionRange(prevPos, prevPos);
        } else if (isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 1])) && _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) !== 45) {
          if (valArray.indexOf(_this.element.value[_this.element.selectionStart - 1]) !== valArray.lastIndexOf(_this.element.value[_this.element.selectionStart - 1]) && _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) === ignoreKeyCode || _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) !== ignoreKeyCode) {
            _this.element.value = _this.element.value.substring(0, prevPos) + _this.element.value.substring(currentPos, _this.element.value.length);

            _this.element.setSelectionRange(prevPos, prevPos);

            if (isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 1])) && _this.element.selectionStart > 0 && _this.element.value.length) {
              _this.preventHandler();
            }
          }
        } else if (isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 2])) && _this.element.selectionStart > 1 && _this.element.value[_this.element.selectionStart - 2].charCodeAt(0) !== 45) {
          if (valArray.indexOf(_this.element.value[_this.element.selectionStart - 2]) !== valArray.lastIndexOf(_this.element.value[_this.element.selectionStart - 2]) && _this.element.value[_this.element.selectionStart - 2].charCodeAt(0) === ignoreKeyCode || _this.element.value[_this.element.selectionStart - 2].charCodeAt(0) !== ignoreKeyCode) {
            _this.element.setSelectionRange(prevPos, prevPos);

            _this.nextEle = _this.element.value[_this.element.selectionStart];
            _this.cursorPosChanged = true;

            _this.preventHandler();
          }
        }

        if (_this.cursorPosChanged === true && _this.element.value[_this.element.selectionStart] === _this.nextEle && isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 1]))) {
          _this.element.setSelectionRange(_this.element.selectionStart + 1, _this.element.selectionStart + 1);

          _this.cursorPosChanged = false;
          _this.nextEle = null;
        }

        if (_this.element.value.trim() === '') {
          _this.element.setSelectionRange(start, start);
        }

        if (_this.element.selectionStart > 0) {
          if (_this.element.value[_this.element.selectionStart - 1].charCodeAt(0) === 45 && _this.element.selectionStart > 1) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this.prevVal)) {
              // eslint-disable-next-line no-self-assign
              _this.element.value = _this.element.value;
            } else {
              _this.element.value = _this.prevVal;
            }

            _this.element.setSelectionRange(_this.element.selectionStart, _this.element.selectionStart);
          }

          if (_this.element.value[_this.element.selectionStart - 1] === decimalSeparator && _this.decimals === 0 && _this.validateDecimalOnType) {
            _this.element.value = _this.element.value.substring(0, prevPos) + _this.element.value.substring(currentPos, _this.element.value.length);
          }
        }

        _this.prevVal = _this.element.value;
      }
    });
  };

  NumericTextBox.prototype.keyUpHandler = function () {
    if (!this.enabled || this.readonly) {
      return;
    }

    var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);

    if (!iOS && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
      this.preventHandler();
    }

    var parseValue = this.instance.getNumberParser({
      format: 'n'
    })(this.element.value);
    parseValue = parseValue === null || isNaN(parseValue) ? null : parseValue;
    this.hiddenInput.value = parseValue || parseValue === 0 ? parseValue.toString() : null;
    var formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');

    if (formElement) {
      var element = this.element.nextElementSibling;
      var keyupEvent = document.createEvent('KeyboardEvent');
      keyupEvent.initEvent('keyup', false, true);
      element.dispatchEvent(keyupEvent);
    }
  };

  NumericTextBox.prototype.inputHandler = function (event) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-this-alias
    var numerictextboxObj = this;

    if (!this.enabled || this.readonly) {
      return;
    }

    var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
    var fireFox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;

    if ((fireFox || iOS) && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
      this.preventHandler();
    }
    /* istanbul ignore next */


    if (this.isAngular && this.element.value !== Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('decimal', Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getNumericObject"])(this.locale)) && this.element.value !== Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('minusSign', Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getNumericObject"])(this.locale))) {
      var parsedValue = this.instance.getNumberParser({
        format: 'n'
      })(this.element.value);
      parsedValue = isNaN(parsedValue) ? null : parsedValue;
      numerictextboxObj.localChange({
        value: parsedValue
      });
      this.preventChange = true;
    }

    if (this.isVue) {
      var current = this.instance.getNumberParser({
        format: 'n'
      })(this.element.value);
      var previous = this.instance.getNumberParser({
        format: 'n'
      })(this.elementPrevValue); //EJ2-54963-if type "." or ".0" or "-.0" it converts to "0" automatically when binding v-model

      var nonZeroRegex = new RegExp('[^0-9]+$');

      if (nonZeroRegex.test(this.element.value) || (this.elementPrevValue.indexOf('.') !== -1 || this.elementPrevValue.indexOf('-') !== -1) && this.element.value[this.element.value.length - 1] === '0') {
        current = this.value;
      }

      var eventArgs = {
        event: event,
        value: current === null || isNaN(current) ? null : current,
        previousValue: previous === null || isNaN(previous) ? null : previous
      };
      this.preventChange = true;
      this.elementPrevValue = this.element.value;
      this.trigger('input', eventArgs);
    }
  };

  NumericTextBox.prototype.keyDownHandler = function (event) {
    if (!this.readonly) {
      switch (event.keyCode) {
        case 38:
          event.preventDefault();
          this.action(INCREMENT, event);
          break;

        case 40:
          event.preventDefault();
          this.action(DECREMENT, event);
          break;

        default:
          break;
      }
    }
  };

  NumericTextBox.prototype.performAction = function (value, step, operation) {
    if (value === null || isNaN(value)) {
      value = 0;
    }

    var updatedValue = operation === INCREMENT ? value + step : value - step;
    updatedValue = this.correctRounding(value, step, updatedValue);
    return this.strictMode ? this.trimValue(updatedValue) : updatedValue;
  };

  NumericTextBox.prototype.correctRounding = function (value, step, result) {
    var floatExp = new RegExp('[,.](.*)');
    var floatValue = floatExp.test(value.toString());
    var floatStep = floatExp.test(step.toString());

    if (floatValue || floatStep) {
      var valueCount = floatValue ? floatExp.exec(value.toString())[0].length : 0;
      var stepCount = floatStep ? floatExp.exec(step.toString())[0].length : 0;
      var max = Math.max(valueCount, stepCount);
      return value = this.roundValue(result, max);
    }

    return result;
  };

  NumericTextBox.prototype.roundValue = function (result, precision) {
    precision = precision || 0;
    var divide = Math.pow(10, precision);
    return result *= divide, result = Math.round(result) / divide;
  };

  NumericTextBox.prototype.updateValue = function (value, event) {
    if (event) {
      this.isInteract = true;
    }

    if (value !== null && !isNaN(value)) {
      if (this.decimals) {
        value = this.roundNumber(value, this.decimals);
      }
    }

    this.inputValue = value;
    this.changeValue(value === null || isNaN(value) ? null : this.strictMode ? this.trimValue(value) : value);
    /* istanbul ignore next */

    if (!this.isDynamicChange) {
      this.raiseChangeEvent(event);
    }
  };

  NumericTextBox.prototype.updateCurrency = function (prop, propVal) {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(prop, propVal, this.cultureInfo);
    this.updateValue(this.value);
  };

  NumericTextBox.prototype.changeValue = function (value) {
    if (!(value || value === 0)) {
      value = null;
      this.setProperties({
        value: value
      }, true);
    } else {
      var numberOfDecimals = this.getNumberOfDecimals(value);
      this.setProperties({
        value: this.roundNumber(value, numberOfDecimals)
      }, true);
    }

    this.modifyText();

    if (!this.strictMode) {
      this.validateState();
    }
  };

  NumericTextBox.prototype.modifyText = function () {
    if (this.value || this.value === 0) {
      var value = this.formatNumber();
      var elementValue = this.isFocused ? value : this.instance.getNumberFormat(this.cultureInfo)(this.value);
      this.setElementValue(elementValue);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
        'aria-valuenow': value
      });
      this.hiddenInput.value = this.value.toString();

      if (this.value !== null && this.serverDecimalSeparator) {
        this.hiddenInput.value = this.hiddenInput.value.replace('.', this.serverDecimalSeparator);
      }
    } else {
      this.setElementValue('');
      this.element.removeAttribute('aria-valuenow');
      this.hiddenInput.value = null;
    }
  };

  NumericTextBox.prototype.setElementValue = function (val, element) {
    _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setValue(val, element ? element : this.element, this.floatLabelType, this.showClearButton);
  };

  NumericTextBox.prototype.validateState = function () {
    this.isValidState = true;

    if (this.value || this.value === 0) {
      this.isValidState = !(this.value > this.max || this.value < this.min);
    }

    this.checkErrorClass();
  };

  NumericTextBox.prototype.getNumberOfDecimals = function (value) {
    var numberOfDecimals; // eslint-disable-next-line no-useless-escape

    var EXPREGEXP = new RegExp('[eE][\-+]?([0-9]+)');
    var valueString = value.toString();

    if (EXPREGEXP.test(valueString)) {
      var result = EXPREGEXP.exec(valueString);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(result)) {
        valueString = value.toFixed(Math.min(parseInt(result[1], 10), 20));
      }
    }

    var decimalPart = valueString.split('.')[1];
    numberOfDecimals = !decimalPart || !decimalPart.length ? 0 : decimalPart.length;

    if (this.decimals !== null) {
      numberOfDecimals = numberOfDecimals < this.decimals ? numberOfDecimals : this.decimals;
    }

    return numberOfDecimals;
  };

  NumericTextBox.prototype.formatNumber = function () {
    var numberOfDecimals = this.getNumberOfDecimals(this.value);
    return this.instance.getNumberFormat({
      maximumFractionDigits: numberOfDecimals,
      minimumFractionDigits: numberOfDecimals,
      useGrouping: false
    })(this.value);
  };

  NumericTextBox.prototype.trimValue = function (value) {
    if (value > this.max) {
      return this.max;
    }

    if (value < this.min) {
      return this.min;
    }

    return value;
  };

  NumericTextBox.prototype.roundNumber = function (value, precision) {
    var result = value;
    var decimals = precision || 0;
    var result1 = result.toString().split('e');
    result = Math.round(Number(result1[0] + 'e' + (result1[1] ? Number(result1[1]) + decimals : decimals)));
    var result2 = result.toString().split('e');
    result = Number(result2[0] + 'e' + (result2[1] ? Number(result2[1]) - decimals : -decimals));
    return Number(result.toFixed(decimals));
  };

  NumericTextBox.prototype.cancelEvent = function (event) {
    event.preventDefault();
    return false;
  };

  NumericTextBox.prototype.keyPressHandler = function (event) {
    if (!this.enabled || this.readonly) {
      return true;
    }

    if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.version === '11.0' && event.keyCode === 13) {
      var parsedInput = this.instance.getNumberParser({
        format: 'n'
      })(this.element.value);
      this.updateValue(parsedInput, event);
      return true;
    }

    if (event.which === 0 || event.metaKey || event.ctrlKey || event.keyCode === 8 || event.keyCode === 13) {
      return true;
    }

    var currentChar = String.fromCharCode(event.which);
    var decimalSeparator = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('decimal', Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getNumericObject"])(this.locale));
    var isAlterNumPadDecimalChar = event.code === 'NumpadDecimal' && currentChar !== decimalSeparator; //EJ2-59813-replace the culture decimal separator value with numberpad decimal separator value when culture decimal separator and numberpad decimal separator are different

    if (isAlterNumPadDecimalChar) {
      currentChar = decimalSeparator;
    }

    var text = this.element.value;
    text = text.substring(0, this.element.selectionStart) + currentChar + text.substring(this.element.selectionEnd);

    if (!this.numericRegex().test(text)) {
      event.preventDefault();
      event.stopPropagation();
      return false;
    } else {
      //EJ2-59813-update the numberpad decimal separator and update the cursor position
      if (isAlterNumPadDecimalChar) {
        var start = this.element.selectionStart + 1;
        this.element.value = text;
        this.element.setSelectionRange(start, start);
        event.preventDefault();
        event.stopPropagation();
      }

      return true;
    }
  };

  NumericTextBox.prototype.numericRegex = function () {
    var numericObject = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getNumericObject"])(this.locale);
    var decimalSeparator = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('decimal', numericObject);
    var fractionRule = '*';

    if (decimalSeparator === DECIMALSEPARATOR) {
      decimalSeparator = '\\' + decimalSeparator;
    }

    if (this.decimals === 0 && this.validateDecimalOnType) {
      return INTREGEXP;
    }

    if (this.decimals && this.validateDecimalOnType) {
      fractionRule = '{0,' + this.decimals + '}';
    }
    /* eslint-disable-next-line security/detect-non-literal-regexp */


    return new RegExp('^(-)?(((\\d+(' + decimalSeparator + '\\d' + fractionRule + ')?)|(' + decimalSeparator + '\\d' + fractionRule + ')))?$');
  };

  NumericTextBox.prototype.mouseWheel = function (event) {
    event.preventDefault();
    var delta; // eslint-disable-next-line @typescript-eslint/no-explicit-any

    var rawEvent = event;

    if (rawEvent.wheelDelta) {
      delta = rawEvent.wheelDelta / 120;
    } else if (rawEvent.detail) {
      delta = -rawEvent.detail / 3;
    }

    if (delta > 0) {
      this.action(INCREMENT, event);
    } else if (delta < 0) {
      this.action(DECREMENT, event);
    }

    this.cancelEvent(event);
  };

  NumericTextBox.prototype.focusHandler = function (event) {
    var _this = this;

    clearTimeout(selectionTimeOut);
    this.focusEventArgs = {
      event: event,
      value: this.value,
      container: this.container
    };
    this.trigger('focus', this.focusEventArgs);

    if (!this.enabled || this.readonly) {
      return;
    }

    this.isFocused = true;
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.container], ERROR);
    this.prevValue = this.value;

    if (this.value || this.value === 0) {
      var formatValue_1 = this.formatNumber();
      this.setElementValue(formatValue_1);

      if (!this.isPrevFocused) {
        if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.version === '11.0') {
          this.element.setSelectionRange(0, formatValue_1.length);
        } else {
          var delay = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIos ? 600 : 0;
          selectionTimeOut = setTimeout(function () {
            _this.element.setSelectionRange(0, formatValue_1.length);
          }, delay);
        }
      }
    }

    if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'mousewheel DOMMouseScroll', this.mouseWheel, this);
    }
  };

  NumericTextBox.prototype.focusOutHandler = function (event) {
    var _this = this;

    this.blurEventArgs = {
      event: event,
      value: this.value,
      container: this.container
    };
    this.trigger('blur', this.blurEventArgs);

    if (!this.enabled || this.readonly) {
      return;
    }

    if (this.isPrevFocused) {
      event.preventDefault();

      if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
        var value_1 = this.element.value;
        this.element.focus();
        this.isPrevFocused = false;
        var ele_1 = this.element;
        setTimeout(function () {
          _this.setElementValue(value_1, ele_1);
        }, 200);
      }
    } else {
      this.isFocused = false;

      if (!this.element.value.length) {
        this.setProperties({
          value: null
        }, true);
      }

      var parsedInput = this.instance.getNumberParser({
        format: 'n'
      })(this.element.value);
      this.updateValue(parsedInput);

      if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mousewheel DOMMouseScroll', this.mouseWheel);
      }
    }

    var formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');

    if (formElement) {
      var element = this.element.nextElementSibling;
      var focusEvent = document.createEvent('FocusEvent');
      focusEvent.initEvent('focusout', false, true);
      element.dispatchEvent(focusEvent);
    }
  };

  NumericTextBox.prototype.mouseDownOnSpinner = function (event) {
    var _this = this;

    if (this.isFocused) {
      this.isPrevFocused = true;
      event.preventDefault();
    }

    if (!this.getElementData(event)) {
      return;
    } // eslint-disable-next-line @typescript-eslint/no-unused-vars


    var result = this.getElementData(event);
    var target = event.currentTarget;
    var action = target.classList.contains(SPINUP) ? INCREMENT : DECREMENT;
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(target, 'mouseleave', this.mouseUpClick, this);
    this.timeOut = setInterval(function () {
      _this.isCalled = true;

      _this.action(action, event);
    }, 150);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mouseup', this.mouseUpClick, this);
  };

  NumericTextBox.prototype.touchMoveOnSpinner = function (event) {
    var target;

    if (event.type === 'touchmove') {
      var touchEvent = event.touches;
      target = touchEvent.length && document.elementFromPoint(touchEvent[0].pageX, touchEvent[0].pageY);
    } else {
      target = document.elementFromPoint(event.clientX, event.clientY);
    }

    if (!target.classList.contains(SPINICON)) {
      clearInterval(this.timeOut);
    }
  };

  NumericTextBox.prototype.mouseUpOnSpinner = function (event) {
    this.prevValue = this.value;

    if (this.isPrevFocused) {
      this.element.focus();

      if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
        this.isPrevFocused = false;
      }
    }

    if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
      event.preventDefault();
    }

    if (!this.getElementData(event)) {
      return;
    }

    var target = event.currentTarget;
    var action = target.classList.contains(SPINUP) ? INCREMENT : DECREMENT;
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, 'mouseleave', this.mouseUpClick);

    if (!this.isCalled) {
      this.action(action, event);
    }

    this.isCalled = false;
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mouseup', this.mouseUpClick);
    var formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');

    if (formElement) {
      var element = this.element.nextElementSibling;
      var keyupEvent = document.createEvent('KeyboardEvent');
      keyupEvent.initEvent('keyup', false, true);
      element.dispatchEvent(keyupEvent);
    }
  };

  NumericTextBox.prototype.getElementData = function (event) {
    if (event.which && event.which === 3 || event.button && event.button === 2 || !this.enabled || this.readonly) {
      return false;
    }

    clearInterval(this.timeOut);
    return true;
  };

  NumericTextBox.prototype.floatLabelTypeUpdate = function () {
    _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].removeFloating(this.inputWrapper);
    var hiddenInput = this.hiddenInput;
    this.hiddenInput.remove();
    _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement);
    this.container.insertBefore(hiddenInput, this.container.childNodes[1]);
  };

  NumericTextBox.prototype.mouseUpClick = function (event) {
    event.stopPropagation();
    clearInterval(this.timeOut);
    this.isCalled = false;

    if (this.spinUp) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.spinUp, 'mouseleave', this.mouseUpClick);
    }

    if (this.spinDown) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.spinDown, 'mouseleave', this.mouseUpClick);
    }
  };
  /**
   * Increments the NumericTextBox value with the specified step value.
   *
   * @param {number} step - Specifies the value used to increment the NumericTextBox value.
   * if its not given then numeric value will be incremented based on the step property value.
   * @returns {void}
   */


  NumericTextBox.prototype.increment = function (step) {
    if (step === void 0) {
      step = this.step;
    }

    this.isInteract = false;
    this.changeValue(this.performAction(this.value, step, INCREMENT));
    this.raiseChangeEvent();
  };
  /**
   * Decrements the NumericTextBox value with specified step value.
   *
   * @param {number} step - Specifies the value used to decrement the NumericTextBox value.
   * if its not given then numeric value will be decremented based on the step property value.
   * @returns {void}
   */


  NumericTextBox.prototype.decrement = function (step) {
    if (step === void 0) {
      step = this.step;
    }

    this.isInteract = false;
    this.changeValue(this.performAction(this.value, step, DECREMENT));
    this.raiseChangeEvent();
  };
  /**
   * Removes the component from the DOM and detaches all its related event handlers.
   * Also it maintains the initial input element from the DOM.
   *
   * @method destroy
   * @returns {void}
   */


  NumericTextBox.prototype.destroy = function () {
    this.unwireEvents();
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.hiddenInput);

    if (this.showSpinButton) {
      this.unwireSpinBtnEvents();
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.spinUp);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.spinDown);
    }

    var attrArray = ['aria-labelledby', 'role', 'autocomplete', 'aria-readonly', 'aria-disabled', 'autocapitalize', 'spellcheck', 'aria-autocomplete', 'tabindex', 'aria-valuemin', 'aria-valuemax', 'aria-valuenow', 'aria-invalid'];

    for (var i = 0; i < attrArray.length; i++) {
      this.element.removeAttribute(attrArray[i]);
    }

    this.element.classList.remove('e-input');
    this.container.insertAdjacentElement('afterend', this.element);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.container);
    this.spinUp = null;
    this.spinDown = null;
    this.container = null;
    this.hiddenInput = null;
    this.changeEventArgs = null;
    this.blurEventArgs = null;
    this.focusEventArgs = null;
    this.inputWrapper = null;
    _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].destroy();

    _super.prototype.destroy.call(this);
  };
  /* eslint-disable valid-jsdoc, jsdoc/require-returns */

  /**
   * Returns the value of NumericTextBox with the format applied to the NumericTextBox.
   *
   */


  NumericTextBox.prototype.getText = function () {
    return this.element.value;
  };
  /* eslint-enable valid-jsdoc, jsdoc/require-returns */

  /**
   * Sets the focus to widget for interaction.
   *
   * @returns {void}
   */


  NumericTextBox.prototype.focusIn = function () {
    if (document.activeElement !== this.element && this.enabled) {
      this.element.focus();
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.container], [NUMERIC_FOCUS]);
    }
  };
  /**
   * Remove the focus from widget, if the widget is in focus state.
   *
   * @returns {void}
   */


  NumericTextBox.prototype.focusOut = function () {
    if (document.activeElement === this.element && this.enabled) {
      this.element.blur();
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.container], [NUMERIC_FOCUS]);
    }
  };
  /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */

  /**
   * Gets the properties to be maintained in the persisted state.
   *
   * @returns {string}
   */


  NumericTextBox.prototype.getPersistData = function () {
    var keyEntity = ['value'];
    return this.addOnPersist(keyEntity);
  };
  /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */

  /**
   * Calls internally if any of the property value is changed.
   *
   * @param {NumericTextBoxModel} newProp - Returns the dynamic property value of the component.
   * @param {NumericTextBoxModel} oldProp - Returns the previous property value of the component.
   * @returns {void}
   * @private
   */


  NumericTextBox.prototype.onPropertyChanged = function (newProp, oldProp) {
    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'width':
          this.setElementWidth(newProp.width);
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].calculateWidth(this.element, this.container);
          break;

        case 'cssClass':
          this.updateCssClass(newProp.cssClass, oldProp.cssClass);
          break;

        case 'enabled':
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setEnabled(newProp.enabled, this.element);
          this.bindClearEvent();
          break;

        case 'enableRtl':
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setEnableRtl(newProp.enableRtl, [this.container]);
          break;

        case 'readonly':
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setReadonly(newProp.readonly, this.element);

          if (this.readonly) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
              'aria-readonly': 'true'
            });
          } else {
            this.element.removeAttribute('aria-readonly');
          }

          break;

        case 'htmlAttributes':
          this.updateHTMLAttrToElement();
          this.updateHTMLAttrToWrapper();
          this.updateDataAttribute(true);
          this.checkAttributes(true);
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].validateInputType(this.container, this.element);
          break;

        case 'placeholder':
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setPlaceholder(newProp.placeholder, this.element);
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].calculateWidth(this.element, this.container);
          break;

        case 'step':
          this.step = newProp.step;
          this.validateStep();
          break;

        case 'showSpinButton':
          this.updateSpinButton(newProp);
          break;

        case 'showClearButton':
          this.updateClearButton(newProp);
          break;

        case 'floatLabelType':
          this.floatLabelType = newProp.floatLabelType;
          this.floatLabelTypeUpdate();
          break;

        case 'value':
          this.isDynamicChange = (this.isAngular || this.isVue) && this.preventChange;
          this.updateValue(newProp.value);

          if (this.isDynamicChange) {
            this.preventChange = false;
            this.isDynamicChange = false;
          }

          break;

        case 'min':
        case 'max':
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(prop, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(prop, newProp), this);
          this.validateMinMax();
          this.updateValue(this.value);
          break;

        case 'strictMode':
          this.strictMode = newProp.strictMode;
          this.updateValue(this.value);
          this.validateState();
          break;

        case 'locale':
          this.initCultureFunc();
          this.l10n.setLocale(this.locale);
          this.setSpinButton();
          this.updatePlaceholder();
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setPlaceholder(this.placeholder, this.element);
          this.updateValue(this.value);
          break;

        case 'currency':
          {
            var propVal = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(prop, newProp);
            this.setProperties({
              currencyCode: propVal
            }, true);
            this.updateCurrency(prop, propVal);
          }
          break;

        case 'currencyCode':
          {
            var propValue = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(prop, newProp);
            this.setProperties({
              currency: propValue
            }, true);
            this.updateCurrency('currency', propValue);
          }
          break;

        case 'format':
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(prop, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(prop, newProp), this);
          this.initCultureInfo();
          this.updateValue(this.value);
          break;

        case 'decimals':
          this.decimals = newProp.decimals;
          this.updateValue(this.value);
      }
    }
  };

  NumericTextBox.prototype.updateClearButton = function (newProp) {
    _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setClearButton(newProp.showClearButton, this.element, this.inputWrapper, undefined, this.createElement);
    this.bindClearEvent();
  };

  NumericTextBox.prototype.updateSpinButton = function (newProp) {
    if (newProp.showSpinButton) {
      this.spinBtnCreation();
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.spinUp);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.spinDown);
    }
  };
  /**
   * Gets the component name
   *
   * @returns {string} Returns the component name.
   * @private
   */


  NumericTextBox.prototype.getModuleName = function () {
    return 'numerictextbox';
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], NumericTextBox.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], NumericTextBox.prototype, "value", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(-Number.MAX_VALUE)], NumericTextBox.prototype, "min", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(Number.MAX_VALUE)], NumericTextBox.prototype, "max", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(1)], NumericTextBox.prototype, "step", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], NumericTextBox.prototype, "width", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], NumericTextBox.prototype, "placeholder", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({})], NumericTextBox.prototype, "htmlAttributes", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], NumericTextBox.prototype, "showSpinButton", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], NumericTextBox.prototype, "readonly", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], NumericTextBox.prototype, "enabled", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], NumericTextBox.prototype, "showClearButton", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], NumericTextBox.prototype, "enablePersistence", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('n2')], NumericTextBox.prototype, "format", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], NumericTextBox.prototype, "decimals", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], NumericTextBox.prototype, "currency", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], NumericTextBox.prototype, "currencyCode", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], NumericTextBox.prototype, "strictMode", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], NumericTextBox.prototype, "validateDecimalOnType", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Never')], NumericTextBox.prototype, "floatLabelType", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], NumericTextBox.prototype, "created", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], NumericTextBox.prototype, "destroyed", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], NumericTextBox.prototype, "change", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], NumericTextBox.prototype, "focus", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], NumericTextBox.prototype, "blur", void 0);

  NumericTextBox = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], NumericTextBox);
  return NumericTextBox;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/rating/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/rating/index.js ***!
  \*****************************************************************/
/*! exports provided: LabelPosition, PrecisionType, Rating */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _rating__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rating */ "./node_modules/@syncfusion/ej2-inputs/src/rating/rating.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LabelPosition", function() { return _rating__WEBPACK_IMPORTED_MODULE_0__["LabelPosition"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PrecisionType", function() { return _rating__WEBPACK_IMPORTED_MODULE_0__["PrecisionType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Rating", function() { return _rating__WEBPACK_IMPORTED_MODULE_0__["Rating"]; });

/**
 * Rating modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/rating/rating.js":
/*!******************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/rating/rating.js ***!
  \******************************************************************/
/*! exports provided: LabelPosition, PrecisionType, Rating */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LabelPosition", function() { return LabelPosition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrecisionType", function() { return PrecisionType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Rating", function() { return Rating; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-popups */ "./node_modules/@syncfusion/ej2-popups/index.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};




var ICONCSS = 'e-rating-icon e-icons e-star-filled';
var ITEMLIST = 'e-rating-item-list';
var ITEMCONTAINER = 'e-rating-item-container';
var SELECTED = 'e-rating-selected';
var INTERMEDIATE = 'e-rating-intermediate';
var LABEL = 'e-rating-label';
var RESET = 'e-icons e-reset';
var HIDDEN = 'e-rating-hidden';
var DISABLED = 'e-disabled';
var READONLY = 'e-rating-readonly';
var RTL = 'e-rtl';
var ANIMATION = 'e-rating-animation';
var FULLTEMPLATE = 'e-rating-full';
var EMPTYTEMPLATE = 'e-rating-empty';
var SELECTEDVALUE = 'e-selected-value';
var RATINGVALUE = '--rating-value';
/**
 * Defines where to position the label in rating
 */

var LabelPosition;

(function (LabelPosition) {
  /**
   * The label is positioned at the top center of the rating component.
   */
  LabelPosition["Top"] = "Top";
  /**
   * The label is positioned at the bottom center of the rating component.
   */

  LabelPosition["Bottom"] = "Bottom";
  /**
   * The label is positioned at the left side of the rating component.
   */

  LabelPosition["Left"] = "Left";
  /**
   * The label is positioned at the right side of the rating component.
   */

  LabelPosition["Right"] = "Right";
})(LabelPosition || (LabelPosition = {}));
/**
 * Defines the precision type of the rating.
 * It is used to component the granularity of the rating, allowing users to provide ratings with varying levels of precision.
 */


var PrecisionType;

(function (PrecisionType) {
  /**
   * The rating is increased in whole number increments.
   */
  PrecisionType["Full"] = "Full";
  /**
   * The rating is increased in increments of 0.5 (half).
   */

  PrecisionType["Half"] = "Half";
  /**
   * The rating is increased in increments of 0.25 (quarter).
   */

  PrecisionType["Quarter"] = "Quarter";
  /**
   * The rating is increased in increments of 0.1.
   */

  PrecisionType["Exact"] = "Exact";
})(PrecisionType || (PrecisionType = {}));
/**
 * The Rating component allows the user to rate something by clicking on a set of symbols on a numeric scale.
 * This allows users to provide feedback or ratings for products, services, or content.
 *
 * ```html
 * <input id="rating">
 * ```
 * ```typescript
 * <script>
 *   let ratingObj: Rating = new Rating();
 *   ratingObj.appendTo('#rating');
 * </script>
 * ```
 */


var Rating =
/** @class */
function (_super) {
  __extends(Rating, _super);
  /**
   * Constructor for creating the widget
   *
   * @param  {RatingModel} options - Specifies the rating model
   * @param  {string|HTMLButtonElement} element - Specifies the target element
   */


  function Rating(options, element) {
    var _this = _super.call(this, options, element) || this;

    _this.itemElements = [];
    return _this;
  }

  Rating.prototype.preRender = function () {
    if (!this.element.id) {
      this.element.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('e-' + this.getModuleName());
    }

    this.keyConfigs = {
      downarrow: 'downarrow',
      leftarrow: 'leftarrow',
      rightarrow: 'rightarrow',
      uparrow: 'uparrow',
      space: 'space'
    };
    this.tooltipOpen = false;
  };

  Rating.prototype.render = function () {
    this.initialize();
    this.updateMinValue();
    this.updateTemplateFunction();
    this.triggerChange(null, this.value, false);
    this.renderItems();
    this.displayLabel();
  };

  Rating.prototype.initialize = function () {
    this.wrapper = this.createElement('div', {
      className: 'e-' + this.getModuleName() + '-container '
    });
    this.element.parentNode.insertBefore(this.wrapper, this.element);
    this.wrapper.appendChild(this.element);

    if (this.element.getAttribute('name') == null) {
      this.element.setAttribute('name', this.element.id);
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
      'aria-label': 'rating'
    });
    this.renderItemList();
    this.updateReset();

    if (this.readOnly) {
      this.wrapper.classList.add(READONLY);
    }

    if (!this.visible) {
      this.wrapper.classList.add(HIDDEN);
    }

    if (this.enableRtl) {
      this.wrapper.classList.add(RTL);
    }

    if (this.enableAnimation) {
      this.wrapper.classList.add(ANIMATION);
    }

    if (this.cssClass) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.wrapper], this.cssClass.split(' '));
    }

    this.updateTooltip();
    this.wireKeyboardEvent();
    this.updateDisabled();
  };

  Rating.prototype.updateDisabled = function () {
    this.wrapper.classList[this.disabled ? 'add' : 'remove'](DISABLED);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.ratingItemList, {
      'tabindex': this.disabled ? '-1' : '0'
    });
    this.updateResetButton();
  };

  Rating.prototype.updateResetButton = function () {
    if (this.allowReset) {
      var isDisabled = this.value <= this.min || this.disabled;
      this.resetElement.classList[isDisabled ? 'add' : 'remove'](DISABLED);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.resetElement, {
        'tabindex': isDisabled ? '-1' : '0',
        'aria-hidden': isDisabled.toString()
      });
    }
  };

  Rating.prototype.renderItemList = function () {
    var _this = this;

    this.ratingItemList = this.createElement('div', {
      className: ITEMLIST,
      id: this.element.id + '_item-list'
    });
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.ratingItemList, {
      'aria-label': 'rating',
      'role': 'slider'
    });
    this.wrapper.appendChild(this.ratingItemList);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.ratingItemList, 'touchmove', function (e) {
      return _this.touchMoveHandler(e);
    }, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.ratingItemList, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchEndEvent, this.touchEndHandler, this);
  };

  Rating.prototype.touchMoveHandler = function (e) {
    var rect = this.ratingItemList.getBoundingClientRect();
    var x = e.touches[0].clientX - rect.x;
    var currValue = x / rect.width * this.itemsCount;
    currValue = this.enableRtl ? this.itemsCount - currValue : currValue;
    currValue = currValue < this.min ? this.min : currValue > this.itemsCount ? this.itemsCount : currValue;
    currValue = this.validateValue(currValue);
    var element = currValue === 0 ? null : this.itemElements[parseInt((Math.ceil(currValue) - 1).toString(), 10)];

    if (currValue === this.currentValue) {
      if (this.showTooltip && element) {
        this.openRatingTooltip(element, false);
      }

      return;
    }

    var previousValue = this.currentValue;
    this.triggerChange(e, currValue);
    this.updateCurrentValue(currValue);

    if (this.showTooltip) {
      if (element) {
        if (Math.ceil(currValue) !== Math.ceil(previousValue)) {
          this.closeRatingTooltip();
        }

        this.openRatingTooltip(element, true);
      } else {
        this.closeRatingTooltip();
      }
    }
  };

  Rating.prototype.touchEndHandler = function () {
    this.closeRatingTooltip();
  };

  Rating.prototype.updateTemplateFunction = function () {
    this.emptyTemplateFunction = this.emptyTemplate ? this.getTemplateString(this.emptyTemplate) : null;
    this.fullTemplateFunction = this.fullTemplate ? this.getTemplateString(this.fullTemplate) : null;
  };

  Rating.prototype.renderItems = function () {
    var _this = this;

    for (var i = 0; i < this.itemsCount; i++) {
      var ratingItemContainer = this.createElement('span', {
        className: ITEMCONTAINER
      });
      var spanItem = this.createElement('span', {
        className: 'e-rating-item'
      });
      var ratingValue = this.getRatingValue(this.value, i);
      this.renderItemContent(spanItem, ratingValue, i, false);
      ratingItemContainer.appendChild(spanItem);
      this.wireItemsEvents(ratingItemContainer, i + 1);
      this.itemElements.push(ratingItemContainer);
      var eventArgs = {
        element: ratingItemContainer,
        value: i + 1
      };
      this.trigger('beforeItemRender', eventArgs, function (args) {
        _this.ratingItemList.appendChild(args.element);
      });
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.ratingItemList, {
      'aria-valuemax': this.itemsCount.toString()
    });
    this.updateItemValue(false);
  };

  Rating.prototype.renderItemContent = function (spanEle, val, index, isrerender) {
    if (isrerender) {
      this.removeItemContent(spanEle);
    }

    if (this.fullTemplate && val === 1) {
      spanEle.classList.add(FULLTEMPLATE);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(this.fullTemplateFunction({
        index: index,
        ratingValue: val
      }, this, 'ratingFullTemplate', this.element.id + 'fullTemplate', this.isStringTemplate), spanEle);
    } else if (this.emptyTemplate) {
      spanEle.classList.add(EMPTYTEMPLATE);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(this.emptyTemplateFunction({
        index: index,
        ratingValue: val
      }, this, 'ratingEmptyTemplate', this.element.id + 'emptyTemplate', this.isStringTemplate), spanEle);
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([spanEle], ICONCSS.split(' '));
    }
  };

  Rating.prototype.removeItemContent = function (spanEle) {
    spanEle.classList.remove(FULLTEMPLATE, EMPTYTEMPLATE);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([spanEle], ICONCSS.split(' '));

    if (spanEle.firstChild) {
      spanEle.innerHTML = '';
    }
  };

  Rating.prototype.updateTooltip = function () {
    if (this.showTooltip) {
      this.tooltipObj = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["Tooltip"]({
        target: '.e-rating-item-container',
        windowCollision: true,
        opensOn: 'Custom',
        cssClass: this.cssClass ? 'e-rating-tooltip ' + this.cssClass : 'e-rating-tooltip'
      });
      this.tooltipObj.appendTo(this.ratingItemList);
    } else {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tooltipObj)) {
        this.tooltipObj.destroy();
        this.tooltipObj = null;
      }
    }
  };

  Rating.prototype.updateMinValue = function () {
    this.setProperties({
      min: this.validateValue(this.min)
    }, true);

    if (this.min > 0 && this.value < this.min) {
      this.triggerChange(null, this.min, false);
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.ratingItemList, {
      'aria-valuemin': this.min.toString()
    });
  };

  Rating.prototype.validateValue = function (currentValue) {
    if (currentValue > this.itemsCount) {
      currentValue = this.itemsCount;
    } else if (currentValue < 0) {
      currentValue = 0;
    } else {
      currentValue = this.precision === PrecisionType.Full || this.enableSingleSelection ? Math.round(currentValue) : this.precision === PrecisionType.Half ? Math.round(currentValue * 2) / 2 : this.precision === PrecisionType.Quarter ? Math.round(currentValue * 4) / 4 : Math.round(currentValue * 10) / 10;
    }

    return currentValue;
  };

  Rating.prototype.getRatingValue = function (value, i) {
    return this.enableSingleSelection ? value > i && value <= i + 1 ? 1 : 0 : value >= i + 1 ? 1 : value < i ? 0 : value - i;
  };

  Rating.prototype.updateItemValue = function (isUpdate) {
    if (isUpdate === void 0) {
      isUpdate = true;
    }

    if (isUpdate && this.isReact) {
      this.clearTemplate(['ratingEmptyTemplate', 'ratingFullTemplate']);
    }

    for (var i = 0; i < this.itemsCount; i++) {
      var itemElement = this.itemElements[parseInt(i.toString(), 10)];
      itemElement.classList.remove(SELECTED, INTERMEDIATE, SELECTEDVALUE);
      var ratingValue = this.getRatingValue(this.currentValue, i);

      if (ratingValue === 1) {
        itemElement.classList.add(SELECTED);
      } else if (ratingValue > 0) {
        itemElement.classList.add(INTERMEDIATE);
      } else if (this.precision === PrecisionType.Full && i + 1 <= this.value && !this.enableSingleSelection) {
        itemElement.classList.add(SELECTEDVALUE);
      }

      if (isUpdate) {
        this.updateItemContent(ratingValue, i);
      }

      itemElement.style.setProperty(RATINGVALUE, ratingValue * 100 + '%');
      itemElement.classList[this.value === 0 && i === 0 || this.value === i + 1 || ratingValue > 0 && ratingValue < 1 ? 'add' : 'remove']('e-rating-focus');
    }

    if (isUpdate) {
      this.renderReactTemplates();
    }

    this.updateResetButton();
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.ratingItemList, {
      'aria-valuenow': this.currentValue.toString()
    });
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
      'value': this.value.toString()
    });
  };

  Rating.prototype.updateItemContent = function (ratingValue, index) {
    if (!this.fullTemplate && !this.emptyTemplate) {
      return;
    }

    var spanEle = this.itemElements[parseInt(index.toString(), 10)].querySelector('.e-rating-item');

    if (this.fullTemplate && ratingValue === 1) {
      if (!this.isReact && spanEle.classList.contains(FULLTEMPLATE)) {
        return;
      }

      this.removeItemContent(spanEle);
      spanEle.classList.add(FULLTEMPLATE);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(this.fullTemplateFunction({
        ratingValue: ratingValue,
        index: index
      }, this, 'ratingFullTemplate', this.element.id + 'fullTemplate' + index, this.isStringTemplate), spanEle);
    } else if (this.emptyTemplate) {
      if (!this.isReact && spanEle.classList.contains(EMPTYTEMPLATE)) {
        return;
      }

      this.removeItemContent(spanEle);
      spanEle.classList.add(EMPTYTEMPLATE);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(this.emptyTemplateFunction({
        ratingValue: ratingValue,
        index: index
      }, this, 'ratingEmptyTemplate', this.element.id + 'emptyTemplate' + index, this.isStringTemplate), spanEle);
    } else {
      this.removeItemContent(spanEle);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([spanEle], ICONCSS.split(' '));
    }
  };

  Rating.prototype.updateTooltipContent = function (isChange) {
    if (this.showTooltip) {
      if (this.isReact) {
        this.clearTemplate(['ratingTooltipTemplate']);
      }

      var content_1;

      if (this.tooltipTemplate) {
        content_1 = this.createElement('span', {
          className: 'e-rating-tooltip-content'
        });
        var templateFunction = this.getTemplateString(this.tooltipTemplate);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(templateFunction({
          value: this.currentValue
        }, this, 'ratingTooltipTemplate', this.element.id + 'tooltipTemplate', this.isStringTemplate), content_1);
        this.tooltipObj.setProperties({
          content: content_1
        }, isChange);
      } else {
        content_1 = this.currentValue.toString();
        this.tooltipObj.setProperties({
          content: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["initializeCSPTemplate"])(function () {
            return content_1;
          })
        }, isChange);
      }

      this.renderReactTemplates();
    }
  };

  Rating.prototype.getTemplateString = function (template) {
    var stringContent = '';

    try {
      if (typeof template !== 'function') {
        var tempEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])(template);

        if (tempEle) {
          //Return innerHTML incase of jsrenderer script else outerHTML
          stringContent = tempEle.tagName === 'SCRIPT' ? tempEle.innerHTML : tempEle.outerHTML;
        } else {
          stringContent = template;
        }
      } else {
        stringContent = template;
      }
    } catch (e) {
      stringContent = template;
    }

    return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(stringContent);
  };

  Rating.prototype.displayLabel = function () {
    if (this.showLabel) {
      this.spanLabel = this.createElement('span', {
        className: LABEL
      });
      this.updateLabel();
      this.updateLabelPosition();
    } else {
      if (this.wrapper.contains(this.spanLabel)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.spanLabel);
        this.spanLabel = null;
      }
    }
  };

  Rating.prototype.updateLabel = function () {
    if (this.showLabel) {
      if (this.labelTemplate) {
        if (this.isReact) {
          this.clearTemplate(['ratingLabelTemplate']);
        }

        if (this.spanLabel.firstChild) {
          this.spanLabel.innerHTML = '';
        }

        var templateFunction = this.getTemplateString(this.labelTemplate);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(templateFunction({
          value: this.currentValue
        }, this, 'ratingLabelTemplate', this.element.id + 'labelTemplate', this.isStringTemplate), this.spanLabel);
        this.renderReactTemplates();
      } else {
        this.spanLabel.textContent = this.currentValue + ' / ' + this.itemsCount;
      }
    }
  };

  Rating.prototype.updateReset = function () {
    if (this.allowReset) {
      this.resetElement = this.createElement('span', {
        className: RESET,
        attrs: {
          'aria-label': 'resetbutton',
          'role': 'button'
        }
      });
      this.updateResetButton();
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.resetElement, 'click', this.resetClicked, this);
      this.wrapper.insertBefore(this.resetElement, this.ratingItemList);
    } else {
      if (this.wrapper.contains(this.resetElement)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.resetElement);
        this.resetElement = null;
      }
    }
  };

  Rating.prototype.updateLabelPosition = function () {
    this.clearLabelPosition();
    this.spanLabel.classList.add('e-label-' + this.labelPosition.toLowerCase());

    if (this.labelPosition === 'Left' || this.labelPosition === 'Top') {
      this.wrapper.firstChild.after(this.spanLabel);
    } else {
      this.wrapper.appendChild(this.spanLabel);
    }
  };

  Rating.prototype.clearLabelPosition = function () {
    var removeCss = this.spanLabel.classList.value.match(/(e-label-[top|bottom|right|left]+)/g);

    if (removeCss) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.spanLabel], removeCss);
    }
  };

  Rating.prototype.wireItemsEvents = function (itemElement, index) {
    var _this = this;

    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(itemElement, 'click', function (e) {
      return _this.clickHandler(e);
    }, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(itemElement, 'mousemove', function (e) {
      return _this.mouseMoveHandler(index, e);
    }, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(itemElement, 'mouseleave', this.mouseLeaveHandler, this);
  };

  Rating.prototype.clickHandler = function (e) {
    this.currentValue = this.min > 0 && this.currentValue < this.min ? this.min : this.currentValue;
    this.triggerChange(e, this.currentValue);
    this.updateItemValue();
    this.updateLabel();
    this.updateResetButton();
  };

  Rating.prototype.updateValueChange = function (e, val, isInteracted) {
    if (isInteracted === void 0) {
      isInteracted = true;
    }

    this.triggerChange(e, val, isInteracted);
    this.updateItemValue();
    this.updateLabel();
  };

  Rating.prototype.triggerChange = function (e, val, isInteracted) {
    if (isInteracted === void 0) {
      isInteracted = true;
    }

    val = this.validateValue(val);
    this.currentValue = val;

    if (this.currentValue === this.value) {
      return;
    }

    var eventArgs = {
      event: e,
      isInteracted: isInteracted,
      value: val,
      previousValue: this.value
    };
    this.setProperties({
      value: val
    }, true);
    this.trigger('valueChanged', eventArgs);
  };

  Rating.prototype.mouseMoveHandler = function (index, e) {
    var currValue = this.calculateCurrentValue(index, e);
    currValue = this.validateValue(currValue);
    var element = this.itemElements[parseInt((index - 1).toString(), 10)];

    if (currValue === this.currentValue) {
      this.openRatingTooltip(element, false);
      return;
    }

    this.updateCurrentValue(currValue);
    this.openRatingTooltip(element, true);
    var eventArgs = {
      element: element,
      event: e,
      value: currValue
    };
    this.trigger('onItemHover', eventArgs);
  };

  Rating.prototype.openRatingTooltip = function (element, isChange) {
    if (this.showTooltip) {
      if (!this.tooltipOpen) {
        this.updateTooltipContent(false);
        this.tooltipObj.open(element);
        this.tooltipOpen = true;
      } else if (isChange) {
        this.updateTooltipContent(true);
        this.tooltipObj.refresh(element);
      }
    }
  };

  Rating.prototype.closeRatingTooltip = function () {
    if (this.tooltipOpen) {
      this.tooltipObj.close();
      this.tooltipOpen = false;
    }
  };

  Rating.prototype.updateCurrentValue = function (currValue) {
    this.currentValue = currValue;
    this.updateItemValue();
    this.updateLabel();
  };

  Rating.prototype.mouseLeaveHandler = function () {
    this.closeRatingTooltip();
    this.updateCurrentValue(this.value);
  };

  Rating.prototype.calculateCurrentValue = function (index, args) {
    var currentValue = index;

    if (!(this.enableSingleSelection || this.precision === PrecisionType.Full)) {
      currentValue = args.offsetX / this.itemElements[index - 1].clientWidth;
      currentValue = this.enableRtl ? 1 - currentValue : currentValue;

      if (this.precision === PrecisionType.Quarter) {
        currentValue = currentValue <= 0.25 ? 0.25 : currentValue <= 0.5 ? 0.5 : currentValue < 0.75 ? 0.75 : 1.0;
      } else if (this.precision === PrecisionType.Half) {
        currentValue = currentValue <= 0.5 ? 0.5 : 1;
      }

      currentValue = currentValue + index - 1;
    }

    return currentValue;
  };
  /**
   * Reset’s the value to minimum.
   *
   * {% codeBlock src='rating/reset/index.md' %}{% endcodeBlock %}
   *
   * @returns {void}
   */


  Rating.prototype.reset = function () {
    this.resetClicked(null, false);
  };

  Rating.prototype.resetClicked = function (e, isInteracted) {
    if (isInteracted === void 0) {
      isInteracted = true;
    }

    this.updateValueChange(e, this.min, isInteracted);
    this.updateResetButton();
  };

  Rating.prototype.wireKeyboardEvent = function () {
    this.keyboardModuleRating = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.wrapper, {
      keyAction: this.keyActionHandler.bind(this),
      keyConfigs: this.keyConfigs,
      eventName: 'keydown'
    });
  };

  Rating.prototype.keyActionHandler = function (e) {
    if (this.disabled || this.readOnly) {
      return;
    }

    if (e.target.classList.contains(ITEMLIST)) {
      switch (e.action) {
        case 'uparrow':
          this.handleNavigation(e, true);
          break;

        case 'downarrow':
          this.handleNavigation(e, false);
          break;

        case 'leftarrow':
          this.handleNavigation(e, this.enableRtl);
          break;

        case 'rightarrow':
          this.handleNavigation(e, !this.enableRtl);
          break;
      }
    }

    if (this.allowReset && e.target.classList.contains('e-reset')) {
      switch (e.action) {
        case 'space':
          this.resetClicked(e);
          break;
      }
    }
  };

  Rating.prototype.handleNavigation = function (e, isIncrease) {
    if (!isIncrease && this.value > this.min || isIncrease && this.value < this.itemsCount) {
      var currentValue = this.precision === PrecisionType.Full || this.enableSingleSelection ? 1 : this.precision === PrecisionType.Half ? 0.5 : this.precision === PrecisionType.Quarter ? 0.25 : Math.round(0.1 * 10) / 10;
      currentValue = isIncrease ? this.value + currentValue : this.value - currentValue;
      this.updateValueChange(e, currentValue);
      this.updateResetButton();
    }
  };

  Rating.prototype.updateContent = function () {
    if (this.isReact) {
      this.clearTemplate(['ratingEmptyTemplate', 'ratingFullTemplate']);
    }

    for (var i = 0; i < this.itemsCount; i++) {
      var itemElement = this.itemElements[parseInt(i.toString(), 10)].firstElementChild;
      this.renderItemContent(itemElement, this.getRatingValue(this.value, i), i, true);
    }
  };
  /**
   * To get component name.
   *
   * @returns {string} - Module Name
   * @private
   */


  Rating.prototype.getModuleName = function () {
    return 'rating';
  };
  /**
   * To get the properties to be maintained in the persisted state.
   *
   * @returns {string} - Persist data
   */


  Rating.prototype.getPersistData = function () {
    return this.addOnPersist([]);
  };

  Rating.prototype.removeItemElements = function () {
    for (var i = 0; i < this.itemElements.length; i++) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.itemElements[parseInt(i.toString(), 10)]);
    }

    this.itemElements = [];
  };
  /**
   * Destroys the Rating instance.
   *
   * @returns {void}
   */


  Rating.prototype.destroy = function () {
    var _this = this;

    _super.prototype.destroy.call(this); // unwires the events and detach the li elements


    this.removeItemElements();
    this.clearTemplate();

    if (this.spanLabel) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.spanLabel);
      this.spanLabel = null;
    }

    if (this.resetElement) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.resetElement);
      this.resetElement = null;
    }

    if (this.showTooltip) {
      this.tooltipObj.destroy();
      this.tooltipObj = null;
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.ratingItemList);
    this.ratingItemList = null;
    this.wrapper.parentNode.insertBefore(this.element, this.wrapper);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.wrapper);
    this.wrapper = null;
    this.keyboardModuleRating.destroy();
    this.keyboardModuleRating = null;
    ['value', 'aria-label', 'name'].forEach(function (attr) {
      _this.element.removeAttribute(attr);
    });
  };
  /**
   * Called internally if any of the property value changed.
   *
   * @param  {RatingModel} newProp - Specifies new properties
   * @param  {RatingModel} oldProp - Specifies old properties
   * @returns {void}
   * @private
   */


  Rating.prototype.onPropertyChanged = function (newProp, oldProp) {
    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'value':
          this.updateValueChange(null, this.value > this.min ? this.value : this.min, false);
          break;

        case 'min':
          this.updateMinValue();
          this.updateItemValue();
          this.updateLabel();
          break;

        case 'showLabel':
          this.displayLabel();
          break;

        case 'visible':
          this.wrapper.classList[!this.visible ? 'add' : 'remove'](HIDDEN);
          break;

        case 'disabled':
          this.updateDisabled();
          break;

        case 'readOnly':
          this.wrapper.classList[this.readOnly ? 'add' : 'remove'](READONLY);
          break;

        case 'allowReset':
          this.updateReset();
          break;

        case 'enableRtl':
          this.wrapper.classList[this.enableRtl ? 'add' : 'remove'](RTL);
          break;

        case 'cssClass':
          if (oldProp.cssClass) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.wrapper], oldProp.cssClass.split(' '));
          }

          if (newProp.cssClass) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.wrapper], newProp.cssClass.split(' '));
          }

          if (this.tooltipObj) {
            this.tooltipObj.setProperties({
              cssClass: this.cssClass ? 'e-rating-tooltip ' + this.cssClass : 'e-rating-tooltip'
            });
          }

          break;

        case 'labelPosition':
          this.updateLabelPosition();
          break;

        case 'showTooltip':
          this.updateTooltip();
          break;

        case 'precision':
          this.updateMinValue();
          this.triggerChange(null, this.value, false);
          this.updateItemValue();
          this.updateLabel();
          break;

        case 'enableSingleSelection':
          //To validate the value against single selection and update the items, label + trigger change event if value changed
          this.updateValueChange(null, this.currentValue, false);
          break;

        case 'enableAnimation':
          this.wrapper.classList[this.enableAnimation ? 'add' : 'remove'](ANIMATION);
          break;

        case 'emptyTemplate':
        case 'fullTemplate':
          this.updateTemplateFunction();
          this.updateContent();
          break;

        case 'labelTemplate':
          this.updateLabel();
          break;

        case 'itemsCount':
          this.removeItemElements();
          this.renderItems();
          this.updateLabel();
          break;
      }
    }
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Rating.prototype, "allowReset", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Rating.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Rating.prototype, "disabled", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Rating.prototype, "emptyTemplate", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Rating.prototype, "enableAnimation", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Rating.prototype, "enableSingleSelection", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Rating.prototype, "fullTemplate", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(5)], Rating.prototype, "itemsCount", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(LabelPosition.Right)], Rating.prototype, "labelPosition", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Rating.prototype, "labelTemplate", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0.0)], Rating.prototype, "min", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(PrecisionType.Full)], Rating.prototype, "precision", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Rating.prototype, "readOnly", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Rating.prototype, "showLabel", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Rating.prototype, "showTooltip", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Rating.prototype, "tooltipTemplate", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0.0)], Rating.prototype, "value", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Rating.prototype, "visible", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Rating.prototype, "beforeItemRender", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Rating.prototype, "created", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Rating.prototype, "onItemHover", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Rating.prototype, "valueChanged", void 0);

  Rating = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Rating);
  return Rating;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/signature/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/signature/index.js ***!
  \********************************************************************/
/*! exports provided: Signature */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _signature__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./signature */ "./node_modules/@syncfusion/ej2-inputs/src/signature/signature.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Signature", function() { return _signature__WEBPACK_IMPORTED_MODULE_0__["Signature"]; });

/**
 * Signature modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/signature/signature.js":
/*!************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/signature/signature.js ***!
  \************************************************************************/
/*! exports provided: Signature */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Signature", function() { return Signature; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _common_signature_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/signature-base */ "./node_modules/@syncfusion/ej2-inputs/src/common/signature-base.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};




/**
 * The Signature component allows user to draw smooth signatures as vector outline of strokes using variable width bezier curve interpolation.
 * It allows to save signature as image.
 * You can use your finger, pen, or mouse on a tablet, touchscreen, etc., to draw your own signature on this Signature component.
 * Signature component is a user interface to draw the Signature or Text.
 * It provides supports for various Background color, Stroke color and Background Image.
 * ```html
 * <canvas id="signature"></canvas>
 * ```
 * ```typescript
 * <script>
 *   let signatureObj: Signature = new Signature(null , "#signature");
 * </script>
 * ```
 */

var Signature =
/** @class */
function (_super) {
  __extends(Signature, _super);
  /**
   * Constructor for creating the widget.
   *
   * @param {SignatureModel} options - Specifies the Signature model.
   * @param {string | HTMLCanvasElement} element - Specifies the element.
   * @private
   */


  function Signature(options, element) {
    return _super.call(this, options, element) || this;
  }

  Signature.prototype.preRender = function () {// pre render code snippets
  };
  /**
   * To Initialize the component rendering
   *
   * @private
   * @returns {void}
   */


  Signature.prototype.render = function () {
    this.initialize();
  };

  Signature.prototype.initialize = function () {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], 'e-' + this.getModuleName());

    _super.prototype.initialize.call(this, this.element);

    if (this.enablePersistence) {
      this.loadPersistedSignature();
    }
  };
  /**
   * To get component name.
   *
   * @returns {string} - Module Name
   * @private
   */


  Signature.prototype.getModuleName = function () {
    return 'signature';
  };
  /**
   * To get the properties to be maintained in the persisted state.
   *
   * @returns {string} - Persist data
   */


  Signature.prototype.getPersistData = function () {
    return this.addOnPersist(['signatureValue']);
  };
  /**
   * Called internally if any of the property value changed.
   *
   * @param  {SignatureModel} newProp - Specifies new properties
   * @param  {SignatureModel} oldProp - Specifies old properties
   * @returns {void}
   * @private
   */


  Signature.prototype.onPropertyChanged = function (newProp, oldProp) {
    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'backgroundColor':
          _super.prototype.propertyChanged.call(this, prop, newProp.backgroundColor);

          break;

        case 'backgroundImage':
          _super.prototype.propertyChanged.call(this, prop, newProp.backgroundImage);

          break;

        case 'strokeColor':
          if (newProp.strokeColor !== oldProp.strokeColor) {
            _super.prototype.propertyChanged.call(this, prop, newProp.strokeColor);
          }

          break;

        case 'saveWithBackground':
          _super.prototype.propertyChanged.call(this, prop, newProp.saveWithBackground);

          break;

        case 'isReadOnly':
          _super.prototype.propertyChanged.call(this, prop, newProp.isReadOnly);

          break;

        case 'disabled':
          _super.prototype.propertyChanged.call(this, prop, newProp.disabled);

          break;
      }
    }
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Signature.prototype, "backgroundColor", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Signature.prototype, "backgroundImage", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Signature.prototype, "disabled", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Signature.prototype, "isReadOnly", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Signature.prototype, "saveWithBackground", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('#000000')], Signature.prototype, "strokeColor", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0.5)], Signature.prototype, "minStrokeWidth", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(2)], Signature.prototype, "maxStrokeWidth", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0.7)], Signature.prototype, "velocity", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('en-US')], Signature.prototype, "locale", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Signature.prototype, "enableRtl", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Signature.prototype, "enablePersistence", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Signature.prototype, "beforeSave", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Signature.prototype, "change", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Signature.prototype, "created", void 0);

  Signature = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Signature);
  return Signature;
}(_common_signature_base__WEBPACK_IMPORTED_MODULE_1__["SignatureBase"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/slider/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/slider/index.js ***!
  \*****************************************************************/
/*! exports provided: TicksData, ColorRangeData, LimitData, TooltipData, Slider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _slider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./slider */ "./node_modules/@syncfusion/ej2-inputs/src/slider/slider.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TicksData", function() { return _slider__WEBPACK_IMPORTED_MODULE_0__["TicksData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ColorRangeData", function() { return _slider__WEBPACK_IMPORTED_MODULE_0__["ColorRangeData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LimitData", function() { return _slider__WEBPACK_IMPORTED_MODULE_0__["LimitData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TooltipData", function() { return _slider__WEBPACK_IMPORTED_MODULE_0__["TooltipData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Slider", function() { return _slider__WEBPACK_IMPORTED_MODULE_0__["Slider"]; });

/**
 * Slider modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/slider/slider.js":
/*!******************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/slider/slider.js ***!
  \******************************************************************/
/*! exports provided: TicksData, ColorRangeData, LimitData, TooltipData, Slider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TicksData", function() { return TicksData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColorRangeData", function() { return ColorRangeData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LimitData", function() { return LimitData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TooltipData", function() { return TooltipData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Slider", function() { return Slider; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-popups */ "./node_modules/@syncfusion/ej2-popups/index.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};







/**
 * Configures the ticks data of the Slider.
 */

var TicksData =
/** @class */
function (_super) {
  __extends(TicksData, _super);

  function TicksData() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('None')], TicksData.prototype, "placement", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(10)], TicksData.prototype, "largeStep", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(1)], TicksData.prototype, "smallStep", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TicksData.prototype, "showSmallTicks", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], TicksData.prototype, "format", void 0);

  return TicksData;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * It illustrates the color track data in slider.
 * {% codeBlock src='slider/colorrange/index.md' %}{% endcodeBlock %}
 */

var ColorRangeData =
/** @class */
function (_super) {
  __extends(ColorRangeData, _super);

  function ColorRangeData() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ColorRangeData.prototype, "color", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ColorRangeData.prototype, "start", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ColorRangeData.prototype, "end", void 0);

  return ColorRangeData;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * It illustrates the limit data in slider.
 * {% codeBlock src='slider/limits/index.md' %}{% endcodeBlock %}
 */

var LimitData =
/** @class */
function (_super) {
  __extends(LimitData, _super);

  function LimitData() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], LimitData.prototype, "enabled", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], LimitData.prototype, "minStart", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], LimitData.prototype, "minEnd", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], LimitData.prototype, "maxStart", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], LimitData.prototype, "maxEnd", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], LimitData.prototype, "startHandleFixed", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], LimitData.prototype, "endHandleFixed", void 0);

  return LimitData;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * It illustrates the tooltip data in slider.
 */

var TooltipData =
/** @class */
function (_super) {
  __extends(TooltipData, _super);

  function TooltipData() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], TooltipData.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Before')], TooltipData.prototype, "placement", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Focus')], TooltipData.prototype, "showOn", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TooltipData.prototype, "isVisible", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], TooltipData.prototype, "format", void 0);

  return TooltipData;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


var bootstrapTooltipOffset = 6;
var bootstrap4TooltipOffset = 3;
var classNames = {
  root: 'e-slider',
  rtl: 'e-rtl',
  sliderHiddenInput: 'e-slider-input',
  controlWrapper: 'e-control-wrapper',
  sliderHandle: 'e-handle',
  rangeBar: 'e-range',
  sliderButton: 'e-slider-button',
  firstButton: 'e-first-button',
  secondButton: 'e-second-button',
  scale: 'e-scale',
  tick: 'e-tick',
  large: 'e-large',
  tickValue: 'e-tick-value',
  sliderTooltip: 'e-slider-tooltip',
  sliderHover: 'e-slider-hover',
  sliderFirstHandle: 'e-handle-first',
  sliderSecondHandle: 'e-handle-second',
  sliderDisabled: 'e-disabled',
  sliderContainer: 'e-slider-container',
  horizontalTooltipBefore: 'e-slider-horizontal-before',
  horizontalTooltipAfter: 'e-slider-horizontal-after',
  verticalTooltipBefore: 'e-slider-vertical-before',
  verticalTooltipAfter: 'e-slider-vertical-after',
  materialTooltip: 'e-material-tooltip',
  materialTooltipOpen: 'e-material-tooltip-open',
  materialTooltipActive: 'e-tooltip-active',
  materialSlider: 'e-material-slider',
  sliderTrack: 'e-slider-track',
  sliderHorizantalColor: 'e-slider-horizantal-color',
  sliderVerticalColor: 'e-slider-vertical-color',
  sliderHandleFocused: 'e-handle-focused',
  verticalSlider: 'e-vertical',
  horizontalSlider: 'e-horizontal',
  sliderHandleStart: 'e-handle-start',
  sliderTooltipStart: 'e-material-tooltip-start',
  sliderTabHandle: 'e-tab-handle',
  sliderButtonIcon: 'e-button-icon',
  sliderSmallSize: 'e-small-size',
  sliderTickPosition: 'e-tick-pos',
  sliderFirstTick: 'e-first-tick',
  sliderLastTick: 'e-last-tick',
  sliderButtonClass: 'e-slider-btn',
  sliderTooltipWrapper: 'e-tooltip-wrap',
  sliderTabTrack: 'e-tab-track',
  sliderTabRange: 'e-tab-range',
  sliderActiveHandle: 'e-handle-active',
  sliderMaterialHandle: 'e-material-handle',
  sliderMaterialRange: 'e-material-range',
  sliderMaterialDefault: 'e-material-default',
  materialTooltipShow: 'e-material-tooltip-show',
  materialTooltipHide: 'e-material-tooltip-hide',
  readonly: 'e-read-only',
  limits: 'e-limits',
  limitBarDefault: 'e-limit-bar',
  limitBarFirst: 'e-limit-first',
  limitBarSecond: 'e-limit-second',
  dragHorizontal: 'e-drag-horizontal',
  dragVertical: 'e-drag-vertical'
};
/**
 * The Slider component allows the user to select a value or range
 * of values in-between a min and max range, by dragging the handle over the slider bar.
 * ```html
 * <div id='slider'></div>
 * ```
 * ```typescript
 * <script>
 *   var sliderObj = new Slider({ value: 10 });
 *   sliderObj.appendTo('#slider');
 * </script>
 * ```
 */

var Slider =
/** @class */
function (_super) {
  __extends(Slider, _super);

  function Slider(options, element) {
    var _this = _super.call(this, options, element) || this;

    _this.horDir = 'left';
    _this.verDir = 'bottom';
    _this.transition = {
      handle: 'left .4s cubic-bezier(.25, .8, .25, 1), right .4s cubic-bezier(.25, .8, .25, 1), ' + 'top .4s cubic-bezier(.25, .8, .25, 1) , bottom .4s cubic-bezier(.25, .8, .25, 1)',
      rangeBar: 'all .4s cubic-bezier(.25, .8, .25, 1)'
    };
    _this.transitionOnMaterialTooltip = {
      handle: 'left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, top 1ms ease-out',
      rangeBar: 'left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, width 1ms ease-out, height 1ms ease-out'
    };
    _this.scaleTransform = 'transform .4s cubic-bezier(.25, .8, .25, 1)';
    _this.customAriaText = null;
    _this.drag = true;
    _this.isDragComplete = false;
    _this.initialTooltip = true;
    return _this;
  }

  Slider.prototype.preRender = function () {
    // eslint-disable-next-line
    var localeText = {
      incrementTitle: 'Increase',
      decrementTitle: 'Decrease'
    };
    this.l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"]('slider', localeText, this.locale);
    this.isElementFocused = false;
    this.tickElementCollection = [];
    this.tooltipFormatInfo = {};
    this.ticksFormatInfo = {};
    this.initCultureInfo();
    this.initCultureFunc();
    this.formChecker();
  };

  Slider.prototype.formChecker = function () {
    var formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');

    if (formElement) {
      this.isForm = true; // this condition needs to be checked, if the slider is going to be refreshed by `refresh()`
      // then we need to revert the slider `value` back to `formResetValue` to preserve the initial value

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.formResetValue)) {
        this.setProperties({
          'value': this.formResetValue
        }, true);
      }

      this.formResetValue = this.value;

      if (this.type === 'Range' && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.formResetValue) || typeof this.formResetValue !== 'object')) {
        this.formResetValue = [parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min)), parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.max))];
      } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.formResetValue)) {
        this.formResetValue = parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min));
      }

      this.formElement = formElement;
    } else {
      this.isForm = false;
    }
  };

  Slider.prototype.initCultureFunc = function () {
    this.internationalization = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Internationalization"](this.locale);
  };

  Slider.prototype.initCultureInfo = function () {
    this.tooltipFormatInfo.format = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tooltip.format) ? this.tooltip.format : null;
    this.ticksFormatInfo.format = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ticks.format) ? this.ticks.format : null;
  };

  Slider.prototype.formatString = function (value, formatInfo) {
    var formatValue = null;
    var formatString = null;

    if (value || value === 0) {
      formatValue = this.formatNumber(value);
      var numberOfDecimals = this.numberOfDecimals(value);
      formatString = this.internationalization.getNumberFormat(formatInfo)(this.makeRoundNumber(value, numberOfDecimals));
    }

    return {
      elementVal: formatValue,
      formatString: formatString
    };
  };

  Slider.prototype.formatNumber = function (value) {
    var numberOfDecimals = this.numberOfDecimals(value);
    return this.internationalization.getNumberFormat({
      maximumFractionDigits: numberOfDecimals,
      minimumFractionDigits: numberOfDecimals,
      useGrouping: false
    })(value);
  };

  Slider.prototype.numberOfDecimals = function (value) {
    var decimalPart = value.toString().split('.')[1];
    var numberOfDecimals = !decimalPart || !decimalPart.length ? 0 : decimalPart.length;
    return numberOfDecimals;
  };

  Slider.prototype.makeRoundNumber = function (value, precision) {
    var decimals = precision || 0;
    return Number(value.toFixed(decimals));
  };

  Slider.prototype.fractionalToInteger = function (value) {
    value = this.numberOfDecimals(value) === 0 ? Number(value).toFixed(this.noOfDecimals) : value;
    var tens = 1;

    for (var i = 0; i < this.noOfDecimals; i++) {
      tens *= 10;
    }

    value = Number((value * tens).toFixed(0));
    return value;
  };
  /**
   * To Initialize the control rendering
   *
   * @private
   */


  Slider.prototype.render = function () {
    var _this = this;

    this.initialize();
    this.initRender();
    this.wireEvents();
    this.setZindex();
    this.renderComplete();

    if (this.element.tagName === 'EJS-SLIDER') {
      if (this.getTheme(this.sliderContainer) == 'none') {
        setTimeout(function () {
          _this.refresh();
        }, 0);
      }
    }
  };

  Slider.prototype.initialize = function () {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], classNames.root);
    this.setCSSClass();
  };

  Slider.prototype.setElementWidth = function (width) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(width) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.sliderContainer)) {
      if (typeof width === 'number') {
        this.sliderContainer.style.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
      } else if (typeof width === 'string') {
        this.sliderContainer.style.width = width.match(/px|%|em/) ? width : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
      }
    }
  };

  Slider.prototype.setCSSClass = function (oldCSSClass) {
    if (oldCSSClass) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], oldCSSClass.split(' '));
    }

    if (this.cssClass) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], this.cssClass.split(' '));
    }
  };

  Slider.prototype.setEnabled = function () {
    if (!this.enabled) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.sliderContainer], [classNames.sliderDisabled]);

      if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === 'Always') {
        this.tooltipElement.classList.add(classNames.sliderDisabled);
      }

      this.unwireEvents();
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.sliderContainer], [classNames.sliderDisabled]);

      if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === 'Always') {
        this.tooltipElement.classList.remove(classNames.sliderDisabled);
      }

      this.wireEvents();
    }
  };

  Slider.prototype.getTheme = function (container) {
    var theme = window.getComputedStyle(container, ':after').getPropertyValue('content');
    return theme.replace(/['"]+/g, '');
  };
  /**
   * Initialize the rendering
   *
   * @private
   */


  Slider.prototype.initRender = function () {
    this.sliderContainer = this.createElement('div', {
      className: classNames.sliderContainer + ' ' + classNames.controlWrapper
    });
    this.element.parentNode.insertBefore(this.sliderContainer, this.element);
    this.sliderContainer.appendChild(this.element);
    this.sliderTrack = this.createElement('div', {
      className: classNames.sliderTrack
    });
    this.element.appendChild(this.sliderTrack);
    this.setElementWidth(this.width);
    this.element.tabIndex = -1;
    this.getThemeInitialization();
    this.setHandler();
    this.createRangeBar();

    if (this.limits.enabled) {
      this.createLimitBar();
    }

    this.setOrientClass();
    this.hiddenInput = this.createElement('input', {
      attrs: {
        type: 'hidden',
        value: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) ? this.min.toString() : this.value.toString(),
        name: this.element.getAttribute('name') || this.element.getAttribute('id') || '_' + (Math.random() * 1000).toFixed(0) + 'slider',
        class: classNames.sliderHiddenInput
      }
    });
    this.hiddenInput.tabIndex = -1;
    this.sliderContainer.appendChild(this.hiddenInput);

    if (this.showButtons) {
      this.setButtons();
    }

    this.setEnableRTL();

    if (this.type === 'Range') {
      this.rangeValueUpdate();
    } else {
      this.value = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) ? parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min.toString())) : this.value;
    }

    this.previousVal = this.type !== 'Range' ? this.checkHandleValue(parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.value.toString()))) : [this.checkHandleValue(parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.value[0].toString()))), this.checkHandleValue(parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.value[1].toString())))];
    this.previousChanged = this.previousVal;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.hasAttribute('name'))) {
      this.element.removeAttribute('name');
    }

    this.setValue();

    if (this.limits.enabled) {
      this.setLimitBar();
    }

    if (this.ticks.placement !== 'None') {
      this.renderScale();
    }

    if (this.tooltip.isVisible) {
      this.renderTooltip();
    }

    if (!this.enabled) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.sliderContainer], [classNames.sliderDisabled]);
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.sliderContainer], [classNames.sliderDisabled]);
    }

    if (this.readonly) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.sliderContainer], [classNames.readonly]);
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.sliderContainer], [classNames.readonly]);
    }
  };

  Slider.prototype.getThemeInitialization = function () {
    this.isMaterial = this.getTheme(this.sliderContainer) === 'material' || this.getTheme(this.sliderContainer) === 'material-dark';
    this.isMaterial3 = this.getTheme(this.sliderContainer) === 'Material3' || this.getTheme(this.sliderContainer) === 'Material3-dark';
    this.isBootstrap = this.getTheme(this.sliderContainer) === 'bootstrap' || this.getTheme(this.sliderContainer) === 'bootstrap-dark';
    this.isBootstrap4 = this.getTheme(this.sliderContainer) === 'bootstrap4';
    this.isTailwind = this.getTheme(this.sliderContainer) === 'tailwind' || this.getTheme(this.sliderContainer) === 'tailwind-dark';
    this.isBootstrap5 = this.getTheme(this.sliderContainer) === 'bootstrap5';
    this.isFluent = this.getTheme(this.sliderContainer) === 'FluentUI';
    this.isMaterialTooltip = (this.isMaterial || this.isMaterial3) && this.type !== 'Range' && this.tooltip.isVisible;
  };

  Slider.prototype.createRangeBar = function () {
    if (this.type !== 'Default') {
      this.rangeBar = this.createElement('div', {
        attrs: {
          class: classNames.rangeBar
        }
      });
      this.element.appendChild(this.rangeBar);

      if (this.drag && this.type === 'Range') {
        if (this.orientation === 'Horizontal') {
          this.rangeBar.classList.add(classNames.dragHorizontal);
        } else {
          this.rangeBar.classList.add(classNames.dragVertical);
        }
      }
    }
  };

  Slider.prototype.createLimitBar = function () {
    var firstElementClassName = this.type !== 'Range' ? classNames.limitBarDefault : classNames.limitBarFirst;
    firstElementClassName += ' ' + classNames.limits;
    this.limitBarFirst = this.createElement('div', {
      attrs: {
        class: firstElementClassName
      }
    });
    this.element.appendChild(this.limitBarFirst);

    if (this.type === 'Range') {
      this.limitBarSecond = this.createElement('div', {
        attrs: {
          class: classNames.limitBarSecond + ' ' + classNames.limits
        }
      });
      this.element.appendChild(this.limitBarSecond);
    }
  };

  Slider.prototype.setOrientClass = function () {
    if (this.orientation !== 'Vertical') {
      this.sliderContainer.classList.remove(classNames.verticalSlider);
      this.sliderContainer.classList.add(classNames.horizontalSlider);
      this.firstHandle.setAttribute('aria-orientation', 'horizontal');

      if (this.type === 'Range') {
        this.secondHandle.setAttribute('aria-orientation', 'horizontal');
      }
    } else {
      this.sliderContainer.classList.remove(classNames.horizontalSlider);
      this.sliderContainer.classList.add(classNames.verticalSlider);
      this.firstHandle.setAttribute('aria-orientation', 'vertical');

      if (this.type === 'Range') {
        this.secondHandle.setAttribute('aria-orientation', 'vertical');
      }
    }
  };

  Slider.prototype.setAriaAttributes = function (element) {
    var _this = this;

    var min = this.min;
    var max = this.max;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues) && this.customValues.length > 0) {
      min = this.customValues[0];
      max = this.customValues[this.customValues.length - 1];
    }

    if (this.type !== 'Range') {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, {
        'aria-valuemin': min.toString(),
        'aria-valuemax': max.toString()
      });
    } else {
      var range = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues) && this.customValues.length > 0 ? [[min.toString(), this.customValues[this.value[1]].toString()], [this.customValues[this.value[0]].toString(), max.toString()]] : [[min.toString(), this.value[1].toString()], [this.value[0].toString(), max.toString()]];
      range.forEach(function (range, index) {
        var element = index === 0 ? _this.firstHandle : _this.secondHandle;

        if (element) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, {
            'aria-valuemin': range[0],
            'aria-valuemax': range[1]
          });
        }
      });
    }
  };

  Slider.prototype.createSecondHandle = function () {
    this.secondHandle = this.createElement('div', {
      attrs: {
        class: classNames.sliderHandle,
        'role': 'slider',
        tabIndex: '0',
        'aria-label': 'slider'
      }
    });
    this.secondHandle.classList.add(classNames.sliderSecondHandle);
    this.element.appendChild(this.secondHandle);
  };

  Slider.prototype.createFirstHandle = function () {
    this.firstHandle = this.createElement('div', {
      attrs: {
        class: classNames.sliderHandle,
        'role': 'slider',
        tabIndex: '0',
        'aria-label': 'slider'
      }
    });
    this.firstHandle.classList.add(classNames.sliderFirstHandle);
    this.element.appendChild(this.firstHandle);

    if (this.isMaterialTooltip) {
      this.materialHandle = this.createElement('div', {
        attrs: {
          class: classNames.sliderHandle + ' ' + classNames.sliderMaterialHandle
        }
      });
      this.element.appendChild(this.materialHandle);
    }
  };

  Slider.prototype.wireFirstHandleEvt = function (destroy) {
    if (!destroy) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.firstHandle, 'mousedown touchstart', this.handleFocus, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.firstHandle, 'transitionend', this.transitionEnd, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.firstHandle, 'mouseenter touchenter', this.handleOver, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.firstHandle, 'mouseleave touchend', this.handleLeave, this);
    } else {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.firstHandle, 'mousedown touchstart', this.handleFocus);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.firstHandle, 'transitionend', this.transitionEnd);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.firstHandle, 'mouseenter touchenter', this.handleOver);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.firstHandle, 'mouseleave touchend', this.handleLeave);
    }
  };

  Slider.prototype.wireSecondHandleEvt = function (destroy) {
    if (!destroy) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.secondHandle, 'mousedown touchstart', this.handleFocus, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.secondHandle, 'transitionend', this.transitionEnd, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.secondHandle, 'mouseenter touchenter', this.handleOver, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.secondHandle, 'mouseleave touchend', this.handleLeave, this);
    } else {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.secondHandle, 'mousedown touchstart', this.handleFocus);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.secondHandle, 'transitionend', this.transitionEnd);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.secondHandle, 'mouseenter touchenter', this.handleOver);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.secondHandle, 'mouseleave touchend', this.handleLeave);
    }
  };

  Slider.prototype.handleStart = function () {
    if (this.type !== 'Range') {
      this.firstHandle.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderHandleStart);

      if (this.isMaterialTooltip) {
        this.materialHandle.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderHandleStart);

        if (this.tooltipElement) {
          this.tooltipElement.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderTooltipStart);
        }
      }
    }
  };

  Slider.prototype.transitionEnd = function (e) {
    if (e.propertyName !== 'transform') {
      this.handleStart();

      if (!this.enableAnimation) {
        this.getHandle().style.transition = 'none';
      }

      if (this.type !== 'Default') {
        this.rangeBar.style.transition = 'none';
      }

      if ((this.isMaterial || this.isMaterial3) && this.tooltip.isVisible && this.type === 'Default') {
        this.tooltipElement.style.transition = this.transition.handle;
      }

      this.tooltipToggle(this.getHandle());
      this.closeTooltip();
    }
  };

  Slider.prototype.handleFocusOut = function () {
    if (this.firstHandle.classList.contains(classNames.sliderHandleFocused)) {
      this.firstHandle.classList.remove(classNames.sliderHandleFocused);
    }

    if (this.type === 'Range') {
      if (this.secondHandle.classList.contains(classNames.sliderHandleFocused)) {
        this.secondHandle.classList.remove(classNames.sliderHandleFocused);
      }
    }
  };

  Slider.prototype.handleFocus = function (e) {
    this.focusSliderElement();
    this.sliderBarClick(e);

    if (e.currentTarget === this.firstHandle) {
      this.firstHandle.classList.add(classNames.sliderHandleFocused);
      this.firstHandle.classList.add(classNames.sliderTabHandle);
    } else {
      this.secondHandle.classList.add(classNames.sliderHandleFocused);
      this.secondHandle.classList.add(classNames.sliderTabHandle);
    }

    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mousemove touchmove', this.sliderBarMove, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mouseup touchend', this.sliderBarUp, this);
  };

  Slider.prototype.handleOver = function (e) {
    if (this.tooltip.isVisible && this.tooltip.showOn === 'Hover') {
      this.tooltipToggle(e.currentTarget);
    }

    if (this.type === 'Default') {
      this.tooltipToggle(this.getHandle());
    }
  };

  Slider.prototype.handleLeave = function (e) {
    if (this.tooltip.isVisible && this.tooltip.showOn === 'Hover' && !e.currentTarget.classList.contains(classNames.sliderHandleFocused) && !e.currentTarget.classList.contains(classNames.sliderTabHandle)) {
      this.closeTooltip();
    }
  };

  Slider.prototype.setHandler = function () {
    this.createFirstHandle();

    if (this.type === 'Range') {
      this.createSecondHandle();
    }
  };

  Slider.prototype.setEnableRTL = function () {
    this.enableRtl && this.orientation !== 'Vertical' ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.sliderContainer], classNames.rtl) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.sliderContainer], classNames.rtl);
    var preDir = this.orientation !== 'Vertical' ? this.horDir : this.verDir;

    if (this.enableRtl) {
      this.horDir = 'right';
      this.verDir = 'bottom';
    } else {
      this.horDir = 'left';
      this.verDir = 'bottom';
    }

    var currDir = this.orientation !== 'Vertical' ? this.horDir : this.verDir;

    if (preDir !== currDir) {
      if (this.orientation === 'Horizontal') {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.firstHandle, {
          'right': '',
          'left': 'auto'
        });

        if (this.type === 'Range') {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.secondHandle, {
            'top': '',
            'left': 'auto'
          });
        }
      }
    }

    this.setBarColor();
  };

  Slider.prototype.tooltipValue = function () {
    var _this = this;

    var text;
    var args = {
      value: this.value,
      text: ''
    };

    if (this.initialTooltip) {
      this.initialTooltip = false;
      this.setTooltipContent();
      args.text = text = typeof this.tooltipObj.content === 'function' ? this.tooltipObj.content() : this.tooltipObj.content;
      this.trigger('tooltipChange', args, function (observedArgs) {
        _this.addTooltipClass(observedArgs.text);

        if (text !== observedArgs.text) {
          _this.customAriaText = observedArgs.text;

          if (_this.enableHtmlSanitizer) {
            observedArgs.text = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(observedArgs.text.toString());
          } else {
            observedArgs.text = observedArgs.text.toString();
          }

          var contentTemp = function () {
            return observedArgs.text;
          };

          _this.tooltipObj.content = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["initializeCSPTemplate"])(contentTemp);

          _this.setAriaAttrValue(_this.firstHandle);

          if (_this.type === 'Range') {
            _this.setAriaAttrValue(_this.secondHandle);
          }
        }
      });

      if (this.isMaterialTooltip) {
        this.setPreviousVal('change', this.value);
      }
    }
  };

  Slider.prototype.setTooltipContent = function () {
    var content;
    content = this.formatContent(this.tooltipFormatInfo, false);

    var contentTemp = function () {
      return content;
    };

    this.tooltipObj.content = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["initializeCSPTemplate"])(contentTemp);
  };

  Slider.prototype.formatContent = function (formatInfo, ariaContent) {
    var content = '';
    var handle1 = this.handleVal1;
    var handle2 = this.handleVal2;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues) && this.customValues.length > 0) {
      handle1 = this.customValues[this.handleVal1];
      handle2 = this.customValues[this.handleVal2];
    }

    if (!ariaContent) {
      if (this.type === 'Range') {
        if (this.enableRtl && this.orientation !== 'Vertical') {
          content = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(formatInfo.format) ? this.formatString(handle2, formatInfo).formatString + ' - ' + this.formatString(handle1, formatInfo).formatString : handle2.toString() + ' - ' + handle1.toString();
        } else {
          content = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(formatInfo.format) ? this.formatString(handle1, formatInfo).formatString + ' - ' + this.formatString(handle2, formatInfo).formatString : handle1.toString() + ' - ' + handle2.toString();
        }
      } else {
        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(handle1)) {
          content = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(formatInfo.format) ? this.formatString(handle1, formatInfo).formatString : handle1.toString();
        }
      }

      return content;
    } else {
      if (this.type === 'Range') {
        if (this.enableRtl && this.orientation !== 'Vertical') {
          content = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tooltip) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tooltip.format) ? this.formatString(handle2, formatInfo).elementVal + ' - ' + this.formatString(handle1, formatInfo).elementVal : handle2.toString() + ' - ' + handle1.toString();
        } else {
          content = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tooltip) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tooltip.format) ? this.formatString(handle1, formatInfo).elementVal + ' - ' + this.formatString(handle2, formatInfo).elementVal : handle1.toString() + ' - ' + handle2.toString();
        }
      } else {
        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(handle1)) {
          content = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tooltip) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tooltip.format) ? this.formatString(handle1, formatInfo).elementVal : handle1.toString();
        }
      }

      return content;
    }
  };

  Slider.prototype.addTooltipClass = function (content) {
    if (this.isMaterialTooltip) {
      var count = content.toString().length;

      if (!this.tooltipElement) {
        var cssClass = count > 4 ? classNames.sliderMaterialRange : classNames.sliderMaterialDefault;
        this.tooltipObj.cssClass = classNames.sliderTooltip + ' ' + cssClass;
      } else {
        var cssClass = count > 4 ? {
          oldCss: classNames.sliderMaterialDefault,
          newCss: classNames.sliderMaterialRange
        } : {
          oldCss: classNames.sliderMaterialRange,
          newCss: classNames.sliderMaterialDefault
        };
        this.tooltipElement.classList.remove(cssClass.oldCss);

        if (!this.tooltipElement.classList.contains(cssClass.newCss)) {
          this.tooltipElement.classList.add(cssClass.newCss);
          this.tooltipElement.style.transform = count > 4 ? 'scale(1)' : this.getTooltipTransformProperties(this.previousTooltipClass).rotate;
        }
      }
    }
  };

  Slider.prototype.tooltipPlacement = function () {
    return this.orientation === 'Horizontal' ? this.tooltip.placement === 'Before' ? 'TopCenter' : 'BottomCenter' : this.tooltip.placement === 'Before' ? 'LeftCenter' : 'RightCenter';
  };

  Slider.prototype.tooltipBeforeOpen = function (args) {
    this.tooltipElement = args.element;

    if (this.tooltip.cssClass) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.tooltipElement], this.tooltip.cssClass.split(' ').filter(function (css) {
        return css;
      }));
    }

    args.target.removeAttribute('aria-describedby');

    if (this.isMaterialTooltip) {
      this.tooltipElement.firstElementChild.classList.add(classNames.materialTooltipHide);
      this.handleStart();
      this.setTooltipTransform();
    }
  };

  Slider.prototype.tooltipCollision = function (position) {
    if (this.isBootstrap || this.isBootstrap4 || (this.isMaterial || this.isMaterial3) && !this.isMaterialTooltip) {
      var tooltipOffsetValue = this.isBootstrap4 ? bootstrap4TooltipOffset : bootstrapTooltipOffset;

      switch (position) {
        case 'TopCenter':
          this.tooltipObj.setProperties({
            'offsetY': -tooltipOffsetValue
          }, false);
          break;

        case 'BottomCenter':
          this.tooltipObj.setProperties({
            'offsetY': tooltipOffsetValue
          }, false);
          break;

        case 'LeftCenter':
          this.tooltipObj.setProperties({
            'offsetX': -tooltipOffsetValue
          }, false);
          break;

        case 'RightCenter':
          this.tooltipObj.setProperties({
            'offsetX': tooltipOffsetValue
          }, false);
          break;
      }
    }
  };

  Slider.prototype.materialTooltipEventCallBack = function (event) {
    this.sliderBarClick(event);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mousemove touchmove', this.sliderBarMove, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mouseup touchend', this.sliderBarUp, this);
  };

  Slider.prototype.wireMaterialTooltipEvent = function (destroy) {
    if (this.isMaterialTooltip) {
      if (!destroy) {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.tooltipElement, 'mousedown touchstart', this.materialTooltipEventCallBack, this);
      } else {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.tooltipElement, 'mousedown touchstart', this.materialTooltipEventCallBack);
      }
    }
  };

  Slider.prototype.tooltipPositionCalculation = function (position) {
    var cssClass;

    switch (position) {
      case 'TopCenter':
        cssClass = classNames.horizontalTooltipBefore;
        break;

      case 'BottomCenter':
        cssClass = classNames.horizontalTooltipAfter;
        break;

      case 'LeftCenter':
        cssClass = classNames.verticalTooltipBefore;
        break;

      case 'RightCenter':
        cssClass = classNames.verticalTooltipAfter;
        break;
    }

    return cssClass;
  };

  Slider.prototype.getTooltipTransformProperties = function (className) {
    var transformProperties;

    if (this.tooltipElement) {
      var position = this.orientation === 'Horizontal' ? this.tooltipElement.clientHeight + 14 - this.tooltipElement.clientHeight / 2 : this.tooltipElement.clientWidth + 14 - this.tooltipElement.clientWidth / 2;
      transformProperties = this.orientation === 'Horizontal' ? className === classNames.horizontalTooltipBefore ? {
        rotate: 'rotate(45deg)',
        translate: "translateY(" + position + "px)"
      } : {
        rotate: 'rotate(225deg)',
        translate: "translateY(" + -position + "px)"
      } : className === classNames.verticalTooltipBefore ? {
        rotate: 'rotate(-45deg)',
        translate: "translateX(" + position + "px)"
      } : {
        rotate: 'rotate(-225deg)',
        translate: "translateX(" + -position + "px)"
      };
    }

    return transformProperties;
  };

  Slider.prototype.openMaterialTooltip = function () {
    var _this = this;

    if (this.isMaterialTooltip) {
      this.refreshTooltip(this.firstHandle);
      var tooltipContentElement = this.tooltipElement.firstElementChild;
      tooltipContentElement.classList.remove(classNames.materialTooltipHide);
      tooltipContentElement.classList.add(classNames.materialTooltipShow);
      this.firstHandle.style.cursor = 'default';
      this.tooltipElement.style.transition = this.scaleTransform;
      this.tooltipElement.classList.add(classNames.materialTooltipOpen);
      this.materialHandle.style.transform = 'scale(0)';

      if (tooltipContentElement.innerText.length > 4) {
        this.tooltipElement.style.transform = 'scale(1)';
      } else {
        this.tooltipElement.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;
      }

      if (this.type === 'Default') {
        setTimeout(function () {
          if (_this.tooltipElement) _this.tooltipElement.style.transition = _this.transition.handle;
        }, 2500);
      } else {
        setTimeout(function () {
          if (_this.tooltipElement) _this.tooltipElement.style.transition = 'none';
        }, 2500);
      }
    }
  };

  Slider.prototype.closeMaterialTooltip = function () {
    var _this = this;

    if (this.isMaterialTooltip) {
      var tooltipContentElement = this.tooltipElement.firstElementChild;
      this.tooltipElement.style.transition = this.scaleTransform;
      tooltipContentElement.classList.remove(classNames.materialTooltipShow);
      tooltipContentElement.classList.add(classNames.materialTooltipHide);
      this.firstHandle.style.cursor = '-webkit-grab';
      this.firstHandle.style.cursor = 'grab';

      if (this.materialHandle) {
        this.materialHandle.style.transform = 'scale(1)';
      }

      this.tooltipElement.classList.remove(classNames.materialTooltipOpen);
      this.setTooltipTransform();
      this.tooltipTarget = undefined;
      setTimeout(function () {
        if (_this.tooltipElement) _this.tooltipElement.style.transition = 'none';
      }, 2500);
    }
  };

  Slider.prototype.checkTooltipPosition = function (args) {
    var tooltipClass = this.tooltipPositionCalculation(args.collidedPosition);

    if (this.tooltipCollidedPosition === undefined || this.tooltipCollidedPosition !== args.collidedPosition || !args.element.classList.contains(tooltipClass)) {
      if (this.isMaterialTooltip) {
        if (tooltipClass !== undefined) {
          args.element.classList.remove(this.previousTooltipClass);
          args.element.classList.add(tooltipClass);
          this.previousTooltipClass = tooltipClass;
        }

        if (args.element.style.transform && args.element.classList.contains(classNames.materialTooltipOpen) && args.element.firstElementChild.innerText.length <= 4) {
          args.element.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;
        }
      }

      this.tooltipCollidedPosition = args.collidedPosition;
    }

    if (this.isMaterialTooltip && this.tooltipElement && this.tooltipElement.style.transform.indexOf('translate') !== -1) {
      this.setTooltipTransform();
    }
  };

  Slider.prototype.setTooltipTransform = function () {
    var transformProperties = this.getTooltipTransformProperties(this.previousTooltipClass);
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tooltipElement)) return;

    if (this.tooltipElement.firstElementChild.innerText.length > 4) {
      this.tooltipElement.style.transform = transformProperties.translate + " scale(0.01)";
    } else {
      this.tooltipElement.style.transform = transformProperties.translate + " " + transformProperties.rotate + " scale(0.01)";
    }
  };

  Slider.prototype.renderTooltip = function () {
    this.tooltipObj = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["Tooltip"]({
      showTipPointer: this.isBootstrap || this.isMaterial || this.isMaterial3 || this.isBootstrap4 || this.isTailwind || this.isBootstrap5 || this.isFluent,
      cssClass: classNames.sliderTooltip,
      height: this.isMaterial || this.isMaterial3 ? 30 : 'auto',
      animation: {
        open: {
          effect: 'None'
        },
        close: {
          effect: 'FadeOut',
          duration: 500
        }
      },
      opensOn: 'Custom',
      beforeOpen: this.tooltipBeforeOpen.bind(this),
      beforeCollision: this.checkTooltipPosition.bind(this),
      beforeClose: this.tooltipBeforeClose.bind(this),
      enableHtmlSanitizer: this.enableHtmlSanitizer
    });
    this.tooltipObj.appendTo(this.firstHandle);
    this.initializeTooltipProps();
  };

  Slider.prototype.initializeTooltipProps = function () {
    var tooltipShowOn = this.tooltip.showOn === 'Auto' ? 'Hover' : this.tooltip.showOn;
    this.setProperties({
      tooltip: {
        showOn: tooltipShowOn
      }
    }, true);
    this.tooltipObj.position = this.tooltipPlacement();
    this.tooltipCollision(this.tooltipObj.position);
    [this.firstHandle, this.rangeBar, this.secondHandle].forEach(function (handle) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(handle)) {
        handle.style.transition = 'none';
      }
    });

    if (this.isMaterialTooltip) {
      this.sliderContainer.classList.add(classNames.materialSlider);
      this.tooltipValue();
      this.tooltipObj.animation.close.effect = 'None';
      this.tooltipObj.open(this.firstHandle);
    }
  };

  Slider.prototype.tooltipBeforeClose = function () {
    this.tooltipElement = undefined;
    this.tooltipCollidedPosition = undefined;
  };

  Slider.prototype.setButtons = function () {
    this.firstBtn = this.createElement('div', {
      className: classNames.sliderButton + ' ' + classNames.firstButton
    });
    this.firstBtn.appendChild(this.createElement('span', {
      className: classNames.sliderButtonIcon
    }));

    if (this.isTailwind) {
      this.firstBtn.querySelector('span').classList.add('e-icons');
    }

    this.firstBtn.tabIndex = -1;
    this.secondBtn = this.createElement('div', {
      className: classNames.sliderButton + ' ' + classNames.secondButton
    });
    this.secondBtn.appendChild(this.createElement('span', {
      className: classNames.sliderButtonIcon
    }));

    if (this.isTailwind) {
      this.secondBtn.querySelector('span').classList.add('e-icons');
    }

    this.secondBtn.tabIndex = -1;
    this.sliderContainer.classList.add(classNames.sliderButtonClass);
    this.sliderContainer.appendChild(this.firstBtn);
    this.sliderContainer.appendChild(this.secondBtn);
    this.sliderContainer.appendChild(this.element);
    this.buttonTitle();
  };

  Slider.prototype.buttonTitle = function () {
    var enabledRTL = this.enableRtl && this.orientation !== 'Vertical';
    this.l10n.setLocale(this.locale);
    var decrementTitle = this.l10n.getConstant('decrementTitle');
    var incrementTitle = this.l10n.getConstant('incrementTitle');
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(enabledRTL ? this.secondBtn : this.firstBtn, {
      'aria-label': decrementTitle,
      title: decrementTitle
    });
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(enabledRTL ? this.firstBtn : this.secondBtn, {
      'aria-label': incrementTitle,
      title: incrementTitle
    });
  };

  Slider.prototype.buttonFocusOut = function () {
    if (this.isMaterial || this.isMaterial3) {
      this.getHandle().classList.remove('e-large-thumb-size');
    }
  };

  Slider.prototype.repeatButton = function (args) {
    var hVal = this.handleValueUpdate();
    var enabledRTL = this.enableRtl && this.orientation !== 'Vertical';
    var value;

    if (args.target.parentElement.classList.contains(classNames.firstButton) || args.target.classList.contains(classNames.firstButton)) {
      enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), true) : value = this.add(hVal, parseFloat(this.step.toString()), false);
    } else if (args.target.parentElement.classList.contains(classNames.secondButton) || args.target.classList.contains(classNames.secondButton)) {
      enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), false) : value = this.add(hVal, parseFloat(this.step.toString()), true);
    }

    if (this.limits.enabled) {
      value = this.getLimitCorrectedValues(value);
    }

    if (value >= this.min && value <= this.max) {
      this.changeHandleValue(value);
      this.tooltipToggle(this.getHandle());
    }
  };

  Slider.prototype.repeatHandlerMouse = function (args) {
    args.preventDefault();

    if (args.type === 'mousedown' || args.type === 'touchstart') {
      this.buttonClick(args);
      this.repeatInterval = setInterval(this.repeatButton.bind(this), 180, args);
    }
  };

  Slider.prototype.materialChange = function () {
    if (!this.getHandle().classList.contains('e-large-thumb-size')) {
      this.getHandle().classList.add('e-large-thumb-size');
    }
  };

  Slider.prototype.focusHandle = function () {
    if (!this.getHandle().classList.contains(classNames.sliderTabHandle)) {
      this.getHandle().classList.add(classNames.sliderTabHandle);
    }
  };

  Slider.prototype.repeatHandlerUp = function (e) {
    this.changeEvent('changed', e);
    this.closeTooltip();
    clearInterval(this.repeatInterval);
    this.getHandle().focus();
  };

  Slider.prototype.customTickCounter = function (bigNum) {
    var tickCount = 4;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues) && this.customValues.length > 0) {
      if (bigNum > 4) {
        tickCount = 3;
      }

      if (bigNum > 7) {
        tickCount = 2;
      }

      if (bigNum > 14) {
        tickCount = 1;
      }

      if (bigNum > 28) {
        tickCount = 0;
      }
    }

    return tickCount;
  }; // tslint:disable-next-line:max-func-body-length


  Slider.prototype.renderScale = function () {
    var liElementPosition = 0;
    var orien = this.orientation === 'Vertical' ? 'v' : 'h';
    var spanText;
    this.noOfDecimals = this.numberOfDecimals(this.step);
    this.ul = this.createElement('ul', {
      className: classNames.scale + ' ' + 'e-' + orien + '-scale ' + classNames.tick + '-' + this.ticks.placement.toLowerCase(),
      attrs: {
        role: 'presentation',
        tabIndex: '-1',
        'aria-hidden': 'true'
      }
    });
    this.ul.style.zIndex = '-1';

    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isAndroid && orien === 'h') {
      this.ul.classList.add(classNames.sliderTickPosition);
    }

    var smallStep = this.ticks.smallStep;

    if (!this.ticks.showSmallTicks) {
      this.ticks.largeStep > 0 ? smallStep = this.ticks.largeStep : smallStep = parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.max)) - parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min));
    } else if (smallStep <= 0) {
      smallStep = parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.step));
    }

    var min = this.fractionalToInteger(this.min);
    var max = this.fractionalToInteger(this.max);
    var steps = this.fractionalToInteger(smallStep);
    var bigNum = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues) && this.customValues.length > 0 && this.customValues.length - 1;
    var customStep = this.customTickCounter(bigNum);
    var count = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues) && this.customValues.length > 0 ? bigNum * customStep + bigNum : Math.abs((max - min) / steps);
    this.element.appendChild(this.ul);
    var li;
    var start = parseFloat(this.min.toString());

    if (orien === 'v') {
      start = parseFloat(this.max.toString());
    }

    var left = 0;
    var islargeTick;
    var tickWidth = 100 / count;

    if (tickWidth === Infinity) {
      tickWidth = 5;
    }

    for (var i = 0, y = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues) && this.customValues.length > 0 ? this.customValues.length - 1 : 0, k = 0; i <= count; i++) {
      li = this.createElement('li', {
        attrs: {
          class: classNames.tick,
          role: 'presentation',
          tabIndex: '-1',
          'aria-hidden': 'true'
        }
      });

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues) && this.customValues.length > 0) {
        islargeTick = i % (customStep + 1) === 0;

        if (islargeTick) {
          if (orien === 'h') {
            start = this.customValues[k];
            k++;
          } else {
            start = this.customValues[y];
            y--;
          }

          li.setAttribute('title', start.toString());
        }
      } else {
        li.setAttribute('title', start.toString());

        if (this.numberOfDecimals(this.max) === 0 && this.numberOfDecimals(this.min) === 0 && this.numberOfDecimals(this.step) === 0) {
          if (orien === 'h') {
            islargeTick = (start - parseFloat(this.min.toString())) % this.ticks.largeStep === 0 ? true : false;
          } else {
            islargeTick = Math.abs(start - parseFloat(this.max.toString())) % this.ticks.largeStep === 0 ? true : false;
          }
        } else {
          var largestep = this.fractionalToInteger(this.ticks.largeStep);
          var startValue = this.fractionalToInteger(start);

          if (orien === 'h') {
            islargeTick = (startValue - min) % largestep === 0 ? true : false;
          } else {
            islargeTick = Math.abs(startValue - parseFloat(max.toString())) % largestep === 0 ? true : false;
          }
        }
      }

      if (islargeTick) {
        li.classList.add(classNames.large);
      }

      orien === 'h' ? li.style.width = tickWidth + '%' : li.style.height = tickWidth + '%';
      var repeat = islargeTick ? this.ticks.placement === 'Both' ? 2 : 1 : 0;

      if (islargeTick) {
        for (var j = 0; j < repeat; j++) {
          this.createTick(li, start, tickWidth);
        }
      } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues)) {
        this.formatTicksValue(li, start);
      }

      this.ul.appendChild(li);
      this.tickElementCollection.push(li);
      var decimalPoints = void 0;

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues)) {
        if (this.numberOfDecimals(smallStep) > this.numberOfDecimals(start)) {
          decimalPoints = this.numberOfDecimals(smallStep);
        } else {
          decimalPoints = this.numberOfDecimals(start);
        }

        if (orien === 'h') {
          start = this.makeRoundNumber(start + smallStep, decimalPoints);
        } else {
          if (this.min > this.max) {
            start = this.makeRoundNumber(start + smallStep, decimalPoints);
          } else {
            start = this.makeRoundNumber(start - smallStep, decimalPoints);
          }
        }

        left = this.makeRoundNumber(left + smallStep, decimalPoints);
      }
    }

    this.ticksAlignment(orien, tickWidth);
  };

  Slider.prototype.ticksAlignment = function (orien, tickWidth, triggerEvent) {
    if (triggerEvent === void 0) {
      triggerEvent = true;
    }

    this.firstChild = this.ul.firstElementChild;
    this.lastChild = this.ul.lastElementChild;
    this.firstChild.classList.add(classNames.sliderFirstTick);
    this.lastChild.classList.add(classNames.sliderLastTick);
    this.sliderContainer.classList.add(classNames.scale + '-' + this.ticks.placement.toLowerCase());

    if (orien === 'h') {
      this.firstChild.style.width = tickWidth / 2 + '%';
      this.lastChild.style.width = tickWidth / 2 + '%';
    } else {
      this.firstChild.style.height = tickWidth / 2 + '%';
      this.lastChild.style.height = tickWidth / 2 + '%';
    }

    var eventArgs = {
      ticksWrapper: this.ul,
      tickElements: this.tickElementCollection
    };

    if (triggerEvent) {
      this.trigger('renderedTicks', eventArgs);
    }

    this.scaleAlignment();
  };

  Slider.prototype.createTick = function (li, start, tickWidth) {
    var span = this.createElement('span', {
      className: classNames.tickValue + ' ' + classNames.tick + '-' + this.ticks.placement.toLowerCase(),
      attrs: {
        role: 'presentation',
        tabIndex: '-1',
        'aria-hidden': 'true'
      }
    });
    li.appendChild(span);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues)) {
      this.formatTicksValue(li, start, span, tickWidth);
    } else {
      if (this.enableHtmlSanitizer) {
        span.innerHTML = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(start.toString());
      } else {
        span.innerHTML = start.toString();
      }
    }
  };

  Slider.prototype.formatTicksValue = function (li, start, spanElement, tickWidth) {
    var _this = this;

    var tickText = this.formatNumber(start);
    var text = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ticks) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ticks.format) ? this.formatString(start, this.ticksFormatInfo).formatString : tickText;
    var eventArgs = {
      value: start,
      text: text,
      tickElement: li
    };
    this.trigger('renderingTicks', eventArgs, function (observedArgs) {
      li.setAttribute('title', observedArgs.text.toString());

      if (spanElement) {
        if (_this.enableHtmlSanitizer) {
          spanElement.innerHTML = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(observedArgs.text.toString());
        } else {
          spanElement.innerHTML = observedArgs.text.toString();
        }
      }
    });
  };

  Slider.prototype.scaleAlignment = function () {
    this.tickValuePosition();
    var smallTick = 12;
    var largeTick = 20;
    var half = largeTick / 2;
    var orien = this.orientation === 'Vertical' ? 'v' : 'h';

    if (this.orientation === 'Vertical') {
      this.element.getBoundingClientRect().width <= 15 ? this.sliderContainer.classList.add(classNames.sliderSmallSize) : this.sliderContainer.classList.remove(classNames.sliderSmallSize);
    } else {
      this.element.getBoundingClientRect().height <= 15 ? this.sliderContainer.classList.add(classNames.sliderSmallSize) : this.sliderContainer.classList.remove(classNames.sliderSmallSize);
    }
  };

  Slider.prototype.tickValuePosition = function () {
    this.firstChild = this.element.querySelector('ul').children[0];
    var first = this.firstChild.getBoundingClientRect();
    var firstChild;
    var otherChild;
    var smallStep = this.ticks.smallStep;
    var count = Math.abs(parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.max)) - parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min))) / smallStep;

    if (this.firstChild.children.length > 0) {
      firstChild = this.firstChild.children[0].getBoundingClientRect();
    }

    var tickElements = [this.sliderContainer.querySelectorAll('.' + classNames.tick + '.' + classNames.large + ' .' + classNames.tickValue)];
    var other;

    if (this.ticks.placement === 'Both') {
      other = [].slice.call(tickElements[0], 2);
    } else {
      other = [].slice.call(tickElements[0], 1);
    }

    var tickWidth = this.orientation === 'Vertical' ? first.height * 2 : first.width * 2;

    for (var i = 0; i < this.firstChild.children.length; i++) {
      if (this.orientation === 'Vertical') {
        this.firstChild.children[i].style.top = -(firstChild.height / 2) + 'px';
      } else {
        if (!this.enableRtl) {
          this.firstChild.children[i].style.left = -(firstChild.width / 2) + 'px';
        } else {
          this.firstChild.children[i].style.left = (tickWidth - this.firstChild.children[i].getBoundingClientRect().width) / 2 + 'px';
        }
      }
    }

    for (var i = 0; i < other.length; i++) {
      otherChild = other[i].getBoundingClientRect();

      if (this.orientation === 'Vertical') {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(other[i], {
          top: (tickWidth - otherChild.height) / 2 + 'px'
        });
      } else {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(other[i], {
          left: (tickWidth - otherChild.width) / 2 + 'px'
        });
      }
    }

    if (this.enableRtl && this.lastChild.children.length && count !== 0) {
      this.lastChild.children[0].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + 'px';

      if (this.ticks.placement === 'Both') {
        this.lastChild.children[1].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + 'px';
      }
    }

    if (count === 0) {
      if (this.orientation === 'Horizontal') {
        if (!this.enableRtl) {
          this.firstChild.classList.remove(classNames.sliderLastTick);
          this.firstChild.style.left = this.firstHandle.style.left;
        } else {
          this.firstChild.classList.remove(classNames.sliderLastTick);
          this.firstChild.style.right = this.firstHandle.style.right;
          this.firstChild.children[0].style.left = this.firstChild.getBoundingClientRect().width / 2 + 2 + 'px';

          if (this.ticks.placement === 'Both') {
            this.firstChild.children[1].style.left = this.firstChild.getBoundingClientRect().width / 2 + 2 + 'px';
          }
        }
      }

      if (this.orientation === 'Vertical') {
        this.firstChild.classList.remove(classNames.sliderLastTick);
      }
    }
  };

  Slider.prototype.setAriaAttrValue = function (element) {
    var ariaValueText;
    var isTickFormatted = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ticks) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ticks.format) ? true : false;
    var text = !isTickFormatted ? this.formatContent(this.ticksFormatInfo, false) : this.formatContent(this.tooltipFormatInfo, false);
    var valuenow = isTickFormatted ? this.formatContent(this.ticksFormatInfo, true) : this.formatContent(this.tooltipFormatInfo, true);
    text = !this.customAriaText ? text : this.customAriaText;

    if (text.split(' - ').length === 2) {
      ariaValueText = text.split(' - ');
    } else {
      ariaValueText = [text, text];
    }

    this.setAriaAttributes(element);

    if (this.type !== 'Range') {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, {
        'aria-valuenow': valuenow,
        'aria-valuetext': text
      });
    } else {
      // eslint-disable-next-line
      !this.enableRtl ? element === this.firstHandle ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, {
        'aria-valuenow': valuenow.split(' - ')[0],
        'aria-valuetext': ariaValueText[0]
      }) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, {
        'aria-valuenow': valuenow.split(' - ')[1],
        'aria-valuetext': ariaValueText[1]
      }) : element === this.firstHandle ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, {
        'aria-valuenow': valuenow.split(' - ')[1],
        'aria-valuetext': ariaValueText[1]
      }) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, {
        'aria-valuenow': valuenow.split(' - ')[0],
        'aria-valuetext': ariaValueText[0]
      });
    }
  };

  Slider.prototype.handleValueUpdate = function () {
    var hVal;

    if (this.type === 'Range') {
      if (this.activeHandle === 1) {
        hVal = this.handleVal1;
      } else {
        hVal = this.handleVal2;
      }
    } else {
      hVal = this.handleVal1;
    }

    return hVal;
  };

  Slider.prototype.getLimitCorrectedValues = function (value) {
    if (this.type === 'MinRange' || this.type === 'Default') {
      value = this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd)[0];
    } else {
      if (this.activeHandle === 1) {
        value = this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd)[0];
      } else {
        value = this.getLimitValueAndPosition(value, this.limits.maxStart, this.limits.maxEnd)[0];
      }
    }

    return value;
  };

  Slider.prototype.focusSliderElement = function () {
    if (!this.isElementFocused) {
      this.element.focus();
      this.isElementFocused = true;
    }
  };

  Slider.prototype.buttonClick = function (args) {
    this.focusSliderElement();
    var value;
    var enabledRTL = this.enableRtl && this.orientation !== 'Vertical';
    var hVal = this.handleValueUpdate();

    if (args.keyCode === 40 || args.keyCode === 37 || args.currentTarget.classList.contains(classNames.firstButton)) {
      // eslint-disable-next-line
      enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), true) : value = this.add(hVal, parseFloat(this.step.toString()), false);
    } else if (args.keyCode === 38 || args.keyCode === 39 || args.currentTarget.classList.contains(classNames.secondButton)) {
      // eslint-disable-next-line
      enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), false) : value = this.add(hVal, parseFloat(this.step.toString()), true);
    } else if (args.keyCode === 33 || args.currentTarget.classList.contains(classNames.firstButton)) {
      // eslint-disable-next-line
      enabledRTL ? value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), false) : value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), true);
    } else if (args.keyCode === 34 || args.currentTarget.classList.contains(classNames.secondButton)) {
      // eslint-disable-next-line
      enabledRTL ? value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), true) : value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), false);
    } else if (args.keyCode === 36) {
      value = parseFloat(this.min < this.max ? this.min.toString() : this.max.toString());
    } else if (args.keyCode === 35) {
      value = parseFloat(this.min < this.max ? this.max.toString() : this.min.toString());
    }

    if (this.limits.enabled) {
      value = this.getLimitCorrectedValues(value);
    }

    this.changeHandleValue(value);

    if ((this.isMaterial || this.isMaterial3) && !this.tooltip.isVisible && !this.getHandle().classList.contains(classNames.sliderTabHandle)) {
      this.materialChange();
    }

    this.tooltipToggle(this.getHandle());
    this.getHandle().focus();
    this.focusHandle();

    if (args.currentTarget.classList.contains(classNames.firstButton)) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.firstBtn, 'mouseup touchend', this.buttonUp, this);
    }

    if (args.currentTarget.classList.contains(classNames.secondButton)) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.secondBtn, 'mouseup touchend', this.buttonUp, this);
    }
  };

  Slider.prototype.tooltipToggle = function (target) {
    if (this.isMaterialTooltip) {
      // eslint-disable-next-line
      !this.tooltipElement.classList.contains(classNames.materialTooltipOpen) ? this.openMaterialTooltip() : this.refreshTooltip(this.firstHandle);
    } else {
      // eslint-disable-next-line
      !this.tooltipElement ? this.openTooltip(target) : this.refreshTooltip(target);
    }
  };

  Slider.prototype.buttonUp = function (args) {
    if (args.currentTarget.classList.contains(classNames.firstButton)) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.firstBtn, 'mouseup touchend', this.buttonUp);
    }

    if (args.currentTarget.classList.contains(classNames.secondButton)) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.secondBtn, 'mouseup touchend', this.buttonUp);
    }
  };

  Slider.prototype.setRangeBar = function () {
    if (this.orientation === 'Horizontal' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.rangeBar)) {
      if (this.type === 'MinRange') {
        // eslint-disable-next-line
        this.enableRtl ? this.rangeBar.style.right = '0px' : this.rangeBar.style.left = '0px';
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.rangeBar, {
          'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.handlePos1) ? 0 : this.handlePos1 + 'px'
        });
      } else {
        // eslint-disable-next-line
        this.enableRtl ? this.rangeBar.style.right = this.handlePos1 + 'px' : this.rangeBar.style.left = this.handlePos1 + 'px';
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.rangeBar, {
          'width': this.handlePos2 - this.handlePos1 + 'px'
        });
      }
    } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.rangeBar)) {
      if (this.type === 'MinRange') {
        this.rangeBar.style.bottom = this.min > this.max ? this.handlePos1 + 'px' : '0px';
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.rangeBar, {
          'height': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.handlePos1) ? 0 : this.min > this.max ? this.element.clientHeight - this.handlePos1 + 'px' : this.handlePos1 + 'px'
        });
      } else {
        this.rangeBar.style.bottom = this.min > this.max ? this.handlePos2 + 'px' : this.handlePos1 + 'px';
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.rangeBar, {
          'height': this.min > this.max ? this.handlePos1 - this.handlePos2 + 'px' : this.handlePos2 - this.handlePos1 + 'px'
        });
      }
    }
  };

  Slider.prototype.checkValidValueAndPos = function (value) {
    value = this.checkHandleValue(value);
    value = this.checkHandlePosition(value);
    return value;
  };

  Slider.prototype.setLimitBarPositions = function (fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion) {
    if (this.orientation === 'Horizontal') {
      if (!this.enableRtl) {
        this.limitBarFirst.style.left = fromMinPostion + 'px';
        this.limitBarFirst.style.width = fromMaxpostion - fromMinPostion + 'px';
      } else {
        this.limitBarFirst.style.right = fromMinPostion + 'px';
        this.limitBarFirst.style.width = fromMaxpostion - fromMinPostion + 'px';
      }
    } else {
      this.limitBarFirst.style.bottom = (this.min < this.max ? fromMinPostion : fromMaxpostion) + 'px';
      this.limitBarFirst.style.height = (this.min < this.max ? fromMaxpostion - fromMinPostion : fromMinPostion - fromMaxpostion) + 'px';
    }

    if (this.type === 'Range') {
      if (this.orientation === 'Horizontal') {
        if (!this.enableRtl) {
          this.limitBarSecond.style.left = toMinPostion + 'px';
          this.limitBarSecond.style.width = toMaxpostion - toMinPostion + 'px';
        } else {
          this.limitBarSecond.style.right = toMinPostion + 'px';
          this.limitBarSecond.style.width = toMaxpostion - toMinPostion + 'px';
        }
      } else {
        this.limitBarSecond.style.bottom = (this.min < this.max ? toMinPostion : toMaxpostion) + 'px';
        this.limitBarSecond.style.height = (this.min < this.max ? toMaxpostion - toMinPostion : toMinPostion - toMaxpostion) + 'px';
      }
    }
  };

  Slider.prototype.setLimitBar = function () {
    if (this.type === 'Default' || this.type === 'MinRange') {
      var fromPosition = this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true)[0];
      fromPosition = this.checkValidValueAndPos(fromPosition);
      var toPosition = this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true)[0];
      toPosition = this.checkValidValueAndPos(toPosition);
      this.setLimitBarPositions(fromPosition, toPosition);
    } else if (this.type === 'Range') {
      var fromMinPostion = this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true)[0];
      fromMinPostion = this.checkValidValueAndPos(fromMinPostion);
      var fromMaxpostion = this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true)[0];
      fromMaxpostion = this.checkValidValueAndPos(fromMaxpostion);
      var toMinPostion = this.getLimitValueAndPosition(this.limits.maxStart, this.limits.maxStart, this.limits.maxEnd, true)[0];
      toMinPostion = this.checkValidValueAndPos(toMinPostion);
      var toMaxpostion = this.getLimitValueAndPosition(this.limits.maxEnd, this.limits.maxStart, this.limits.maxEnd, true)[0];
      toMaxpostion = this.checkValidValueAndPos(toMaxpostion);
      this.setLimitBarPositions(fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion);
    }
  };

  Slider.prototype.getLimitValueAndPosition = function (currentValue, minValue, maxValue, limitBar) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(minValue)) {
      minValue = this.min < this.max ? this.min : this.max;

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(currentValue) && limitBar) {
        currentValue = minValue;
      }
    }

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(maxValue)) {
      maxValue = this.min < this.max ? this.max : this.min;

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(currentValue) && limitBar) {
        currentValue = maxValue;
      }
    }

    if (currentValue < minValue) {
      currentValue = minValue;
    }

    if (currentValue > maxValue) {
      currentValue = maxValue;
    }

    return [currentValue, this.checkHandlePosition(currentValue)];
  };

  Slider.prototype.setValue = function () {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues) && this.customValues.length > 0) {
      this.min = 0;
      this.max = this.customValues.length - 1;
      this.setBarColor();
    }

    this.setAriaAttributes(this.firstHandle);
    this.handleVal1 = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) ? this.checkHandleValue(parseFloat(this.min.toString())) : this.checkHandleValue(parseFloat(this.value.toString()));
    this.handlePos1 = this.checkHandlePosition(this.handleVal1);
    this.preHandlePos1 = this.handlePos1; // eslint-disable-next-line

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.activeHandle) ? this.type === 'Range' ? this.activeHandle = 2 : this.activeHandle = 1 : // eslint-disable-next-line no-self-assign
    this.activeHandle = this.activeHandle;

    if (this.type === 'Default' || this.type === 'MinRange') {
      if (this.limits.enabled) {
        var values = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
        this.handleVal1 = values[0];
        this.handlePos1 = values[1];
        this.preHandlePos1 = this.handlePos1;
      }

      this.setHandlePosition(null);
      this.handleStart();
      this.value = this.handleVal1;
      this.setAriaAttrValue(this.firstHandle);
      this.changeEvent('changed', null);
    } else {
      this.validateRangeValue();
    }

    if (this.type !== 'Default') {
      this.setRangeBar();
    }

    if (this.limits.enabled) {
      this.setLimitBar();
    }
  };

  Slider.prototype.rangeValueUpdate = function () {
    if (this.value === null || typeof this.value !== 'object') {
      this.value = [parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min)), parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.max))];
    }
  };

  Slider.prototype.validateRangeValue = function () {
    this.rangeValueUpdate();
    this.setRangeValue();
  };

  Slider.prototype.modifyZindex = function () {
    if (this.type === 'Range' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.firstHandle) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.secondHandle)) {
      if (this.activeHandle === 1) {
        this.firstHandle.style.zIndex = this.zIndex + 4 + '';
        this.secondHandle.style.zIndex = this.zIndex + 3 + '';
      } else {
        this.firstHandle.style.zIndex = this.zIndex + 3 + '';
        this.secondHandle.style.zIndex = this.zIndex + 4 + '';
      }
    } else if (this.isMaterialTooltip && this.tooltipElement) {
      this.tooltipElement.style.zIndex = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["getZindexPartial"])(this.element) + '';
    }
  };

  Slider.prototype.setHandlePosition = function (event) {
    var _this = this;

    var handle;
    var pos = this.activeHandle === 1 ? this.handlePos1 : this.handlePos2;

    if (this.isMaterialTooltip) {
      handle = [this.firstHandle, this.materialHandle];
    } else {
      handle = [this.getHandle()];
    }

    this.handleStart();
    handle.forEach(function (handle) {
      if (_this.orientation === 'Horizontal') {
        // eslint-disable-next-line
        _this.enableRtl ? handle.style.right = pos + "px" : handle.style.left = pos + "px";
      } else {
        handle.style.bottom = pos + "px";
      }
    });
    this.changeEvent('change', event);
  };

  Slider.prototype.getHandle = function () {
    return this.activeHandle === 1 ? this.firstHandle : this.secondHandle;
  };

  Slider.prototype.setRangeValue = function () {
    this.updateRangeValue();
    this.activeHandle = 1;
    this.setHandlePosition(null);
    this.activeHandle = 2;
    this.setHandlePosition(null);
    this.activeHandle = 1;
  };

  Slider.prototype.changeEvent = function (eventName, e) {
    var previous = eventName === 'change' ? this.previousVal : this.previousChanged;

    if (this.type !== 'Range') {
      this.setProperties({
        'value': this.handleVal1
      }, true);

      if (previous !== this.value && (!this.isMaterialTooltip || !this.initialTooltip)) {
        this.trigger(eventName, this.changeEventArgs(eventName, e));
        this.initialTooltip = true;
        this.setPreviousVal(eventName, this.value);
      }

      this.setAriaAttrValue(this.firstHandle);
    } else {
      var value = this.value = [this.handleVal1, this.handleVal2];
      this.setProperties({
        'value': value
      }, true);

      if (previous.length === this.value.length && this.value[0] !== previous[0] || this.value[1] !== previous[1]) {
        this.initialTooltip = false;
        this.trigger(eventName, this.changeEventArgs(eventName, e));
        this.initialTooltip = true;
        this.setPreviousVal(eventName, this.value);
      }

      this.setAriaAttrValue(this.getHandle());
    }

    this.hiddenInput.value = this.value.toString();
  };

  Slider.prototype.changeEventArgs = function (eventName, e) {
    var eventArgs;

    if (this.tooltip.isVisible && this.tooltipObj && this.initialTooltip) {
      this.tooltipValue();
      eventArgs = {
        value: this.value,
        previousValue: eventName === 'change' ? this.previousVal : this.previousChanged,
        action: eventName,
        text: typeof this.tooltipObj.content === 'function' ? this.tooltipObj.content() : this.tooltipObj.content,
        isInteracted: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e) ? false : true
      };
    } else {
      eventArgs = {
        value: this.value,
        previousValue: eventName === 'change' ? this.previousVal : this.previousChanged,
        action: eventName,
        text: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ticksFormatInfo.format) ? this.value.toString() : this.type !== 'Range' ? this.formatString(this.value, this.ticksFormatInfo).formatString : this.formatString(this.value[0], this.ticksFormatInfo).formatString + ' - ' + this.formatString(this.value[1], this.ticksFormatInfo).formatString,
        isInteracted: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e) ? false : true
      };
    }

    return eventArgs;
  };

  Slider.prototype.setPreviousVal = function (eventName, value) {
    if (eventName === 'change') {
      this.previousVal = value;
    } else {
      this.previousChanged = value;
    }
  };

  Slider.prototype.updateRangeValue = function () {
    var values = this.value.toString().split(',').map(Number);

    if (this.enableRtl && this.orientation !== 'Vertical' || this.rtl) {
      this.value = [values[1], values[0]];
    } else {
      this.value = [values[0], values[1]];
    }

    if (this.enableRtl && this.orientation !== 'Vertical') {
      this.handleVal1 = this.checkHandleValue(this.value[1]);
      this.handleVal2 = this.checkHandleValue(this.value[0]);
    } else {
      this.handleVal1 = this.checkHandleValue(this.value[0]);
      this.handleVal2 = this.checkHandleValue(this.value[1]);
    }

    this.handlePos1 = this.checkHandlePosition(this.handleVal1);
    this.handlePos2 = this.checkHandlePosition(this.handleVal2);

    if (this.min < this.max && this.handlePos1 > this.handlePos2) {
      this.handlePos1 = this.handlePos2;
      this.handleVal1 = this.handleVal2;
    }

    if (this.min > this.max && this.handlePos1 < this.handlePos2) {
      this.handlePos2 = this.handlePos1;
      this.handleVal2 = this.handleVal1;
    }

    this.preHandlePos1 = this.handlePos1;
    this.preHandlePos2 = this.handlePos2;

    if (this.limits.enabled) {
      this.activeHandle = 1;
      var values_1 = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
      this.handleVal1 = values_1[0];
      this.handlePos1 = values_1[1];
      this.preHandlePos1 = this.handlePos1;
      this.activeHandle = 2;
      values_1 = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);
      this.handleVal2 = values_1[0];
      this.handlePos2 = values_1[1];
      this.preHandlePos2 = this.handlePos2;
    }
  };

  Slider.prototype.checkHandlePosition = function (value) {
    var pos;
    value = 100 * (value - parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min))) / (parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.max)) - parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min)));

    if (this.orientation === 'Horizontal') {
      pos = this.element.getBoundingClientRect().width * (value / 100);
    } else {
      pos = this.element.getBoundingClientRect().height * (value / 100);
    }

    if (parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.max)) === parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min))) {
      if (this.orientation === 'Horizontal') {
        pos = this.element.getBoundingClientRect().width;
      } else {
        pos = this.element.getBoundingClientRect().height;
      }
    }

    return pos;
  };

  Slider.prototype.checkHandleValue = function (value) {
    if (this.min === this.max) {
      return parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.max));
    }

    var handle = this.tempStartEnd();

    if (value < handle.start) {
      value = handle.start;
    } else if (value > handle.end) {
      value = handle.end;
    }

    return value;
  };
  /**
   * It is used to reposition slider.
   *
   * @returns void
   */


  Slider.prototype.reposition = function () {
    var _this = this;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.firstHandle)) this.firstHandle.style.transition = 'none';

    if (this.type !== 'Default' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.rangeBar)) {
      this.rangeBar.style.transition = 'none';
    }

    if (this.type === 'Range' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.secondHandle)) {
      this.secondHandle.style.transition = 'none';
    }

    this.handlePos1 = this.checkHandlePosition(this.handleVal1);

    if (this.handleVal2) {
      this.handlePos2 = this.checkHandlePosition(this.handleVal2);
    }

    if (this.orientation === 'Horizontal') {
      // eslint-disable-next-line
      this.enableRtl ? this.firstHandle.style.right = this.handlePos1 + "px" : this.firstHandle.style.left = this.handlePos1 + "px";

      if (this.isMaterialTooltip && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.materialHandle)) {
        // eslint-disable-next-line
        this.enableRtl ? this.materialHandle.style.right = this.handlePos1 + "px" : this.materialHandle.style.left = this.handlePos1 + "px";
      }

      if (this.type === 'MinRange' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.rangeBar)) {
        // eslint-disable-next-line
        this.enableRtl ? this.rangeBar.style.right = '0px' : this.rangeBar.style.left = '0px';
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.rangeBar, {
          'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.handlePos1) ? 0 : this.handlePos1 + 'px'
        });
      } else if (this.type === 'Range' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.secondHandle) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.rangeBar)) {
        // eslint-disable-next-line
        this.enableRtl ? this.secondHandle.style.right = this.handlePos2 + "px" : this.secondHandle.style.left = this.handlePos2 + "px"; // eslint-disable-next-line

        this.enableRtl ? this.rangeBar.style.right = this.handlePos1 + 'px' : this.rangeBar.style.left = this.handlePos1 + 'px';
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.rangeBar, {
          'width': this.handlePos2 - this.handlePos1 + 'px'
        });
      }
    } else {
      this.firstHandle.style.bottom = this.handlePos1 + "px";

      if (this.isMaterialTooltip) {
        this.materialHandle.style.bottom = this.handlePos1 + "px";
      }

      if (this.type === 'MinRange') {
        this.rangeBar.style.bottom = this.min > this.max ? this.handlePos1 + 'px' : '0px';
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.rangeBar, {
          'height': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.handlePos1) ? 0 : this.min > this.max ? this.element.clientHeight - this.handlePos1 + 'px' : this.handlePos1 + 'px'
        });
      } else if (this.type === 'Range') {
        this.secondHandle.style.bottom = this.handlePos2 + "px";
        this.rangeBar.style.bottom = this.min > this.max ? this.handlePos2 + 'px' : this.handlePos1 + 'px';
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.rangeBar, {
          'height': this.min > this.max ? this.handlePos1 - this.handlePos2 + 'px' : this.handlePos2 - this.handlePos1 + 'px'
        });
      }
    }

    if (this.limits.enabled) {
      this.setLimitBar();
    }

    if (this.ticks.placement !== 'None' && this.ul) {
      this.removeElement(this.ul);
      this.ul = undefined;
      this.renderScale();
    }

    this.handleStart();

    if (!this.tooltip.isVisible) {
      setTimeout(function () {
        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this.firstHandle)) _this.firstHandle.style.transition = _this.scaleTransform;

        if (_this.type === 'Range' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this.secondHandle)) {
          _this.secondHandle.style.transition = _this.scaleTransform;
        }
      });
    }

    this.refreshTooltip(this.tooltipTarget);
    this.setBarColor();
  };

  Slider.prototype.changeHandleValue = function (value) {
    var position = null;

    if (this.activeHandle === 1) {
      if (!(this.limits.enabled && this.limits.startHandleFixed)) {
        this.handleVal1 = this.checkHandleValue(value);
        this.handlePos1 = this.checkHandlePosition(this.handleVal1);

        if (this.type === 'Range' && (this.handlePos1 > this.handlePos2 && this.min < this.max || this.handlePos1 < this.handlePos2 && this.min > this.max)) {
          this.handlePos1 = this.handlePos2;
          this.handleVal1 = this.handleVal2;
        }

        if (this.handlePos1 !== this.preHandlePos1) {
          position = this.preHandlePos1 = this.handlePos1;
        }
      }

      this.modifyZindex();
    } else {
      if (!(this.limits.enabled && this.limits.endHandleFixed)) {
        this.handleVal2 = this.checkHandleValue(value);
        this.handlePos2 = this.checkHandlePosition(this.handleVal2);

        if (this.type === 'Range' && (this.handlePos2 < this.handlePos1 && this.min < this.max || this.handlePos2 > this.handlePos1 && this.min > this.max)) {
          this.handlePos2 = this.handlePos1;
          this.handleVal2 = this.handleVal1;
        }

        if (this.handlePos2 !== this.preHandlePos2) {
          position = this.preHandlePos2 = this.handlePos2;
        }
      }

      this.modifyZindex();
    }

    if (position !== null) {
      if (this.type !== 'Default') {
        this.setRangeBar();
      }

      this.setHandlePosition(null);
    }
  }; // eslint-disable-next-line


  Slider.prototype.tempStartEnd = function () {
    if (this.min > this.max) {
      return {
        start: this.max,
        end: this.min
      };
    } else {
      return {
        start: this.min,
        end: this.max
      };
    }
  }; // eslint-disable-next-line


  Slider.prototype.xyToPosition = function (position) {
    var pos;

    if (this.min === this.max) {
      return 100;
    }

    if (this.orientation === 'Horizontal') {
      var left = position.x - this.element.getBoundingClientRect().left;
      var num = this.element.offsetWidth / 100;
      this.val = left / num;
    } else {
      var top_1 = position.y - this.element.getBoundingClientRect().top;
      var num = this.element.offsetHeight / 100;
      this.val = 100 - top_1 / num;
    }

    var val = this.stepValueCalculation(this.val);

    if (val < 0) {
      val = 0;
    } else if (val > 100) {
      val = 100;
    }

    if (this.enableRtl && this.orientation !== 'Vertical') {
      val = 100 - val;
    }

    if (this.orientation === 'Horizontal') {
      pos = this.element.getBoundingClientRect().width * (val / 100);
    } else {
      pos = this.element.getBoundingClientRect().height * (val / 100);
    }

    return pos;
  };

  Slider.prototype.stepValueCalculation = function (value) {
    if (this.step === 0) {
      this.step = 1;
    }

    var percentStep = parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.step)) / ((parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.max)) - parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min))) / 100);
    var remain = value % Math.abs(percentStep);

    if (remain !== 0) {
      if (percentStep / 2 > remain) {
        value -= remain;
      } else {
        value += Math.abs(percentStep) - remain;
      }
    }

    return value;
  };

  Slider.prototype.add = function (a, b, addition) {
    var precision;
    var x = Math.pow(10, precision || 3);
    var val;

    if (addition) {
      val = (Math.round(a * x) + Math.round(b * x)) / x;
    } else {
      val = (Math.round(a * x) - Math.round(b * x)) / x;
    }

    return val;
  };

  Slider.prototype.positionToValue = function (pos) {
    var val;
    var diff = parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.max)) - parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min));

    if (this.orientation === 'Horizontal') {
      val = pos / this.element.getBoundingClientRect().width * diff;
    } else {
      val = pos / this.element.getBoundingClientRect().height * diff;
    }

    var total = this.add(val, parseFloat(this.min.toString()), true);
    return total;
  };

  Slider.prototype.sliderBarClick = function (evt) {
    evt.preventDefault(); // eslint-disable-next-line

    var pos;

    if (evt.type === 'mousedown' || evt.type === 'mouseup' || evt.type === 'click') {
      pos = {
        x: evt.clientX,
        y: evt.clientY
      };
    } else if (evt.type === 'touchend' || evt.type === 'touchstart') {
      pos = {
        x: evt.changedTouches[0].clientX,
        y: evt.changedTouches[0].clientY
      };
    }

    var handlepos = this.xyToPosition(pos);
    var handleVal = this.positionToValue(handlepos);

    if (this.type === 'Range' && (this.min < this.max && this.handlePos2 - handlepos < handlepos - this.handlePos1 || this.min > this.max && this.handlePos1 - handlepos > handlepos - this.handlePos2)) {
      this.activeHandle = 2;

      if (!(this.limits.enabled && this.limits.endHandleFixed)) {
        if (this.limits.enabled) {
          var value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);
          handleVal = value[0];
          handlepos = value[1];
        }

        this.secondHandle.classList.add(classNames.sliderActiveHandle);
        this.handlePos2 = this.preHandlePos2 = handlepos;
        this.handleVal2 = handleVal;
      }

      this.modifyZindex();
      this.secondHandle.focus();
    } else {
      this.activeHandle = 1;

      if (!(this.limits.enabled && this.limits.startHandleFixed)) {
        if (this.limits.enabled) {
          var value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);
          handleVal = value[0];
          handlepos = value[1];
        }

        this.firstHandle.classList.add(classNames.sliderActiveHandle);
        this.handlePos1 = this.preHandlePos1 = handlepos;
        this.handleVal1 = handleVal;
      }

      this.modifyZindex();
      this.firstHandle.focus();
    }

    if (this.isMaterialTooltip) {
      this.tooltipElement.classList.add(classNames.materialTooltipActive);
    }

    var focusedElement = this.element.querySelector('.' + classNames.sliderTabHandle);

    if (focusedElement && this.getHandle() !== focusedElement) {
      focusedElement.classList.remove(classNames.sliderTabHandle);
    }

    var handle = this.activeHandle === 1 ? this.firstHandle : this.secondHandle;
    var behindElement;

    if ((evt.type === 'click' || evt.type === 'mousedown') && evt.target === handle) {
      var eventX = evt.clientX,
          eventY = evt.clientY;
      behindElement = document.elementFromPoint(eventX, eventY);
    }

    if (evt.target === handle && behindElement != handle) {
      if ((this.isMaterial || this.isMaterial3) && !this.tooltip.isVisible && !this.getHandle().classList.contains(classNames.sliderTabHandle)) {
        this.materialChange();
      }

      this.sliderBarUp(evt);
      this.tooltipToggle(this.getHandle());
      return;
    }

    if (!this.checkRepeatedValue(handleVal)) {
      return;
    }

    var transition = (this.isMaterial || this.isMaterial3) && this.tooltip.isVisible ? this.transitionOnMaterialTooltip : this.transition;
    this.getHandle().style.transition = transition.handle;

    if (this.type !== 'Default') {
      this.rangeBar.style.transition = transition.rangeBar;
    }

    this.setHandlePosition(evt);

    if (this.isMaterialTooltip) {
      this.initialTooltip = false;
    }

    if (evt.target != handle) {
      this.changeEvent('changed', evt);
    }

    if (this.type !== 'Default') {
      this.setRangeBar();
    }
  };

  Slider.prototype.handleValueAdjust = function (handleValue, assignValue, handleNumber) {
    if (handleNumber === 1) {
      this.handleVal1 = assignValue;
      this.handleVal2 = this.handleVal1 + this.minDiff;
    } else if (handleNumber === 2) {
      this.handleVal2 = assignValue;
      this.handleVal1 = this.handleVal2 - this.minDiff;
    }

    this.handlePos1 = this.checkHandlePosition(this.handleVal1);
    this.handlePos2 = this.checkHandlePosition(this.handleVal2);
  };

  Slider.prototype.dragRangeBarMove = function (event) {
    var _a, _b;

    if (event.type !== 'touchmove') {
      event.preventDefault();
    }

    this.rangeBarDragged = true;
    var pos;
    this.rangeBar.style.transition = 'none';
    this.firstHandle.style.transition = 'none';
    this.secondHandle.style.transition = 'none';
    var xPostion;
    var yPostion;

    if (event.type === 'mousemove') {
      _a = [event.clientX, event.clientY], xPostion = _a[0], yPostion = _a[1];
    } else {
      _b = [event.changedTouches[0].clientX, event.changedTouches[0].clientY], xPostion = _b[0], yPostion = _b[1];
    }

    if (!(this.limits.enabled && this.limits.startHandleFixed) && !(this.limits.enabled && this.limits.endHandleFixed)) {
      if (!this.enableRtl) {
        pos = {
          x: xPostion - this.firstPartRemain,
          y: yPostion + this.secondPartRemain
        };
      } else {
        pos = {
          x: xPostion + this.secondPartRemain,
          y: yPostion + this.secondPartRemain
        };
      }

      if (this.min > this.max) {
        this.handlePos2 = this.xyToPosition(pos);
        this.handleVal2 = this.positionToValue(this.handlePos2);
      } else {
        this.handlePos1 = this.xyToPosition(pos);
        this.handleVal1 = this.positionToValue(this.handlePos1);
      }

      if (!this.enableRtl) {
        pos = {
          x: xPostion + this.secondPartRemain,
          y: yPostion - this.firstPartRemain
        };
      } else {
        pos = {
          x: xPostion - this.firstPartRemain,
          y: yPostion - this.firstPartRemain
        };
      }

      if (this.min > this.max) {
        this.handlePos1 = this.xyToPosition(pos);
        this.handleVal1 = this.positionToValue(this.handlePos1);
      } else {
        this.handlePos2 = this.xyToPosition(pos);
        this.handleVal2 = this.positionToValue(this.handlePos2);
      }

      if (this.limits.enabled) {
        var value = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
        this.handleVal1 = value[0];
        this.handlePos1 = value[1];

        if (this.handleVal1 === this.limits.minEnd) {
          this.handleValueAdjust(this.handleVal1, this.limits.minEnd, 1);
        }

        if (this.handleVal1 === this.limits.minStart) {
          this.handleValueAdjust(this.handleVal1, this.limits.minStart, 1);
        }

        value = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);
        this.handleVal2 = value[0];
        this.handlePos2 = value[1];

        if (this.handleVal2 === this.limits.maxStart) {
          this.handleValueAdjust(this.handleVal2, this.limits.maxStart, 2);
        }

        if (this.handleVal2 === this.limits.maxEnd) {
          this.handleValueAdjust(this.handleVal2, this.limits.maxEnd, 2);
        }
      }

      if (this.handleVal2 === (this.min > this.max ? this.min : this.max)) {
        this.handleValueAdjust(this.handleVal2, this.min > this.max ? this.min : this.max, 2);
      }

      if (this.handleVal1 === (this.min > this.max ? this.max : this.min)) {
        this.handleValueAdjust(this.handleVal1, this.min > this.max ? this.max : this.min, 1);
      }
    }

    this.activeHandle = 1;
    this.setHandlePosition(event);
    this.activeHandle = 2;
    this.setHandlePosition(event);
    this.tooltipToggle(this.rangeBar);
    this.setRangeBar();
  };

  Slider.prototype.sliderBarUp = function (event) {
    this.changeEvent('changed', event);
    this.handleFocusOut();
    this.firstHandle.classList.remove(classNames.sliderActiveHandle);

    if (this.type === 'Range') {
      this.initialTooltip = false;
      this.secondHandle.classList.remove(classNames.sliderActiveHandle);
    }

    this.closeTooltip();

    if (this.isMaterial || this.isMaterial3) {
      this.getHandle().classList.remove('e-large-thumb-size');

      if (this.isMaterialTooltip) {
        this.tooltipElement.classList.remove(classNames.materialTooltipActive);
      }
    }

    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mousemove touchmove', this.sliderBarMove);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mouseup touchend', this.sliderBarUp);
  };

  Slider.prototype.sliderBarMove = function (evt) {
    if (evt.type !== 'touchmove') {
      evt.preventDefault();
    }

    var pos;

    if (evt.type === 'mousemove') {
      pos = {
        x: evt.clientX,
        y: evt.clientY
      };
    } else {
      pos = {
        x: evt.changedTouches[0].clientX,
        y: evt.changedTouches[0].clientY
      };
    }

    var handlepos = this.xyToPosition(pos);
    var handleVal = this.positionToValue(handlepos);
    handlepos = Math.round(handlepos);

    if (this.type !== 'Range' && this.activeHandle === 1) {
      if (!(this.limits.enabled && this.limits.startHandleFixed)) {
        if (this.limits.enabled) {
          var valueAndPostion = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);
          handlepos = valueAndPostion[1];
          handleVal = valueAndPostion[0];
        }

        this.handlePos1 = handlepos;
        this.handleVal1 = handleVal;
      }

      this.firstHandle.classList.add(classNames.sliderActiveHandle);
    }

    if (this.type === 'Range') {
      if (this.activeHandle === 1) {
        this.firstHandle.classList.add(classNames.sliderActiveHandle);

        if (!(this.limits.enabled && this.limits.startHandleFixed)) {
          if (this.min < this.max && handlepos > this.handlePos2 || this.min > this.max && handlepos < this.handlePos2) {
            handlepos = this.handlePos2;
            handleVal = this.handleVal2;
          }

          if (handlepos !== this.preHandlePos1) {
            if (this.limits.enabled) {
              var value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);
              handleVal = value[0];
              handlepos = value[1];
            }

            this.handlePos1 = this.preHandlePos1 = handlepos;
            this.handleVal1 = handleVal;
            this.activeHandle = 1;
          }
        }
      } else if (this.activeHandle === 2) {
        this.secondHandle.classList.add(classNames.sliderActiveHandle);

        if (!(this.limits.enabled && this.limits.endHandleFixed)) {
          if (this.min < this.max && handlepos < this.handlePos1 || this.min > this.max && handlepos > this.handlePos1) {
            handlepos = this.handlePos1;
            handleVal = this.handleVal1;
          }

          if (handlepos !== this.preHandlePos2) {
            if (this.limits.enabled) {
              var value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);
              handleVal = value[0];
              handlepos = value[1];
            }

            this.handlePos2 = this.preHandlePos2 = handlepos;
            this.handleVal2 = handleVal;
            this.activeHandle = 2;
          }
        }
      }
    }

    if (!this.checkRepeatedValue(handleVal)) {
      return;
    }

    this.getHandle().style.transition = this.scaleTransform;

    if (this.type !== 'Default') {
      this.rangeBar.style.transition = 'none';
    }

    this.setHandlePosition(evt);

    if ((this.isMaterial || this.isMaterial3) && !this.tooltip.isVisible && !this.getHandle().classList.contains(classNames.sliderTabHandle)) {
      this.materialChange();
    }

    this.tooltipToggle(this.getHandle());

    if (this.type !== 'Default') {
      this.setRangeBar();
    }
  };

  Slider.prototype.dragRangeBarUp = function (event) {
    if (!this.rangeBarDragged) {
      this.focusSliderElement();
      this.sliderBarClick(event);
    } else {
      this.isDragComplete = true;
    }

    this.changeEvent('changed', event);
    this.closeTooltip();
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mousemove touchmove', this.dragRangeBarMove);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mouseup touchend', this.dragRangeBarUp);
    this.rangeBarDragged = false;
  };

  Slider.prototype.checkRepeatedValue = function (currentValue) {
    if (this.type === 'Range') {
      var previousVal = this.enableRtl && this.orientation !== 'Vertical' ? this.activeHandle === 1 ? this.previousVal[1] : this.previousVal[0] : this.activeHandle === 1 ? this.previousVal[0] : this.previousVal[1];

      if (currentValue === previousVal) {
        return 0;
      }
    } else {
      if (currentValue === this.previousVal) {
        return 0;
      }
    }

    return 1;
  };

  Slider.prototype.refreshTooltip = function (target) {
    if (this.tooltip.isVisible && this.tooltipObj) {
      this.tooltipValue();

      if (target) {
        this.tooltipObj.refresh(target);
        this.tooltipTarget = target;
      }
    }
  };

  Slider.prototype.openTooltip = function (target) {
    if (this.tooltip.isVisible && this.tooltipObj && !this.isMaterialTooltip) {
      this.tooltipValue();
      this.tooltipObj.open(target);
      this.tooltipTarget = target;
    }
  };

  Slider.prototype.closeTooltip = function () {
    if (this.tooltip.isVisible && this.tooltipObj && this.tooltip.showOn !== 'Always' && !this.isMaterialTooltip) {
      this.tooltipValue();
      this.tooltipObj.close();
      this.tooltipTarget = undefined;
    }
  };

  Slider.prototype.keyDown = function (event) {
    switch (event.keyCode) {
      case 37:
      case 38:
      case 39:
      case 40:
      case 33:
      case 34:
      case 36:
      case 35:
        event.preventDefault();
        this.buttonClick(event);
        break;
    }
  };

  Slider.prototype.wireButtonEvt = function (destroy) {
    if (!destroy) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.firstBtn, 'mouseleave touchleave', this.buttonFocusOut, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.secondBtn, 'mouseleave touchleave', this.buttonFocusOut, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.firstBtn, 'mousedown touchstart', this.repeatHandlerMouse, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.firstBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.secondBtn, 'mousedown touchstart', this.repeatHandlerMouse, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.secondBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.firstBtn, 'focusout', this.sliderFocusOut, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.secondBtn, 'focusout', this.sliderFocusOut, this);
    } else {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.firstBtn, 'mouseleave touchleave', this.buttonFocusOut);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.secondBtn, 'mouseleave touchleave', this.buttonFocusOut);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.firstBtn, 'mousedown touchstart', this.repeatHandlerMouse);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.firstBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.secondBtn, 'mousedown touchstart', this.repeatHandlerMouse);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.secondBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.firstBtn, 'focusout', this.sliderFocusOut);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.secondBtn, 'focusout', this.sliderFocusOut);
    }
  };

  Slider.prototype.rangeBarMousedown = function (event) {
    var _a, _b;

    event.preventDefault();
    this.focusSliderElement();

    if (this.type === 'Range' && this.drag && event.target === this.rangeBar) {
      var xPostion = void 0;
      var yPostion = void 0;

      if (event.type === 'mousedown') {
        _a = [event.clientX, event.clientY], xPostion = _a[0], yPostion = _a[1];
      } else if (event.type === 'touchstart') {
        _b = [event.changedTouches[0].clientX, event.changedTouches[0].clientY], xPostion = _b[0], yPostion = _b[1];
      }

      if (this.orientation === 'Horizontal') {
        this.firstPartRemain = xPostion - this.rangeBar.getBoundingClientRect().left;
        this.secondPartRemain = this.rangeBar.getBoundingClientRect().right - xPostion;
      } else {
        this.firstPartRemain = yPostion - this.rangeBar.getBoundingClientRect().top;
        this.secondPartRemain = this.rangeBar.getBoundingClientRect().bottom - yPostion;
      }

      this.minDiff = this.handleVal2 - this.handleVal1;
      this.tooltipToggle(this.rangeBar);
      var focusedElement = this.element.querySelector('.' + classNames.sliderTabHandle);

      if (focusedElement) {
        focusedElement.classList.remove(classNames.sliderTabHandle);
      }

      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mousemove touchmove', this.dragRangeBarMove, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mouseup touchend', this.dragRangeBarUp, this);
    }
  };

  Slider.prototype.elementClick = function (event) {
    if (this.isDragComplete) {
      this.isDragComplete = false;
      return;
    }

    event.preventDefault();
    this.focusSliderElement();
    this.sliderBarClick(event);
    this.focusHandle();
  };

  Slider.prototype.wireEvents = function () {
    this.onresize = this.reposition.bind(this);
    window.addEventListener('resize', this.onresize);

    if (this.enabled && !this.readonly) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'click', this.elementClick, this);

      if (this.type === 'Range' && this.drag) {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.rangeBar, 'mousedown touchstart', this.rangeBarMousedown, this);
      }

      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.sliderContainer, 'keydown', this.keyDown, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.sliderContainer, 'keyup', this.keyUp, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'focusout', this.sliderFocusOut, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.sliderContainer, 'mouseover mouseout touchstart touchend', this.hover, this);
      this.wireFirstHandleEvt(false);

      if (this.type === 'Range') {
        this.wireSecondHandleEvt(false);
      }

      if (this.showButtons) {
        this.wireButtonEvt(false);
      }

      this.wireMaterialTooltipEvent(false);

      if (this.isForm) {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.formElement, 'reset', this.formResetHandler, this);
      }
    }
  };

  Slider.prototype.unwireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'click', this.elementClick);

    if (this.type === 'Range' && this.drag) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.rangeBar, 'mousedown touchstart', this.rangeBarMousedown);
    }

    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.sliderContainer, 'keydown', this.keyDown);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.sliderContainer, 'keyup', this.keyUp);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'focusout', this.sliderFocusOut);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.sliderContainer, 'mouseover mouseout touchstart touchend', this.hover);
    this.wireFirstHandleEvt(true);

    if (this.type === 'Range') {
      this.wireSecondHandleEvt(true);
    }

    if (this.showButtons) {
      this.wireButtonEvt(true);
    }

    this.wireMaterialTooltipEvent(true);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'reset', this.formResetHandler);
  };

  Slider.prototype.formResetHandler = function () {
    this.setProperties({
      'value': this.formResetValue
    }, true);
    this.setValue();
  };

  Slider.prototype.keyUp = function (event) {
    if (event.keyCode === 9 && event.target.classList.contains(classNames.sliderHandle)) {
      this.focusSliderElement();

      if (!event.target.classList.contains(classNames.sliderTabHandle)) {
        if (this.element.querySelector('.' + classNames.sliderTabHandle)) {
          this.element.querySelector('.' + classNames.sliderTabHandle).classList.remove(classNames.sliderTabHandle);
        }

        event.target.classList.add(classNames.sliderTabHandle);
        var parentElement = event.target.parentElement;

        if (parentElement === this.element) {
          parentElement.querySelector('.' + classNames.sliderTrack).classList.add(classNames.sliderTabTrack);

          if (this.type === 'Range' || this.type === 'MinRange') {
            parentElement.querySelector('.' + classNames.rangeBar).classList.add(classNames.sliderTabRange);
          }
        }

        if (this.type === 'Range') {
          event.target.previousSibling.classList.contains(classNames.sliderHandle) ? this.activeHandle = 2 : this.activeHandle = 1;
        }

        this.getHandle().focus();
        this.tooltipToggle(this.getHandle());
      }
    }

    this.closeTooltip();
    this.changeEvent('changed', event);
  };

  Slider.prototype.hover = function (event) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(event)) {
      if (event.type === 'mouseover' || event.type === 'touchmove' || event.type === 'mousemove' || event.type === 'pointermove' || event.type === 'touchstart') {
        this.sliderContainer.classList.add(classNames.sliderHover);
      } else {
        this.sliderContainer.classList.remove(classNames.sliderHover);
        var curTarget = event.currentTarget;

        if (this.tooltip.isVisible && this.tooltip.showOn !== 'Always' && this.tooltipObj && this.isMaterialTooltip && !curTarget.classList.contains(classNames.sliderHandleFocused) && !curTarget.classList.contains(classNames.sliderTabHandle)) {
          this.closeMaterialTooltip();
        }
      }
    }
  };

  Slider.prototype.sliderFocusOut = function (event) {
    if (event.relatedTarget !== this.secondHandle && event.relatedTarget !== this.firstHandle && event.relatedTarget !== this.element && event.relatedTarget !== this.firstBtn && event.relatedTarget !== this.secondBtn) {
      this.closeMaterialTooltip();
      this.closeTooltip();

      if (this.element.querySelector('.' + classNames.sliderTabHandle)) {
        this.element.querySelector('.' + classNames.sliderTabHandle).classList.remove(classNames.sliderTabHandle);
      }

      if (this.element.querySelector('.' + classNames.sliderTabTrack)) {
        this.element.querySelector('.' + classNames.sliderTabTrack).classList.remove(classNames.sliderTabTrack);

        if ((this.type === 'Range' || this.type === 'MinRange') && this.element.querySelector('.' + classNames.sliderTabRange)) {
          this.element.querySelector('.' + classNames.sliderTabRange).classList.remove(classNames.sliderTabRange);
        }
      }

      this.hiddenInput.focus();
      this.hiddenInput.blur();
      this.isElementFocused = false;
    }
  };

  Slider.prototype.removeElement = function (element) {
    if (element.parentNode) {
      element.parentNode.removeChild(element);
    }
  };

  Slider.prototype.changeSliderType = function (type, args) {
    if (this.isMaterialTooltip && this.materialHandle) {
      this.sliderContainer.classList.remove(classNames.materialSlider);
      this.removeElement(this.materialHandle);
      this.materialHandle = undefined;
    }

    this.removeElement(this.firstHandle);
    this.firstHandle = undefined;

    if (type !== 'Default') {
      if (type === 'Range') {
        this.removeElement(this.secondHandle);
        this.secondHandle = undefined;
      }

      this.removeElement(this.rangeBar);
      this.rangeBar = undefined;
    }

    if (this.tooltip.isVisible && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tooltipObj)) {
      this.tooltipObj.destroy();
      this.tooltipElement = undefined;
      this.tooltipCollidedPosition = undefined;
    }

    if (this.limits.enabled) {
      if (type === 'MinRange' || type === 'Default') {
        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.limitBarFirst)) {
          this.removeElement(this.limitBarFirst);
          this.limitBarFirst = undefined;
        }
      } else {
        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.limitBarSecond)) {
          this.removeElement(this.limitBarSecond);
          this.limitBarSecond = undefined;
        }
      }
    }

    this.activeHandle = 1;
    this.getThemeInitialization();

    if (this.type === 'Range') {
      this.rangeValueUpdate();
    }

    this.createRangeBar();

    if (this.limits.enabled) {
      this.createLimitBar();
    }

    this.setHandler();
    this.setOrientClass();
    this.wireFirstHandleEvt(false);

    if (this.type === 'Range') {
      this.wireSecondHandleEvt(false);
    }

    this.setValue();

    if (this.tooltip.isVisible) {
      this.renderTooltip();
      this.wireMaterialTooltipEvent(false);
    }

    this.setBarColor();

    if (args !== 'tooltip') {
      this.updateConfig();
    }
  };

  Slider.prototype.changeRtl = function () {
    if (!this.enableRtl && this.type === 'Range') {
      this.value = [this.handleVal2, this.handleVal1];
    }

    this.updateConfig();

    if (this.tooltip.isVisible) {
      this.tooltipObj.refresh(this.firstHandle);
    }

    if (this.showButtons) {
      var enabledRTL = this.enableRtl && this.orientation !== 'Vertical';
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(enabledRTL ? this.secondBtn : this.firstBtn, {
        'aria-label': 'Decrease',
        title: 'Decrease'
      });
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(enabledRTL ? this.firstBtn : this.secondBtn, {
        'aria-label': 'Increase',
        title: 'Increase'
      });
    }
  };

  Slider.prototype.changeOrientation = function () {
    this.changeSliderType(this.type, 'null');
  };

  Slider.prototype.updateConfig = function () {
    this.setEnableRTL();
    this.setValue();

    if (this.tooltip.isVisible) {
      this.refreshTooltip(this.tooltipTarget);
    }

    if (this.ticks.placement !== 'None') {
      if (this.ul) {
        this.removeElement(this.ul);
        this.ul = undefined;
        this.renderScale();
      }
    }

    this.limitsPropertyChange();
  };

  Slider.prototype.limitsPropertyChange = function () {
    if (this.limits.enabled) {
      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.limitBarFirst) && this.type !== 'Range') {
        this.createLimitBar();
      }

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.limitBarFirst) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.limitBarSecond) && this.type === 'Range') {
        this.createLimitBar();
      }

      this.setLimitBar();
      this.setValue();
    } else {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.limitBarFirst)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.limitBarFirst);
      }

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.limitBarSecond)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.limitBarSecond);
      }
    }
  };
  /**
   * Get the properties to be maintained in the persisted state.
   *
   * @private
   */


  Slider.prototype.getPersistData = function () {
    var keyEntity = ['value'];
    return this.addOnPersist(keyEntity);
  };
  /**
   * Removes the component from the DOM and detaches all its related event handlers.
   * Also it removes the attributes and classes.
   *
   * @method destroy
   * @return {void}
   */


  Slider.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this.unwireEvents();
    window.removeEventListener('resize', this.onresize);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.sliderContainer], [classNames.sliderDisabled]);
    this.firstHandle.removeAttribute('aria-orientation');

    if (this.type === 'Range') {
      this.secondHandle.removeAttribute('aria-orientation');
    }

    this.sliderContainer.parentNode.insertBefore(this.element, this.sliderContainer);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.sliderContainer);

    if (this.tooltip.isVisible) {
      this.tooltipObj.destroy();
    }

    this.element.innerHTML = '';
    this.hiddenInput = null;
    this.sliderContainer = null;
    this.sliderTrack = null;
    this.rangeBar = null;
    this.firstHandle = null;
    this.secondHandle = null;
    this.tickElementCollection = null;
    this.ul = null;
    this.firstBtn = null;
    this.secondBtn = null;
    this.materialHandle = null;
    this.tooltipObj = null;
    this.tooltipTarget = null;
    this.limitBarFirst = null;
    this.limitBarSecond = null;
    this.firstChild = null;
    this.lastChild = null;
    this.tooltipElement = null;
  };
  /**
   * Calls internally if any of the property value is changed.
   *
   * @private
   */
  // tslint:disable-next-line


  Slider.prototype.onPropertyChanged = function (newProp, oldProp) {
    var _this = this;

    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'cssClass':
          this.setCSSClass(oldProp.cssClass);
          break;

        case 'value':
          if (newProp && oldProp) {
            var value = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newProp.value) ? this.type === 'Range' ? [this.min, this.max] : this.min : newProp.value;
            this.setProperties({
              'value': value
            }, true);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldProp.value) && oldProp.value.toString() !== value.toString()) {
              this.setValue();
              this.refreshTooltip(this.tooltipTarget);

              if (this.type === 'Range') {
                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newProp.value) || oldProp.value[1] === value[1]) {
                  this.activeHandle = 1;
                } else {
                  this.activeHandle = 2;
                }
              }
            }
          }

          break;

        case 'min':
        case 'step':
        case 'max':
          this.setMinMaxValue();
          break;

        case 'tooltip':
          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newProp.tooltip) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldProp.tooltip)) {
            this.setTooltip(prop);

            if (!this.showButtons) {
              this.wireEvents();
            }
          }

          break;

        case 'type':
          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldProp) && Object.keys(oldProp).length && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldProp.type)) {
            this.changeSliderType(oldProp.type, prop);
            this.setZindex();
          }

          break;

        case 'enableRtl':
          if (oldProp.enableRtl !== newProp.enableRtl && this.orientation !== 'Vertical') {
            this.rtl = oldProp.enableRtl;
            this.changeRtl();
          }

          break;

        case 'limits':
          this.limitsPropertyChange();
          break;

        case 'orientation':
          this.changeOrientation();
          break;

        case 'ticks':
          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.sliderContainer.querySelector('.' + classNames.scale))) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.ul);
            Array.prototype.forEach.call(this.sliderContainer.classList, function (className) {
              if (className.match(/e-scale-/)) {
                _this.sliderContainer.classList.remove(className);
              }
            });
          }

          if (this.ticks.placement !== 'None') {
            this.renderScale();
            this.setZindex();
          }

          break;

        case 'locale':
          if (this.showButtons) {
            this.buttonTitle();
          }

          break;

        case 'showButtons':
          if (newProp.showButtons) {
            this.setButtons();
            this.reposition();

            if (this.enabled && !this.readonly) {
              this.wireButtonEvt(false);
            }
          } else {
            if (this.firstBtn && this.secondBtn) {
              this.sliderContainer.removeChild(this.firstBtn);
              this.sliderContainer.removeChild(this.secondBtn);
              this.sliderContainer.classList.remove(classNames.sliderButtonClass);
              this.firstBtn = undefined;
              this.secondBtn = undefined;
              this.reposition();
            }
          }

          break;

        case 'enabled':
          this.setEnabled();
          break;

        case 'readonly':
          this.setReadOnly();
          break;

        case 'customValues':
          this.setValue();
          this.reposition();
          break;

        case 'colorRange':
          this.reposition();
          break;

        case 'width':
          this.setElementWidth(newProp.width);
          this.setMinMaxValue();

          if (this.limits) {
            this.limitsPropertyChange();
          }

          break;
      }
    }
  };

  Slider.prototype.setReadOnly = function () {
    if (this.readonly) {
      this.unwireEvents();
      this.sliderContainer.classList.add(classNames.readonly);
    } else {
      this.wireEvents();
      this.sliderContainer.classList.remove(classNames.readonly);
    }
  };

  Slider.prototype.setMinMaxValue = function () {
    var _this = this;

    this.setValue();
    this.refreshTooltip(this.tooltipTarget);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.sliderContainer.querySelector('.' + classNames.scale))) {
      if (this.ul) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.ul);
        Array.prototype.forEach.call(this.sliderContainer.classList, function (className) {
          if (className.match(/e-scale-/)) {
            _this.sliderContainer.classList.remove(className);
          }
        });
      }
    }

    if (this.ticks.placement !== 'None') {
      this.renderScale();
      this.setZindex();
    }
  };

  Slider.prototype.setZindex = function () {
    this.zIndex = 6;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ticks) && this.ticks.placement !== 'None' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ul) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element)) {
      this.ul.style.zIndex = this.zIndex + -7 + '';
      this.element.style.zIndex = this.zIndex + 2 + '';
    }

    if (!this.isMaterial && !this.isMaterial3 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ticks) && this.ticks.placement === 'Both') {
      this.element.style.zIndex = this.zIndex + 2 + '';
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.firstHandle)) this.firstHandle.style.zIndex = this.zIndex + 3 + '';

    if (this.type === 'Range' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.secondHandle)) {
      this.secondHandle.style.zIndex = this.zIndex + 4 + '';
    }
  };

  Slider.prototype.setTooltip = function (args) {
    this.changeSliderType(this.type, args);
  };

  Slider.prototype.setBarColor = function () {
    var trackPosition;
    var trackClassName;
    var child = this.sliderTrack.lastElementChild;

    while (child) {
      this.sliderTrack.removeChild(child);
      child = this.sliderTrack.lastElementChild;
    }

    for (var i = 0; i < this.colorRange.length; i++) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.colorRange[i].start) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.colorRange[i].end)) {
        if (this.colorRange[i].end > this.colorRange[i].start) {
          if (this.colorRange[i].start < this.min) {
            this.colorRange[i].start = this.min;
          }

          if (this.colorRange[i].end > this.max) {
            this.colorRange[i].end = this.max;
          }

          var startingPosition = this.checkHandlePosition(this.colorRange[i].start);
          var endPosition = this.checkHandlePosition(this.colorRange[i].end);
          var trackContainer = this.createElement('div');
          trackContainer.style.backgroundColor = this.colorRange[i].color;
          trackContainer.style.border = '1px solid ' + this.colorRange[i].color;

          if (this.orientation === 'Horizontal') {
            trackClassName = classNames.sliderHorizantalColor;

            if (this.enableRtl) {
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues)) {
                trackPosition = this.checkHandlePosition(this.max) - this.checkHandlePosition(this.colorRange[i].end);
              } else {
                trackPosition = this.checkHandlePosition(this.customValues.length - this.colorRange[i].end - 1);
              }
            } else {
              trackPosition = this.checkHandlePosition(this.colorRange[i].start);
            }

            trackContainer.style.width = endPosition - startingPosition + 'px';
            trackContainer.style.left = trackPosition + 'px';
          } else {
            trackClassName = classNames.sliderVerticalColor;
            trackPosition = this.checkHandlePosition(this.colorRange[i].start);
            trackContainer.style.height = endPosition - startingPosition + 'px';
            trackContainer.style.bottom = trackPosition + 'px';
          }

          trackContainer.classList.add(trackClassName);
          this.sliderTrack.appendChild(trackContainer);
        }
      }
    }
  };
  /**
   * Gets the component name
   *
   * @private
   */


  Slider.prototype.getModuleName = function () {
    return 'slider';
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Slider.prototype, "value", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Slider.prototype, "customValues", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(1)], Slider.prototype, "step", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Slider.prototype, "width", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], Slider.prototype, "min", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(100)], Slider.prototype, "max", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Slider.prototype, "readonly", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Default')], Slider.prototype, "type", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([{}], ColorRangeData)], Slider.prototype, "colorRange", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, TicksData)], Slider.prototype, "ticks", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, LimitData)], Slider.prototype, "limits", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Slider.prototype, "enabled", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, TooltipData)], Slider.prototype, "tooltip", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Slider.prototype, "showButtons", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Slider.prototype, "enableAnimation", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Horizontal')], Slider.prototype, "orientation", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Slider.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Slider.prototype, "enableHtmlSanitizer", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Slider.prototype, "created", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Slider.prototype, "change", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Slider.prototype, "changed", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Slider.prototype, "renderingTicks", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Slider.prototype, "renderedTicks", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Slider.prototype, "tooltipChange", void 0);

  Slider = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Slider);
  return Slider;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/textbox/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/textbox/index.js ***!
  \******************************************************************/
/*! exports provided: TextBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _textbox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./textbox */ "./node_modules/@syncfusion/ej2-inputs/src/textbox/textbox.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TextBox", function() { return _textbox__WEBPACK_IMPORTED_MODULE_0__["TextBox"]; });

/**
 * Uploader modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/textbox/textbox.js":
/*!********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/textbox/textbox.js ***!
  \********************************************************************/
/*! exports provided: TextBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextBox", function() { return TextBox; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _input_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../input/input */ "./node_modules/@syncfusion/ej2-inputs/src/input/input.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};





var HIDE_CLEAR = 'e-clear-icon-hide';
var TEXTBOX_FOCUS = 'e-input-focus';
var containerAttr = ['title', 'style', 'class'];
/**
 * Represents the TextBox component that allows the user to enter the values based on it's type.
 * ```html
 * <input name='images' id='textbox'/>
 * ```
 * ```typescript
 * <script>
 *   var textboxObj = new TextBox();
 *   textboxObj.appendTo('#textbox');
 * </script>
 * ```
 */

var TextBox =
/** @class */
function (_super) {
  __extends(TextBox, _super);
  /**
   *
   * @param {TextBoxModel} options - Specifies the TextBox model.
   * @param {string | HTMLInputElement | HTMLTextAreaElement} element - Specifies the element to render as component.
   * @private
   */


  function TextBox(options, element) {
    var _this = _super.call(this, options, element) || this;

    _this.previousValue = null;
    _this.isAngular = false;
    _this.isHiddenInput = false;
    _this.isForm = false;
    _this.inputPreviousValue = null;
    _this.isVue = false;
    _this.textboxOptions = options;
    return _this;
  }
  /**
   * Calls internally if any of the property value is changed.
   *
   * @param {TextBoxModel} newProp - Returns the dynamic property value of the component.
   * @param {TextBoxModel} oldProp - Returns the previous property value of the component.
   * @returns {void}
   * @private
   */


  TextBox.prototype.onPropertyChanged = function (newProp, oldProp) {
    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'floatLabelType':
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].removeFloating(this.textboxWrapper);
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].addFloating(this.respectiveElement, this.floatLabelType, this.placeholder);
          break;

        case 'enabled':
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);
          this.bindClearEvent();
          break;

        case 'width':
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setWidth(newProp.width, this.textboxWrapper.container);
          break;

        case 'value':
          {
            var prevOnChange = this.isProtectedOnChange;
            this.isProtectedOnChange = true;

            if (!this.isBlank(this.value)) {
              this.value = this.value.toString();
            }

            this.isProtectedOnChange = prevOnChange;
            _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setValue(this.value, this.respectiveElement, this.floatLabelType, this.showClearButton);

            if (this.isHiddenInput) {
              this.element.value = this.respectiveElement.value;
            }

            this.inputPreviousValue = this.respectiveElement.value;
            /* istanbul ignore next */

            if ((this.isAngular || this.isVue) && this.preventChange === true) {
              this.previousValue = this.isAngular ? this.value : this.previousValue;
              this.preventChange = false;
            } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.isAngular) || !this.isAngular || this.isAngular && !this.preventChange || this.isAngular && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.preventChange)) {
              this.raiseChangeEvent();
            }
          }
          break;

        case 'htmlAttributes':
          {
            this.updateHTMLAttrToElement();
            this.updateHTMLAttrToWrapper();
            this.checkAttributes(true);
            this.multiline && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textarea) ? _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].validateInputType(this.textboxWrapper.container, this.textarea) : _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].validateInputType(this.textboxWrapper.container, this.element);
          }
          break;

        case 'readonly':
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setReadonly(this.readonly, this.respectiveElement);
          break;

        case 'type':
          if (this.respectiveElement.tagName !== 'TEXTAREA') {
            this.respectiveElement.setAttribute('type', this.type);
            _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].validateInputType(this.textboxWrapper.container, this.element);
            this.raiseChangeEvent();
          }

          break;

        case 'showClearButton':
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setClearButton(this.showClearButton, this.respectiveElement, this.textboxWrapper);
          this.bindClearEvent();
          break;

        case 'enableRtl':
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setEnableRtl(this.enableRtl, [this.textboxWrapper.container]);
          break;

        case 'placeholder':
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setPlaceholder(this.placeholder, this.respectiveElement);
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].calculateWidth(this.respectiveElement, this.textboxWrapper.container);
          break;

        case 'autocomplete':
          if (this.autocomplete !== 'on' && this.autocomplete !== '') {
            this.respectiveElement.autocomplete = this.autocomplete;
          } else {
            this.removeAttributes(['autocomplete']);
          }

          break;

        case 'cssClass':
          this.updateCssClass(newProp.cssClass, oldProp.cssClass);
          break;

        case 'locale':
          this.globalize = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Internationalization"](this.locale);
          this.l10n.setLocale(this.locale);
          this.setProperties({
            placeholder: this.l10n.getConstant('placeholder')
          }, true);
          _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setPlaceholder(this.placeholder, this.respectiveElement);
          break;
      }
    }
  };
  /**
   * Gets the component name
   *
   * @returns {string} Returns the component name.
   * @private
   */


  TextBox.prototype.getModuleName = function () {
    return 'textbox';
  };

  TextBox.prototype.isBlank = function (str) {
    return !str || /^\s*$/.test(str);
  };

  TextBox.prototype.preRender = function () {
    this.cloneElement = this.element.cloneNode(true);
    this.formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.formElement)) {
      this.isForm = true;
    }
    /* istanbul ignore next */


    if (this.element.tagName === 'EJS-TEXTBOX') {
      var ejInstance = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('ej2_instances', this.element);
      var inputElement = this.multiline ? this.createElement('textarea') : this.createElement('input');
      var index = 0;

      for (index; index < this.element.attributes.length; index++) {
        var attributeName = this.element.attributes[index].nodeName;

        if (attributeName !== 'id' && attributeName !== 'class') {
          inputElement.setAttribute(attributeName, this.element.attributes[index].nodeValue);
          inputElement.innerHTML = this.element.innerHTML;

          if (attributeName === 'name') {
            this.element.removeAttribute('name');
          }
        } else if (attributeName === 'class') {
          inputElement.setAttribute(attributeName, this.element.className.split(' ').filter(function (item) {
            return item.indexOf('ng-') !== 0;
          }).join(' '));
        }
      }

      this.element.appendChild(inputElement);
      this.element = inputElement;
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('ej2_instances', ejInstance, this.element);
    }

    this.updateHTMLAttrToElement();
    this.checkAttributes(false);

    if ((Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textboxOptions) || this.textboxOptions['value'] === undefined) && this.element.value !== '') {
      this.setProperties({
        value: this.element.value
      }, true);
    }

    if (this.element.tagName !== 'TEXTAREA') {
      this.element.setAttribute('type', this.type);
    }

    if (this.type === 'text') {
      this.element.setAttribute('role', 'textbox');
    }

    this.globalize = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Internationalization"](this.locale);
    var localeText = {
      placeholder: this.placeholder
    };
    this.l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"]('textbox', localeText, this.locale);

    if (this.l10n.getConstant('placeholder') !== '') {
      this.setProperties({
        placeholder: this.placeholder || this.l10n.getConstant('placeholder')
      }, true);
    }

    if (!this.element.hasAttribute('id')) {
      this.element.setAttribute('id', Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('textbox'));
    }

    if (!this.element.hasAttribute('name')) {
      this.element.setAttribute('name', this.element.getAttribute('id'));
    }

    if (this.element.tagName === 'INPUT' && this.multiline) {
      this.isHiddenInput = true;
      this.textarea = this.createElement('textarea');
      this.element.parentNode.insertBefore(this.textarea, this.element);
      this.element.setAttribute('type', 'hidden');
      this.textarea.setAttribute('name', this.element.getAttribute('name'));
      this.element.removeAttribute('name');
      this.textarea.setAttribute('role', this.element.getAttribute('role'));
      this.element.removeAttribute('role');
      this.textarea.setAttribute('id', Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('textarea'));
      var apiAttributes = ['placeholder', 'disabled', 'value', 'readonly', 'type', 'autocomplete'];

      for (var index = 0; index < this.element.attributes.length; index++) {
        var attributeName = this.element.attributes[index].nodeName;

        if (this.element.hasAttribute(attributeName) && containerAttr.indexOf(attributeName) < 0 && !(attributeName === 'id' || attributeName === 'type' || attributeName === 'e-mappinguid')) {
          // e-mappinguid attribute is handled for Grid component.
          this.textarea.setAttribute(attributeName, this.element.attributes[index].nodeValue);

          if (apiAttributes.indexOf(attributeName) < 0) {
            this.element.removeAttribute(attributeName);
            index--;
          }
        }
      }
    }
  };

  TextBox.prototype.checkAttributes = function (isDynamic) {
    var attrs = isDynamic ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ['placeholder', 'disabled', 'value', 'readonly', 'type', 'autocomplete'];

    for (var _i = 0, attrs_1 = attrs; _i < attrs_1.length; _i++) {
      var key = attrs_1[_i];

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.getAttribute(key))) {
        switch (key) {
          case 'disabled':
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textboxOptions) || this.textboxOptions['enabled'] === undefined || isDynamic) {
              var enabled = this.element.getAttribute(key) === 'disabled' || this.element.getAttribute(key) === '' || this.element.getAttribute(key) === 'true' ? false : true;
              this.setProperties({
                enabled: enabled
              }, !isDynamic);
            }

            break;

          case 'readonly':
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textboxOptions) || this.textboxOptions['readonly'] === undefined || isDynamic) {
              var readonly = this.element.getAttribute(key) === 'readonly' || this.element.getAttribute(key) === '' || this.element.getAttribute(key) === 'true' ? true : false;
              this.setProperties({
                readonly: readonly
              }, !isDynamic);
            }

            break;

          case 'placeholder':
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textboxOptions) || this.textboxOptions['placeholder'] === undefined || isDynamic) {
              this.setProperties({
                placeholder: this.element.placeholder
              }, !isDynamic);
            }

            break;

          case 'autocomplete':
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textboxOptions) || this.textboxOptions['autocomplete'] === undefined || isDynamic) {
              var autoCompleteTxt = this.element.autocomplete === 'off' ? 'off' : 'on';
              this.setProperties({
                autocomplete: autoCompleteTxt
              }, !isDynamic);
            }

            break;

          case 'value':
            if ((Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textboxOptions) || this.textboxOptions['value'] === undefined || isDynamic) && this.element.value !== '') {
              this.setProperties({
                value: this.element.value
              }, !isDynamic);
            }

            break;

          case 'type':
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textboxOptions) || this.textboxOptions['type'] === undefined || isDynamic) {
              this.setProperties({
                type: this.element.type
              }, !isDynamic);
            }

            break;
        }
      }
    }
  };
  /**
   * To Initialize the control rendering
   *
   * @returns {void}
   * @private
   */


  TextBox.prototype.render = function () {
    var updatedCssClassValue = this.cssClass;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cssClass) && this.cssClass !== '') {
      updatedCssClassValue = this.getInputValidClassList(this.cssClass);
    }

    this.respectiveElement = this.isHiddenInput ? this.textarea : this.element;
    this.textboxWrapper = _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].createInput({
      element: this.respectiveElement,
      floatLabelType: this.floatLabelType,
      properties: {
        enabled: this.enabled,
        enableRtl: this.enableRtl,
        cssClass: updatedCssClassValue,
        readonly: this.readonly,
        placeholder: this.placeholder,
        showClearButton: this.showClearButton
      }
    });
    this.updateHTMLAttrToWrapper();

    if (this.isHiddenInput) {
      this.respectiveElement.parentNode.insertBefore(this.element, this.respectiveElement);
    }

    this.wireEvents();

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
      _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setValue(this.value, this.respectiveElement, this.floatLabelType, this.showClearButton);

      if (this.isHiddenInput) {
        this.element.value = this.respectiveElement.value;
      }
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
      this.initialValue = this.value;
      this.setInitialValue();
    }

    if (this.autocomplete !== 'on' && this.autocomplete !== '') {
      this.respectiveElement.autocomplete = this.autocomplete;
    } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textboxOptions) && this.textboxOptions['autocomplete'] !== undefined) {
      this.removeAttributes(['autocomplete']);
    }

    this.previousValue = this.value;
    this.inputPreviousValue = this.value;
    this.respectiveElement.defaultValue = this.respectiveElement.value;
    _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setWidth(this.width, this.textboxWrapper.container);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'fieldset')) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'fieldset').disabled) {
      this.enabled = false;
    }

    this.renderComplete();
  };

  TextBox.prototype.updateHTMLAttrToWrapper = function () {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes)) {
      for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
        var key = _a[_i];

        if (containerAttr.indexOf(key) > -1) {
          if (key === 'class') {
            var updatedClassValues = this.getInputValidClassList(this.htmlAttributes["" + key]);

            if (updatedClassValues !== '') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.textboxWrapper.container], updatedClassValues.split(' '));
            }
          } else if (key === 'style') {
            var setStyle = this.textboxWrapper.container.getAttribute(key);
            setStyle = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(setStyle) ? setStyle + this.htmlAttributes["" + key] : this.htmlAttributes["" + key];
            this.textboxWrapper.container.setAttribute(key, setStyle);
          } else {
            this.textboxWrapper.container.setAttribute(key, this.htmlAttributes["" + key]);
          }
        }
      }
    }
  };

  TextBox.prototype.updateHTMLAttrToElement = function () {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes)) {
      for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
        var key = _a[_i];

        if (containerAttr.indexOf(key) < 0) {
          this.multiline && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textarea) ? this.textarea.setAttribute(key, this.htmlAttributes["" + key]) : this.element.setAttribute(key, this.htmlAttributes["" + key]);
        }
      }
    }
  };

  TextBox.prototype.updateCssClass = function (newClass, oldClass) {
    _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setCssClass(this.getInputValidClassList(newClass), [this.textboxWrapper.container], this.getInputValidClassList(oldClass));
  };

  TextBox.prototype.getInputValidClassList = function (inputClassName) {
    var result = inputClassName;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(inputClassName) && inputClassName !== '') {
      result = inputClassName.replace(/\s+/g, ' ').trim();
    }

    return result;
  };

  TextBox.prototype.setInitialValue = function () {
    if (!this.isAngular) {
      this.respectiveElement.setAttribute('value', this.initialValue);
    }
  };

  TextBox.prototype.wireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.respectiveElement, 'focus', this.focusHandler, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.respectiveElement, 'blur', this.focusOutHandler, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.respectiveElement, 'keydown', this.keydownHandler, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.respectiveElement, 'input', this.inputHandler, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.respectiveElement, 'change', this.changeHandler, this);

    if (this.isForm) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.formElement, 'reset', this.resetForm, this);
    }

    this.bindClearEvent();

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textboxWrapper.container.querySelector('.e-float-text')) && this.floatLabelType === 'Auto' && this.textboxWrapper.container.classList.contains('e-autofill') && this.textboxWrapper.container.classList.contains('e-outline')) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.textboxWrapper.container.querySelector('.e-float-text'), 'animationstart', this.animationHandler, this);
    }
  };

  TextBox.prototype.animationHandler = function () {
    this.textboxWrapper.container.classList.add('e-valid-input');
    var label = this.textboxWrapper.container.querySelector('.e-float-text');

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(label)) {
      label.classList.add('e-label-top');

      if (label.classList.contains('e-label-bottom')) {
        label.classList.remove('e-label-bottom');
      }
    }
  };

  TextBox.prototype.resetValue = function (value) {
    var prevOnChange = this.isProtectedOnChange;
    this.isProtectedOnChange = true;
    this.value = value;
    this.isProtectedOnChange = prevOnChange;
  };

  TextBox.prototype.resetForm = function () {
    if (this.isAngular) {
      this.resetValue('');
    } else {
      this.resetValue(this.initialValue);
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textboxWrapper)) {
      var label = this.textboxWrapper.container.querySelector('.e-float-text');

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(label) && this.floatLabelType !== 'Always') {
        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.initialValue) || this.initialValue === '') {
          label.classList.add('e-label-bottom');
          label.classList.remove('e-label-top');
        } else if (this.initialValue !== '') {
          label.classList.add('e-label-top');
          label.classList.remove('e-label-bottom');
        }
      }
    }
  };

  TextBox.prototype.focusHandler = function (args) {
    var eventArgs = {
      container: this.textboxWrapper.container,
      event: args,
      value: this.value
    };
    this.trigger('focus', eventArgs);
  };

  TextBox.prototype.focusOutHandler = function (args) {
    if (!(this.previousValue === null && this.value === null && this.respectiveElement.value === '') && this.previousValue !== this.value) {
      this.raiseChangeEvent(args, true);
    }

    var eventArgs = {
      container: this.textboxWrapper.container,
      event: args,
      value: this.value
    };
    this.trigger('blur', eventArgs);
  };

  TextBox.prototype.keydownHandler = function (args) {
    if ((args.keyCode === 13 || args.keyCode === 9) && !((this.previousValue === null || this.previousValue === "") && (this.value === null || this.value === "") && this.respectiveElement.value === "")) {
      this.setProperties({
        value: this.respectiveElement.value
      }, true);
    }
  };

  TextBox.prototype.inputHandler = function (args) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-this-alias
    var textboxObj = this;
    var eventArgs = {
      event: args,
      value: this.respectiveElement.value,
      previousValue: this.inputPreviousValue,
      container: this.textboxWrapper.container
    };
    this.inputPreviousValue = this.respectiveElement.value;
    /* istanbul ignore next */

    if (this.isAngular) {
      textboxObj.localChange({
        value: this.respectiveElement.value
      });
      this.preventChange = true;
    }

    if (this.isVue) {
      this.preventChange = true;
    }

    this.trigger('input', eventArgs);
    args.stopPropagation();
  };

  TextBox.prototype.changeHandler = function (args) {
    this.setProperties({
      value: this.respectiveElement.value
    }, true);

    if (this.previousValue != this.value) {
      this.raiseChangeEvent(args, true);
    }

    args.stopPropagation();
  };

  TextBox.prototype.raiseChangeEvent = function (event, interaction) {
    var eventArgs = {
      event: event,
      value: this.value,
      previousValue: this.previousValue,
      container: this.textboxWrapper.container,
      isInteraction: interaction ? interaction : false,
      isInteracted: interaction ? interaction : false
    };
    this.preventChange = false;
    this.trigger('change', eventArgs);
    this.previousValue = this.value; //EJ2CORE-738:For this task we update the textarea value to the input when input tag with multiline is present

    if (this.element.tagName === 'INPUT' && this.multiline && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'mozilla') {
      this.element.value = this.respectiveElement.value;
    }
  };

  TextBox.prototype.bindClearEvent = function () {
    if (this.showClearButton) {
      if (this.enabled) {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.textboxWrapper.clearButton, 'mousedown touchstart', this.resetInputHandler, this);
      } else {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.textboxWrapper.clearButton, 'mousedown touchstart', this.resetInputHandler);
      }
    }
  };

  TextBox.prototype.resetInputHandler = function (event) {
    event.preventDefault();

    if (!this.textboxWrapper.clearButton.classList.contains(HIDE_CLEAR) || this.textboxWrapper.container.classList.contains('e-static-clear')) {
      _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setValue('', this.respectiveElement, this.floatLabelType, this.showClearButton);

      if (this.isHiddenInput) {
        this.element.value = this.respectiveElement.value;
      }

      this.setProperties({
        value: this.respectiveElement.value
      }, true);
      var eventArgs = {
        event: event,
        value: this.respectiveElement.value,
        previousValue: this.inputPreviousValue,
        container: this.textboxWrapper.container
      };
      this.trigger('input', eventArgs);
      this.inputPreviousValue = this.respectiveElement.value;
      this.raiseChangeEvent(event, true);

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form')) {
        var element = this.element;
        var keyupEvent = document.createEvent('KeyboardEvent');
        keyupEvent.initEvent('keyup', false, true);
        element.dispatchEvent(keyupEvent);
      }
    }
  };

  TextBox.prototype.unWireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.respectiveElement, 'focus', this.focusHandler);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.respectiveElement, 'blur', this.focusOutHandler);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.respectiveElement, 'keydown', this.keydownHandler);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.respectiveElement, 'input', this.inputHandler);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.respectiveElement, 'change', this.changeHandler);

    if (this.isForm) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.formElement, 'reset', this.resetForm);
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textboxWrapper.container.querySelector('.e-float-text')) && this.floatLabelType === 'Auto' && this.textboxWrapper.container.classList.contains('e-outline') && this.textboxWrapper.container.classList.contains('e-autofill')) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.textboxWrapper.container.querySelector('.e-float-text'), 'animationstart', this.animationHandler);
    }
  };
  /**
   * Removes the component from the DOM and detaches all its related event handlers.
   * Also, it maintains the initial TextBox element from the DOM.
   *
   * @method destroy
   * @returns {void}
   */


  TextBox.prototype.destroy = function () {
    this.unWireEvents();

    if (this.element.tagName === 'INPUT' && this.multiline) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.textboxWrapper.container.getElementsByTagName('textarea')[0]);
      this.respectiveElement = this.element;
      this.element.removeAttribute('type');
    }

    this.respectiveElement.value = this.respectiveElement.defaultValue;
    this.respectiveElement.classList.remove('e-input');
    this.removeAttributes(['aria-disabled', 'aria-readonly', 'aria-labelledby']);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textboxWrapper)) {
      this.textboxWrapper.container.insertAdjacentElement('afterend', this.respectiveElement);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.textboxWrapper.container);
    }

    this.textboxWrapper = null;
    _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].destroy();

    _super.prototype.destroy.call(this);
  };
  /**
   * Adding the icons to the TextBox component.
   *
   * @param { string } position - Specify the icon placement on the TextBox. Possible values are append and prepend.
   * @param { string | string[] } icons - Icon classes which are need to add to the span element which is going to created.
   * Span element acts as icon or button element for TextBox.
   * @returns {void}
   */


  TextBox.prototype.addIcon = function (position, icons) {
    _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].addIcon(position, icons, this.textboxWrapper.container, this.respectiveElement, this.createElement);
  };
  /* eslint-disable valid-jsdoc, jsdoc/require-returns */

  /**
   * Gets the properties to be maintained in the persisted state.
   *
   */


  TextBox.prototype.getPersistData = function () {
    var keyEntity = ['value'];
    return this.addOnPersist(keyEntity);
  };
  /* eslint-enable valid-jsdoc, jsdoc/require-returns */

  /**
   * Adding the multiple attributes as key-value pair to the TextBox element.
   *
   * @param {string} attributes - Specifies the attributes to be add to TextBox element.
   * @returns {void}
   */


  TextBox.prototype.addAttributes = function (attributes) {
    for (var _i = 0, _a = Object.keys(attributes); _i < _a.length; _i++) {
      var key = _a[_i];

      if (key === 'disabled') {
        this.setProperties({
          enabled: false
        }, true);
        _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);
      } else if (key === 'readonly') {
        this.setProperties({
          readonly: true
        }, true);
        _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setReadonly(this.readonly, this.respectiveElement);
      } else if (key === 'class') {
        this.respectiveElement.classList.add(attributes["" + key]);
      } else if (key === 'placeholder') {
        this.setProperties({
          placeholder: attributes["" + key]
        }, true);
        _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setPlaceholder(this.placeholder, this.respectiveElement);
      } else if (key === 'rows' && this.respectiveElement.tagName === 'TEXTAREA') {
        this.respectiveElement.setAttribute(key, attributes["" + key]);
      } else {
        this.respectiveElement.setAttribute(key, attributes["" + key]);
      }
    }
  };
  /**
   * Removing the multiple attributes as key-value pair to the TextBox element.
   *
   * @param { string[] } attributes - Specifies the attributes name to be removed from TextBox element.
   * @returns {void}
   */


  TextBox.prototype.removeAttributes = function (attributes) {
    for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {
      var key = attributes_1[_i];

      if (key === 'disabled') {
        this.setProperties({
          enabled: true
        }, true);
        _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);
      } else if (key === 'readonly') {
        this.setProperties({
          readonly: false
        }, true);
        _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setReadonly(this.readonly, this.respectiveElement);
      } else if (key === 'placeholder') {
        this.setProperties({
          placeholder: null
        }, true);
        _input_input__WEBPACK_IMPORTED_MODULE_1__["Input"].setPlaceholder(this.placeholder, this.respectiveElement);
      } else {
        this.respectiveElement.removeAttribute(key);
      }
    }
  };
  /**
   * Sets the focus to widget for interaction.
   *
   * @returns {void}
   */


  TextBox.prototype.focusIn = function () {
    if (document.activeElement !== this.respectiveElement && this.enabled) {
      this.respectiveElement.focus();

      if (this.textboxWrapper.container.classList.contains('e-input-group') || this.textboxWrapper.container.classList.contains('e-outline') || this.textboxWrapper.container.classList.contains('e-filled')) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.textboxWrapper.container], [TEXTBOX_FOCUS]);
      }
    }
  };
  /**
   * Remove the focus from widget, if the widget is in focus state.
   *
   * @returns {void}
   */


  TextBox.prototype.focusOut = function () {
    if (document.activeElement === this.respectiveElement && this.enabled) {
      this.respectiveElement.blur();

      if (this.textboxWrapper.container.classList.contains('e-input-group') || this.textboxWrapper.container.classList.contains('e-outline') || this.textboxWrapper.container.classList.contains('e-filled')) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.textboxWrapper.container], [TEXTBOX_FOCUS]);
      }
    }
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('text')], TextBox.prototype, "type", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TextBox.prototype, "readonly", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], TextBox.prototype, "value", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Never')], TextBox.prototype, "floatLabelType", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], TextBox.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], TextBox.prototype, "placeholder", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('on')], TextBox.prototype, "autocomplete", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({})], TextBox.prototype, "htmlAttributes", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TextBox.prototype, "multiline", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], TextBox.prototype, "enabled", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TextBox.prototype, "showClearButton", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TextBox.prototype, "enablePersistence", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], TextBox.prototype, "width", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TextBox.prototype, "created", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TextBox.prototype, "destroyed", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TextBox.prototype, "change", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TextBox.prototype, "blur", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TextBox.prototype, "focus", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TextBox.prototype, "input", void 0);

  TextBox = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], TextBox);
  return TextBox;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/uploader/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/uploader/index.js ***!
  \*******************************************************************/
/*! exports provided: FilesProp, ButtonsProps, AsyncSettings, Uploader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _uploader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./uploader */ "./node_modules/@syncfusion/ej2-inputs/src/uploader/uploader.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FilesProp", function() { return _uploader__WEBPACK_IMPORTED_MODULE_0__["FilesProp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtonsProps", function() { return _uploader__WEBPACK_IMPORTED_MODULE_0__["ButtonsProps"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AsyncSettings", function() { return _uploader__WEBPACK_IMPORTED_MODULE_0__["AsyncSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Uploader", function() { return _uploader__WEBPACK_IMPORTED_MODULE_0__["Uploader"]; });

/**
 * Uploader modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-inputs/src/uploader/uploader.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-inputs/src/uploader/uploader.js ***!
  \**********************************************************************/
/*! exports provided: FilesProp, ButtonsProps, AsyncSettings, Uploader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FilesProp", function() { return FilesProp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonsProps", function() { return ButtonsProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AsyncSettings", function() { return AsyncSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uploader", function() { return Uploader; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-popups */ "./node_modules/@syncfusion/ej2-popups/index.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/* eslint-disable @typescript-eslint/no-explicit-any */








var CONTROL_WRAPPER = 'e-upload e-control-wrapper';
var INPUT_WRAPPER = 'e-file-select';
var DROP_AREA = 'e-file-drop';
var DROP_WRAPPER = 'e-file-select-wrap';
var LIST_PARENT = 'e-upload-files';
var FILE = 'e-upload-file-list';
var STATUS = 'e-file-status';
var ACTION_BUTTONS = 'e-upload-actions';
var UPLOAD_BUTTONS = 'e-file-upload-btn e-css e-btn e-flat e-primary';
var CLEAR_BUTTONS = 'e-file-clear-btn e-css e-btn e-flat';
var FILE_NAME = 'e-file-name';
var FILE_TYPE = 'e-file-type';
var FILE_SIZE = 'e-file-size';
var REMOVE_ICON = 'e-file-remove-btn';
var DELETE_ICON = 'e-file-delete-btn';
var SPINNER_PANE = 'e-spinner-pane';
var ABORT_ICON = 'e-file-abort-btn';
var RETRY_ICON = 'e-file-reload-btn';
var DRAG_HOVER = 'e-upload-drag-hover';
var PROGRESS_WRAPPER = 'e-upload-progress-wrap';
var PROGRESSBAR = 'e-upload-progress-bar';
var PROGRESSBAR_TEXT = 'e-progress-bar-text';
var UPLOAD_INPROGRESS = 'e-upload-progress';
var UPLOAD_SUCCESS = 'e-upload-success';
var UPLOAD_FAILED = 'e-upload-fails';
var TEXT_CONTAINER = 'e-file-container';
var VALIDATION_FAILS = 'e-validation-fails';
var RTL = 'e-rtl';
var DISABLED = 'e-disabled';
var RTL_CONTAINER = 'e-rtl-container';
var ICON_FOCUSED = 'e-clear-icon-focus';
var PROGRESS_INNER_WRAPPER = 'e-progress-inner-wrap';
var PAUSE_UPLOAD = 'e-file-pause-btn';
var RESUME_UPLOAD = 'e-file-play-btn';
var RESTRICT_RETRY = 'e-restrict-retry';
var wrapperAttr = ['title', 'style', 'class'];
var FORM_UPLOAD = 'e-form-upload';
var HIDDEN_INPUT = 'e-hidden-file-input';
var INVALID_FILE = 'e-file-invalid';
var INFORMATION = 'e-file-information';

var FilesProp =
/** @class */
function (_super) {
  __extends(FilesProp, _super);

  function FilesProp() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], FilesProp.prototype, "name", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], FilesProp.prototype, "size", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], FilesProp.prototype, "type", void 0);

  return FilesProp;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);



var ButtonsProps =
/** @class */
function (_super) {
  __extends(ButtonsProps, _super);

  function ButtonsProps() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Browse...')], ButtonsProps.prototype, "browse", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Upload')], ButtonsProps.prototype, "upload", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Clear')], ButtonsProps.prototype, "clear", void 0);

  return ButtonsProps;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);



var AsyncSettings =
/** @class */
function (_super) {
  __extends(AsyncSettings, _super);

  function AsyncSettings() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], AsyncSettings.prototype, "saveUrl", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], AsyncSettings.prototype, "removeUrl", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], AsyncSettings.prototype, "chunkSize", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(3)], AsyncSettings.prototype, "retryCount", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(500)], AsyncSettings.prototype, "retryAfterDelay", void 0);

  return AsyncSettings;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * The uploader component allows to upload images, documents, and other files from local to server.
 * ```html
 * <input type='file' name='images[]' id='upload'/>
 * ```
 * ```typescript
 * <script>
 *   var uploadObj = new Uploader();
 *   uploadObj.appendTo('#upload');
 * </script>
 * ```
 */

var Uploader =
/** @class */
function (_super) {
  __extends(Uploader, _super);
  /**
   * Triggers when change the Uploader value.
   *
   * @param {UploaderModel} options - Specifies the Uploader model.
   * @param {string | HTMLInputElement} element - Specifies the element to render as component.
   * @private
   */


  function Uploader(options, element) {
    var _this = _super.call(this, options, element) || this;

    _this.initialAttr = {
      accept: null,
      multiple: false,
      disabled: false
    };
    _this.uploadedFilesData = [];
    _this.base64String = [];
    _this.isForm = false;
    _this.allTypes = false;
    _this.pausedData = [];
    _this.uploadMetaData = [];
    _this.tabIndex = '0';
    _this.btnTabIndex = '0';
    _this.disableKeyboardNavigation = false;
    _this.count = -1;
    _this.actionCompleteCount = 0;
    _this.flag = true;
    _this.selectedFiles = [];
    _this.uploaderName = 'UploadFiles';
    _this.fileStreams = [];
    _this.newFileRef = 0;
    _this.isFirstFileOnSelection = false;
    _this.dragCounter = 0;
    _this.isAngular = false;
    /**
     * Get the file item(li) which are shown in file list.
     *
     * @private
     */

    _this.fileList = [];
    /**
     * Get the data of files which are shown in file list.
     *
     * @private
     */

    _this.filesData = [];
    _this.uploaderOptions = options;
    return _this;
  }
  /**
   * Calls internally if any of the property value is changed.
   *
   * @param {UploaderModel} newProp - Returns the dynamic property value of the component.
   * @param {UploaderModel} oldProp - Returns the previous property value of the component.
   * @returns {void}
   * @private
   */


  Uploader.prototype.onPropertyChanged = function (newProp, oldProp) {
    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'allowedExtensions':
          this.setExtensions(this.allowedExtensions);
          this.clearAll();
          break;

        case 'enabled':
          this.setControlStatus();
          break;

        case 'multiple':
          this.setMultipleSelection();
          break;

        case 'enableRtl':
          this.setRTL();
          this.reRenderFileList();
          break;

        case 'buttons':
          this.buttons.browse = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.buttons.browse) ? '' : this.buttons.browse;
          this.buttons.clear = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.buttons.clear) ? '' : this.buttons.clear;
          this.buttons.upload = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.buttons.upload) ? '' : this.buttons.upload;
          this.renderButtonTemplates();
          break;

        case 'dropArea':
          this.unBindDropEvents();
          this.updateDropArea();
          break;

        case 'htmlAttributes':
          this.updateHTMLAttrToElement();
          this.updateHTMLAttrToWrapper();
          this.checkHTMLAttributes(true);
          break;

        case 'files':
          this.renderPreLoadFiles();
          break;

        case 'directoryUpload':
          this.updateDirectoryAttributes();
          break;

        case 'template':
          var ejInstance = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('ej2_instances', this.element);

          if (ejInstance[0].isReact) {
            this.reRenderFileList();
          } else {
            this.clearAll();
          }

          break;

        case 'minFileSize':
        case 'maxFileSize':
        case 'autoUpload':
          this.clearAll();
          break;

        case 'sequentialUpload':
          this.clearAll();
          break;

        case 'locale':
          this.l10n.setLocale(this.locale);
          this.setLocalizedTexts();
          this.preLocaleObj = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('currentLocale', this.l10n);
          break;

        case 'cssClass':
          this.setCSSClass(oldProp.cssClass);
          break;
      }
    }
  };

  Uploader.prototype.setLocalizedTexts = function () {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template)) {
      if (typeof this.buttons.browse === 'string') {
        this.browseButton.innerText = this.buttons.browse === 'Browse...' ? this.localizedTexts('Browse') : this.buttons.browse;
        this.browseButton.setAttribute('title', this.browseButton.innerText);

        if (this.uploadWrapper && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.uploadWrapper.querySelector('.' + DROP_AREA))) {
          this.uploadWrapper.querySelector('.' + DROP_AREA).innerHTML = this.localizedTexts('dropFilesHint');
        }
      }

      this.updateFileList();
    }
  };

  Uploader.prototype.getKeyValue = function (val) {
    var keyValue;

    for (var _i = 0, _a = Object.keys(this.preLocaleObj); _i < _a.length; _i++) {
      var key = _a[_i];

      if (this.preLocaleObj["" + key] === val) {
        keyValue = key;
      }
    }

    return keyValue;
  };

  Uploader.prototype.updateFileList = function () {
    var element;
    /* istanbul ignore next */

    if (this.fileList.length > 0 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.uploadWrapper.querySelector('.' + LIST_PARENT))) {
      for (var i = 0; i < this.fileList.length; i++) {
        element = this.fileList[i].querySelector('.e-file-status');
        element.innerHTML = this.localizedTexts(this.getKeyValue(this.filesData[i].status));
        this.filesData[i].status = this.localizedTexts(this.getKeyValue(this.filesData[i].status));

        if (this.fileList[i].classList.contains(UPLOAD_SUCCESS)) {
          this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('delete'));
        }

        if (this.fileList[i].querySelector('.e-file-play-btn')) {
          this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('resume'));
        }

        if (this.fileList[i].querySelector('.e-file-remove-btn')) {
          this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('remove'));
        }

        if (this.fileList[i].querySelector('.e-file-reload-btn')) {
          this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('retry'));
        }

        if (!this.autoUpload) {
          this.uploadButton.innerText = this.buttons.upload === 'Upload' ? this.localizedTexts('Upload') : this.buttons.upload;
          this.uploadButton.setAttribute('title', this.localizedTexts('Upload'));
          this.clearButton.innerText = this.buttons.clear === 'Clear' ? this.localizedTexts('Clear') : this.buttons.clear;
          this.clearButton.setAttribute('title', this.localizedTexts('Clear'));
        }
      }
    }
  };

  Uploader.prototype.reRenderFileList = function () {
    if (this.listParent) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.listParent);
      this.listParent = null;
      this.fileList = [];
      this.internalCreateFileList(this.filesData);

      if (this.actionButtons) {
        this.removeActionButtons();
        this.renderActionButtons();
        this.checkActionButtonStatus();
      }
    }
  };

  Uploader.prototype.preRender = function () {
    this.localeText = {
      Browse: 'Browse...',
      Clear: 'Clear',
      Upload: 'Upload',
      invalidFileName: 'File Name is not allowed',
      dropFilesHint: 'Or drop files here',
      invalidMaxFileSize: 'File size is too large',
      invalidMinFileSize: 'File size is too small',
      invalidFileType: 'File type is not allowed',
      uploadFailedMessage: 'File failed to upload',
      uploadSuccessMessage: 'File uploaded successfully',
      removedSuccessMessage: 'File removed successfully',
      removedFailedMessage: 'Unable to remove file',
      inProgress: 'Uploading',
      readyToUploadMessage: 'Ready to upload',
      abort: 'Abort',
      remove: 'Remove',
      cancel: 'Cancel',
      delete: 'Delete file',
      pauseUpload: 'File upload paused',
      pause: 'Pause',
      resume: 'Resume',
      retry: 'Retry',
      fileUploadCancel: 'File upload canceled',
      invalidFileSelection: 'Invalid files selected',
      totalFiles: 'Total files',
      size: 'Size'
    };
    this.l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"]('uploader', this.localeText, this.locale);
    this.preLocaleObj = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('currentLocale', this.l10n);
    this.formRendered();
    this.updateHTMLAttrToElement();
    this.checkHTMLAttributes(false);
    var ejInstance = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('ej2_instances', this.element);
    /* istanbul ignore next */

    if (this.element.tagName === 'EJS-UPLOADER') {
      var inputElement = this.createElement('input', {
        attrs: {
          type: 'file'
        }
      });
      var index = 0;

      for (index; index < this.element.attributes.length; index++) {
        if (this.element.attributes[index].nodeName !== 'id') {
          inputElement.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);
        } else if (this.element.attributes[index].nodeName === 'id') {
          inputElement.setAttribute(this.element.attributes[index].nodeName, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('uploader'));
        }

        inputElement.innerHTML = this.element.innerHTML;
      }

      if (!inputElement.hasAttribute('name')) {
        inputElement.setAttribute('name', 'UploadFiles');
      }

      this.element.appendChild(inputElement);
      this.element = inputElement;
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('ej2_instances', ejInstance, this.element);
    }
    /* istanbul ignore next */


    if (ejInstance[0].isPureReactComponent) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ejInstance[0].props.name)) {
        this.element.setAttribute('name', ejInstance[0].props.name);
      } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ejInstance[0].props.id) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ejInstance[0].props.name)) {
        this.element.setAttribute('name', ejInstance[0].props.id);
      } else {
        this.element.setAttribute('name', 'UploadFiles');
      }
    }

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.getAttribute('name'))) {
      this.element.setAttribute('name', this.element.getAttribute('id'));
    }

    if (!this.element.hasAttribute('type')) {
      this.element.setAttribute('type', 'file');
    }

    this.updateDirectoryAttributes();
    this.keyConfigs = {
      enter: 'enter'
    };

    if (this.element.hasAttribute('tabindex')) {
      this.tabIndex = this.element.getAttribute('tabindex');
    }

    this.browserName = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name;
    this.uploaderName = this.element.getAttribute('name');
  };

  Uploader.prototype.formRendered = function () {
    var parentEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(parentEle)) {
      for (; parentEle && parentEle !== document.documentElement; parentEle = parentEle.parentElement) {
        if (parentEle.tagName === 'FORM') {
          this.isForm = true;
          this.formElement = parentEle;
          parentEle.setAttribute('enctype', 'multipart/form-data');
          parentEle.setAttribute('encoding', 'multipart/form-data');
        }
      }
    }
  };

  Uploader.prototype.getPersistData = function () {
    return this.addOnPersist(['filesData']);
  };
  /**
   * Return the module name of the component.
   *
   * @returns {string} Returns the component name.
   */


  Uploader.prototype.getModuleName = function () {
    return 'uploader';
  };

  Uploader.prototype.updateDirectoryAttributes = function () {
    if (this.directoryUpload) {
      this.element.setAttribute('directory', 'true');
      this.element.setAttribute('webkitdirectory', 'true');
    } else {
      this.element.removeAttribute('directory');
      this.element.removeAttribute('webkitdirectory');
    }
  };
  /**
   * To Initialize the control rendering
   *
   * @private
   * @returns {void}
   */


  Uploader.prototype.render = function () {
    this.renderBrowseButton();
    this.initializeUpload();
    this.updateHTMLAttrToWrapper();
    this.wireEvents();
    this.setMultipleSelection();
    this.setExtensions(this.allowedExtensions);
    this.setRTL();
    this.renderPreLoadFiles();
    this.setControlStatus();
    this.setCSSClass();
  };

  Uploader.prototype.renderBrowseButton = function () {
    this.browseButton = this.createElement('button', {
      className: 'e-css e-btn',
      attrs: {
        'type': 'button'
      }
    });
    this.browseButton.setAttribute('tabindex', this.tabIndex);

    if (typeof this.buttons.browse === 'string') {
      this.browseButton.textContent = this.buttons.browse === 'Browse...' ? this.localizedTexts('Browse') : this.buttons.browse;
      this.browseButton.setAttribute('title', this.browseButton.innerText);
    } else {
      this.browseButton.appendChild(this.buttons.browse);
    }

    this.element.setAttribute('aria-label', 'Uploader');
  };

  Uploader.prototype.renderActionButtons = function () {
    this.element.setAttribute('tabindex', '-1');
    this.actionButtons = this.createElement('div', {
      className: ACTION_BUTTONS
    });
    this.uploadButton = this.createElement('button', {
      className: UPLOAD_BUTTONS,
      attrs: {
        'type': 'button',
        'tabindex': this.btnTabIndex
      }
    });
    this.clearButton = this.createElement('button', {
      className: CLEAR_BUTTONS,
      attrs: {
        'type': 'button',
        'tabindex': this.btnTabIndex
      }
    });
    this.actionButtons.appendChild(this.clearButton);
    this.actionButtons.appendChild(this.uploadButton);
    this.renderButtonTemplates();
    this.uploadWrapper.appendChild(this.actionButtons);
    this.browseButton.blur();

    if (!this.isPreloadFiles) {
      this.uploadButton.focus();
    }

    this.wireActionButtonEvents();
  };
  /* istanbul ignore next */


  Uploader.prototype.serverActionButtonsEventBind = function (element) {
    if (element && !this.isForm) {
      this.browseButton.blur();
      this.actionButtons = element;
      this.uploadButton = this.actionButtons.querySelector('.e-file-upload-btn');
      this.clearButton = this.actionButtons.querySelector('.e-file-clear-btn');
      this.uploadButton.focus();
      this.unwireActionButtonEvents();
      this.wireActionButtonEvents();
      this.checkActionButtonStatus();
    }
  };

  Uploader.prototype.wireActionButtonEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.uploadButton, 'click', this.uploadButtonClick, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.clearButton, 'click', this.clearButtonClick, this);
  };

  Uploader.prototype.unwireActionButtonEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.uploadButton, 'click', this.uploadButtonClick);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.clearButton, 'click', this.clearButtonClick);
  };

  Uploader.prototype.removeActionButtons = function () {
    if (this.actionButtons) {
      this.unwireActionButtonEvents();
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.actionButtons);
      this.actionButtons = null;
    }
  };

  Uploader.prototype.renderButtonTemplates = function () {
    if (typeof this.buttons.browse === 'string') {
      this.browseButton.textContent = this.buttons.browse === 'Browse...' ? this.localizedTexts('Browse') : this.buttons.browse;
      this.browseButton.setAttribute('title', this.browseButton.textContent);
    } else {
      this.browseButton.innerHTML = '';
      this.browseButton.appendChild(this.buttons.browse);
    }

    if (this.uploadButton) {
      var uploadText = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.buttons.upload) ? 'Upload' : this.buttons.upload;
      this.buttons.upload = uploadText;

      if (typeof this.buttons.upload === 'string') {
        this.uploadButton.textContent = this.buttons.upload === 'Upload' ? this.localizedTexts('Upload') : this.buttons.upload;
        this.uploadButton.setAttribute('title', this.uploadButton.textContent);
      } else {
        this.uploadButton.innerHTML = '';
        this.uploadButton.appendChild(this.buttons.upload);
      }
    }

    if (this.clearButton) {
      var clearText = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.buttons.clear) ? 'Clear' : this.buttons.clear;
      this.buttons.clear = clearText;

      if (typeof this.buttons.clear === 'string') {
        this.clearButton.textContent = this.buttons.clear === 'Clear' ? this.localizedTexts('Clear') : this.buttons.clear;
        this.clearButton.setAttribute('title', this.clearButton.textContent);
      } else {
        this.clearButton.innerHTML = '';
        this.clearButton.appendChild(this.buttons.clear);
      }
    }
  };

  Uploader.prototype.initializeUpload = function () {
    this.element.setAttribute('tabindex', '-1');
    var inputWrapper = this.createElement('span', {
      className: INPUT_WRAPPER
    });
    this.element.parentElement.insertBefore(inputWrapper, this.element);
    this.dropAreaWrapper = this.createElement('div', {
      className: DROP_WRAPPER
    });
    this.element.parentElement.insertBefore(this.dropAreaWrapper, this.element);
    inputWrapper.appendChild(this.element);
    this.dropAreaWrapper.appendChild(this.browseButton);
    this.dropAreaWrapper.appendChild(inputWrapper);
    this.uploadWrapper = this.createElement('div', {
      className: CONTROL_WRAPPER
    });
    this.dropAreaWrapper.parentElement.insertBefore(this.uploadWrapper, this.dropAreaWrapper);
    this.uploadWrapper.appendChild(this.dropAreaWrapper);
    this.setDropArea();
  };

  Uploader.prototype.renderPreLoadFiles = function () {
    if (this.files.length) {
      if (this.enablePersistence && this.filesData.length) {
        this.internalCreateFileList(this.filesData);
        return;
      }

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.files[0].size)) {
        return;
      }

      this.isPreloadFiles = true;
      var files = [].slice.call(this.files);
      var filesData = [];

      if (!this.multiple) {
        this.clearData();
        files = [files[0]];
      }

      for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
        var data = files_1[_i];
        var fileData = {
          name: data.name + '.' + data.type.split('.')[data.type.split('.').length - 1],
          rawFile: '',
          size: data.size,
          status: this.localizedTexts('uploadSuccessMessage'),
          type: data.type,
          validationMessages: {
            minSize: '',
            maxSize: ''
          },
          statusCode: '2'
        };
        filesData.push(fileData);
        this.filesData.push(fileData);
      }

      this.internalCreateFileList(filesData);

      if (!this.autoUpload && this.listParent && !this.actionButtons && (!this.isForm || this.allowUpload()) && this.showFileList) {
        this.renderActionButtons();
      }

      this.checkActionButtonStatus();

      if (this.sequentialUpload) {
        this.count = this.filesData.length - 1;
      }

      this.isPreloadFiles = false;
    }
  };

  Uploader.prototype.checkActionButtonStatus = function () {
    if (this.actionButtons) {
      var length_1 = this.uploadWrapper.querySelectorAll('.' + VALIDATION_FAILS).length + this.uploadWrapper.querySelectorAll('.e-upload-fails:not(.e-upload-progress)').length + this.uploadWrapper.querySelectorAll('span.' + UPLOAD_SUCCESS).length + this.uploadWrapper.querySelectorAll('span.' + UPLOAD_INPROGRESS).length;

      if (length_1 > 0 && length_1 === this.uploadWrapper.querySelectorAll('li').length) {
        this.uploadButton.setAttribute('disabled', 'disabled');
      } else {
        this.uploadButton.removeAttribute('disabled');
      }
    }
  };

  Uploader.prototype.setDropArea = function () {
    var dropTextArea = this.dropAreaWrapper.querySelector('.e-file-drop');

    if (this.dropArea) {
      this.dropZoneElement = typeof this.dropArea !== 'string' ? this.dropArea : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])(this.dropArea, document);
      var element = this.element;
      var enableDropText = false;

      while (element.parentNode) {
        element = element.parentNode;

        if (element === this.dropZoneElement) {
          enableDropText = true;

          if (!dropTextArea) {
            this.createDropTextHint();
          } else {
            dropTextArea.innerHTML = this.localizedTexts('dropFilesHint');
          }
        }
      }

      if (!enableDropText && dropTextArea) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(dropTextArea);
      }
    } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.uploaderOptions) && this.uploaderOptions.dropArea === undefined) {
      this.createDropTextHint();
      this.dropZoneElement = this.uploadWrapper;
      this.setProperties({
        dropArea: this.uploadWrapper
      }, true);
    }

    this.bindDropEvents();
  };

  Uploader.prototype.updateDropArea = function () {
    if (this.dropArea) {
      this.setDropArea();
    } else {
      this.dropZoneElement = null;
      var dropTextArea = this.dropAreaWrapper.querySelector('.e-file-drop');

      if (dropTextArea) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(dropTextArea);
      }
    }
  };

  Uploader.prototype.createDropTextHint = function () {
    var fileDropArea = this.createElement('span', {
      className: DROP_AREA
    });
    fileDropArea.innerHTML = this.localizedTexts('dropFilesHint');
    this.dropAreaWrapper.appendChild(fileDropArea);
  };

  Uploader.prototype.updateHTMLAttrToElement = function () {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes)) {
      for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
        var pro = _a[_i];

        if (wrapperAttr.indexOf(pro) < 0) {
          this.element.setAttribute(pro, this.htmlAttributes["" + pro]);
        }
      }
    }
  };

  Uploader.prototype.updateHTMLAttrToWrapper = function () {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes)) {
      for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
        var pro = _a[_i];

        if (wrapperAttr.indexOf(pro) > -1) {
          if (pro === 'class') {
            var updatedClassValues = this.htmlAttributes["" + pro].replace(/\s+/g, ' ').trim();

            if (updatedClassValues !== '') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.uploadWrapper], updatedClassValues.split(' '));
            }
          } else if (pro === 'style') {
            var uploadStyle = this.uploadWrapper.getAttribute(pro);
            uploadStyle = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(uploadStyle) ? uploadStyle + this.htmlAttributes["" + pro] : this.htmlAttributes["" + pro];
            this.uploadWrapper.setAttribute(pro, uploadStyle);
          } else {
            this.uploadWrapper.setAttribute(pro, this.htmlAttributes["" + pro]);
          }
        }
      }
    }
  };

  Uploader.prototype.setMultipleSelection = function () {
    if (this.multiple && !this.element.hasAttribute('multiple')) {
      var newAttr = document.createAttribute('multiple');
      newAttr.value = 'multiple';
      this.element.setAttributeNode(newAttr);
    } else if (!this.multiple) {
      this.element.removeAttribute('multiple');
    }
  };

  Uploader.prototype.checkAutoUpload = function (fileData) {
    if (this.autoUpload) {
      if (this.sequentialUpload) {
        /* istanbul ignore next */
        this.sequenceUpload(fileData);
      } else {
        this.upload(fileData);
      }

      this.removeActionButtons();
    } else if (!this.actionButtons) {
      this.renderActionButtons();
    }

    this.checkActionButtonStatus();
  };

  Uploader.prototype.sequenceUpload = function (fileData) {
    if (this.filesData.length - fileData.length === 0 || this.filesData[this.filesData.length - fileData.length - 1].statusCode !== '1') {
      if (this.multiple || this.count < 0) {
        ++this.count;
      }

      var isFileListCreated = this.showFileList ? false : true;

      if (typeof this.filesData[this.count] === 'object') {
        this.isFirstFileOnSelection = false;
        this.upload(this.filesData[this.count], isFileListCreated);

        if (this.filesData[this.count].statusCode === '0') {
          this.sequenceUpload(fileData);
        }
      } else {
        --this.count;
      }
    }
  };

  Uploader.prototype.setCSSClass = function (oldCSSClass) {
    var updatedOldCssClass = oldCSSClass;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldCSSClass)) {
      updatedOldCssClass = oldCSSClass.replace(/\s+/g, ' ').trim();
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldCSSClass) && updatedOldCssClass !== '') {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.uploadWrapper], updatedOldCssClass.split(' '));
    }

    var updatedCssClassValue = this.cssClass;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cssClass) && this.cssClass !== '') {
      updatedCssClassValue = this.cssClass.replace(/\s+/g, ' ').trim();
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cssClass) && updatedCssClassValue !== '') {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.uploadWrapper], updatedCssClassValue.split(updatedCssClassValue.indexOf(',') > -1 ? ',' : ' '));
    }
  };

  Uploader.prototype.wireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.browseButton, 'click', this.browseButtonClick, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'change', this.onSelectFiles, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'click', this.removeFocus, this);
    this.keyboardModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.uploadWrapper, {
      keyAction: this.keyActionHandler.bind(this),
      keyConfigs: this.keyConfigs,
      eventName: 'keydown'
    });

    if (this.isForm) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.formElement, 'reset', this.resetForm, this);
    }
  };

  Uploader.prototype.unWireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.browseButton, 'click', this.browseButtonClick);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'change', this.onSelectFiles);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'click', this.removeFocus);

    if (this.isForm) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.formElement, 'reset', this.resetForm);
    }

    if (this.keyboardModule) {
      this.keyboardModule.destroy();
    }
  };

  Uploader.prototype.resetForm = function () {
    this.clearAll();
  };

  Uploader.prototype.keyActionHandler = function (e) {
    var targetElement = e.target;

    switch (e.action) {
      case 'enter':
        if (e.target === this.clearButton) {
          this.clearButtonClick();
        } else if (e.target === this.uploadButton) {
          this.uploadButtonClick();
        } else if (e.target === this.browseButton) {
          this.browseButtonClick();
        } else if (targetElement.classList.contains(PAUSE_UPLOAD)) {
          var metaData = this.getCurrentMetaData(null, e);
          metaData.file.statusCode = '4';
          metaData.file.status = this.localizedTexts('pauseUpload');
          this.abortUpload(metaData, false);
        } else if (targetElement.classList.contains(RESUME_UPLOAD)) {
          this.resumeUpload(this.getCurrentMetaData(null, e), e);
        } else if (targetElement.classList.contains(RETRY_ICON)) {
          var metaData = this.getCurrentMetaData(null, e);

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(metaData)) {
            metaData.file.statusCode = '1';
            metaData.file.status = this.localizedTexts('readyToUploadMessage');
            this.chunkUpload(metaData.file);
          } else {
            var target = e.target.parentElement;
            var fileData = this.filesData[this.fileList.indexOf(target)];
            this.retry(fileData);
          }
        } else {
          this.removeFiles(e);

          if (!targetElement.classList.contains(ABORT_ICON)) {
            this.browseButton.focus();
          }
        }

        e.preventDefault();
        e.stopPropagation();
        break;
    }
  };

  Uploader.prototype.getCurrentMetaData = function (fileInfo, e) {
    var fileData;
    var targetMetaData;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fileInfo)) {
      var target = e.target.parentElement;
      fileData = this.filesData[this.fileList.indexOf(target)];
    } else {
      fileData = fileInfo;
    }

    for (var i = 0; i < this.uploadMetaData.length; i++) {
      if (this.uploadMetaData[i].file.name === fileData.name) {
        targetMetaData = this.uploadMetaData[i];
      }
    }

    return targetMetaData;
  };

  Uploader.prototype.removeFocus = function () {
    if (this.uploadWrapper && this.listParent && this.listParent.querySelector('.' + ICON_FOCUSED)) {
      document.activeElement.blur();
      this.listParent.querySelector('.' + ICON_FOCUSED).classList.remove(ICON_FOCUSED);
    }
  };

  Uploader.prototype.browseButtonClick = function () {
    this.element.click();
  };

  Uploader.prototype.uploadButtonClick = function () {
    if (this.sequentialUpload) {
      this.sequenceUpload(this.filesData);
    } else {
      this.upload(this.filesData);
    }
  };

  Uploader.prototype.clearButtonClick = function () {
    this.clearAll();
    /* istanbul ignore next */

    if (this.sequentialUpload) {
      this.count = -1;
    }

    this.actionCompleteCount = 0;
  };

  Uploader.prototype.bindDropEvents = function () {
    if (this.dropZoneElement) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.dropZoneElement, 'drop', this.dropElement, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.dropZoneElement, 'dragover', this.dragHover, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.dropZoneElement, 'dragleave', this.onDragLeave, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.dropZoneElement, 'paste', this.onPasteFile, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.dropZoneElement, 'dragenter', this.onDragEnter, this);
    }
  };

  Uploader.prototype.unBindDropEvents = function () {
    if (this.dropZoneElement) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.dropZoneElement, 'drop', this.dropElement);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.dropZoneElement, 'dragover', this.dragHover);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.dropZoneElement, 'dragleave', this.onDragLeave);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.dropZoneElement, 'dragenter', this.onDragEnter);
    }
  };

  Uploader.prototype.onDragEnter = function (e) {
    if (!this.enabled) {
      return;
    }

    this.dropZoneElement.classList.add(DRAG_HOVER);
    this.dragCounter = this.dragCounter + 1;
    e.preventDefault();
    e.stopPropagation();
  };

  Uploader.prototype.onDragLeave = function () {
    if (!this.enabled) {
      return;
    }

    this.dragCounter = this.dragCounter - 1;

    if (!this.dragCounter) {
      this.dropZoneElement.classList.remove(DRAG_HOVER);
    }
  };

  Uploader.prototype.dragHover = function (e) {
    if (!this.enabled) {
      return;
    }

    if (this.dropEffect !== 'Default') {
      e.dataTransfer.dropEffect = this.dropEffect.toLowerCase();
    }

    e.preventDefault();
    e.stopPropagation();
  };
  /* istanbul ignore next */


  Uploader.prototype.dropElement = function (e) {
    this.dragCounter = 0;
    this.dropZoneElement.classList.remove(DRAG_HOVER);
    this.onSelectFiles(e);
    e.preventDefault();
    e.stopPropagation();
  };
  /* istanbul ignore next */


  Uploader.prototype.onPasteFile = function (event) {
    var item = event.clipboardData.items;

    if (event.type === 'paste' && this.browserName !== 'msie' && this.browserName !== 'edge' && this.browserName !== 'safari') {
      this.element.files = event.clipboardData.files;
    }

    if (item.length !== 1) {
      return;
    }

    var pasteFile = [].slice.call(item)[0];

    if (pasteFile.kind === 'file' && pasteFile.type.match('^image/')) {
      this.renderSelectedFiles(event, [pasteFile.getAsFile()], false, true);
    }
  };

  Uploader.prototype.getSelectedFiles = function (index) {
    var data = [];
    var liElement = this.fileList[index];
    var allFiles = this.getFilesData();
    var nameElements = +liElement.getAttribute('data-files-count');
    var startIndex = 0;

    for (var i = 0; i < index; i++) {
      startIndex += +this.fileList[i].getAttribute('data-files-count');
    }

    for (var j = startIndex; j < startIndex + nameElements; j++) {
      data.push(allFiles[j]);
    }

    return data;
  };

  Uploader.prototype.removeFiles = function (args) {
    if (!this.enabled) {
      return;
    }

    var selectedElement = args.target.parentElement;
    var index = this.fileList.indexOf(selectedElement);
    var liElement = this.fileList[index];
    var formUpload = this.isFormUpload();
    var fileData = formUpload ? this.getSelectedFiles(index) : this.getFilesInArray(this.filesData[index]);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fileData)) {
      return;
    }

    if (args.target.classList.contains(ABORT_ICON) && !formUpload) {
      fileData[0].statusCode = '5';

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement)) {
        var spinnerTarget = liElement.querySelector('.' + ABORT_ICON);
        Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["createSpinner"])({
          target: spinnerTarget,
          width: '20px'
        });
        Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["showSpinner"])(spinnerTarget);
      }

      if (this.sequentialUpload) {
        /* istanbul ignore next */
        this.uploadSequential();
      }

      if (!liElement.classList.contains(RESTRICT_RETRY)) {
        this.checkActionComplete(true);
      }
    } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(args.target, '.' + SPINNER_PANE)) {
      this.remove(fileData, false, false, true, args);
    }

    this.checkActionButtonStatus();
  };

  Uploader.prototype.removeFilesData = function (file, customTemplate) {
    var index;

    if (customTemplate) {
      if (!this.showFileList) {
        index = this.filesData.indexOf(file);
        this.filesData.splice(index, 1);
      }

      return;
    }

    var selectedElement = this.getLiElement(file);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(selectedElement)) {
      return;
    }

    this.element.value = '';
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(selectedElement);
    index = this.fileList.indexOf(selectedElement);
    this.fileList.splice(index, 1);
    this.filesData.splice(index, 1);

    if (this.fileList.length === 0 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.listParent)) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.listParent);
      this.listParent = null;
      this.removeActionButtons();
    }

    if (this.sequentialUpload) {
      /* istanbul ignore next */
      if (index <= this.count) {
        --this.count;
      }
    }
  };

  Uploader.prototype.removeUploadedFile = function (file, eventArgs, removeDirectly, custom) {
    var _this = this;

    var selectedFiles = file;
    var ajax = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Ajax"](this.asyncSettings.removeUrl, 'POST', true, null);
    ajax.emitError = false;
    var formData = new FormData();

    ajax.beforeSend = function (e) {
      eventArgs.currentRequest = ajax.httpRequest;

      if (!removeDirectly) {
        _this.trigger('removing', eventArgs, function (eventArgs) {
          if (eventArgs.cancel) {
            e.cancel = true;
          } else {
            _this.removingEventCallback(eventArgs, formData, selectedFiles, file);
          }
        });
      } else {
        _this.removingEventCallback(eventArgs, formData, selectedFiles, file);
      }
    };

    ajax.onLoad = function (e) {
      _this.removeCompleted(e, selectedFiles, custom);

      return {};
    };
    /* istanbul ignore next */


    ajax.onError = function (e) {
      _this.removeFailed(e, selectedFiles, custom);

      return {};
    };

    ajax.send(formData);
  };

  Uploader.prototype.removingEventCallback = function (eventArgs, formData, selectedFiles, file) {
    /* istanbul ignore next */
    var name = this.element.getAttribute('name');
    var liElement = this.getLiElement(file);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement) && (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.' + DELETE_ICON)) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.' + REMOVE_ICON)))) {
      var spinnerTarget = liElement.querySelector('.' + DELETE_ICON) ? liElement.querySelector('.' + DELETE_ICON) : liElement.querySelector('.' + REMOVE_ICON);
      Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["createSpinner"])({
        target: spinnerTarget,
        width: '20px'
      });
      Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["showSpinner"])(spinnerTarget);
    }

    if (eventArgs.postRawFile && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(selectedFiles.rawFile) && selectedFiles.rawFile !== '') {
      formData.append(name, selectedFiles.rawFile, selectedFiles.name);
    } else {
      formData.append(name, selectedFiles.name);
    }

    this.updateFormData(formData, eventArgs.customFormData);
  };
  /* istanbul ignore next */


  Uploader.prototype.updateFormData = function (formData, customData) {
    if (customData.length > 0 && customData[0]) {
      var _loop_1 = function (i) {
        var data = customData[i]; // eslint-disable-next-line @typescript-eslint/tslint/config

        var value = Object.keys(data).map(function (e) {
          return data["" + e];
        });
        formData.append(Object.keys(data)[0], value);
      };

      for (var i = 0; i < customData.length; i++) {
        _loop_1(i);
      }
    }
  };
  /* istanbul ignore next */


  Uploader.prototype.updateCustomheader = function (request, currentRequest) {
    if (currentRequest.length > 0 && currentRequest[0]) {
      var _loop_2 = function (i) {
        var data = currentRequest[i]; // eslint-disable-next-line @typescript-eslint/tslint/config

        var value = Object.keys(data).map(function (e) {
          return data["" + e];
        });
        request.setRequestHeader(Object.keys(data)[0], value);
      };

      for (var i = 0; i < currentRequest.length; i++) {
        _loop_2(i);
      }
    }
  };

  Uploader.prototype.removeCompleted = function (e, files, customTemplate) {
    var response = e && e.currentTarget ? this.getResponse(e) : null;
    var status = e.target;

    if (status.readyState === 4 && status.status >= 200 && status.status <= 299) {
      var args = {
        e: e,
        response: response,
        operation: 'remove',
        file: this.updateStatus(files, this.localizedTexts('removedSuccessMessage'), '2')
      };
      this.trigger('success', args);
      this.removeFilesData(files, customTemplate);
      var index = this.uploadedFilesData.indexOf(files);
      this.uploadedFilesData.splice(index, 1);
      this.trigger('change', {
        files: this.uploadedFilesData
      });
    } else {
      this.removeFailed(e, files, customTemplate);
    }
  };

  Uploader.prototype.removeFailed = function (e, files, customTemplate) {
    var response = e && e.currentTarget ? this.getResponse(e) : null;
    var args = {
      e: e,
      response: response,
      operation: 'remove',
      file: this.updateStatus(files, this.localizedTexts('removedFailedMessage'), '0')
    };

    if (!customTemplate) {
      var index = this.filesData.indexOf(files);
      var rootElement = this.fileList[index];

      if (rootElement) {
        rootElement.classList.remove(UPLOAD_SUCCESS);
        rootElement.classList.add(UPLOAD_FAILED);
        var statusElement = rootElement.querySelector('.' + STATUS);

        if (statusElement) {
          statusElement.classList.remove(UPLOAD_SUCCESS);
          statusElement.classList.add(UPLOAD_FAILED);
        }
      }

      this.checkActionButtonStatus();
    }

    this.trigger('failure', args);
    var liElement = this.getLiElement(files);
    /* istanbul ignore next */

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.' + DELETE_ICON))) {
      var spinnerTarget = liElement.querySelector('.' + DELETE_ICON);
      Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["hideSpinner"])(spinnerTarget);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(liElement.querySelector('.e-spinner-pane'));
    }
  };
  /* istanbul ignore next */


  Uploader.prototype.getFilesFromFolder = function (event) {
    this.filesEntries = [];
    var items = this.multiple ? event.dataTransfer.items : [event.dataTransfer.items[0]];
    var validDirectoryUpload = this.checkDirectoryUpload(items);

    if (!validDirectoryUpload) {
      return;
    }

    var _loop_3 = function (i) {
      var item = items[i].webkitGetAsEntry();

      if (item.isFile) {
        var files_2 = [];
        item.file(function (fileObj) {
          var path = item.fullPath;
          files_2.push({
            'path': path,
            'file': fileObj
          });
        });
        this_1.renderSelectedFiles(event, files_2, true);
      } else if (item.isDirectory) {
        this_1.traverseFileTree(item, event);
      }
    };

    var this_1 = this;

    for (var i = 0; i < items.length; i++) {
      _loop_3(i);
    }
  };
  /* istanbul ignore next */


  Uploader.prototype.checkDirectoryUpload = function (items) {
    for (var i = 0; items && i < items.length; i++) {
      var item = items[i].webkitGetAsEntry();

      if (item.isDirectory) {
        return true;
      }
    }

    return false;
  };
  /* eslint-disable @typescript-eslint/explicit-module-boundary-types */

  /* istanbul ignore next */


  Uploader.prototype.traverseFileTree = function (item, event) {
    /* eslint-enable @typescript-eslint/explicit-module-boundary-types */
    if (item.isFile) {
      this.filesEntries.push(item);
    } else if (item.isDirectory) {
      var directoryReader = item.createReader();
      this.readFileFromDirectory(directoryReader, event);
    }
  };
  /* istanbul ignore next */


  Uploader.prototype.readFileFromDirectory = function (directoryReader, event) {
    var _this = this;

    directoryReader.readEntries(function (entries) {
      for (var i = 0; i < entries.length; i++) {
        _this.traverseFileTree(entries[i], event);
      }

      _this.pushFilesEntries(event);

      if (entries.length) {
        _this.readFileFromDirectory(directoryReader);
      }
    });
  };

  Uploader.prototype.pushFilesEntries = function (event) {
    var _this = this;

    var files = [];

    var _loop_4 = function (i) {
      this_2.filesEntries[i].file(function (fileObj) {
        if (_this.filesEntries.length) {
          var path = _this.filesEntries[i].fullPath;
          files.push({
            'path': path,
            'file': fileObj
          });

          if (i === _this.filesEntries.length - 1) {
            _this.filesEntries = [];

            _this.renderSelectedFiles(event, files, true);
          }
        }
      });
    };

    var this_2 = this;

    for (var i = 0; i < this.filesEntries.length; i++) {
      _loop_4(i);
    }
  };

  Uploader.prototype.onSelectFiles = function (args) {
    if (!this.enabled) {
      return;
    }

    var targetFiles;
    /* istanbul ignore next */

    if (args.type === 'drop') {
      if (this.directoryUpload) {
        this.getFilesFromFolder(args);
      } else {
        var files = this.sortFilesList = args.dataTransfer.files;

        if (this.browserName !== 'msie' && this.browserName !== 'edge' && this.browserName !== 'safari') {
          this.element.files = files;
        }

        if (files.length > 0) {
          targetFiles = this.multiple ? this.sortFileList(files) : [files[0]];
          this.renderSelectedFiles(args, targetFiles);
        }
      }
    } else {
      targetFiles = [].slice.call(args.target.files);
      this.renderSelectedFiles(args, targetFiles);
    }

    if (this.isAngular) {
      args.stopPropagation();
    }
  };
  /* istanbul ignore next */


  Uploader.prototype.getBase64 = function (file) {
    return new Promise(function (resolve, reject) {
      var fileReader = new FileReader();
      fileReader.readAsDataURL(file);

      fileReader.onload = function () {
        return resolve(fileReader.result);
      };

      fileReader.onerror = function (error) {
        return reject(error);
      };
    });
  };
  /* istanbul ignore next */

  /* tslint:ignore */


  Uploader.prototype.renderSelectedFiles = function (args, targetFiles, directory, paste) {
    var _this = this;

    this.base64String = [];
    var eventArgs = {
      event: args,
      cancel: false,
      filesData: [],
      isModified: false,
      modifiedFilesData: [],
      progressInterval: '',
      isCanceled: false,
      currentRequest: null,
      customFormData: null
    };
    /* istanbul ignore next */

    if (targetFiles.length < 1) {
      eventArgs.isCanceled = true;
      this.trigger('selected', eventArgs);
      return;
    }

    this.flag = true;
    var fileData = [];

    if (!this.multiple) {
      this.clearData(true);
      this.actionCompleteCount = 0;
      targetFiles = [targetFiles[0]];
    }

    for (var i = 0; i < targetFiles.length; i++) {
      var file = directory ? targetFiles[i].file : targetFiles[i];
      this.updateInitialFileDetails(args, targetFiles, file, i, fileData, directory, paste);
    }

    eventArgs.filesData = fileData;

    if (this.allowedExtensions.indexOf('*') > -1) {
      this.allTypes = true;
    }

    if (this.enableHtmlSanitizer) {
      for (var i = 0; i < fileData.length; i++) {
        var sanitizeFile = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].beforeSanitize();
        var sanitizeFileName = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].serializeValue(sanitizeFile, fileData[parseInt(i.toString())].name);
        var currentFileName = fileData[parseInt(i.toString())].name;
        var isUTF8 = false;

        for (var i_1 = 0; i_1 < currentFileName.length; i_1++) {
          if (currentFileName.charCodeAt(i_1) > 127) {
            isUTF8 = true;
            break;
          }
        }

        var htmlTagRegex = /<([a-z][a-z0-9]*)\b[^>]*>(.*?)<\/\1>/i;
        var hasHTMLString = htmlTagRegex.test(currentFileName);

        if (sanitizeFileName !== fileData[parseInt(i.toString())].name && !(isUTF8 && !hasHTMLString)) {
          var encodedFileName = targetFiles[parseInt(i.toString())].name.replace(/[\u00A0-\u9999<>\&]/g, function (i) {
            return '&#' + i.charCodeAt(0) + ';';
          });
          fileData[parseInt(i.toString())].name = encodedFileName;
          fileData[parseInt(i.toString())].status = this.localizedTexts('invalidFileName');
          fileData[parseInt(i.toString())].statusCode = '0';
        }
      }
    }

    if (!this.allTypes) {
      fileData = this.checkExtension(fileData);
    }

    this.trigger('selected', eventArgs, function (eventArgs) {
      _this._internalRenderSelect(eventArgs, fileData);
    });
  };

  Uploader.prototype.updateInitialFileDetails = function (args, // eslint-disable-next-line @typescript-eslint/indent
  targetFiles, file, i, fileData, directory, paste) {
    var fileName = directory ? targetFiles[i].path.substring(1, targetFiles[i].path.length) : paste ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])(file.name.substring(0, file.name.lastIndexOf('.'))) + '.' + this.getFileType(file.name) : this.directoryUpload ? targetFiles[i].webkitRelativePath : file.name;
    var fileDetails = {
      name: fileName,
      rawFile: file,
      size: file.size,
      status: this.localizedTexts('readyToUploadMessage'),
      type: this.getFileType(file.name),
      validationMessages: this.validatedFileSize(file.size),
      statusCode: '1',
      id: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])(file.name.substring(0, file.name.lastIndexOf('.'))) + '.' + this.getFileType(file.name)
    };
    /* istanbul ignore next */

    if (paste) {
      fileDetails.fileSource = 'paste';
    }

    fileDetails.status = fileDetails.validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') : fileDetails.validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : fileDetails.status;

    if (fileDetails.validationMessages.minSize !== '' || fileDetails.validationMessages.maxSize !== '') {
      fileDetails.statusCode = '0';
    }

    fileData.push(fileDetails);
  };

  Uploader.prototype._internalRenderSelect = function (eventArgs, fileData) {
    if (!eventArgs.cancel) {
      /* istanbul ignore next */
      this.selectedFiles = this.selectedFiles.concat(fileData);
      this.btnTabIndex = this.disableKeyboardNavigation ? '-1' : '0';

      if (this.showFileList) {
        if (eventArgs.isModified && eventArgs.modifiedFilesData.length > 0) {
          for (var j = 0; j < eventArgs.modifiedFilesData.length; j++) {
            for (var k = 0; k < fileData.length; k++) {
              if (eventArgs.modifiedFilesData[j].id === fileData[k].id) {
                eventArgs.modifiedFilesData[j].rawFile = fileData[k].rawFile;
              }
            }
          }

          var dataFiles = this.allTypes ? eventArgs.modifiedFilesData : this.checkExtension(eventArgs.modifiedFilesData);
          this.updateSortedFileList(dataFiles);
          this.filesData = this.filesData.concat(dataFiles);

          if (!this.isForm || this.allowUpload()) {
            this.checkAutoUpload(dataFiles);
          }
        } else {
          this.internalCreateFileList(fileData);
          this.filesData = this.filesData.concat(fileData);

          if (!this.isForm || this.allowUpload()) {
            this.checkAutoUpload(fileData);
          }
        }

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(eventArgs.progressInterval) && eventArgs.progressInterval !== '') {
          this.progressInterval = eventArgs.progressInterval;
        }
      } else {
        this.filesData = this.filesData.concat(fileData);

        if (this.autoUpload) {
          this.upload(this.filesData, true);
        }
      }

      this.raiseActionComplete();
      this.isFirstFileOnSelection = true;
    }
  };

  Uploader.prototype.allowUpload = function () {
    var allowFormUpload = false;

    if (this.isForm && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.asyncSettings.saveUrl) && this.asyncSettings.saveUrl !== '') {
      allowFormUpload = true;
    }

    return allowFormUpload;
  };

  Uploader.prototype.isFormUpload = function () {
    var isFormUpload = false;

    if (this.isForm && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.asyncSettings.saveUrl) || this.asyncSettings.saveUrl === '') && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.asyncSettings.removeUrl) || this.asyncSettings.removeUrl === '')) {
      isFormUpload = true;
    }

    return isFormUpload;
  };

  Uploader.prototype.clearData = function (singleUpload) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.listParent)) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.listParent);
      this.listParent = null;
    }

    if (this.browserName !== 'msie' && !singleUpload) {
      this.element.value = '';
    }

    this.fileList = [];
    this.filesData = [];
    this.removeActionButtons();
  };

  Uploader.prototype.updateSortedFileList = function (filesData) {
    var previousListClone = this.createElement('div', {
      id: 'clonewrapper'
    });
    var added = -1;
    var removedList;

    if (this.listParent) {
      for (var i = 0; i < this.listParent.querySelectorAll('li').length; i++) {
        var liElement = this.listParent.querySelectorAll('li')[i];
        previousListClone.appendChild(liElement.cloneNode(true));
      }

      this.removeActionButtons();
      var oldList = [].slice.call(previousListClone.childNodes);
      this.createParentUL();

      for (var index = 0; index < filesData.length; index++) {
        for (var j = 0; j < this.filesData.length; j++) {
          if (this.filesData[j].name === filesData[index].name) {
            this.listParent.appendChild(oldList[j]);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(oldList[j].querySelector('.e-icons'), 'click', this.removeFiles, this);
            this.fileList.push(oldList[j]);
            added = index;
          }
        }

        if (added !== index) {
          this.internalCreateFileList([filesData[index]]);
        }
      }
    } else {
      this.internalCreateFileList(filesData);
    }
  };

  Uploader.prototype.isBlank = function (str) {
    return !str || /^\s*$/.test(str);
  };

  Uploader.prototype.checkExtension = function (files) {
    var dropFiles = files;

    if (!this.isBlank(this.allowedExtensions)) {
      var allowedExtensions = [];
      var extensions = this.allowedExtensions.split(',');

      for (var _i = 0, extensions_1 = extensions; _i < extensions_1.length; _i++) {
        var extension = extensions_1[_i];
        allowedExtensions.push(extension.trim().toLocaleLowerCase());
      }

      for (var i = 0; i < files.length; i++) {
        if (allowedExtensions.indexOf(('.' + files[i].type).toLocaleLowerCase()) === -1) {
          files[i].status = this.localizedTexts('invalidFileType');
          files[i].statusCode = '0';
        }
      }
    }

    return dropFiles;
  };

  Uploader.prototype.validatedFileSize = function (fileSize) {
    var minSizeError = '';
    var maxSizeError = '';

    if (fileSize < this.minFileSize) {
      minSizeError = this.localizedTexts('invalidMinFileSize');
    } else if (fileSize > this.maxFileSize) {
      maxSizeError = this.localizedTexts('invalidMaxFileSize');
    } else {
      minSizeError = '';
      maxSizeError = '';
    }

    var errorMessage = {
      minSize: minSizeError,
      maxSize: maxSizeError
    };
    return errorMessage;
  };

  Uploader.prototype.isPreLoadFile = function (fileData) {
    var isPreload = false;

    for (var i = 0; i < this.files.length; i++) {
      if (this.files[i].name === fileData.name.slice(0, fileData.name.lastIndexOf('.')) && this.files[i].type === fileData.type) {
        isPreload = true;
      }
    }

    return isPreload;
  };

  Uploader.prototype.createCustomfileList = function (fileData) {
    this.createParentUL();

    for (var _i = 0, fileData_1 = fileData; _i < fileData_1.length; _i++) {
      var listItem = fileData_1[_i];
      var listElement = this.createElement('li', {
        className: FILE,
        attrs: {
          'data-file-name': listItem.name
        }
      });
      this.uploadTemplateFn = this.templateComplier(this.template);
      var liTempCompiler = this.uploadTemplateFn(listItem, this, 'template', this.element.id + 'Template', this.isStringTemplate, null, listElement);

      if (liTempCompiler) {
        var fromElements = [].slice.call(liTempCompiler);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(fromElements, listElement);
      }

      var index = fileData.indexOf(listItem);
      var eventArgs = {
        element: listElement,
        fileInfo: listItem,
        index: index,
        isPreload: this.isPreLoadFile(listItem)
      };
      var eventsArgs = {
        element: listElement,
        fileInfo: listItem,
        index: index,
        isPreload: this.isPreLoadFile(listItem)
      };
      this.trigger('rendering', eventArgs);
      this.trigger('fileListRendering', eventsArgs);
      this.listParent.appendChild(listElement);
      this.fileList.push(listElement);
    }

    this.renderReactTemplates();
  };

  Uploader.prototype.createParentUL = function () {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.listParent)) {
      this.listParent = this.createElement('ul', {
        className: LIST_PARENT
      });
      this.uploadWrapper.appendChild(this.listParent);
    }
  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars


  Uploader.prototype.formFileList = function (fileData, files) {
    var fileList = this.createElement('li', {
      className: FILE
    });
    fileList.setAttribute('data-files-count', fileData.length + '');
    var fileContainer = this.createElement('span', {
      className: TEXT_CONTAINER
    });
    var statusMessage;

    for (var _i = 0, fileData_2 = fileData; _i < fileData_2.length; _i++) {
      var listItem = fileData_2[_i];
      var fileNameEle = this.createElement('span', {
        className: FILE_NAME
      });
      fileNameEle.innerHTML = this.getFileNameOnly(listItem.name);
      var fileTypeEle = this.createElement('span', {
        className: FILE_TYPE
      });
      var fileType = this.getFileType(listItem.name);
      fileTypeEle.innerHTML = '.' + fileType;

      if (!fileType) {
        fileTypeEle.classList.add('e-hidden');
      }

      if (!this.enableRtl) {
        fileContainer.appendChild(fileNameEle);
        fileContainer.appendChild(fileTypeEle);
      } else {
        var rtlContainer = this.createElement('span', {
          className: RTL_CONTAINER
        });
        rtlContainer.appendChild(fileTypeEle);
        rtlContainer.appendChild(fileNameEle);
        fileContainer.appendChild(rtlContainer);
      }

      this.truncateName(fileNameEle);
      statusMessage = this.formValidateFileInfo(listItem, fileList);
    }

    fileList.appendChild(fileContainer);
    this.setListToFileInfo(fileData, fileList);
    var index = this.listParent.querySelectorAll('li').length;
    var infoEle = this.createElement('span');

    if (fileList.classList.contains(INVALID_FILE)) {
      infoEle.classList.add(STATUS);
      infoEle.classList.add(INVALID_FILE);
      infoEle.innerText = fileData.length > 1 ? this.localizedTexts('invalidFileSelection') : statusMessage;
    } else {
      infoEle.classList.add(fileData.length > 1 ? INFORMATION : FILE_SIZE);
      infoEle.innerText = fileData.length > 1 ? this.localizedTexts('totalFiles') + ': ' + fileData.length + ' , ' + this.localizedTexts('size') + ': ' + this.bytesToSize(this.getFileSize(fileData)) : this.bytesToSize(fileData[0].size);
      this.createFormInput(fileData);
    }

    fileContainer.appendChild(infoEle);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fileList.querySelector('.e-icons'))) {
      var iconElement = this.createElement('span', {
        className: 'e-icons',
        attrs: {
          'tabindex': this.btnTabIndex
        }
      });
      /* istanbul ignore next */

      if (this.browserName === 'msie') {
        iconElement.classList.add('e-msie');
      }

      iconElement.setAttribute('title', this.localizedTexts('remove'));
      fileList.appendChild(fileContainer);
      fileList.appendChild(iconElement);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(iconElement, 'click', this.removeFiles, this);
      iconElement.classList.add(REMOVE_ICON);
    }

    var eventArgs = {
      element: fileList,
      fileInfo: this.mergeFileInfo(fileData, fileList),
      index: index,
      isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))
    };
    var eventsArgs = {
      element: fileList,
      fileInfo: this.mergeFileInfo(fileData, fileList),
      index: index,
      isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))
    };
    this.trigger('rendering', eventArgs);
    this.trigger('fileListRendering', eventsArgs);
    this.listParent.appendChild(fileList);
    this.fileList.push(fileList);
  };

  Uploader.prototype.formValidateFileInfo = function (listItem, fileList) {
    var statusMessage = listItem.status;
    var validationMessages = this.validatedFileSize(listItem.size);

    if (validationMessages.minSize !== '' || validationMessages.maxSize !== '') {
      this.addInvalidClass(fileList);
      statusMessage = validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') : validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : statusMessage;
    }

    var typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;

    if (typeValidationMessage === this.localizedTexts('invalidFileType')) {
      this.addInvalidClass(fileList);
      statusMessage = typeValidationMessage;
    }

    return statusMessage;
  };

  Uploader.prototype.addInvalidClass = function (fileList) {
    fileList.classList.add(INVALID_FILE);
  };

  Uploader.prototype.createFormInput = function (fileData) {
    if (this.browserName !== 'safari') {
      var inputElement = this.element.cloneNode(true);
      inputElement.classList.add(HIDDEN_INPUT);

      for (var _i = 0, fileData_3 = fileData; _i < fileData_3.length; _i++) {
        var listItem = fileData_3[_i];
        listItem.input = inputElement;
      }

      inputElement.setAttribute('id', Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('hiddenUploader'));
      inputElement.setAttribute('name', this.uploaderName);
      this.uploadWrapper.querySelector('.' + INPUT_WRAPPER).appendChild(inputElement);

      if (this.browserName !== 'msie' && this.browserName !== 'edge') {
        this.element.value = '';
      }
    }
  };

  Uploader.prototype.getFileSize = function (fileData) {
    var fileSize = 0;

    for (var _i = 0, fileData_4 = fileData; _i < fileData_4.length; _i++) {
      var file = fileData_4[_i];
      fileSize += file.size;
    }

    return fileSize;
  };

  Uploader.prototype.mergeFileInfo = function (fileData, fileList) {
    var result = {
      name: '',
      rawFile: '',
      size: 0,
      status: '',
      type: '',
      validationMessages: {
        minSize: '',
        maxSize: ''
      },
      statusCode: '1',
      list: fileList
    };
    var fileNames = [];
    var type = '';

    for (var _i = 0, fileData_5 = fileData; _i < fileData_5.length; _i++) {
      var listItem = fileData_5[_i];
      fileNames.push(listItem.name);
      type = listItem.type;
    }

    result.name = fileNames.join(', ');
    result.size = this.getFileSize(fileData);
    result.type = type;
    result.status = this.statusForFormUpload(fileData, fileList);
    return result;
  };

  Uploader.prototype.statusForFormUpload = function (fileData, fileList) {
    var isValid = true;
    var statusMessage;

    for (var _i = 0, fileData_6 = fileData; _i < fileData_6.length; _i++) {
      var listItem = fileData_6[_i];
      statusMessage = listItem.status;
      var validationMessages = this.validatedFileSize(listItem.size);

      if (validationMessages.minSize !== '' || validationMessages.maxSize !== '') {
        isValid = false;
        statusMessage = validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') : validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : statusMessage;
      }

      var typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;

      if (typeValidationMessage === this.localizedTexts('invalidFileType')) {
        isValid = false;
        statusMessage = typeValidationMessage;
      }
    }

    if (!isValid) {
      fileList.classList.add(INVALID_FILE);
      statusMessage = fileData.length > 1 ? this.localizedTexts('invalidFileSelection') : statusMessage;
    } else {
      statusMessage = this.localizedTexts('totalFiles') + ': ' + fileData.length + ' , ' + this.localizedTexts('size') + ': ' + this.bytesToSize(this.getFileSize(fileData));
    }

    return statusMessage;
  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars


  Uploader.prototype.formCustomFileList = function (fileData, files) {
    this.createParentUL();
    var fileList = this.createElement('li', {
      className: FILE
    });
    fileList.setAttribute('data-files-count', fileData.length + '');
    this.setListToFileInfo(fileData, fileList);
    var result = this.mergeFileInfo(fileData, fileList);
    fileList.setAttribute('data-file-name', result.name);
    this.uploadTemplateFn = this.templateComplier(this.template);
    var liTempCompiler = this.uploadTemplateFn(result, this, 'template', this.element.id + 'Template', this.isStringTemplate, null, fileList);

    if (liTempCompiler) {
      var fromElements = [].slice.call(liTempCompiler);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(fromElements, fileList);
    }

    var index = this.listParent.querySelectorAll('li').length;

    if (!fileList.classList.contains(INVALID_FILE)) {
      this.createFormInput(fileData);
    }

    var eventArgs = {
      element: fileList,
      fileInfo: result,
      index: index,
      isPreload: this.isPreLoadFile(result)
    };
    var eventsArgs = {
      element: fileList,
      fileInfo: result,
      index: index,
      isPreload: this.isPreLoadFile(result)
    };
    this.trigger('rendering', eventArgs);
    this.trigger('fileListRendering', eventsArgs);
    this.listParent.appendChild(fileList);
    this.fileList.push(fileList);
    this.renderReactTemplates();
  };
  /* eslint-disable valid-jsdoc, jsdoc/require-param */

  /**
   * Create the file list for specified files data.
   *
   * @param { FileInfo[] } fileData - Specifies the files data for file list creation.
   * @returns {void}
   */


  Uploader.prototype.createFileList = function (fileData) {
    this.filesData = this.filesData && this.filesData.length > 0 ? this.filesData.concat(fileData) : fileData;
    this.internalCreateFileList(fileData);
  };

  Uploader.prototype.internalCreateFileList = function (fileData) {
    /* eslint-enable valid-jsdoc, jsdoc/require-param */
    this.createParentUL();

    if (this.template !== '' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template)) {
      if (this.isFormUpload()) {
        this.uploadWrapper.classList.add(FORM_UPLOAD);
        this.formCustomFileList(fileData, this.element.files);
      } else {
        this.createCustomfileList(fileData);
      }
    } else if (this.isFormUpload()) {
      this.uploadWrapper.classList.add(FORM_UPLOAD);
      this.formFileList(fileData, this.element.files);
    } else {
      for (var _i = 0, fileData_7 = fileData; _i < fileData_7.length; _i++) {
        var listItem = fileData_7[_i];
        var liElement = this.createElement('li', {
          className: FILE,
          attrs: {
            'data-file-name': listItem.name,
            'data-files-count': '1'
          }
        });
        var textContainer = this.createElement('span', {
          className: TEXT_CONTAINER
        });
        var textElement = this.createElement('span', {
          className: FILE_NAME,
          attrs: {
            'title': listItem.name
          }
        });
        textElement.innerHTML = this.getFileNameOnly(listItem.name);
        var fileExtension = this.createElement('span', {
          className: FILE_TYPE
        });
        var fileType = this.getFileType(listItem.name);
        fileExtension.innerHTML = '.' + fileType;

        if (!fileType) {
          fileExtension.classList.add('e-hidden');
        }

        if (!this.enableRtl) {
          textContainer.appendChild(textElement);
          textContainer.appendChild(fileExtension);
        } else {
          var rtlContainer = this.createElement('span', {
            className: RTL_CONTAINER
          });
          rtlContainer.appendChild(fileExtension);
          rtlContainer.appendChild(textElement);
          textContainer.appendChild(rtlContainer);
        }

        var fileSize = this.createElement('span', {
          className: FILE_SIZE
        });
        fileSize.innerHTML = this.bytesToSize(listItem.size);
        textContainer.appendChild(fileSize);
        var statusElement = this.createElement('span', {
          className: STATUS
        });
        textContainer.appendChild(statusElement);
        statusElement.innerHTML = listItem.status;
        liElement.appendChild(textContainer);
        var iconElement = this.createElement('span', {
          className: ' e-icons',
          attrs: {
            'tabindex': this.btnTabIndex
          }
        });
        /* istanbul ignore next */

        if (this.browserName === 'msie') {
          iconElement.classList.add('e-msie');
        }

        iconElement.setAttribute('title', this.localizedTexts('remove'));
        liElement.appendChild(iconElement);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(iconElement, 'click', this.removeFiles, this);

        if (listItem.statusCode === '2') {
          statusElement.classList.add(UPLOAD_SUCCESS);
          iconElement.classList.add(DELETE_ICON);
          iconElement.setAttribute('title', this.localizedTexts('delete'));
        } else if (listItem.statusCode !== '1') {
          statusElement.classList.remove(UPLOAD_SUCCESS);
          statusElement.classList.add(VALIDATION_FAILS);
        }

        if (this.autoUpload && listItem.statusCode === '1' && this.asyncSettings.saveUrl !== '') {
          statusElement.innerHTML = '';
        }

        if (!iconElement.classList.contains(DELETE_ICON)) {
          iconElement.classList.add(REMOVE_ICON);
        }

        var index = fileData.indexOf(listItem);
        var eventArgs = {
          element: liElement,
          fileInfo: listItem,
          index: index,
          isPreload: this.isPreLoadFile(listItem)
        };
        var eventsArgs = {
          element: liElement,
          fileInfo: listItem,
          index: index,
          isPreload: this.isPreLoadFile(listItem)
        };
        this.trigger('rendering', eventArgs);
        this.trigger('fileListRendering', eventsArgs);
        this.listParent.appendChild(liElement);
        this.fileList.push(liElement);
        this.truncateName(textElement);
        var preventActionComplete = this.flag;

        if (this.isPreLoadFile(listItem)) {
          this.flag = false;
          this.checkActionComplete(true);
          this.flag = preventActionComplete;
        }
      }
    }
  };

  Uploader.prototype.getSlicedName = function (nameElement) {
    var text = nameElement.textContent;
    nameElement.dataset.tail = text.slice(text.length - 10);
  };

  Uploader.prototype.setListToFileInfo = function (fileData, fileList) {
    for (var _i = 0, fileData_8 = fileData; _i < fileData_8.length; _i++) {
      var listItem = fileData_8[_i];
      listItem.list = fileList;
    }
  };

  Uploader.prototype.truncateName = function (name) {
    var nameElement = name;

    if (this.browserName !== 'edge' && nameElement.offsetWidth < nameElement.scrollWidth) {
      this.getSlicedName(nameElement);
      /* istanbul ignore next */
    } else if (nameElement.offsetWidth + 1 < nameElement.scrollWidth) {
      this.getSlicedName(nameElement);
    }
  };

  Uploader.prototype.getFileType = function (name) {
    var extension;
    var index = name.lastIndexOf('.');

    if (index >= 0) {
      extension = name.substring(index + 1);
    }

    return extension ? extension : '';
  };

  Uploader.prototype.getFileNameOnly = function (name) {
    var type = this.getFileType(name);
    var names = name.split('.' + type);
    return type = names[0];
  };

  Uploader.prototype.setInitialAttributes = function () {
    if (this.initialAttr.accept) {
      this.element.setAttribute('accept', this.initialAttr.accept);
    }

    if (this.initialAttr.disabled) {
      this.element.setAttribute('disabled', 'disabled');
    }

    if (this.initialAttr.multiple) {
      var newAttr = document.createAttribute('multiple');
      this.element.setAttributeNode(newAttr);
    }
  };

  Uploader.prototype.filterfileList = function (files) {
    var filterFiles = [];
    var li;

    for (var i = 0; i < files.length; i++) {
      li = this.getLiElement(files[i]);

      if (!li.classList.contains(UPLOAD_SUCCESS)) {
        filterFiles.push(files[i]);
      }
    }

    return filterFiles;
  };

  Uploader.prototype.updateStatus = function (files, status, statusCode, updateLiStatus) {
    if (updateLiStatus === void 0) {
      updateLiStatus = true;
    }

    if (!(status === '' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(status)) && !(statusCode === '' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(statusCode))) {
      files.status = status;
      files.statusCode = statusCode;
    }

    if (updateLiStatus) {
      var li = this.getLiElement(files);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li)) {
        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li.querySelector('.' + STATUS)) && !(status === '' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(status))) {
          li.querySelector('.' + STATUS).textContent = status;
        }
      }
    }

    return files;
  };

  Uploader.prototype.getLiElement = function (files) {
    var index;

    for (var i = 0; i < this.filesData.length; i++) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(files) && (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.filesData[i].id) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(files.id) ? this.filesData[i].name === files.name && this.filesData[i].id === files.id : this.filesData[i].name === files.name)) {
        index = i;
      }
    }

    return this.fileList[index];
  };

  Uploader.prototype.createProgressBar = function (liElement) {
    var progressbarWrapper = this.createElement('span', {
      className: PROGRESS_WRAPPER
    });
    var progressBar = this.createElement('progressbar', {
      className: PROGRESSBAR,
      attrs: {
        value: '0',
        max: '100'
      }
    });
    var progressbarInnerWrapper = this.createElement('span', {
      className: PROGRESS_INNER_WRAPPER
    });
    progressBar.setAttribute('style', 'width: 0%');
    var progressbarText = this.createElement('span', {
      className: PROGRESSBAR_TEXT
    });
    progressbarText.textContent = '0%';
    progressbarInnerWrapper.appendChild(progressBar);
    progressbarWrapper.appendChild(progressbarInnerWrapper);
    progressbarWrapper.appendChild(progressbarText);
    liElement.querySelector('.' + TEXT_CONTAINER).appendChild(progressbarWrapper);
  };
  /* istanbul ignore next */


  Uploader.prototype.updateProgressbar = function (e, li) {
    if (!isNaN(Math.round(e.loaded / e.total * 100)) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li.querySelector('.' + PROGRESSBAR))) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.progressInterval) && this.progressInterval !== '') {
        var value = Math.round(e.loaded / e.total * 100) % parseInt(this.progressInterval, 10);

        if (value === 0 || value === 100) {
          this.changeProgressValue(li, Math.round(e.loaded / e.total * 100).toString() + '%');
        }
      } else {
        this.changeProgressValue(li, Math.round(e.loaded / e.total * 100).toString() + '%');
      }
    }
  };

  Uploader.prototype.changeProgressValue = function (li, progressValue) {
    li.querySelector('.' + PROGRESSBAR).setAttribute('style', 'width:' + progressValue);
    li.querySelector('.' + PROGRESSBAR_TEXT).textContent = progressValue;
  };

  Uploader.prototype.uploadInProgress = function (e, files, customUI, request) {
    var li = this.getLiElement(files);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li) && !customUI) {
      return;
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li)) {
      /* istanbul ignore next */
      if (files.statusCode === '5') {
        this.cancelUploadingFile(files, e, request, li);
      }

      if (!(li.querySelectorAll('.' + PROGRESS_WRAPPER).length > 0) && li.querySelector('.' + STATUS)) {
        li.querySelector('.' + STATUS).classList.add(UPLOAD_INPROGRESS);
        this.createProgressBar(li);
        this.updateProgressBarClasses(li, UPLOAD_INPROGRESS);
        li.querySelector('.' + STATUS).classList.remove(UPLOAD_FAILED);
      }

      this.updateProgressbar(e, li);
      var iconEle = li.querySelector('.' + REMOVE_ICON);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(iconEle)) {
        iconEle.classList.add(ABORT_ICON, UPLOAD_INPROGRESS);
        iconEle.setAttribute('title', this.localizedTexts('abort'));
        iconEle.classList.remove(REMOVE_ICON);
      }
    } else {
      this.cancelUploadingFile(files, e, request);
    }

    var args = {
      e: e,
      operation: 'upload',
      file: this.updateStatus(files, this.localizedTexts('inProgress'), '3')
    };
    this.trigger('progress', args);
  };
  /* istanbul ignore next */


  Uploader.prototype.cancelUploadingFile = function (files, e, request, li) {
    var _this = this;

    if (files.statusCode === '5') {
      var eventArgs = {
        event: e,
        fileData: files,
        cancel: false,
        customFormData: []
      };
      this.trigger('canceling', eventArgs, function (eventArgs) {
        if (eventArgs.cancel) {
          files.statusCode = '3';

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li)) {
            var spinnerTarget = li.querySelector('.' + ABORT_ICON);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(spinnerTarget)) {
              Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["hideSpinner"])(spinnerTarget);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(li.querySelector('.e-spinner-pane'));
            }
          }
        } else {
          request.emitError = false;
          request.httpRequest.abort();
          var formData = new FormData();

          if (files.statusCode === '5') {
            var name_1 = _this.element.getAttribute('name');

            formData.append(name_1, files.name);
            formData.append('cancel-uploading', files.name);

            _this.updateFormData(formData, eventArgs.customFormData);

            var ajax = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Ajax"](_this.asyncSettings.removeUrl, 'POST', true, null);
            ajax.emitError = false;

            ajax.onLoad = function (e) {
              _this.removecanceledFile(e, files);

              return {};
            };

            ajax.send(formData);
          }
        }
      });
    }
  };

  Uploader.prototype.removecanceledFile = function (e, file) {
    var liElement = this.getLiElement(file);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement) || liElement.querySelector('.' + RETRY_ICON) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.' + ABORT_ICON))) {
      return;
    }

    this.updateStatus(file, this.localizedTexts('fileUploadCancel'), '5');
    this.renderFailureState(e, file, liElement);
    var spinnerTarget = liElement.querySelector('.' + REMOVE_ICON);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement)) {
      Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["hideSpinner"])(spinnerTarget);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.e-spinner-pane'))) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(liElement.querySelector('.e-spinner-pane'));
      }
    }

    var requestResponse = e && e.currentTarget ? this.getResponse(e) : null;
    var args = {
      event: e,
      response: requestResponse,
      operation: 'cancel',
      file: file
    };
    this.trigger('success', args);
  };

  Uploader.prototype.renderFailureState = function (e, file, liElement) {
    var _this = this;

    this.updateProgressBarClasses(liElement, UPLOAD_FAILED);
    this.removeProgressbar(liElement, 'failure');

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.e-file-status'))) {
      liElement.querySelector('.e-file-status').classList.add(UPLOAD_FAILED);
    }

    var deleteIcon = liElement.querySelector('.' + ABORT_ICON);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(deleteIcon)) {
      return;
    }

    deleteIcon.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS);
    deleteIcon.classList.add(REMOVE_ICON);
    deleteIcon.setAttribute('title', this.localizedTexts('remove'));
    this.pauseButton = this.createElement('span', {
      className: 'e-icons e-file-reload-btn',
      attrs: {
        'tabindex': this.btnTabIndex
      }
    });
    deleteIcon.parentElement.insertBefore(this.pauseButton, deleteIcon);
    this.pauseButton.setAttribute('title', this.localizedTexts('retry'));
    var retryElement = liElement.querySelector('.' + RETRY_ICON);
    /* istanbul ignore next */

    retryElement.addEventListener('click', function (e) {
      _this.reloadcanceledFile(e, file, liElement, false);
    }, false);
  };

  Uploader.prototype.reloadcanceledFile = function (e, file, liElement, custom) {
    file.statusCode = '1';
    file.status = this.localizedTexts('readyToUploadMessage');

    if (!custom) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.' + STATUS))) {
        liElement.querySelector('.' + STATUS).classList.remove(UPLOAD_FAILED);
      }

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.' + RETRY_ICON))) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(liElement.querySelector('.' + RETRY_ICON));
      }

      this.pauseButton = null;
    }
    /* istanbul ignore next */


    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement)) {
      liElement.classList.add(RESTRICT_RETRY);
    }

    this.upload([file]);
  };
  /* istanbul ignore next */


  Uploader.prototype.uploadComplete = function (e, file, customUI) {
    var status = e.target;

    if (status.readyState === 4 && status.status >= 200 && status.status <= 299) {
      var li = this.getLiElement(file);

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li) && (!customUI || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(customUI))) {
        return;
      }

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li)) {
        this.updateProgressBarClasses(li, UPLOAD_SUCCESS);
        this.removeProgressbar(li, 'success');
        var iconEle = li.querySelector('.' + ABORT_ICON);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(iconEle)) {
          iconEle.classList.add(DELETE_ICON);
          iconEle.setAttribute('title', this.localizedTexts('delete'));
          iconEle.classList.remove(ABORT_ICON);
          iconEle.classList.remove(UPLOAD_INPROGRESS);
        }
      }

      this.raiseSuccessEvent(e, file);
    } else {
      this.uploadFailed(e, file);
    }
  };

  Uploader.prototype.getResponse = function (e) {
    var target = e.currentTarget;
    var response = {
      readyState: target.readyState,
      statusCode: target.status,
      statusText: target.statusText,
      headers: target.getAllResponseHeaders(),
      withCredentials: target.withCredentials
    };
    return response;
  };

  Uploader.prototype.raiseSuccessEvent = function (e, file) {
    var _this = this;

    var response = e && e.currentTarget ? this.getResponse(e) : null;
    var statusMessage = this.localizedTexts('uploadSuccessMessage');
    var args = {
      e: e,
      response: response,
      operation: 'upload',
      file: this.updateStatus(file, statusMessage, '2', false),
      statusText: statusMessage
    };
    var liElement = this.getLiElement(file);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement)) {
      var spinnerEle = liElement.querySelector('.' + SPINNER_PANE);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(spinnerEle)) {
        Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["hideSpinner"])(liElement);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(spinnerEle);
      }
    }

    this.trigger('success', args, function (args) {
      _this.updateStatus(file, args.statusText, '2');

      _this.uploadedFilesData.push(file);

      _this.trigger('change', {
        file: _this.uploadedFilesData
      });

      _this.checkActionButtonStatus();

      if (_this.fileList.length > 0) {
        if (!_this.getLiElement(file).classList.contains(RESTRICT_RETRY)) {
          _this.uploadSequential();

          _this.checkActionComplete(true);
        } else {
          /* istanbul ignore next */
          _this.getLiElement(file).classList.remove(RESTRICT_RETRY);
        }
      }
    });
  };

  Uploader.prototype.uploadFailed = function (e, file) {
    var _this = this;

    var li = this.getLiElement(file);
    var response = e && e.currentTarget ? this.getResponse(e) : null;
    var statusMessage = this.localizedTexts('uploadFailedMessage');
    var args = {
      e: e,
      response: response,
      operation: 'upload',
      file: this.updateStatus(file, statusMessage, '0', false),
      statusText: statusMessage
    };

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li)) {
      this.renderFailureState(e, file, li);
    }

    this.trigger('failure', args, function (args) {
      _this.updateStatus(file, args.statusText, '0');

      _this.checkActionButtonStatus();

      _this.uploadSequential();

      _this.checkActionComplete(true);
    });
  };

  Uploader.prototype.uploadSequential = function () {
    if (this.sequentialUpload) {
      if (this.autoUpload) {
        /* istanbul ignore next */
        this.checkAutoUpload(this.filesData);
      } else {
        this.uploadButtonClick();
      }
    }
  };

  Uploader.prototype.checkActionComplete = function (increment) {
    if (increment) {
      ++this.actionCompleteCount;
    } else {
      --this.actionCompleteCount;
    }

    this.raiseActionComplete();
  };

  Uploader.prototype.raiseActionComplete = function () {
    if (this.filesData.length === this.actionCompleteCount && this.flag) {
      this.flag = false;
      var eventArgs = {
        fileData: []
      };
      eventArgs.fileData = this.getSelectedFileStatus(this.selectedFiles);
      this.trigger('actionComplete', eventArgs);
    }
  };

  Uploader.prototype.getSelectedFileStatus = function (selectedFiles) {
    var matchFiles = [];
    var matchFilesIndex = 0;

    for (var selectFileIndex = 0; selectFileIndex < selectedFiles.length; selectFileIndex++) {
      var selectedFileData = selectedFiles[selectFileIndex];

      for (var fileDataIndex = 0; fileDataIndex < this.filesData.length; fileDataIndex++) {
        if (this.filesData[fileDataIndex].name === selectedFileData.name && this.filesData[fileDataIndex].status === selectedFileData.status) {
          matchFiles[matchFilesIndex] = this.filesData[fileDataIndex];
          ++matchFilesIndex;
        }
      }
    }

    return matchFiles;
  };

  Uploader.prototype.updateProgressBarClasses = function (li, className) {
    var progressBar = li.querySelector('.' + PROGRESSBAR);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(progressBar)) {
      progressBar.classList.add(className);
    }
  };

  Uploader.prototype.removeProgressbar = function (li, callType) {
    var _this = this;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li.querySelector('.' + PROGRESS_WRAPPER))) {
      this.progressAnimation = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"]({
        duration: 1250
      });
      this.progressAnimation.animate(li.querySelector('.' + PROGRESS_WRAPPER), {
        name: 'FadeOut'
      });
      this.progressAnimation.animate(li.querySelector('.' + PROGRESSBAR_TEXT), {
        name: 'FadeOut'
      });
      setTimeout(function () {
        _this.animateProgressBar(li, callType);
      }, 750);
    }
  };
  /* istanbul ignore next */


  Uploader.prototype.animateProgressBar = function (li, callType) {
    if (callType === 'success') {
      li.classList.add(UPLOAD_SUCCESS);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li.querySelector('.' + STATUS))) {
        li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS);
        this.progressAnimation.animate(li.querySelector('.' + STATUS), {
          name: 'FadeIn'
        });
        li.querySelector('.' + STATUS).classList.add(UPLOAD_SUCCESS);
      }
    } else {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li.querySelector('.' + STATUS))) {
        li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS);
        this.progressAnimation.animate(li.querySelector('.' + STATUS), {
          name: 'FadeIn'
        });
        li.querySelector('.' + STATUS).classList.add(UPLOAD_FAILED);
      }
    }

    if (li.querySelector('.' + PROGRESS_WRAPPER)) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(li.querySelector('.' + PROGRESS_WRAPPER));
    }
  };

  Uploader.prototype.setExtensions = function (extensions) {
    if (extensions !== '' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(extensions)) {
      this.element.setAttribute('accept', extensions);
    } else {
      this.element.removeAttribute('accept');
    }
  };

  Uploader.prototype.templateComplier = function (uploadTemplate) {
    if (uploadTemplate) {
      try {
        if (typeof uploadTemplate !== 'function' && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])(uploadTemplate, document).length) {
          return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])(uploadTemplate, document).innerHTML.trim());
        } else {
          return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(uploadTemplate);
        }
      } catch (exception) {
        return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(uploadTemplate);
      }
    }

    return undefined;
  };

  Uploader.prototype.setRTL = function () {
    if (this.enableRtl) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.uploadWrapper], RTL);
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.uploadWrapper], RTL);
    }
  };

  Uploader.prototype.localizedTexts = function (localeText) {
    this.l10n.setLocale(this.locale);
    return this.l10n.getConstant(localeText);
  };

  Uploader.prototype.setControlStatus = function () {
    if (!this.enabled) {
      this.uploadWrapper.classList.add(DISABLED);
      this.element.setAttribute('disabled', 'disabled');
      this.browseButton.setAttribute('disabled', 'disabled');

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.clearButton)) {
        this.clearButton.setAttribute('disabled', 'disabled');
      }

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.uploadButton)) {
        this.uploadButton.setAttribute('disabled', 'disabled');
      }
    } else {
      if (this.uploadWrapper.classList.contains(DISABLED)) {
        this.uploadWrapper.classList.remove(DISABLED);
      }

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.browseButton) && this.element.hasAttribute('disabled')) {
        this.element.removeAttribute('disabled');
        this.browseButton.removeAttribute('disabled');
      }

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.clearButton) && this.clearButton.hasAttribute('disabled')) {
        this.clearButton.removeAttribute('disabled');
      }

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.uploadButton) && this.uploadButton.hasAttribute('disabled')) {
        this.uploadButton.hasAttribute('disabled');
      }
    }
  };

  Uploader.prototype.checkHTMLAttributes = function (isDynamic) {
    var attributes = isDynamic ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ['accept', 'multiple', 'disabled'];

    for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {
      var prop = attributes_1[_i];

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.getAttribute(prop))) {
        switch (prop) {
          case 'accept':
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.uploaderOptions) || this.uploaderOptions['allowedExtensions'] === undefined || isDynamic) {
              this.setProperties({
                allowedExtensions: this.element.getAttribute('accept')
              }, !isDynamic);
              this.initialAttr.accept = this.allowedExtensions;
            }

            break;

          case 'multiple':
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.uploaderOptions) || this.uploaderOptions['multiple'] === undefined || isDynamic) {
              var isMutiple = this.element.getAttribute(prop) === 'multiple' || this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? true : false;
              this.setProperties({
                multiple: isMutiple
              }, !isDynamic);
              this.initialAttr.multiple = true;
            }

            break;

          case 'disabled':
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.uploaderOptions) || this.uploaderOptions['enabled'] === undefined || isDynamic) {
              var isDisabled = this.element.getAttribute(prop) === 'disabled' || this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? false : true;
              this.setProperties({
                enabled: isDisabled
              }, !isDynamic);
              this.initialAttr.disabled = true;
            }

        }
      }
    }
  };

  Uploader.prototype.chunkUpload = function (file, custom, fileIndex) {
    var start = 0;
    var end = Math.min(this.asyncSettings.chunkSize, file.size);
    var index = 0;
    var blob = file.rawFile.slice(start, end);
    var metaData = {
      chunkIndex: index,
      blob: blob,
      file: file,
      start: start,
      end: end,
      retryCount: 0,
      request: null
    };
    this.sendRequest(file, metaData, custom, fileIndex);
  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars


  Uploader.prototype.sendRequest = function (file, metaData, custom, fileIndex) {
    var _this = this;

    var formData = new FormData();
    var blob = file.rawFile.slice(metaData.start, metaData.end);
    formData.append(this.uploaderName, blob, file.name);
    formData.append('chunk-index', metaData.chunkIndex.toString());
    formData.append('chunkIndex', metaData.chunkIndex.toString());
    var totalChunk = Math.max(Math.ceil(file.size / this.asyncSettings.chunkSize), 1);
    formData.append('total-chunk', totalChunk.toString());
    formData.append('totalChunk', totalChunk.toString());
    var ajax = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Ajax"]({
      url: this.asyncSettings.saveUrl,
      type: 'POST',
      async: true,
      contentType: null
    });
    ajax.emitError = false;

    ajax.onLoad = function (e) {
      _this.chunkUploadComplete(e, metaData, custom);

      return {};
    };

    ajax.onUploadProgress = function (e) {
      _this.chunkUploadInProgress(e, metaData, custom);

      return {};
    };

    var eventArgs = {
      fileData: file,
      customFormData: [],
      cancel: false,
      chunkSize: this.asyncSettings.chunkSize === 0 ? null : this.asyncSettings.chunkSize
    };

    ajax.beforeSend = function (e) {
      eventArgs.currentRequest = ajax.httpRequest;
      eventArgs.currentChunkIndex = metaData.chunkIndex;

      if (eventArgs.currentChunkIndex === 0) {
        // This event is currently not required but to avoid breaking changes for previous customer, we have included.
        _this.trigger('uploading', eventArgs, function (eventArgs) {
          _this.uploadingEventCallback(formData, eventArgs, e, file);
        });
      } else {
        _this.trigger('chunkUploading', eventArgs, function (eventArgs) {
          _this.uploadingEventCallback(formData, eventArgs, e, file);
        });
      }
    };
    /* istanbul ignore next */


    ajax.onError = function (e) {
      _this.chunkUploadFailed(e, metaData, custom);

      return {};
    };

    ajax.send(formData);
    metaData.request = ajax;
  };

  Uploader.prototype.uploadingEventCallback = function (formData, eventArgs, e, file) {
    if (eventArgs.cancel) {
      this.eventCancelByArgs(e, eventArgs, file);
    } else {
      this.updateFormData(formData, eventArgs.customFormData);
    }
  };

  Uploader.prototype.eventCancelByArgs = function (e, eventArgs, file) {
    var _this = this;

    e.cancel = true;

    if (eventArgs.fileData.statusCode === '5') {
      return;
    }

    eventArgs.fileData.statusCode = '5';
    eventArgs.fileData.status = this.localizedTexts('fileUploadCancel');
    var liElement = this.getLiElement(eventArgs.fileData);

    if (liElement) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.' + STATUS))) {
        liElement.querySelector('.' + STATUS).innerHTML = this.localizedTexts('fileUploadCancel');
        liElement.querySelector('.' + STATUS).classList.add(UPLOAD_FAILED);
      }

      this.pauseButton = this.createElement('span', {
        className: 'e-icons e-file-reload-btn',
        attrs: {
          'tabindex': this.btnTabIndex
        }
      });
      var removeIcon = liElement.querySelector('.' + REMOVE_ICON);

      if (removeIcon) {
        removeIcon.parentElement.insertBefore(this.pauseButton, removeIcon);
      }

      this.pauseButton.setAttribute('title', this.localizedTexts('retry'));
      /* istanbul ignore next */

      this.pauseButton.addEventListener('click', function (e) {
        _this.reloadcanceledFile(e, file, liElement);
      }, false);
      this.checkActionButtonStatus();
    }
  };

  Uploader.prototype.checkChunkUpload = function () {
    return this.asyncSettings.chunkSize <= 0 || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.asyncSettings.chunkSize) ? false : true;
  };

  Uploader.prototype.chunkUploadComplete = function (e, metaData, custom) {
    var _this = this;

    var response = e.target;
    var liElement;

    if (response.readyState === 4 && response.status >= 200 && response.status < 300) {
      var requestResponse = e && e.currentTarget ? this.getResponse(e) : null;
      var totalChunk = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);
      var eventArgs = {
        event: e,
        file: metaData.file,
        chunkIndex: metaData.chunkIndex,
        totalChunk: totalChunk,
        chunkSize: this.asyncSettings.chunkSize,
        response: requestResponse
      };
      this.trigger('chunkSuccess', eventArgs);

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(custom) || !custom) {
        liElement = this.getLiElement(metaData.file);
      }

      this.updateMetaData(metaData);

      if (metaData.end === metaData.file.size) {
        metaData.file.statusCode = '3';
      }

      if (metaData.file.statusCode === '5') {
        var eventArgs_1 = {
          event: e,
          fileData: metaData.file,
          cancel: false,
          customFormData: []
        };
        this.trigger('canceling', eventArgs_1, function (eventArgs) {
          /* istanbul ignore next */
          if (eventArgs.cancel) {
            metaData.file.statusCode = '3';
            var spinnerTarget = liElement.querySelector('.' + ABORT_ICON);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(spinnerTarget)) {
              Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["hideSpinner"])(spinnerTarget);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(liElement.querySelector('.e-spinner-pane'));
            }

            _this.sendNextRequest(metaData);
          } else {
            metaData.request.emitError = false;
            response.abort();
            var formData = new FormData();

            var name_2 = _this.element.getAttribute('name');

            formData.append(name_2, metaData.file.name);
            formData.append('cancel-uploading', metaData.file.name);
            formData.append('cancelUploading', metaData.file.name);

            _this.updateFormData(formData, eventArgs.customFormData);

            var ajax = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Ajax"](_this.asyncSettings.removeUrl, 'POST', true, null);
            ajax.emitError = false;

            ajax.onLoad = function (e) {
              _this.removeChunkFile(e, metaData, custom);

              return {};
            };

            ajax.send(formData);
          }
        });
      } else {
        if (totalChunk - 1 === metaData.chunkIndex && totalChunk > metaData.chunkIndex) {
          var index = this.pausedData.indexOf(metaData);

          if (index >= 0) {
            this.pausedData.splice(index, 1);
          }

          if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(custom) || !custom) && liElement) {
            if (liElement && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.' + PAUSE_UPLOAD))) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(liElement.querySelector('.' + PAUSE_UPLOAD));
            }

            this.removeChunkProgressBar(metaData);
          }

          this.raiseSuccessEvent(e, metaData.file);
          return;
        }

        if (metaData.file.statusCode !== '4') {
          this.sendNextRequest(metaData);
        }
      }
    } else {
      this.chunkUploadFailed(e, metaData);
    }
  };

  Uploader.prototype.sendNextRequest = function (metaData) {
    metaData.start = metaData.end;
    metaData.end += this.asyncSettings.chunkSize;
    metaData.end = Math.min(metaData.end, metaData.file.size);
    metaData.chunkIndex += 1;
    this.sendRequest(metaData.file, metaData);
  };

  Uploader.prototype.removeChunkFile = function (e, metaData, custom) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(custom) && !custom) {
      var liElement = this.getLiElement(metaData.file);
      var deleteIcon = liElement.querySelector('.' + ABORT_ICON);
      var spinnerTarget = deleteIcon;
      this.updateStatus(metaData.file, this.localizedTexts('fileUploadCancel'), '5');
      this.updateProgressBarClasses(liElement, UPLOAD_FAILED);
      this.removeProgressbar(liElement, 'failure');
      deleteIcon && deleteIcon.classList.remove(ABORT_ICON);
      deleteIcon && deleteIcon.classList.add(REMOVE_ICON);
      deleteIcon && deleteIcon.setAttribute('title', this.localizedTexts('remove'));
      var pauseIcon = liElement.querySelector('.' + PAUSE_UPLOAD);
      pauseIcon && pauseIcon.classList.add(RETRY_ICON);
      pauseIcon && pauseIcon.classList.remove(PAUSE_UPLOAD);
      pauseIcon && pauseIcon.setAttribute('title', this.localizedTexts('retry'));

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(deleteIcon) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.e-spinner-pane'))) {
        Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["hideSpinner"])(spinnerTarget);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(liElement.querySelector('.e-spinner-pane'));
      }
    }
  };

  Uploader.prototype.pauseUpload = function (metaData, e, custom) {
    metaData.file.statusCode = '4';
    metaData.file.status = this.localizedTexts('pause');
    this.updateMetaData(metaData);
    var eventArgs = {
      event: e ? e : null,
      file: metaData.file,
      chunkIndex: metaData.chunkIndex,
      chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),
      chunkSize: this.asyncSettings.chunkSize
    };
    this.abortUpload(metaData, custom, eventArgs);
  };

  Uploader.prototype.abortUpload = function (metaData, custom, eventArgs) {
    if (metaData.file.statusCode !== '4') {
      metaData.request.emitError = false;
      metaData.request.httpRequest.abort();
    }

    var liElement = this.getLiElement(metaData.file);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(custom) || !custom)) {
      var targetElement = liElement.querySelector('.' + PAUSE_UPLOAD);
      targetElement.classList.remove(PAUSE_UPLOAD);
      targetElement.classList.add(RESUME_UPLOAD);
      targetElement.setAttribute('title', this.localizedTexts('resume'));
      targetElement.nextElementSibling.classList.add(REMOVE_ICON);
      targetElement.nextElementSibling.classList.remove(ABORT_ICON);
      targetElement.nextElementSibling.setAttribute('title', this.localizedTexts('remove'));
    }

    for (var i = 0; i < this.pausedData.length; i++) {
      if (this.pausedData[i].file.name === metaData.file.name) {
        this.pausedData.splice(i, 1);
      }
    }

    this.pausedData.push(metaData);
    this.trigger('pausing', eventArgs);
  };

  Uploader.prototype.resumeUpload = function (metaData, e, custom) {
    var liElement = this.getLiElement(metaData.file);
    var targetElement;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement)) {
      targetElement = liElement.querySelector('.' + RESUME_UPLOAD);
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(targetElement) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(custom) || !custom)) {
      targetElement.classList.remove(RESUME_UPLOAD);
      targetElement.classList.add(PAUSE_UPLOAD);
      targetElement.setAttribute('title', this.localizedTexts('pause'));
      targetElement.nextElementSibling.classList.remove(REMOVE_ICON);
      targetElement.nextElementSibling.classList.add(ABORT_ICON);
      targetElement.nextElementSibling.setAttribute('title', this.localizedTexts('abort'));
    }

    metaData.file.status = this.localizedTexts('inProgress');
    metaData.file.statusCode = '3';
    this.updateMetaData(metaData);
    var eventArgs = {
      event: e ? e : null,
      file: metaData.file,
      chunkIndex: metaData.chunkIndex,
      chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),
      chunkSize: this.asyncSettings.chunkSize
    };
    this.trigger('resuming', eventArgs);

    for (var i = 0; i < this.pausedData.length; i++) {
      if (this.pausedData[i].end === this.pausedData[i].file.size) {
        this.chunkUploadComplete(e, metaData, custom);
      } else {
        if (this.pausedData[i].file.name === metaData.file.name) {
          this.pausedData[i].start = this.pausedData[i].end;
          this.pausedData[i].end = this.pausedData[i].end + this.asyncSettings.chunkSize;
          this.pausedData[i].end = Math.min(this.pausedData[i].end, this.pausedData[i].file.size);
          this.pausedData[i].chunkIndex = this.pausedData[i].chunkIndex + 1;
          this.sendRequest(this.pausedData[i].file, this.pausedData[i], custom);
        }
      }
    }
  };

  Uploader.prototype.updateMetaData = function (metaData) {
    if (this.uploadMetaData.indexOf(metaData) === -1) {
      this.uploadMetaData.push(metaData);
    } else {
      this.uploadMetaData.splice(this.uploadMetaData.indexOf(metaData), 1);
      this.uploadMetaData.push(metaData);
    }
  };

  Uploader.prototype.removeChunkProgressBar = function (metaData) {
    var liElement = this.getLiElement(metaData.file);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement)) {
      this.updateProgressBarClasses(liElement, UPLOAD_SUCCESS);
      this.removeProgressbar(liElement, 'success');
      var cancelButton = liElement.querySelector('.' + ABORT_ICON);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cancelButton)) {
        cancelButton.classList.add(DELETE_ICON);
        cancelButton.setAttribute('title', this.localizedTexts('delete'));
        cancelButton.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS);
      }
    }
  };

  Uploader.prototype.chunkUploadFailed = function (e, metaData, custom) {
    var _this = this;

    var chunkCount = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);
    var liElement;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(custom) || !custom)) {
      liElement = this.getLiElement(metaData.file);
    }

    var requestResponse = e && e.currentTarget ? this.getResponse(e) : null;
    var eventArgs = {
      event: e,
      file: metaData.file,
      chunkIndex: metaData.chunkIndex,
      totalChunk: chunkCount,
      chunkSize: this.asyncSettings.chunkSize,
      cancel: false,
      response: requestResponse
    };
    this.trigger('chunkFailure', eventArgs, function (eventArgs) {
      // To prevent triggering of failure event
      if (!eventArgs.cancel) {
        if (metaData.retryCount < _this.asyncSettings.retryCount) {
          setTimeout(function () {
            _this.retryRequest(liElement, metaData, custom);
          }, _this.asyncSettings.retryAfterDelay);
        } else {
          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement)) {
            var pauseButton = liElement.querySelector('.' + PAUSE_UPLOAD) ? liElement.querySelector('.' + PAUSE_UPLOAD) : liElement.querySelector('.' + RESUME_UPLOAD);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(pauseButton)) {
              pauseButton.classList.add(RETRY_ICON);
              pauseButton.classList.remove(PAUSE_UPLOAD, RESUME_UPLOAD);
            }

            _this.updateProgressBarClasses(liElement, UPLOAD_FAILED);

            _this.removeProgressbar(liElement, 'failure');

            liElement.querySelector('.e-icons').classList.remove(UPLOAD_INPROGRESS);
            var iconElement = liElement.querySelector('.' + ABORT_ICON) ? liElement.querySelector('.' + ABORT_ICON) : liElement.querySelector('.' + REMOVE_ICON);
            iconElement.classList.remove(ABORT_ICON);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.' + PAUSE_UPLOAD))) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(liElement.querySelector('.' + PAUSE_UPLOAD));
            }

            if (metaData.start > 0) {
              iconElement.classList.add(DELETE_ICON);
              iconElement.setAttribute('title', _this.localizedTexts('delete'));
            } else {
              iconElement.classList.add(REMOVE_ICON);
              iconElement.setAttribute('title', _this.localizedTexts('remove'));
            }
          }

          metaData.retryCount = 0;
          var file_1 = metaData.file;

          var failureMessage = _this.localizedTexts('uploadFailedMessage');

          var args = {
            e: e,
            response: requestResponse,
            operation: 'upload',
            file: _this.updateStatus(file_1, failureMessage, '0', false),
            statusText: failureMessage
          };

          _this.trigger('failure', args, function (args) {
            _this.updateStatus(file_1, args.statusText, '0');

            _this.uploadSequential();

            _this.checkActionComplete(true);
          });
        }
      }
    });
  };

  Uploader.prototype.retryRequest = function (liElement, metaData, custom) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(custom) || !custom) && liElement) {
      this.updateProgressBarClasses(liElement, UPLOAD_FAILED);
    }

    metaData.retryCount += 1;
    this.sendRequest(metaData.file, metaData);
  };

  Uploader.prototype.checkPausePlayAction = function (e) {
    var targetElement = e.target;
    var selectedElement = e.target.parentElement;
    var index = this.fileList.indexOf(selectedElement);
    var fileData = this.filesData[index];
    var metaData = this.getCurrentMetaData(fileData);

    if (targetElement.classList.contains(PAUSE_UPLOAD)) {
      /* istanbul ignore next */
      this.pauseUpload(metaData, e);
    } else if (targetElement.classList.contains(RESUME_UPLOAD)) {
      /* istanbul ignore next */
      this.resumeUpload(metaData, e);
    } else if (targetElement.classList.contains(RETRY_ICON)) {
      if (metaData.file.status === this.localizedTexts('fileUploadCancel')) {
        this.retryUpload(metaData, false);
      } else {
        this.retryUpload(metaData, true);
      }
    }
  };

  Uploader.prototype.retryUpload = function (metaData, fromcanceledStage) {
    if (fromcanceledStage) {
      metaData.end = metaData.end + this.asyncSettings.chunkSize;
      metaData.start = metaData.start + this.asyncSettings.chunkSize;
      this.sendRequest(metaData.file, metaData);
    } else {
      metaData.file.statusCode = '1';
      metaData.file.status = this.localizedTexts('readyToUploadMessage');
      this.chunkUpload(metaData.file);
    }
    /* istanbul ignore next */


    this.getLiElement(metaData.file).classList.add(RESTRICT_RETRY);
  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars


  Uploader.prototype.chunkUploadInProgress = function (e, metaData, custom) {
    var _this = this;

    if (metaData.file.statusCode === '4') {
      return;
    }

    if (metaData.file.statusCode !== '4' && metaData.file.statusCode !== '5') {
      metaData.file.statusCode = '3';
      metaData.file.status = this.localizedTexts('inProgress');
    }

    this.updateMetaData(metaData);
    var liElement = this.getLiElement(metaData.file);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement)) {
      return;
    }

    var retryElement = liElement.querySelector('.' + RETRY_ICON);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(retryElement)) {
      retryElement.classList.add(PAUSE_UPLOAD);
      retryElement.setAttribute('title', this.localizedTexts('pause'));
      retryElement.classList.remove(RETRY_ICON);
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement)) {
      if (!(liElement.querySelectorAll('.' + PROGRESS_WRAPPER).length > 0)) {
        var statusElement = liElement.querySelector('.' + STATUS);

        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template)) {
          statusElement.classList.add(UPLOAD_INPROGRESS);
          statusElement.classList.remove(UPLOAD_FAILED);
          this.createProgressBar(liElement);
          this.updateProgressBarClasses(liElement, UPLOAD_INPROGRESS);
        }

        var clearIcon = liElement.querySelector('.' + REMOVE_ICON) ? liElement.querySelector('.' + REMOVE_ICON) : liElement.querySelector('.' + DELETE_ICON);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(clearIcon)) {
          clearIcon.classList.add(ABORT_ICON);
          clearIcon.setAttribute('title', this.localizedTexts('abort'));
          clearIcon.classList.remove(REMOVE_ICON);
        }
      }

      if (!isNaN(Math.round(e.loaded / e.total * 100)) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template) && metaData.file.statusCode !== '4') {
        var progressVal = void 0;
        var totalChunks = Math.ceil(metaData.file.size / this.asyncSettings.chunkSize) - 1;

        if (this.asyncSettings.chunkSize && totalChunks) {
          progressVal = Math.round(metaData.chunkIndex / totalChunks * 100);
          this.changeProgressValue(liElement, progressVal.toString() + '%');
        }
      }

      if (metaData.chunkIndex === 0) {
        this.checkActionButtonStatus();
      }
    }

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.' + PAUSE_UPLOAD)) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.' + DELETE_ICON))) {
      this.pauseButton = this.createElement('span', {
        className: 'e-icons e-file-pause-btn',
        attrs: {
          'tabindex': this.btnTabIndex
        }
      });

      if (this.browserName === 'msie') {
        this.pauseButton.classList.add('e-msie');
      }

      var abortIcon = liElement.querySelector('.' + ABORT_ICON);
      abortIcon.parentElement.insertBefore(this.pauseButton, abortIcon);
      this.pauseButton.setAttribute('title', this.localizedTexts('pause'));
      this.pauseButton.addEventListener('click', function (e) {
        _this.checkPausePlayAction(e);
      }, false);
    }
  };
  /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */

  /**
   * It is used to convert bytes value into kilobytes or megabytes depending on the size based
   * on [binary prefix](https://en.wikipedia.org/wiki/Binary_prefix).
   *
   * @param { number } bytes - Specifies the file size in bytes.
   * @returns {string}
   */


  Uploader.prototype.bytesToSize = function (bytes) {
    var i = -1;

    if (!bytes) {
      return '0.0 KB';
    }

    do {
      bytes = bytes / 1024;
      i++;
    } while (bytes > 99);

    if (i >= 2) {
      bytes = bytes * 1024;
      i = 1;
    }

    return Math.max(bytes, 0).toFixed(1) + ' ' + ['KB', 'MB'][i];
  };
  /**
   * Allows you to sort the file data alphabetically based on its file name clearly.
   *
   * @param { FileList } filesData - specifies the files data for upload.
   * @returns {File[]}
   */

  /* istanbul ignore next */


  Uploader.prototype.sortFileList = function (filesData) {
    filesData = filesData ? filesData : this.sortFilesList;
    var files = filesData;
    var fileNames = [];

    for (var i = 0; i < files.length; i++) {
      fileNames.push(files[i].name);
    }

    var sortedFileNames = fileNames.sort();
    var sortedFilesData = [];

    for (var _i = 0, sortedFileNames_1 = sortedFileNames; _i < sortedFileNames_1.length; _i++) {
      var name_3 = sortedFileNames_1[_i];

      for (var i = 0; i < files.length; i++) {
        if (name_3 === files[i].name) {
          sortedFilesData.push(files[i]);
        }
      }
    }

    return sortedFilesData;
  };
  /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */

  /**
   * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.
   *
   * @method destroy
   * @returns {void}
   */


  Uploader.prototype.destroy = function () {
    this.element.value = null;
    this.clearTemplate();
    this.clearAll();
    this.unWireEvents();
    this.unBindDropEvents();

    if (this.multiple) {
      this.element.removeAttribute('multiple');
    }

    if (!this.enabled) {
      this.element.removeAttribute('disabled');
    }

    this.element.removeAttribute('accept');
    this.setInitialAttributes();
    var attributes = ['aria-label', 'directory', 'webkitdirectory', 'tabindex'];

    for (var _i = 0, attributes_2 = attributes; _i < attributes_2.length; _i++) {
      var key = attributes_2[_i];
      this.element.removeAttribute(key);
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.uploadWrapper)) {
      this.uploadWrapper.parentElement.appendChild(this.element);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.uploadWrapper);
    }

    this.uploadWrapper = null;
    this.uploadWrapper = null;
    this.browseButton = null;
    this.dropAreaWrapper = null;
    this.dropZoneElement = null;
    this.dropArea = null;
    this.keyboardModule = null;
    this.clearButton = null;
    this.uploadButton = null;

    _super.prototype.destroy.call(this);
  };
  /**
   * Allows you to call the upload process manually by calling save URL action.
   * To process the selected files (added in upload queue), pass an empty argument otherwise
   * upload the specific file based on its argument.
   *
   * @param { FileInfo | FileInfo[] } files - Specifies the files data for upload.
   * @param {boolean} custom - Specifies whether the uploader is rendered with custom file list.
   * @returns {void}
   */


  Uploader.prototype.upload = function (files, custom) {
    var _this = this;

    files = files ? files : this.filesData;

    if (this.sequentialUpload && (this.isFirstFileOnSelection || custom)) {
      this.sequenceUpload(files);
    } else {
      var uploadFiles_1 = this.getFilesInArray(files);
      var eventArgs = {
        customFormData: [],
        currentRequest: null,
        cancel: false
      };
      this.trigger('beforeUpload', eventArgs, function (eventArgs) {
        if (!eventArgs.cancel) {
          _this.uploadFiles(uploadFiles_1, custom);
        }
      });
    }
  };

  Uploader.prototype.getFilesInArray = function (files) {
    var uploadFiles = [];

    if (files instanceof Array) {
      uploadFiles = files;
    } else {
      uploadFiles.push(files);
    }

    return uploadFiles;
  };
  /* istanbul ignore next */


  Uploader.prototype.serverReadFileBase64 = function (fileIndex, position, totalCount) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var file = _this.fileStreams[fileIndex].rawFile;

      try {
        var reader = new FileReader();

        reader.onload = function (args) {
          return function () {
            try {
              var contents = args.result;
              var data = contents ? contents.split(';base64,')[1] : null;
              resolve(data);
            } catch (e) {
              reject(e);
            }
          };
        }(reader);

        reader.readAsDataURL(file.slice(position, position + totalCount));
      } catch (e) {
        reject(e);
      }
    });
  };
  /* eslint-disable @typescript-eslint/no-unused-vars */

  /* istanbul ignore next */


  Uploader.prototype.uploadFileCount = function (ele) {
    /* eslint-enable @typescript-eslint/no-unused-vars */
    var files = this.filesData;

    if (!files || files.length === 0) {
      return -1;
    }

    var result = files.length;
    return result;
  };
  /* eslint-disable @typescript-eslint/no-unused-vars */

  /* istanbul ignore next */


  Uploader.prototype.getFileRead = function (index, ele) {
    /* eslint-enable @typescript-eslint/no-unused-vars */
    var files = this.filesData;

    if (!files || files.length === 0) {
      return -1;
    }

    var file = files[index];
    var fileCount = this.newFileRef++;
    this.fileStreams[fileCount] = file;
    return fileCount;
  };
  /* eslint-disable @typescript-eslint/no-unused-vars */

  /* istanbul ignore next */


  Uploader.prototype.getFileInfo = function (index, ele) {
    /* eslint-enable @typescript-eslint/no-unused-vars */
    var files = this.filesData;

    if (!files || files.length === 0) {
      return null;
    }

    var file = files[index];

    if (!file) {
      return null;
    }

    return this.filesData[index];
  };

  Uploader.prototype.uploadFiles = function (files, custom) {
    var selectedFiles = [];

    if (this.asyncSettings.saveUrl === '' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.asyncSettings.saveUrl)) {
      return;
    }

    if (!custom || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(custom)) {
      if (!this.multiple) {
        var file = [];
        file.push(files[0]);
        selectedFiles = this.filterfileList(file);
      } else {
        selectedFiles = this.filterfileList(files);
      }
    } else {
      selectedFiles = files;
    }

    for (var i = 0; i < selectedFiles.length; i++) {
      this.uploadFilesRequest(selectedFiles, i, custom);
    }
  };

  Uploader.prototype.uploadFilesRequest = function (selectedFiles, i, custom) {
    var _this = this;

    var cloneFiles = [];
    var chunkEnabled = this.checkChunkUpload();
    var ajax = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Ajax"](this.asyncSettings.saveUrl, 'POST', true, null);
    ajax.emitError = false;
    var getFileData;
    var eventArgs = {
      fileData: selectedFiles[i],
      customFormData: [],
      cancel: false
    };
    var formData = new FormData();

    ajax.beforeSend = function (e) {
      eventArgs.currentRequest = ajax.httpRequest;

      _this.trigger('uploading', eventArgs, function (eventArgs) {
        /* istanbul ignore next */
        if (eventArgs.cancel) {
          _this.eventCancelByArgs(e, eventArgs, selectedFiles[i]);
        }

        _this.updateFormData(formData, eventArgs.customFormData);
      });
    };

    if (selectedFiles[i].statusCode === '1') {
      var name_4 = this.element.getAttribute('name');
      formData.append(name_4, selectedFiles[i].rawFile, selectedFiles[i].name);

      if (chunkEnabled && selectedFiles[i].size > this.asyncSettings.chunkSize) {
        this.chunkUpload(selectedFiles[i], custom, i);
      } else {
        ajax.onLoad = function (e) {
          if (eventArgs.cancel) {
            return {};
          } else {
            _this.uploadComplete(e, selectedFiles[i], custom);

            return {};
          }
        };

        ajax.onUploadProgress = function (e) {
          if (eventArgs.cancel) {
            return {};
          } else {
            _this.uploadInProgress(e, selectedFiles[i], custom, ajax);

            return {};
          }
        };
        /* istanbul ignore next */


        ajax.onError = function (e) {
          _this.uploadFailed(e, selectedFiles[i]);

          return {};
        };

        ajax.send(formData);
      }
    }
  };

  Uploader.prototype.spliceFiles = function (liIndex) {
    var liElement = this.fileList[liIndex];
    var allFiles = this.getFilesData();
    var nameElements = +liElement.getAttribute('data-files-count');
    var startIndex = 0;

    for (var i = 0; i < liIndex; i++) {
      startIndex += +this.fileList[i].getAttribute('data-files-count');
    }

    var endIndex = startIndex + nameElements - 1;

    for (var j = endIndex; j >= startIndex; j--) {
      allFiles.splice(j, 1);
    }
  };
  /* eslint-disable valid-jsdoc, jsdoc/require-param */

  /**
   * Remove the uploaded file from server manually by calling the remove URL action.
   * If you pass an empty argument to this method, the complete file list can be cleared,
   * otherwise remove the specific file based on its argument (“file_data”).
   *
   * @param { FileInfo | FileInfo[] } fileData - specifies the files data to remove from file list/server.
   * @param { boolean } customTemplate - Set true if the component rendering with customize template.
   * @param { boolean } removeDirectly - Set true if files remove without removing event.
   * @param { boolean } postRawFile - Set false, to post file name only to the remove action.
   * @returns {void}
   */


  Uploader.prototype.remove = function (fileData, customTemplate, removeDirectly, postRawFile, args) {
    var _this = this;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(postRawFile)) {
      postRawFile = true;
    }

    var eventArgs = {
      event: args,
      cancel: false,
      filesData: [],
      customFormData: [],
      postRawFile: postRawFile,
      currentRequest: null
    };
    var beforeEventArgs = {
      cancel: false,
      customFormData: [],
      currentRequest: null
    };
    this.trigger('beforeRemove', beforeEventArgs, function (beforeEventArgs) {
      if (!beforeEventArgs.cancel) {
        if (_this.isFormUpload()) {
          eventArgs.filesData = fileData;

          _this.trigger('removing', eventArgs, function (eventArgs) {
            if (!eventArgs.cancel) {
              var removingFiles = _this.getFilesInArray(fileData);

              var isLiRemoved = false;
              var liIndex = void 0;

              for (var _i = 0, removingFiles_1 = removingFiles; _i < removingFiles_1.length; _i++) {
                var data = removingFiles_1[_i];

                if (!isLiRemoved) {
                  liIndex = _this.fileList.indexOf(data.list);
                }

                if (liIndex > -1) {
                  var inputElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data.input) ? data.input : null;

                  if (inputElement) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(inputElement);
                  }

                  _this.spliceFiles(liIndex);

                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(_this.fileList[liIndex]);

                  _this.fileList.splice(liIndex, 1);

                  isLiRemoved = true;
                  liIndex = -1;
                }
              }
            }
          });
        } else if (_this.isForm && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this.asyncSettings.removeUrl) || _this.asyncSettings.removeUrl === '')) {
          eventArgs.filesData = _this.getFilesData();

          _this.trigger('removing', eventArgs, function (eventArgs) {
            if (!eventArgs.cancel) {
              _this.clearAll();
            }
          });
        } else {
          var removeFiles = [];
          fileData = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fileData) ? fileData : _this.filesData;

          if (fileData instanceof Array) {
            removeFiles = fileData;
          } else {
            removeFiles.push(fileData);
          }

          eventArgs.filesData = removeFiles;
          var removeUrl = _this.asyncSettings.removeUrl;
          var validUrl = removeUrl === '' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(removeUrl) ? false : true;

          var _loop_5 = function (files) {
            var fileUploadedIndex = _this.uploadedFilesData.indexOf(files);

            if ((files.statusCode === '2' || files.statusCode === '4' || files.statusCode === '0' && fileUploadedIndex !== -1) && validUrl) {
              _this.removeUploadedFile(files, eventArgs, removeDirectly, customTemplate);
            } else {
              if (!removeDirectly) {
                _this.trigger('removing', eventArgs, function (eventArgs) {
                  if (!eventArgs.cancel) {
                    _this.removeFilesData(files, customTemplate);
                  }
                });
              } else {
                _this.removeFilesData(files, customTemplate);
              }
            }

            if (args && !args.target.classList.contains(REMOVE_ICON)) {
              _this.checkActionComplete(false);
            }
          };

          for (var _i = 0, removeFiles_1 = removeFiles; _i < removeFiles_1.length; _i++) {
            var files = removeFiles_1[_i];

            _loop_5(files);
          }
        }
      }
    });
  };
  /* eslint-enable valid-jsdoc, jsdoc/require-param */

  /**
   * Clear all the file entries from list that can be uploaded files or added in upload queue.
   *
   * @returns {void}
   */


  Uploader.prototype.clearAll = function () {
    var _this = this;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.listParent)) {
      if (this.browserName !== 'msie') {
        this.element.value = '';
      }

      this.filesData = [];
      return;
    }

    var eventArgs = {
      cancel: false,
      filesData: this.filesData
    };
    this.trigger('clearing', eventArgs, function (eventArgs) {
      if (!eventArgs.cancel) {
        _this.clearData();

        _this.actionCompleteCount = 0;
        _this.count = -1;
      }
    });
  };
  /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */

  /**
   * Get the data of files which are shown in file list.
   *
   * @param { number } index - specifies the file list item(li) index.
   * @returns {FileInfo[]}
   */


  Uploader.prototype.getFilesData = function (index) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index)) {
      return this.filesData;
    } else {
      return this.getSelectedFiles(index);
    }
  };
  /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */

  /**
   * Pauses the in-progress chunked upload based on the file data.
   *
   * @param { FileInfo | FileInfo[] } fileData - specifies the files data to pause from uploading.
   * @param { boolean } custom - Set true if used custom UI.
   * @returns {void}
   */


  Uploader.prototype.pause = function (fileData, custom) {
    fileData = fileData ? fileData : this.filesData;
    var fileDataFiles = this.getFilesInArray(fileData);
    this.pauseUploading(fileDataFiles, custom);
  };

  Uploader.prototype.pauseUploading = function (fileData, custom) {
    var files = this.getFiles(fileData);

    for (var i = 0; i < files.length; i++) {
      if (files[i].statusCode === '3') {
        this.pauseUpload(this.getCurrentMetaData(files[i], null), null, custom);
      }
    }
  };

  Uploader.prototype.getFiles = function (fileData) {
    var files = [];

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fileData) && !(fileData instanceof Array)) {
      files.push(fileData);
    } else {
      files = fileData;
    }

    return files;
  };
  /**
   * Resumes the chunked upload that is previously paused based on the file data.
   *
   * @param { FileInfo | FileInfo[] } fileData - specifies the files data to resume the paused file.
   * @param { boolean } custom - Set true if used custom UI.
   * @returns {void}
   */


  Uploader.prototype.resume = function (fileData, custom) {
    fileData = fileData ? fileData : this.filesData;
    var fileDataFiles = this.getFilesInArray(fileData);
    this.resumeFiles(fileDataFiles, custom);
  };

  Uploader.prototype.resumeFiles = function (fileData, custom) {
    var files = this.getFiles(fileData);

    for (var i = 0; i < files.length; i++) {
      if (files[i].statusCode === '4') {
        this.resumeUpload(this.getCurrentMetaData(files[i], null), null, custom);
      }
    }
  };
  /**
   * Retries the canceled or failed file upload based on the file data.
   *
   * @param { FileInfo | FileInfo[] } fileData - specifies the files data to retry the canceled or failed file.
   * @param { boolean } fromcanceledStage - Set true to retry from canceled stage and set false to retry from initial stage.
   * @param {boolean} custom -Specifies whether the uploader is rendered with custom file list.
   * @returns {void}
   */


  Uploader.prototype.retry = function (fileData, fromcanceledStage, custom) {
    fileData = fileData ? fileData : this.filesData;
    var fileDataFiles = this.getFilesInArray(fileData);

    if (this.sequentialUpload && this.isFirstFileOnSelection) {
      this.isFirstFileOnSelection = false;
    }

    this.retryFailedFiles(fileDataFiles, fromcanceledStage, custom);
  };

  Uploader.prototype.retryFailedFiles = function (fileData, fromcanceledStage, custom) {
    var files = this.getFiles(fileData);

    for (var i = 0; i < files.length; i++) {
      if (files[i].statusCode === '5' || files[i].statusCode === '0') {
        if (this.asyncSettings.chunkSize > 0 && this.getCurrentMetaData(files[i], null)) {
          this.retryUpload(this.getCurrentMetaData(files[i], null), fromcanceledStage);
        } else {
          var liElement = void 0;

          if (!custom) {
            liElement = this.fileList[this.filesData.indexOf(files[i])];
          }

          this.reloadcanceledFile(null, files[i], liElement, custom);
        }
      }
    }
  };
  /**
   * Stops the in-progress chunked upload based on the file data.
   * When the file upload is canceled, the partially uploaded file is removed from server.
   *
   * @param { FileInfo | FileInfo[] } fileData - specifies the files data to cancel the progressing file.
   * @returns {void}
   */


  Uploader.prototype.cancel = function (fileData) {
    fileData = fileData ? fileData : this.filesData;
    var cancelingFiles = this.getFilesInArray(fileData);
    this.cancelUpload(cancelingFiles);
  };

  Uploader.prototype.cancelUpload = function (fileData) {
    var files = this.getFiles(fileData);

    if (this.asyncSettings.chunkSize > 0) {
      for (var i = 0; i < files.length; i++) {
        if (files[i].statusCode === '3') {
          var metaData = this.getCurrentMetaData(files[i], null);
          metaData.file.statusCode = '5';
          metaData.file.status = this.localizedTexts('fileUploadCancel');
          this.updateMetaData(metaData);
          this.showHideUploadSpinner(files[i]);
        }
      }
    } else {
      for (var i = 0; i < files.length; i++) {
        if (files[i].statusCode === '3') {
          files[i].statusCode = '5';
          files[i].status = this.localizedTexts('fileUploadCancel');
          this.showHideUploadSpinner(files[i]);
        }
      }
    }
  };

  Uploader.prototype.showHideUploadSpinner = function (files) {
    var liElement = this.getLiElement(files);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template)) {
      var spinnerTarget = liElement.querySelector('.' + ABORT_ICON);
      Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["createSpinner"])({
        target: spinnerTarget,
        width: '20px'
      });
      Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["showSpinner"])(spinnerTarget);
    }
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
    saveUrl: '',
    removeUrl: ''
  }, AsyncSettings)], Uploader.prototype, "asyncSettings", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Uploader.prototype, "sequentialUpload", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({})], Uploader.prototype, "htmlAttributes", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Uploader.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Uploader.prototype, "enabled", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Uploader.prototype, "template", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Uploader.prototype, "multiple", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Uploader.prototype, "autoUpload", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Uploader.prototype, "enableHtmlSanitizer", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, ButtonsProps)], Uploader.prototype, "buttons", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Uploader.prototype, "allowedExtensions", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], Uploader.prototype, "minFileSize", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(30000000)], Uploader.prototype, "maxFileSize", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Uploader.prototype, "dropArea", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([{}], FilesProp)], Uploader.prototype, "files", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Uploader.prototype, "showFileList", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Uploader.prototype, "directoryUpload", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Default')], Uploader.prototype, "dropEffect", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "created", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "actionComplete", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "rendering", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "beforeUpload", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "fileListRendering", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "selected", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "uploading", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "success", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "failure", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "removing", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "beforeRemove", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "clearing", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "progress", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "change", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "chunkSuccess", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "chunkFailure", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "chunkUploading", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "canceling", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "pausing", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "resuming", void 0);

  Uploader = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Uploader);
  return Uploader;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);


/* eslint-enable @typescript-eslint/no-explicit-any */

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-lists/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-lists/index.js ***!
  \*****************************************************/
/*! exports provided: classNames, FieldSettings, ListView, Virtualization, cssClass, ListBase, getFieldValues, Sortable, moveTo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/index */ "./node_modules/@syncfusion/ej2-lists/src/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "classNames", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["classNames"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FieldSettings", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["FieldSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListView", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["ListView"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Virtualization", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Virtualization"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cssClass", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["cssClass"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListBase", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["ListBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getFieldValues", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["getFieldValues"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sortable", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Sortable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "moveTo", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["moveTo"]; });

/**
 * index
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-lists/src/common/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-lists/src/common/index.js ***!
  \****************************************************************/
/*! exports provided: cssClass, ListBase, getFieldValues */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _list_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./list-base */ "./node_modules/@syncfusion/ej2-lists/src/common/list-base.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cssClass", function() { return _list_base__WEBPACK_IMPORTED_MODULE_0__["cssClass"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListBase", function() { return _list_base__WEBPACK_IMPORTED_MODULE_0__["ListBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getFieldValues", function() { return _list_base__WEBPACK_IMPORTED_MODULE_0__["getFieldValues"]; });

/**
 * Listview Component
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-lists/src/common/list-base.js":
/*!********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-lists/src/common/list-base.js ***!
  \********************************************************************/
/*! exports provided: cssClass, ListBase, getFieldValues */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cssClass", function() { return cssClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListBase", function() { return ListBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFieldValues", function() { return getFieldValues; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-data */ "./node_modules/@syncfusion/ej2-data/index.js");
/* eslint-disable no-inner-declarations */




var cssClass = {
  li: 'e-list-item',
  ul: 'e-list-parent e-ul',
  group: 'e-list-group-item',
  icon: 'e-list-icon',
  text: 'e-list-text',
  check: 'e-list-check',
  checked: 'e-checked',
  selected: 'e-selected',
  expanded: 'e-expanded',
  textContent: 'e-text-content',
  hasChild: 'e-has-child',
  level: 'e-level',
  url: 'e-list-url',
  collapsible: 'e-icon-collapsible',
  disabled: 'e-disabled',
  image: 'e-list-img',
  iconWrapper: 'e-icon-wrapper',
  anchorWrap: 'e-anchor-wrap',
  navigable: 'e-navigable'
};
/**
 * Base List Generator
 */
// eslint-disable-next-line @typescript-eslint/no-namespace

var ListBase;

(function (ListBase) {
  /**
   *
   * Default mapped fields.
   */
  ListBase.defaultMappedFields = {
    id: 'id',
    text: 'text',
    url: 'url',
    value: 'value',
    isChecked: 'isChecked',
    enabled: 'enabled',
    expanded: 'expanded',
    selected: 'selected',
    iconCss: 'iconCss',
    child: 'child',
    isVisible: 'isVisible',
    hasChildren: 'hasChildren',
    tooltip: 'tooltip',
    htmlAttributes: 'htmlAttributes',
    urlAttributes: 'urlAttributes',
    imageAttributes: 'imageAttributes',
    imageUrl: 'imageUrl',
    groupBy: null,
    sortBy: null
  };
  var defaultAriaAttributes = {
    level: 1,
    listRole: 'presentation',
    itemRole: 'presentation',
    groupItemRole: 'group',
    itemText: 'list-item',
    wrapperRole: 'presentation'
  };
  var defaultListBaseOptions = {
    showCheckBox: false,
    showIcon: false,
    enableHtmlSanitizer: false,
    expandCollapse: false,
    fields: ListBase.defaultMappedFields,
    ariaAttributes: defaultAriaAttributes,
    listClass: '',
    itemClass: '',
    processSubChild: false,
    sortOrder: 'None',
    template: null,
    groupTemplate: null,
    headerTemplate: null,
    expandIconClass: 'e-icon-collapsible',
    moduleName: 'list',
    expandIconPosition: 'Right',
    itemNavigable: false
  };
  /**
   * Function helps to created and return the UL Li element based on your data.
   *
   * @param  {createElementParams} createElement - Specifies an array of JSON data.
   *
   * @param  {{Object}[]} dataSource - Specifies an array of JSON data.
   *
   * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.
   *
   * @param  {boolean} isSingleLevel? - Specifies the list options that need to provide.
   *
   * @param  {any} componentInstance? - Specifies the list options that need to provide.
   *
   * @returns  {createElement} createListFromJson - Specifies the list options that need to provide.
   */

  function createList(createElement, dataSource, // eslint-disable-next-line
  options, isSingleLevel, componentInstance) {
    var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
    var ariaAttributes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultAriaAttributes, curOpt.ariaAttributes);
    var type = typeofData(dataSource).typeof;

    if (type === 'string' || type === 'number') {
      return createListFromArray(createElement, dataSource, isSingleLevel, options, componentInstance);
    } else {
      return createListFromJson(createElement, dataSource, options, ariaAttributes.level, isSingleLevel, componentInstance);
    }
  }

  ListBase.createList = createList;
  /**
   * Function helps to created an element list based on string array input .
   *
   * @param  {createElementParams} createElement - Specifies an array of JSON data.
   *
   * @param  {{Object}[]} dataSource - Specifies an array of JSON data.
   *
   * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.
   *
   * @param  {boolean} isSingleLevel? - Specifies the list options that need to provide.
   *
   * @param  {any} componentInstance? - Specifies the list options that need to provide.
   *
   * @returns  {createElement} generateUL - returns the list options that need to provide.
   */

  function createListFromArray(createElement, dataSource, // tslint:disable-next-line
  // eslint-disable-next-line
  isSingleLevel, options, componentInstance) {
    var subChild = createListItemFromArray(createElement, dataSource, isSingleLevel, options, componentInstance);
    return generateUL(createElement, subChild, null, options);
  }

  ListBase.createListFromArray = createListFromArray;
  /**
   * Function helps to created an element list based on string array input .
   *
   * @param  {createElementParams} createElement - Specifies an array of JSON data.
   *
   * @param  {{Object}[]} dataSource - Specifies an array of JSON data.
   *
   * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.
   *
   * @param  {boolean} isSingleLevel? - Specifies the list options that need to provide.
   *
   * @param  {any} componentInstance? - Specifies the list options that need to provide.
   *
   * @returns  {HTMLElement[]} subChild - returns the list options that need to provide.
   */

  function createListItemFromArray(createElement, dataSource, // eslint-disable-next-line
  isSingleLevel, options, componentInstance) {
    var subChild = [];
    var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
    cssClass = getModuleClass(curOpt.moduleName);
    var id = generateId(); // generate id for drop-down-list option.

    for (var i = 0; i < dataSource.length; i++) {
      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataSource[i])) {
        continue;
      }

      var li = void 0;

      if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {
        var curData = {
          dataSource: dataSource,
          curData: dataSource[i],
          text: dataSource[i],
          options: curOpt
        };
        curOpt.itemCreating(curData);
      }

      if (isSingleLevel) {
        li = generateSingleLevelLI(createElement, dataSource[i], undefined, null, null, [], null, id, i, options);
      } else {
        li = generateLI(createElement, dataSource[i], undefined, null, null, options, componentInstance);
      }

      if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {
        var curData = {
          dataSource: dataSource,
          curData: dataSource[i],
          text: dataSource[i],
          item: li,
          options: curOpt
        };
        curOpt.itemCreated(curData);
      }

      subChild.push(li);
    }

    return subChild;
  }

  ListBase.createListItemFromArray = createListItemFromArray;
  /**
   * Function helps to created an element list based on array of JSON input .
   *
   * @param  {createElementParams} createElement - Specifies an array of JSON data.
   *
   * @param  {{Object}[]} dataSource - Specifies an array of JSON data.
   *
   * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.
   *
   * @param  {boolean} isSingleLevel? - Specifies the list options that need to provide.
   *
   * @param  {number} level? - Specifies the list options that need to provide.
   *
   * @param  {any} componentInstance? - Specifies the list options that need to provide.
   *
   * @returns  {HTMLElement[]} child - returns the list options that need to provide.
   */

  function createListItemFromJson(createElement, dataSource, // eslint-disable-next-line
  options, level, isSingleLevel, componentInstance) {
    var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
    cssClass = getModuleClass(curOpt.moduleName);
    var fields = componentInstance && (componentInstance.getModuleName() === 'listview' || componentInstance.getModuleName() === 'multiselect') ? curOpt.fields : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, ListBase.defaultMappedFields, curOpt.fields);
    var ariaAttributes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultAriaAttributes, curOpt.ariaAttributes);
    var id;
    var checkboxElement = [];

    if (level) {
      ariaAttributes.level = level;
    }

    var child = [];
    var li;
    var anchorElement;

    if (dataSource && dataSource.length && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(typeofData(dataSource).item) && // eslint-disable-next-line no-prototype-builtins
    !typeofData(dataSource).item.hasOwnProperty(fields.id)) {
      id = generateId(); // generate id for drop-down-list option.
    }

    for (var i = 0; i < dataSource.length; i++) {
      var fieldData = getFieldValues(dataSource[i], fields);

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataSource[i])) {
        continue;
      }

      if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {
        var curData = {
          dataSource: dataSource,
          curData: dataSource[i],
          text: fieldData[fields.text],
          options: curOpt,
          fields: fields
        };
        curOpt.itemCreating(curData);
      }

      var curItem = dataSource[i];

      if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {
        fieldData = getFieldValues(dataSource[i], fields);
      } // eslint-disable-next-line no-prototype-builtins


      if (fieldData.hasOwnProperty(fields.id) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fieldData[fields.id])) {
        id = fieldData[fields.id];
      }

      var innerEle = [];

      if (curOpt.showCheckBox) {
        if (curOpt.itemNavigable && (fieldData[fields.url] || fieldData[fields.urlAttributes])) {
          checkboxElement.push(createElement('input', {
            className: cssClass.check,
            attrs: {
              type: 'checkbox'
            }
          }));
        } else {
          innerEle.push(createElement('input', {
            className: cssClass.check,
            attrs: {
              type: 'checkbox'
            }
          }));
        }
      }

      if (isSingleLevel === true) {
        // eslint-disable-next-line no-prototype-builtins
        if (curOpt.showIcon && fieldData.hasOwnProperty(fields.iconCss) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fieldData[fields.iconCss])) {
          innerEle.push(createElement('span', {
            className: cssClass.icon + ' ' + fieldData[fields.iconCss]
          }));
        }

        li = generateSingleLevelLI(createElement, curItem, fieldData, fields, curOpt.itemClass, innerEle, // eslint-disable-next-line no-prototype-builtins
        curItem.hasOwnProperty('isHeader') && curItem.isHeader ? true : false, id, i, options);
        anchorElement = li.querySelector('.' + cssClass.anchorWrap);

        if (curOpt.itemNavigable && checkboxElement.length) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])(checkboxElement, li.firstElementChild);
        }
      } else {
        li = generateLI(createElement, curItem, fieldData, fields, curOpt.itemClass, options, componentInstance);
        li.classList.add(cssClass.level + '-' + ariaAttributes.level);
        li.setAttribute('aria-level', ariaAttributes.level.toString());

        if (ariaAttributes.groupItemRole == 'presentation' || ariaAttributes.itemRole == 'presentation') {
          li.removeAttribute('aria-level');
        }

        anchorElement = li.querySelector('.' + cssClass.anchorWrap); // eslint-disable-next-line no-prototype-builtins

        if (fieldData.hasOwnProperty(fields.tooltip)) {
          li.setAttribute('title', fieldData[fields.tooltip]);
        } // eslint-disable-next-line no-prototype-builtins


        if (fieldData.hasOwnProperty(fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {
          setAttribute(li, fieldData[fields.htmlAttributes]);
        } // eslint-disable-next-line no-prototype-builtins


        if (fieldData.hasOwnProperty(fields.enabled) && fieldData[fields.enabled] === false) {
          li.classList.add(cssClass.disabled);
        } // eslint-disable-next-line no-prototype-builtins


        if (fieldData.hasOwnProperty(fields.isVisible) && fieldData[fields.isVisible] === false) {
          li.style.display = 'none';
        } // eslint-disable-next-line no-prototype-builtins


        if (fieldData.hasOwnProperty(fields.imageUrl) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fieldData[fields.imageUrl]) && !curOpt.template) {
          var attr = {
            src: fieldData[fields.imageUrl]
          };
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(attr, fieldData[fields.imageAttributes]);
          var imageElemnt = createElement('img', {
            className: cssClass.image,
            attrs: attr
          });

          if (anchorElement) {
            anchorElement.insertAdjacentElement('afterbegin', imageElemnt);
          } else {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([imageElemnt], li.firstElementChild);
          }
        } // eslint-disable-next-line no-prototype-builtins


        if (curOpt.showIcon && fieldData.hasOwnProperty(fields.iconCss) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fieldData[fields.iconCss]) && !curOpt.template) {
          var iconElement = createElement('div', {
            className: cssClass.icon + ' ' + fieldData[fields.iconCss]
          });

          if (anchorElement) {
            anchorElement.insertAdjacentElement('afterbegin', iconElement);
          } else {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([iconElement], li.firstElementChild);
          }
        }

        if (innerEle.length) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])(innerEle, li.firstElementChild);
        }

        if (curOpt.itemNavigable && checkboxElement.length) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])(checkboxElement, li.firstElementChild);
        }

        processSubChild(createElement, fieldData, fields, dataSource, curOpt, li, ariaAttributes.level);
      }

      if (anchorElement) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([li], [cssClass.navigable]);
      }

      if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {
        var curData = {
          dataSource: dataSource,
          curData: dataSource[i],
          text: fieldData[fields.text],
          item: li,
          options: curOpt,
          fields: fields
        };
        curOpt.itemCreated(curData);
      }

      checkboxElement = [];
      child.push(li);
    }

    return child;
  }

  ListBase.createListItemFromJson = createListItemFromJson;
  /**
   * Function helps to created an element list based on array of JSON input .
   *
   * @param  {createElementParams} createElement - Specifies an array of JSON data.
   *
   * @param  {{Object}[]} dataSource - Specifies an array of JSON data.
   *
   * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.
   *
   * @param  {number} level? - Specifies the list options that need to provide.
   *
   * @param  {boolean} isSingleLevel? - Specifies the list options that need to provide.
   *
   * @param  {any} componentInstance? - Specifies the list options that need to provide.
   *
   * @returns  {createElement} generateUL - Specifies the list options that need to provide.
   */

  function createListFromJson(createElement, dataSource, // eslint-disable-next-line
  options, level, isSingleLevel, componentInstance) {
    var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
    var li = createListItemFromJson(createElement, dataSource, options, level, isSingleLevel, componentInstance);
    return generateUL(createElement, li, curOpt.listClass, options);
  }

  ListBase.createListFromJson = createListFromJson;
  /**
   * Return the next or previous visible element.
   *
   * @param  {Element[]|NodeList} elementArray - An element array to find next or previous element.
   * @param  {Element} li - An element to find next or previous after this element.
   * @param  {boolean} isPrevious? - Specify when the need get previous element from array.
   */

  function getSiblingLI(elementArray, element, isPrevious) {
    cssClass = getModuleClass(defaultListBaseOptions.moduleName);

    if (!elementArray || !elementArray.length) {
      return void 0;
    }

    var siblingLI;
    var liIndex;
    var liCollections = Array.prototype.slice.call(elementArray);

    if (element) {
      liIndex = indexOf(element, liCollections);
    } else {
      liIndex = isPrevious === true ? liCollections.length : -1;
    }

    siblingLI = liCollections[liIndex + (isPrevious === true ? -1 : 1)];

    while (siblingLI && (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(siblingLI) || siblingLI.classList.contains(cssClass.disabled))) {
      liIndex = liIndex + (isPrevious === true ? -1 : 1);
      siblingLI = liCollections[liIndex];
    }

    return siblingLI;
  }

  ListBase.getSiblingLI = getSiblingLI;
  /**
   * Return the index of the li element
   *
   * @param  {Element} item - An element to find next or previous after this element.
   * @param  {Element[]} elementArray - An element array to find index of given li.
   */

  function indexOf(item, elementArray) {
    if (!elementArray || !item) {
      return void 0;
    } else {
      var liCollections = elementArray;
      liCollections = Array.prototype.slice.call(elementArray);
      return liCollections.indexOf(item);
    }
  }

  ListBase.indexOf = indexOf;
  /**
   * Returns the grouped data from given dataSource.
   *
   * @param  {{Object}[]} dataSource - The JSON data which is necessary to process.
   * @param  {FieldsMapping} fields - Fields that are mapped from the data source.
   * @param  {SortOrder} sortOrder- Specifies final result sort order.
   */

  function groupDataSource(dataSource, fields, sortOrder) {
    if (sortOrder === void 0) {
      sortOrder = 'None';
    }

    var curFields = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, ListBase.defaultMappedFields, fields);
    var cusQuery = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]().group(curFields.groupBy); // need to remove once sorting issues fixed in DataManager

    cusQuery = addSorting(sortOrder, 'key', cusQuery);
    var ds = getDataSource(dataSource, cusQuery);
    dataSource = [];

    for (var j = 0; j < ds.length; j++) {
      var itemObj = ds[j].items;
      var grpItem = {};
      var hdr = 'isHeader';
      grpItem[curFields.text] = ds[j].key;
      grpItem["" + hdr] = true;
      var newtext = curFields.text;

      if (newtext === 'id') {
        newtext = 'text';
        grpItem["" + newtext] = ds[j].key;
      }

      grpItem._id = 'group-list-item-' + (ds[j].key ? ds[j].key.toString().trim() : 'undefined');
      grpItem.items = itemObj;
      dataSource.push(grpItem);

      for (var k = 0; k < itemObj.length; k++) {
        dataSource.push(itemObj[k]);
      }
    }

    return dataSource;
  }

  ListBase.groupDataSource = groupDataSource;
  /**
   * Returns a sorted query object.
   *
   * @param  {SortOrder} sortOrder - Specifies that sort order.
   * @param  {string} sortBy - Specifies sortBy fields.
   * @param  {Query} query - Pass if any existing query.
   */

  function addSorting(sortOrder, sortBy, query) {
    if (query === void 0) {
      query = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]();
    }

    if (sortOrder === 'Ascending') {
      query.sortBy(sortBy, 'ascending', true);
    } else if (sortOrder === 'Descending') {
      query.sortBy(sortBy, 'descending', true);
    } else {
      for (var i = 0; i < query.queries.length; i++) {
        if (query.queries[i].fn === 'onSortBy') {
          query.queries.splice(i, 1);
        }
      }
    }

    return query;
  }

  ListBase.addSorting = addSorting;
  /**
   * Return an array of JSON Data that processed based on queries.
   *
   * @param  {{Object}[]} dataSource - Specifies local JSON data source.
   *
   * @param  {Query} query - Specifies query that need to process.
   */

  function getDataSource(dataSource, query) {
    // eslint-disable-next-line
    return new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"](dataSource).executeLocal(query);
  }

  ListBase.getDataSource = getDataSource;
  /**
   * Created JSON data based the UL and LI element
   *
   * @param  {HTMLElement|Element} element - UL element that need to convert as a JSON
   * @param  {ListBaseOptions} options? - Specifies listbase option for fields.
   */

  function createJsonFromElement(element, options) {
    var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
    var fields = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, ListBase.defaultMappedFields, curOpt.fields);
    var curEle = element.cloneNode(true); // eslint-disable-next-line

    var jsonAr = [];
    curEle.classList.add('json-parent');
    var childs = curEle.querySelectorAll('.json-parent>li');
    curEle.classList.remove('json-parent');

    for (var i = 0; i < childs.length; i++) {
      var li = childs[i];
      var anchor = li.querySelector('a');
      var ul = li.querySelector('ul'); // eslint-disable-next-line

      var json = {};
      var childNodes = anchor ? anchor.childNodes : li.childNodes;
      var keys = Object.keys(childNodes);

      for (var i_1 = 0; i_1 < childNodes.length; i_1++) {
        if (!childNodes[Number(keys[i_1])].hasChildNodes()) {
          json[fields.text] = childNodes[Number(keys[i_1])].textContent;
        }
      }

      var attributes_1 = getAllAttributes(li);

      if (attributes_1.id) {
        json[fields.id] = attributes_1.id;
        delete attributes_1.id;
      } else {
        json[fields.id] = generateId();
      }

      if (Object.keys(attributes_1).length) {
        json[fields.htmlAttributes] = attributes_1;
      }

      if (anchor) {
        attributes_1 = getAllAttributes(anchor);

        if (Object.keys(attributes_1).length) {
          json[fields.urlAttributes] = attributes_1;
        }
      }

      if (ul) {
        json[fields.child] = createJsonFromElement(ul, options);
      }

      jsonAr.push(json);
    }

    return jsonAr;
  }

  ListBase.createJsonFromElement = createJsonFromElement;

  function typeofData(data) {
    var match = {
      typeof: null,
      item: null
    };

    for (var i = 0; i < data.length; i++) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data[i])) {
        return match = {
          typeof: typeof data[i],
          item: data[i]
        };
      }
    }

    return match;
  }

  function setAttribute(element, elementAttributes) {
    var attr = {};
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(attr, elementAttributes);

    if (attr.class) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([element], attr.class.split(' '));
      delete attr.class;
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, attr);
  }

  function getAllAttributes(element) {
    var attributes = {};
    var attr = element.attributes;

    for (var index = 0; index < attr.length; index++) {
      attributes[attr[index].nodeName] = attr[index].nodeValue;
    }

    return attributes;
  }
  /**
   * Created UL element from content template.
   *
   * @param  {string} template - that need to convert and generate li element.
   * @param  {{Object}[]} dataSource - Specifies local JSON data source.
   * @param  {ListBaseOptions} options? - Specifies listbase option for fields.
   */


  function renderContentTemplate(createElement, template, dataSource, // eslint-disable-next-line
  fields, options, componentInstance) {
    cssClass = getModuleClass(defaultListBaseOptions.moduleName);
    var ulElement = createElement('ul', {
      className: cssClass.ul,
      attrs: {
        role: 'presentation'
      }
    });
    var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
    var curFields = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, ListBase.defaultMappedFields, fields); // eslint-disable-next-line

    var compiledString = compileTemplate(template);
    var liCollection = [];
    var value;
    var id = generateId(); // generate id for drop-down-list option.

    for (var i = 0; i < dataSource.length; i++) {
      var fieldData = getFieldValues(dataSource[i], curFields);
      var curItem = dataSource[i];
      var isHeader = curItem.isHeader;

      if (typeof dataSource[i] === 'string' || typeof dataSource[i] === 'number') {
        value = curItem;
      } else {
        value = fieldData[curFields.value];
      }

      if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {
        var curData = {
          dataSource: dataSource,
          curData: curItem,
          text: value,
          options: curOpt,
          fields: curFields
        };
        curOpt.itemCreating(curData);
      }

      if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {
        fieldData = getFieldValues(dataSource[i], curFields);

        if (typeof dataSource[i] === 'string' || typeof dataSource[i] === 'number') {
          value = curItem;
        } else {
          value = fieldData[curFields.value];
        }
      }

      var li = createElement('li', {
        id: id + '-' + i,
        className: isHeader ? cssClass.group : cssClass.li,
        attrs: {
          role: 'presentation'
        }
      });

      if (isHeader) {
        if (typeof dataSource[i] === 'string' || typeof dataSource[i] === 'number') {
          li.innerText = curItem;
        } else {
          li.innerText = fieldData[curFields.text];
        }
      } else {
        var currentID = isHeader ? curOpt.groupTemplateID : curOpt.templateID;

        if (isHeader) {
          if (componentInstance && componentInstance.getModuleName() != 'listview') {
            // eslint-disable-next-line
            var compiledElement = compiledString(curItem, componentInstance, 'headerTemplate', currentID, !!curOpt.isStringTemplate, null, li);

            if (compiledElement) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(compiledElement, li);
            }
          } else {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(compiledString(curItem, componentInstance, 'headerTemplate', currentID, !!curOpt.isStringTemplate), li);
          }
        } else {
          if (componentInstance && componentInstance.getModuleName() !== 'listview') {
            // eslint-disable-next-line
            var compiledElement = compiledString(curItem, componentInstance, 'template', currentID, !!curOpt.isStringTemplate, null, li);

            if (compiledElement) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(compiledElement, li);
            }
          } else {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(compiledString(curItem, componentInstance, 'template', currentID, !!curOpt.isStringTemplate), li);
          }
        }

        li.setAttribute('data-value', Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(value) ? 'null' : value);
        li.setAttribute('role', 'option');
      }

      if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {
        var curData = {
          dataSource: dataSource,
          curData: curItem,
          text: value,
          item: li,
          options: curOpt,
          fields: curFields
        };
        curOpt.itemCreated(curData);
      }

      liCollection.push(li);
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(liCollection, ulElement);
    return ulElement;
  }

  ListBase.renderContentTemplate = renderContentTemplate;
  /**
   * Created header items from group template.
   *
   * @param  {string} template - that need to convert and generate li element.
   *
   * @param  {{Object}[]} dataSource - Specifies local JSON data source.
   *
   * @param  {FieldsMapping} fields - Specifies fields for mapping the dataSource.
   *
   * @param  {Element[]} headerItems? - Specifies listbase header items.
   */
  // tslint:disable-next-line

  function renderGroupTemplate(groupTemplate, groupDataSource, fields, // eslint-disable-next-line
  headerItems, options, componentInstance) {
    // eslint-disable-next-line @typescript-eslint/ban-types
    var compiledString = compileTemplate(groupTemplate);
    var curFields = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, ListBase.defaultMappedFields, fields);
    var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
    var category = curFields.groupBy;

    for (var _i = 0, headerItems_1 = headerItems; _i < headerItems_1.length; _i++) {
      var header = headerItems_1[_i];
      var headerData = {};
      headerData["" + category] = header.textContent;
      header.innerHTML = '';

      if (componentInstance && componentInstance.getModuleName() !== "listview") {
        // eslint-disable-next-line
        var compiledElement = compiledString(headerData, componentInstance, 'groupTemplate', curOpt.groupTemplateID, !!curOpt.isStringTemplate, null, header);

        if (compiledElement) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(compiledElement, header);
        }
      } else {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(compiledString(headerData, componentInstance, 'groupTemplate', curOpt.groupTemplateID, !!curOpt.isStringTemplate), header);
      }
    }

    return headerItems;
  }

  ListBase.renderGroupTemplate = renderGroupTemplate;

  function generateId() {
    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
  }

  ListBase.generateId = generateId;

  function processSubChild(createElement, fieldData, fields, ds, options, element, level) {
    // Get SubList
    var subDS = fieldData[fields.child] || [];
    var hasChildren = fieldData[fields.hasChildren]; //Create Sub child

    if (subDS.length) {
      hasChildren = true;
      element.classList.add(cssClass.hasChild);

      if (options.processSubChild) {
        var subLi = createListFromJson(createElement, subDS, options, ++level);
        element.appendChild(subLi);
      }
    } // Create expand and collapse node


    if (!!options.expandCollapse && hasChildren && !options.template) {
      element.firstElementChild.classList.add(cssClass.iconWrapper); // eslint-disable-next-line @typescript-eslint/ban-types

      var expandElement = options.expandIconPosition === 'Left' ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"] : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"];
      expandElement([createElement('div', {
        className: 'e-icons ' + options.expandIconClass
      })], element.querySelector('.' + cssClass.textContent));
    }
  }

  function generateSingleLevelLI(createElement, item, fieldData, fields, className, innerElements, grpLI, id, index, options) {
    var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
    var ariaAttributes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultAriaAttributes, curOpt.ariaAttributes);
    var text = item;
    var value = item;
    var dataSource;

    if (typeof item !== 'string' && typeof item !== 'number' && typeof item !== 'boolean') {
      dataSource = item;
      text = typeof fieldData[fields.text] === 'boolean' || typeof fieldData[fields.text] === 'number' ? fieldData[fields.text] : fieldData[fields.text] || '';
      value = fieldData[fields.value];
    }

    var elementID;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataSource) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fieldData[fields.id]) && fieldData[fields.id] !== '') {
      elementID = id;
    } else {
      elementID = id + '-' + index;
    }

    var li = createElement('li', {
      className: (grpLI === true ? cssClass.group : cssClass.li) + ' ' + (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(className) ? '' : className),
      id: elementID,
      attrs: ariaAttributes.groupItemRole !== '' && ariaAttributes.itemRole !== '' ? {
        role: grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole
      } : {}
    }); // eslint-disable-next-line no-prototype-builtins

    if (dataSource && fieldData.hasOwnProperty(fields.enabled) && fieldData[fields.enabled].toString() === 'false') {
      li.classList.add(cssClass.disabled);
    }

    if (grpLI) {
      li.innerText = text;
    } else {
      li.setAttribute('data-value', Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(value) ? 'null' : value);
      li.setAttribute('role', 'option'); // eslint-disable-next-line no-prototype-builtins

      if (dataSource && fieldData.hasOwnProperty(fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {
        setAttribute(li, fieldData[fields.htmlAttributes]);
      }

      if (innerElements.length && !curOpt.itemNavigable) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(innerElements, li);
      }

      if (dataSource && (fieldData[fields.url] || fieldData[fields.urlAttributes] && fieldData[fields.urlAttributes].href)) {
        li.appendChild(anchorTag(createElement, dataSource, fields, text, innerElements, curOpt.itemNavigable));
      } else {
        if (innerElements.length && curOpt.itemNavigable) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(innerElements, li);
        }

        li.appendChild(document.createTextNode(text));
      }
    }

    return li;
  }

  function getModuleClass(moduleName) {
    var moduleClass; // eslint-disable-next-line

    return moduleClass = {
      li: "e-" + moduleName + "-item",
      ul: "e-" + moduleName + "-parent e-ul",
      group: "e-" + moduleName + "-group-item",
      icon: "e-" + moduleName + "-icon",
      text: "e-" + moduleName + "-text",
      check: "e-" + moduleName + "-check",
      checked: 'e-checked',
      selected: 'e-selected',
      expanded: 'e-expanded',
      textContent: 'e-text-content',
      hasChild: 'e-has-child',
      level: 'e-level',
      url: "e-" + moduleName + "-url",
      collapsible: 'e-icon-collapsible',
      disabled: 'e-disabled',
      image: "e-" + moduleName + "-img",
      iconWrapper: 'e-icon-wrapper',
      anchorWrap: 'e-anchor-wrap',
      navigable: 'e-navigable'
    };
  }

  function anchorTag(createElement, dataSource, fields, text, innerElements, isFullNavigation) {
    var fieldData = getFieldValues(dataSource, fields);
    var attr = {
      href: fieldData[fields.url]
    }; // eslint-disable-next-line no-prototype-builtins

    if (fieldData.hasOwnProperty(fields.urlAttributes) && fieldData[fields.urlAttributes]) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(attr, fieldData[fields.urlAttributes]);
      attr.href = fieldData[fields.url] ? fieldData[fields.url] : fieldData[fields.urlAttributes].href;
    }

    var anchorTag;

    if (!isFullNavigation) {
      anchorTag = createElement('a', {
        className: cssClass.text + ' ' + cssClass.url,
        innerHTML: text
      });
    } else {
      anchorTag = createElement('a', {
        className: cssClass.text + ' ' + cssClass.url
      });
      var anchorWrapper = createElement('div', {
        className: cssClass.anchorWrap
      });

      if (innerElements && innerElements.length) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(innerElements, anchorWrapper);
      }

      anchorWrapper.appendChild(document.createTextNode(text));
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([anchorWrapper], anchorTag);
    }

    setAttribute(anchorTag, attr);
    return anchorTag;
  } // tslint:disable-next-line

  /* tslint:disable:align */


  function generateLI(createElement, item, fieldData, // eslint-disable-next-line
  fields, className, options, componentInstance) {
    var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
    var ariaAttributes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultAriaAttributes, curOpt.ariaAttributes);
    var text = item;
    var uID;
    var grpLI;
    var dataSource;

    if (typeof item !== 'string' && typeof item !== 'number') {
      dataSource = item;
      text = fieldData[fields.text] || ''; // tslint:disable-next-line

      uID = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fieldData['_id']) ? fieldData[fields.id] : fieldData['_id']; // eslint-disable-next-line no-prototype-builtins

      grpLI = item.hasOwnProperty('isHeader') && item.isHeader ? true : false;
    }

    if (options && options.enableHtmlSanitizer) {
      // eslint-disable-next-line no-self-assign
      text = text;
    }

    var li = createElement('li', {
      className: (grpLI === true ? cssClass.group : cssClass.li) + ' ' + (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(className) ? '' : className),
      attrs: ariaAttributes.groupItemRole !== '' && ariaAttributes.itemRole !== '' ? {
        role: grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole
      } : {}
    });

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(uID) === true) {
      li.setAttribute('data-uid', uID);
    } else {
      li.setAttribute('data-uid', generateId());
    }

    if (grpLI && options && options.groupTemplate) {
      // eslint-disable-next-line @typescript-eslint/ban-types
      var compiledString = compileTemplate(options.groupTemplate);

      if (componentInstance && componentInstance.getModuleName() !== "listview") {
        // eslint-disable-next-line
        var compiledElement = compiledString(item, componentInstance, 'groupTemplate', curOpt.groupTemplateID, !!curOpt.isStringTemplate, null, li);

        if (compiledElement) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(compiledElement, li);
        }
      } else {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(compiledString(item, componentInstance, 'groupTemplate', curOpt.groupTemplateID, !!curOpt.isStringTemplate), li);
      }
    } else if (!grpLI && options && options.template) {
      // eslint-disable-next-line @typescript-eslint/ban-types
      var compiledString = compileTemplate(options.template);

      if (componentInstance && componentInstance.getModuleName() !== 'listview') {
        // eslint-disable-next-line
        var compiledElement = compiledString(item, componentInstance, 'template', curOpt.templateID, !!curOpt.isStringTemplate, null, li);

        if (compiledElement) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(compiledElement, li);
        }
      } else {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(compiledString(item, componentInstance, 'template', curOpt.templateID, !!curOpt.isStringTemplate), li);
      }
    } else {
      var innerDiv = createElement('div', {
        className: cssClass.textContent,
        attrs: ariaAttributes.wrapperRole !== '' ? {
          role: ariaAttributes.wrapperRole
        } : {}
      });

      if (dataSource && (fieldData[fields.url] || fieldData[fields.urlAttributes] && fieldData[fields.urlAttributes].href)) {
        innerDiv.appendChild(anchorTag(createElement, dataSource, fields, text, null, curOpt.itemNavigable));
      } else {
        var element = createElement('span', {
          className: cssClass.text,
          attrs: ariaAttributes.itemText !== '' ? {
            role: ariaAttributes.itemText
          } : {}
        });

        if (options && options.enableHtmlSanitizer) {
          element.innerText = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(text);
        } else {
          element.innerHTML = text;
        }

        innerDiv.appendChild(element);
      }

      li.appendChild(innerDiv);
    }

    return li;
  }
  /**
   * Returns UL element based on the given LI element.
   *
   * @param  {HTMLElement[]} liElement - Specifies array of LI element.
   *
   * @param  {string} className? - Specifies class name that need to be added in UL element.
   *
   * @param  {ListBaseOptions} options? - Specifies ListBase options.
   */


  function generateUL(createElement, liElement, className, options) {
    var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
    var ariaAttributes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultAriaAttributes, curOpt.ariaAttributes);
    cssClass = getModuleClass(curOpt.moduleName);
    var ulElement = createElement('ul', {
      className: cssClass.ul + ' ' + (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(className) ? '' : className),
      attrs: ariaAttributes.listRole !== '' ? {
        role: ariaAttributes.listRole
      } : {}
    });
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(liElement, ulElement);
    return ulElement;
  }

  ListBase.generateUL = generateUL;
  /**
   * Returns LI element with additional DIV tag based on the given LI element.
   *
   * @param  {liElement} liElement - Specifies LI element.
   *
   * @param  {string} className? - Specifies class name that need to be added in created DIV element.
   *
   * @param  {ListBaseOptions} options? - Specifies ListBase options.
   */

  function generateIcon(createElement, liElement, className, options) {
    var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
    cssClass = getModuleClass(curOpt.moduleName); // eslint-disable-next-line @typescript-eslint/ban-types

    var expandElement = curOpt.expandIconPosition === 'Left' ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"] : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"];
    expandElement([createElement('div', {
      className: 'e-icons ' + curOpt.expandIconClass + ' ' + (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(className) ? '' : className)
    })], liElement.querySelector('.' + cssClass.textContent));
    return liElement;
  }

  ListBase.generateIcon = generateIcon;
})(ListBase || (ListBase = {}));
/**
 * Used to get dataSource item from complex data using fields.
 *
 * @param {Object} dataSource - Specifies an  JSON or String data.
 *
 * @param {FieldsMapping} fields - Fields that are mapped from the dataSource.
 */


function getFieldValues(dataItem, fields) {
  var fieldData = {};

  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataItem) || typeof dataItem === 'string' || typeof dataItem === 'number' || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataItem.isHeader)) {
    return dataItem;
  } else {
    for (var _i = 0, _a = Object.keys(fields); _i < _a.length; _i++) {
      var field = _a[_i];
      var dataField = fields["" + field];
      var value = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataField) && typeof dataField === 'string' ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(dataField, dataItem) : undefined;

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(value)) {
        fieldData["" + dataField] = value;
      }
    }
  }

  return fieldData;
}

function compileTemplate(template) {
  if (template) {
    try {
      if (typeof template !== 'function' && document.querySelector(template)) {
        return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(document.querySelector(template).innerHTML.trim());
      } else {
        return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(template);
      }
    } catch (e) {
      return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(template);
    }
  }

  return undefined;
}

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-lists/src/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-lists/src/index.js ***!
  \*********************************************************/
/*! exports provided: classNames, FieldSettings, ListView, Virtualization, cssClass, ListBase, getFieldValues, Sortable, moveTo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _list_view_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./list-view/index */ "./node_modules/@syncfusion/ej2-lists/src/list-view/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "classNames", function() { return _list_view_index__WEBPACK_IMPORTED_MODULE_0__["classNames"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FieldSettings", function() { return _list_view_index__WEBPACK_IMPORTED_MODULE_0__["FieldSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListView", function() { return _list_view_index__WEBPACK_IMPORTED_MODULE_0__["ListView"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Virtualization", function() { return _list_view_index__WEBPACK_IMPORTED_MODULE_0__["Virtualization"]; });

/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common/index */ "./node_modules/@syncfusion/ej2-lists/src/common/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cssClass", function() { return _common_index__WEBPACK_IMPORTED_MODULE_1__["cssClass"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListBase", function() { return _common_index__WEBPACK_IMPORTED_MODULE_1__["ListBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getFieldValues", function() { return _common_index__WEBPACK_IMPORTED_MODULE_1__["getFieldValues"]; });

/* harmony import */ var _sortable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sortable */ "./node_modules/@syncfusion/ej2-lists/src/sortable/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sortable", function() { return _sortable__WEBPACK_IMPORTED_MODULE_2__["Sortable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "moveTo", function() { return _sortable__WEBPACK_IMPORTED_MODULE_2__["moveTo"]; });

/**
 * List Components
 */




/***/ }),

/***/ "./node_modules/@syncfusion/ej2-lists/src/list-view/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-lists/src/list-view/index.js ***!
  \*******************************************************************/
/*! exports provided: classNames, FieldSettings, ListView, Virtualization */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _list_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./list-view */ "./node_modules/@syncfusion/ej2-lists/src/list-view/list-view.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "classNames", function() { return _list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FieldSettings", function() { return _list_view__WEBPACK_IMPORTED_MODULE_0__["FieldSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListView", function() { return _list_view__WEBPACK_IMPORTED_MODULE_0__["ListView"]; });

/* harmony import */ var _virtualization__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./virtualization */ "./node_modules/@syncfusion/ej2-lists/src/list-view/virtualization.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Virtualization", function() { return _virtualization__WEBPACK_IMPORTED_MODULE_1__["Virtualization"]; });

/**
 * Listview Component
 */



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-lists/src/list-view/list-view.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-lists/src/list-view/list-view.js ***!
  \***********************************************************************/
/*! exports provided: classNames, FieldSettings, ListView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "classNames", function() { return classNames; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FieldSettings", function() { return FieldSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListView", function() { return ListView; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-data */ "./node_modules/@syncfusion/ej2-data/index.js");
/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ "./node_modules/@syncfusion/ej2-buttons/index.js");
/* harmony import */ var _common_list_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/list-base */ "./node_modules/@syncfusion/ej2-lists/src/common/list-base.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};









 // Effect Configuration Effect[] =  [fromViewBackward,fromViewForward,toViewBackward,toviewForward];

var effectsConfig = {
  'None': [],
  'SlideLeft': ['SlideRightOut', 'SlideLeftOut', 'SlideLeftIn', 'SlideRightIn'],
  'SlideDown': ['SlideTopOut', 'SlideBottomOut', 'SlideBottomIn', 'SlideTopIn'],
  'Zoom': ['FadeOut', 'FadeZoomOut', 'FadeZoomIn', 'FadeIn'],
  'Fade': ['FadeOut', 'FadeOut', 'FadeIn', 'FadeIn']
};
var effectsRTLConfig = {
  'None': [],
  'SlideLeft': ['SlideLeftOut', 'SlideRightOut', 'SlideRightIn', 'SlideLeftIn'],
  'SlideDown': ['SlideBottomOut', 'SlideTopOut', 'SlideTopIn', 'SlideBottomIn'],
  'Zoom': ['FadeZoomOut', 'FadeOut', 'FadeIn', 'FadeZoomIn'],
  'Fade': ['FadeOut', 'FadeOut', 'FadeIn', 'FadeIn']
}; // don't use space in classnames.

var classNames = {
  root: 'e-listview',
  hover: 'e-hover',
  selected: 'e-active',
  focused: 'e-focused',
  parentItem: 'e-list-parent',
  listItem: 'e-list-item',
  listIcon: 'e-list-icon',
  textContent: 'e-text-content',
  listItemText: 'e-list-text',
  groupListItem: 'e-list-group-item',
  hasChild: 'e-has-child',
  view: 'e-view',
  header: 'e-list-header',
  headerText: 'e-headertext',
  headerTemplateText: 'e-headertemplate-text',
  text: 'e-text',
  disable: 'e-disabled',
  container: 'e-list-container',
  icon: 'e-icons',
  backIcon: 'e-icon-back',
  backButton: 'e-back-button',
  checkboxWrapper: 'e-checkbox-wrapper',
  checkbox: 'e-checkbox',
  checked: 'e-check',
  checklist: 'e-checklist',
  checkboxIcon: 'e-frame',
  checkboxRight: 'e-checkbox-right',
  checkboxLeft: 'e-checkbox-left',
  listviewCheckbox: 'e-listview-checkbox',
  itemCheckList: 'e-checklist',
  virtualElementContainer: 'e-list-virtualcontainer'
};
var LISTVIEW_TEMPLATE_PROPERTY = 'Template';
var LISTVIEW_GROUPTEMPLATE_PROPERTY = 'GroupTemplate';
var LISTVIEW_HEADERTEMPLATE_PROPERTY = 'HeaderTemplate';
var swipeVelocity = 0.5;
/**
 * Represents the field settings of the ListView.
 */

var FieldSettings =
/** @class */
function (_super) {
  __extends(FieldSettings, _super);

  function FieldSettings() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('id')], FieldSettings.prototype, "id", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('text')], FieldSettings.prototype, "text", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('isChecked')], FieldSettings.prototype, "isChecked", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('isVisible')], FieldSettings.prototype, "isVisible", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('enabled')], FieldSettings.prototype, "enabled", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('iconCss')], FieldSettings.prototype, "iconCss", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('child')], FieldSettings.prototype, "child", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('tooltip')], FieldSettings.prototype, "tooltip", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('groupBy')], FieldSettings.prototype, "groupBy", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('text')], FieldSettings.prototype, "sortBy", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('htmlAttributes')], FieldSettings.prototype, "htmlAttributes", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('tableName')], FieldSettings.prototype, "tableName", void 0);

  return FieldSettings;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * Represents the EJ2 ListView control.
 * ```html
 * <div id="listview">
 * <ul>
 * <li>Favorite</li>
 * <li>Documents</li>
 * <li>Downloads</li>
 * </ul>
 * </div>
 * ```
 * ```typescript
 *   var listviewObject = new ListView({});
 *   listviewObject.appendTo("#listview");
 * ```
 */

var ListView =
/** @class */
function (_super) {
  __extends(ListView, _super);
  /**
   * Constructor for creating the widget
   *
   * @param options
   *
   * @param element
   */


  function ListView(options, element) {
    var _this = _super.call(this, options, element) || this;

    _this.previousSelectedItems = [];
    _this.hiddenItems = [];
    _this.enabledItems = [];
    _this.disabledItems = [];
    return _this;
  }
  /**
   * @param newProp
   *
   * @param oldProp
   *
   * @private
   */


  ListView.prototype.onPropertyChanged = function (newProp, oldProp) {
    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'htmlAttributes':
          this.setHTMLAttribute();
          break;

        case 'cssClass':
          this.setCSSClass(oldProp.cssClass);
          break;

        case 'enable':
          this.setEnable();
          break;

        case 'width':
        case 'height':
          this.setSize();
          break;

        case 'enableRtl':
          this.setEnableRTL();
          break;

        case 'fields':
          // eslint-disable-next-line
          this.listBaseOption.fields = this.fields.properties;

          if (this.enableVirtualization) {
            this.virtualizationModule.reRenderUiVirtualization();
          } else {
            this.reRender();
          }

          break;

        case 'headerTitle':
          if (!this.curDSLevel.length) {
            this.header(this.headerTitle, false, 'header');
          }

          break;

        case 'query':
          if (this.enableVirtualization) {
            this.virtualizationModule.reRenderUiVirtualization();
          } else {
            this.reRender();
          }

          break;

        case 'showHeader':
          this.header(this.headerTitle, false, 'header');
          break;

        case 'enableVirtualization':
          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.contentContainer)) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.contentContainer);
          }

          this.refresh();
          break;

        case 'showCheckBox':
        case 'checkBoxPosition':
          if (this.enableVirtualization) {
            this.virtualizationModule.reRenderUiVirtualization();
          } else {
            this.setCheckbox();
          }

          break;

        case 'dataSource':
          if (this.enableVirtualization) {
            this.virtualizationModule.reRenderUiVirtualization();
          } else {
            this.reRender();
          }

          break;

        case 'sortOrder':
        case 'template':
          if (!this.enableVirtualization) {
            this.refresh();
          }

          break;

        case 'showIcon':
          if (this.enableVirtualization) {
            this.virtualizationModule.reRenderUiVirtualization();
          } else {
            this.listBaseOption.showIcon = this.showIcon;
            this.curViewDS = this.getSubDS();
            this.resetCurrentList();
          }

          break;

        default:
          break;
      }
    }
  }; // Model Changes


  ListView.prototype.setHTMLAttribute = function () {
    if (Object.keys(this.htmlAttributes).length) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, this.htmlAttributes);
    }
  };

  ListView.prototype.setCSSClass = function (oldCSSClass) {
    if (this.cssClass) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], this.cssClass.split(' ').filter(function (css) {
        return css;
      }));
    }

    if (oldCSSClass) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], oldCSSClass.split(' ').filter(function (css) {
        return css;
      }));
    }
  };

  ListView.prototype.setSize = function () {
    this.element.style.height = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.height);
    this.element.style.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.width);
    this.isWindow = this.element.clientHeight ? false : true;
  };

  ListView.prototype.setEnable = function () {
    this.enableElement(this.element, this.enable);
  };

  ListView.prototype.setEnableRTL = function () {
    if (this.enableRtl) {
      this.element.classList.add('e-rtl');
    } else {
      this.element.classList.remove('e-rtl');
    }
  };

  ListView.prototype.enableElement = function (element, isEnabled) {
    if (isEnabled) {
      element.classList.remove(classNames.disable);
    } else {
      element.classList.add(classNames.disable);
    }
  }; // Support Component Functions


  ListView.prototype.header = function (text, showBack, prop) {
    if (this.headerEle === undefined && this.showHeader) {
      this.headerEle = this.createElement('div', {
        className: classNames.header
      });
      var innerHeaderEle = this.createElement('span', {
        className: classNames.headerText
      });

      if (this.enableHtmlSanitizer) {
        this.setProperties({
          headerTitle: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(this.headerTitle)
        }, true);
        innerHeaderEle.innerText = this.headerTitle;
      } else {
        innerHeaderEle.innerHTML = this.headerTitle;
      }

      var textEle = this.createElement('div', {
        className: classNames.text,
        innerHTML: innerHeaderEle.outerHTML
      });
      var hedBackButton = this.createElement('div', {
        className: classNames.icon + ' ' + classNames.backIcon + ' ' + classNames.backButton,
        attrs: {
          style: 'display:none;'
        }
      });
      this.headerEle.appendChild(hedBackButton);
      this.headerEle.appendChild(textEle);

      if (this.headerTemplate) {
        // eslint-disable-next-line
        var compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(this.headerTemplate);
        var headerTemplateEle = this.createElement('div', {
          className: classNames.headerTemplateText
        }); // eslint-disable-next-line

        var compiledElement = compiledString({}, this, prop, this.LISTVIEW_HEADERTEMPLATE_ID, null, null, this.headerEle);

        if (compiledElement) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(compiledElement, headerTemplateEle);
        }

        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([headerTemplateEle], this.headerEle); // eslint-disable-next-line

        if (this.isReact) {
          this.renderReactTemplates();
        }
      }

      if (this.headerTemplate && this.headerTitle) {
        textEle.classList.add('header');
      }

      this.element.classList.add('e-has-header');
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([this.headerEle], this.element);
    } else if (this.headerEle) {
      if (this.showHeader) {
        this.headerEle.style.display = '';
        var textEle = this.headerEle.querySelector('.' + classNames.headerText);
        var hedBackButton = this.headerEle.querySelector('.' + classNames.backIcon);

        if (this.enableHtmlSanitizer) {
          text = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(text);
        }

        textEle.innerHTML = text;

        if (this.headerTemplate && showBack) {
          textEle.parentElement.classList.remove('header');
          this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.add('nested-header');
        }

        if (this.headerTemplate && !showBack) {
          textEle.parentElement.classList.add('header');
          this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.remove('nested-header');
          this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.add('header');
        }

        if (showBack === true) {
          hedBackButton.style.display = '';
        } else {
          hedBackButton.style.display = 'none';
        }
      } else {
        this.headerEle.style.display = 'none';
      }
    }
  }; // Animation Related Functions


  ListView.prototype.switchView = function (fromView, toView, reverse) {
    var _this = this;

    if (fromView && toView) {
      var fPos_1 = fromView.style.position;
      var overflow_1 = this.element.style.overflow !== 'hidden' ? this.element.style.overflow : '';
      fromView.style.position = 'absolute';
      fromView.classList.add('e-view');
      var anim = void 0;
      var duration = this.animation.duration;

      if (this.animation.effect) {
        anim = this.enableRtl ? effectsRTLConfig[this.animation.effect] : effectsConfig[this.animation.effect];
      } else {
        var slideLeft = 'SlideLeft';
        anim = effectsConfig["" + slideLeft];
        reverse = this.enableRtl;
        duration = 0;
      }

      this.element.style.overflow = 'hidden';
      this.aniObj.animate(fromView, {
        name: reverse === true ? anim[0] : anim[1],
        duration: duration === 0 && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["animationMode"] === 'Enable' ? 400 : duration,
        timingFunction: this.animation.easing,
        // eslint-disable-next-line
        end: function (model) {
          fromView.style.display = 'none';
          _this.element.style.overflow = overflow_1;
          fromView.style.position = fPos_1;
          fromView.classList.remove('e-view');
        }
      });
      toView.style.display = '';
      this.aniObj.animate(toView, {
        name: reverse === true ? anim[2] : anim[3],
        duration: duration === 0 && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["animationMode"] === 'Enable' ? 400 : duration,
        timingFunction: this.animation.easing,
        end: function () {
          _this.trigger('actionComplete');
        }
      });
      this.curUL = toView;
    }
  };

  ListView.prototype.preRender = function () {
    if (this.template) {
      try {
        if (typeof this.template !== 'function' && document.querySelectorAll(this.template).length) {
          this.setProperties({
            template: document.querySelector(this.template).innerHTML.trim()
          }, true);
        }
      } catch (e) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(this.template);
      }
    }

    this.listBaseOption = {
      template: this.template,
      headerTemplate: this.headerTemplate,
      groupTemplate: this.groupTemplate,
      expandCollapse: true,
      listClass: '',
      ariaAttributes: {
        itemRole: 'listitem',
        listRole: 'list',
        itemText: '',
        groupItemRole: 'presentation',
        wrapperRole: 'presentation'
      },
      // eslint-disable-next-line
      fields: this.fields.properties,
      sortOrder: this.sortOrder,
      showIcon: this.showIcon,
      itemCreated: this.renderCheckbox.bind(this),
      templateID: "" + this.element.id + LISTVIEW_TEMPLATE_PROPERTY,
      groupTemplateID: "" + this.element.id + LISTVIEW_GROUPTEMPLATE_PROPERTY,
      enableHtmlSanitizer: this.enableHtmlSanitizer
    };
    this.initialization();
  };

  ListView.prototype.initialization = function () {
    this.curDSLevel = [];
    this.animateOptions = {};
    this.curViewDS = [];
    this.currentLiElements = [];
    this.isNestedList = false;
    this.selectedData = [];
    this.selectedId = this.enablePersistence ? this.selectedId : [];
    this.LISTVIEW_TEMPLATE_ID = "" + this.element.id + LISTVIEW_TEMPLATE_PROPERTY;
    this.LISTVIEW_GROUPTEMPLATE_ID = "" + this.element.id + LISTVIEW_GROUPTEMPLATE_PROPERTY;
    this.LISTVIEW_HEADERTEMPLATE_ID = "" + this.element.id + LISTVIEW_HEADERTEMPLATE_PROPERTY;
    this.aniObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"](this.animateOptions);
    this.removeElement(this.curUL);
    this.removeElement(this.ulElement);
    this.removeElement(this.headerEle);
    this.removeElement(this.contentContainer);
    this.curUL = this.ulElement = this.liCollection = this.headerEle = this.contentContainer = undefined;
  };

  ListView.prototype.renderCheckbox = function (args) {
    var _this = this;

    if (args.item.classList.contains(classNames.hasChild)) {
      this.isNestedList = true;
    }

    if (this.showCheckBox && this.isValidLI(args.item)) {
      var checkboxElement = void 0;
      var fieldData_1; // eslint-disable-next-line prefer-const

      checkboxElement = Object(_syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_2__["createCheckBox"])(this.createElement, false, {
        checked: false,
        enableRtl: this.enableRtl,
        cssClass: classNames.listviewCheckbox
      });
      checkboxElement.setAttribute('role', 'checkbox');
      var frameElement_1 = checkboxElement.querySelector('.' + classNames.checkboxIcon);
      args.item.classList.add(classNames.itemCheckList);
      args.item.firstElementChild.classList.add(classNames.checkbox);

      if (typeof this.dataSource[0] !== 'string' && typeof this.dataSource[0] !== 'number') {
        fieldData_1 = Object(_common_list_base__WEBPACK_IMPORTED_MODULE_3__["getFieldValues"])(args.curData, this.listBaseOption.fields);

        if (this.enablePersistence && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.selectedId)) {
          var index = this.selectedId.findIndex(function (e) {
            return e == fieldData_1[_this.listBaseOption.fields.id].toString();
          });

          if (index != -1) {
            this.checkInternally(args, checkboxElement);
          }
        } else if (fieldData_1[this.listBaseOption.fields.isChecked]) {
          this.checkInternally(args, checkboxElement);
        }
      } else if ((typeof this.dataSource[0] === 'string' || typeof this.dataSource[0] === 'number') && this.selectedData.indexOf(args.text) !== -1) {
        this.checkInternally(args, checkboxElement);
      }

      checkboxElement.setAttribute('aria-checked', frameElement_1.classList.contains(classNames.checked) ? 'true' : 'false');
      checkboxElement.setAttribute('aria-label', 'checkbox');

      if (this.checkBoxPosition === 'Left') {
        checkboxElement.classList.add(classNames.checkboxLeft);
        args.item.firstElementChild.classList.add(classNames.checkboxLeft);
        args.item.firstElementChild.insertBefore(checkboxElement, args.item.firstElementChild.childNodes[0]);
      } else {
        checkboxElement.classList.add(classNames.checkboxRight);
        args.item.firstElementChild.classList.add(classNames.checkboxRight);
        args.item.firstElementChild.appendChild(checkboxElement);
      }

      this.currentLiElements.push(args.item);

      if (this.checkBoxPosition === 'Left') {
        this.virtualCheckBox = args.item.firstElementChild.children[0];
      } else {
        this.virtualCheckBox = args.item.firstElementChild.lastElementChild;
      }
    }
  };

  ListView.prototype.checkInternally = function (args, checkboxElement) {
    args.item.classList.add(classNames.selected);
    checkboxElement.querySelector('.' + classNames.checkboxIcon).classList.add(classNames.checked);
    checkboxElement.setAttribute('aria-checked', 'true');
  };
  /**
   * Checks the specific list item by passing the unchecked fields as an argument to this method.
   *
   * @param  {Fields | HTMLElement | Element} item - It accepts Fields or HTML list element as an argument.
   */


  ListView.prototype.checkItem = function (item) {
    this.toggleCheckBase(item, true);
  };

  ListView.prototype.toggleCheckBase = function (item, checked) {
    if (this.showCheckBox) {
      var liElement = item;

      if (item instanceof Object && item.constructor !== HTMLLIElement) {
        liElement = this.getLiFromObjOrElement(item);
      }

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement)) {
        var checkboxIcon = liElement.querySelector('.' + classNames.checkboxIcon);

        if (checked === true) {
          liElement.classList.add(classNames.selected);
        } else {
          liElement.classList.remove(classNames.selected);
        }

        if (checked === true) {
          checkboxIcon.classList.add(classNames.checked);
        } else {
          checkboxIcon.classList.remove(classNames.checked);
        }

        checkboxIcon.parentElement.setAttribute('aria-checked', checked ? 'true' : 'false');
      }

      this.setSelectedItemData(liElement);
      this.updateSelectedId();
    }
  };
  /**
   * Uncheck the specific list item by passing the checked fields as an argument to this method.
   *
   * @param  {Fields | HTMLElement | Element} item - It accepts Fields or HTML list element as an argument.
   */


  ListView.prototype.uncheckItem = function (item) {
    this.toggleCheckBase(item, false);
  };
  /**
   * Checks all the unchecked items in the ListView.
   */


  ListView.prototype.checkAllItems = function () {
    this.toggleAllCheckBase(true);
  };
  /**
   * Uncheck all the checked items in ListView.
   */


  ListView.prototype.uncheckAllItems = function () {
    this.toggleAllCheckBase(false);
  };

  ListView.prototype.toggleAllCheckBase = function (checked) {
    if (this.showCheckBox) {
      for (var i = 0; i < this.liCollection.length; i++) {
        var checkIcon = this.liCollection[i].querySelector('.' + classNames.checkboxIcon);

        if (checkIcon) {
          if (checked) {
            if (!checkIcon.classList.contains(classNames.checked)) {
              this.checkItem(this.liCollection[i]);
            }
          } else {
            if (checkIcon.classList.contains(classNames.checked)) {
              this.uncheckItem(this.liCollection[i]);
            }
          }
        }
      }

      if (this.enableVirtualization) {
        this.virtualizationModule.checkedItem(checked);
      }

      this.updateSelectedId();
    }
  };

  ListView.prototype.setCheckbox = function () {
    if (this.showCheckBox) {
      var liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.listItem));
      var args = {
        item: undefined,
        curData: undefined,
        dataSource: undefined,
        fields: undefined,
        options: undefined,
        text: ''
      };

      for (var i = 0; i < liCollection.length; i++) {
        var element = liCollection[i];
        args.item = element; // eslint-disable-next-line @typescript-eslint/no-explicit-any

        args.curData = this.getItemData(element);

        if (element.querySelector('.' + classNames.checkboxWrapper)) {
          this.removeElement(element.querySelector('.' + classNames.checkboxWrapper));
        }

        this.renderCheckbox(args);

        if (args.item.classList.contains(classNames.selected)) {
          this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));
        }
      }
    } else {
      var liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.itemCheckList));

      for (var i = 0; i < liCollection.length; i++) {
        var element = liCollection[i];
        element.classList.remove(classNames.selected);
        element.firstElementChild.classList.remove(classNames.checkbox);
        this.removeElement(element.querySelector('.' + classNames.checkboxWrapper));
      }

      if (this.selectedItems) {
        this.selectedItems.item.classList.add(classNames.selected);
      }
    }
  };
  /**
   * Refresh the height of the list item only on enabling the virtualization property.
   */


  ListView.prototype.refreshItemHeight = function () {
    if (this.virtualizationModule) {
      this.virtualizationModule.refreshItemHeight();
    }
  };

  ListView.prototype.clickHandler = function (e) {
    if (Array.isArray(this.dataSource) && this.dataSource.length === 0) {
      return;
    }

    var target = e.target;
    this.targetElement = target;
    var classList = target.classList;
    var closestElement;

    if (classList.contains(classNames.backIcon) || classList.contains(classNames.headerText)) {
      if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {
        this.uncheckAllItems();
      }

      this.back();
    } else {
      var li = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target.parentNode, '.' + classNames.listItem);

      if (li === null) {
        li = target;
      }

      this.removeFocus();

      if (this.enable && this.showCheckBox && this.isValidLI(li)) {
        if (e.target.classList.contains(classNames.checkboxIcon)) {
          li.classList.add(classNames.focused);

          if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li.querySelector('.' + classNames.checked))) {
            var args = {
              curData: undefined,
              dataSource: undefined,
              fields: undefined,
              options: undefined,
              text: undefined,
              item: li
            };
            this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));
          } else {
            this.uncheckItem(li);
            li.classList.add(classNames.focused);
          }

          if (this.enableVirtualization) {
            this.virtualizationModule.setCheckboxLI(li, e);
          }

          if (e) {
            var eventArgs = this.selectEventData(li, e);
            var checkIcon = li.querySelector('.' + classNames.checkboxIcon);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(eventArgs, {
              isChecked: checkIcon.classList.contains(classNames.checked)
            });
            this.trigger('select', eventArgs);
          }
        } else if (li.classList.contains(classNames.hasChild)) {
          this.removeHover();
          this.removeSelect();
          this.removeSelect(li);
          this.setSelectLI(li, e);
          li.classList.remove(classNames.selected);
        } else {
          this.setCheckboxLI(li, e);

          if (target.nodeName == "INPUT" || target.nodeName == "TEXTAREA") {
            target.classList.add('e-focused');
            this.targetElement = target;
          }
        }
      } else {
        this.setSelectLI(li, e);

        if (target.nodeName == "INPUT" || target.nodeName == "TEXTAREA") {
          target.classList.add('e-focused');
          this.targetElement = target;
        }
      }

      closestElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, 'li');

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(closestElement)) {
        if (closestElement.classList.contains('e-has-child') && !e.target.parentElement.classList.contains('e-listview-checkbox')) {
          closestElement.classList.add(classNames.disable);
        }
      }
    }

    this.updateSelectedId();
  };

  ListView.prototype.removeElement = function (element) {
    return element && element.parentNode && element.parentNode.removeChild(element);
  };

  ListView.prototype.hoverHandler = function (e) {
    var curLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target.parentNode, '.' + classNames.listItem);
    this.setHoverLI(curLi);
  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars


  ListView.prototype.leaveHandler = function (e) {
    this.removeHover();
  };

  ListView.prototype.homeKeyHandler = function (e, end) {
    e.preventDefault();

    if (Object.keys(this.dataSource).length && this.curUL) {
      var li = this.curUL.querySelectorAll('.' + classNames.listItem);
      var focusedElement = this.curUL.querySelector('.' + classNames.focused) || this.curUL.querySelector('.' + classNames.selected);

      if (focusedElement) {
        focusedElement.classList.remove(classNames.focused);

        if (!this.showCheckBox) {
          focusedElement.classList.remove(classNames.selected);
        }
      }

      var index = !end ? 0 : li.length - 1;

      if (li[index].classList.contains(classNames.hasChild) || this.showCheckBox) {
        li[index].classList.add(classNames.focused);
      } else {
        this.setSelectLI(li[index], e);
      }

      if (li[index]) {
        this.element.setAttribute('aria-activedescendant', li[index].id.toString());
      } else {
        this.element.removeAttribute('aria-activedescendant');
      }
    }
  };

  ListView.prototype.onArrowKeyDown = function (e, prev) {
    var siblingLI;
    var li;
    var hasChild = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.curUL.querySelector('.' + classNames.hasChild)) ? true : false;

    if (hasChild || this.showCheckBox) {
      li = this.curUL.querySelector('.' + classNames.focused) || this.curUL.querySelector('.' + classNames.selected);
      siblingLI = _common_list_base__WEBPACK_IMPORTED_MODULE_3__["ListBase"].getSiblingLI(this.curUL.querySelectorAll('.' + classNames.listItem), li, prev);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(siblingLI)) {
        if (li) {
          li.classList.remove(classNames.focused);

          if (!this.showCheckBox) {
            li.classList.remove(classNames.selected);
          }
        }

        if (siblingLI.classList.contains(classNames.hasChild) || this.showCheckBox) {
          siblingLI.classList.add(classNames.focused);
        } else {
          this.setSelectLI(siblingLI, e);
        }
      }
    } else {
      li = this.curUL.querySelector('.' + classNames.selected);
      siblingLI = _common_list_base__WEBPACK_IMPORTED_MODULE_3__["ListBase"].getSiblingLI(this.curUL.querySelectorAll('.' + classNames.listItem), li, prev);
      this.setSelectLI(siblingLI, e);
    }

    if (siblingLI) {
      this.element.setAttribute('aria-activedescendant', siblingLI.id.toString());
    } else {
      this.element.removeAttribute('aria-activedescendant');
    }

    return siblingLI;
  };

  ListView.prototype.arrowKeyHandler = function (e, prev) {
    var _this = this;

    e.preventDefault();

    if (Object.keys(this.dataSource).length && this.curUL) {
      var siblingLI = this.onArrowKeyDown(e, prev);
      var elementTop = this.element.getBoundingClientRect().top;
      var elementHeight = this.element.getBoundingClientRect().height;
      var firstItemBounds = this.curUL.querySelector('.' + classNames.listItem).getBoundingClientRect();
      var heightDiff = void 0;
      var groupItemBounds = void 0;

      if (this.fields.groupBy) {
        groupItemBounds = this.curUL.querySelector('.' + classNames.groupListItem).getBoundingClientRect();
      }

      if (siblingLI) {
        var siblingTop = siblingLI.getBoundingClientRect().top;
        var siblingHeight = siblingLI.getBoundingClientRect().height;

        if (!prev) {
          var height = this.isWindow ? window.innerHeight : elementHeight;
          heightDiff = this.isWindow ? siblingTop + siblingHeight : siblingTop - elementTop + siblingHeight;

          if (heightDiff > height) {
            if (this.isWindow === true) {
              window.scroll(0, pageYOffset + (heightDiff - height));
            } else {
              this.element.scrollTop = this.element.scrollTop + (heightDiff - height);
            }
          }
        } else {
          heightDiff = this.isWindow ? siblingTop : siblingTop - elementTop;

          if (heightDiff < 0) {
            if (this.isWindow === true) {
              window.scroll(0, pageYOffset + heightDiff);
            } else {
              this.element.scrollTop = this.element.scrollTop + heightDiff;
            }
          }
        }
      } else if (this.enableVirtualization && prev && this.virtualizationModule.uiFirstIndex) {
        this.onUIScrolled = function () {
          _this.onArrowKeyDown(e, prev);

          _this.onUIScrolled = undefined;
        };

        heightDiff = this.virtualizationModule.listItemHeight;

        if (this.isWindow === true) {
          window.scroll(0, pageYOffset - heightDiff);
        } else {
          this.element.scrollTop = this.element.scrollTop - heightDiff;
        }
      } else if (prev) {
        if (this.showHeader && this.headerEle) {
          var topHeight = groupItemBounds ? groupItemBounds.top : firstItemBounds.top;
          var headerBounds = this.headerEle.getBoundingClientRect();
          heightDiff = headerBounds.top < 0 ? headerBounds.height - topHeight : 0;

          if (this.isWindow === true) {
            window.scroll(0, pageYOffset - heightDiff);
          } else {
            this.element.scrollTop = 0;
          }
        } else if (this.fields.groupBy) {
          heightDiff = this.isWindow ? groupItemBounds.top < 0 ? groupItemBounds.top : 0 : elementTop - firstItemBounds.top + groupItemBounds.height;

          if (this.isWindow === true) {
            window.scroll(0, pageYOffset + heightDiff);
          } else {
            this.element.scrollTop = this.element.scrollTop - heightDiff;
          }
        }
      }
    }
  };

  ListView.prototype.enterKeyHandler = function (e) {
    if (Object.keys(this.dataSource).length && this.curUL) {
      var hasChild = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.curUL.querySelector('.' + classNames.hasChild)) ? true : false;
      var li = this.curUL.querySelector('.' + classNames.focused);

      if (hasChild && li) {
        li.classList.remove(classNames.focused);

        if (this.showCheckBox) {
          this.removeSelect();
          this.removeSelect(li);
          this.removeHover();
        }

        this.setSelectLI(li, e);
      }
    }
  };

  ListView.prototype.spaceKeyHandler = function (e) {
    e.preventDefault();

    if (this.enable && this.showCheckBox && Object.keys(this.dataSource).length && this.curUL) {
      var li = this.curUL.querySelector('.' + classNames.focused);
      var checkboxElement = void 0;
      var checkIcon = void 0;

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li.querySelector('.' + classNames.checked))) {
        var args = {
          curData: undefined,
          dataSource: undefined,
          fields: undefined,
          options: undefined,
          text: undefined,
          item: li
        };
        checkboxElement = args.item.querySelector('.' + classNames.checkboxWrapper);
        this.checkInternally(args, checkboxElement);
        checkIcon = checkboxElement.querySelector('.' + classNames.checkboxIcon + '.' + classNames.icon);
      } else {
        this.uncheckItem(li);
      }

      var eventArgs = this.selectEventData(li, e);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(eventArgs, {
        isChecked: checkIcon ? checkIcon.classList.contains(classNames.checked) : false
      });
      this.trigger('select', eventArgs);
      this.updateSelectedId();
    }
  };

  ListView.prototype.keyActionHandler = function (e) {
    switch (e.keyCode) {
      case 36:
        this.homeKeyHandler(e);
        break;

      case 35:
        this.homeKeyHandler(e, true);
        break;

      case 40:
        this.arrowKeyHandler(e);
        break;

      case 38:
        this.arrowKeyHandler(e, true);
        break;

      case 13:
        this.enterKeyHandler(e);
        break;

      case 8:
        if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {
          this.uncheckAllItems();
        }

        this.back();
        break;

      case 32:
        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.targetElement) || !this.targetElement.classList.contains('e-focused')) {
          this.spaceKeyHandler(e);
        }

        break;
    }
  };

  ListView.prototype.swipeActionHandler = function (e) {
    if (e.swipeDirection === 'Right' && e.velocity > swipeVelocity && e.originalEvent.type === 'touchend') {
      if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {
        this.uncheckAllItems();
      }

      this.back();
    }
  };

  ListView.prototype.focusout = function () {
    if (Object.keys(this.dataSource).length && this.curUL) {
      var focusedElement = this.curUL.querySelector('.' + classNames.focused);

      if (focusedElement) {
        focusedElement.classList.remove(classNames.focused);

        if (!this.showCheckBox && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.selectedLI)) {
          this.selectedLI.classList.add(classNames.selected);
        }
      }
    }
  };

  ListView.prototype.wireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keydown', this.keyActionHandler, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'click', this.clickHandler, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'mouseover', this.hoverHandler, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'mouseout', this.leaveHandler, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'focusout', this.focusout, this);
    this.touchModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.element, {
      swipe: this.swipeActionHandler.bind(this)
    });
  };

  ListView.prototype.unWireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'click', this.clickHandler);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseover', this.hoverHandler);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseout', this.leaveHandler);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseover', this.hoverHandler);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseout', this.leaveHandler);
    this.touchModule.destroy();
    this.touchModule = null;
  };

  ListView.prototype.removeFocus = function () {
    var focusedLI = this.element.querySelectorAll('.' + classNames.focused);

    for (var _i = 0, focusedLI_1 = focusedLI; _i < focusedLI_1.length; _i++) {
      var ele = focusedLI_1[_i];
      ele.classList.remove(classNames.focused);
    }
  };

  ListView.prototype.removeHover = function () {
    var hoverLI = this.element.querySelector('.' + classNames.hover);

    if (hoverLI) {
      hoverLI.classList.remove(classNames.hover);
    }
  };

  ListView.prototype.removeSelect = function (li) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li)) {
      var selectedLI = this.element.querySelectorAll('.' + classNames.selected);

      for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {
        var ele = selectedLI_1[_i];

        if (this.showCheckBox && ele.querySelector('.' + classNames.checked)) {
          continue;
        } else {
          ele.classList.remove(classNames.selected);
        }
      }
    } else {
      li.classList.remove(classNames.selected);
    }
  };

  ListView.prototype.isValidLI = function (li) {
    return li && li.classList.contains(classNames.listItem) && !li.classList.contains(classNames.groupListItem) && !li.classList.contains(classNames.disable);
  };

  ListView.prototype.setCheckboxLI = function (li, e) {
    if (this.isValidLI(li) && this.enable && this.showCheckBox) {
      if (this.curUL.querySelector('.' + classNames.focused)) {
        this.curUL.querySelector('.' + classNames.focused).classList.remove(classNames.focused);
      }

      var textAreaFocus = li.querySelector('textarea') || li.querySelector('input');
      li.classList.add(classNames.focused);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e)) {
        if (e.target === textAreaFocus) {
          textAreaFocus.classList.add('e-focused');
        }
      }

      var checkboxElement = li.querySelector('.' + classNames.checkboxWrapper);
      var checkIcon = checkboxElement.querySelector('.' + classNames.checkboxIcon + '.' + classNames.icon);
      this.removeHover();

      if (!checkIcon.classList.contains(classNames.checked)) {
        checkIcon.classList.add(classNames.checked);
        li.classList.add(classNames.selected);
      } else {
        checkIcon.classList.remove(classNames.checked);
        li.classList.remove(classNames.selected);
      }

      checkboxElement.setAttribute('aria-checked', checkIcon.classList.contains(classNames.checked) ? 'true' : 'false');
      var eventArgs = this.selectEventData(li, e);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(eventArgs, {
        isChecked: checkIcon.classList.contains(classNames.checked)
      });

      if (this.enableVirtualization) {
        this.virtualizationModule.setCheckboxLI(li, e);
      }

      this.trigger('select', eventArgs);
      this.setSelectedItemData(li);
      this.renderSubList(li);
    }
  };

  ListView.prototype.selectEventData = function (li, e) {
    var data = this.getItemData(li);
    var fieldData = Object(_common_list_base__WEBPACK_IMPORTED_MODULE_3__["getFieldValues"])(data, this.listBaseOption.fields);
    var selectedItem;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data) && typeof this.dataSource[0] === 'string' || typeof this.dataSource[0] === 'number') {
      selectedItem = {
        item: li,
        text: li && li.innerText.trim(),
        data: this.dataSource
      };
    } else {
      selectedItem = // eslint-disable-next-line
      {
        item: li,
        text: fieldData && fieldData[this.listBaseOption.fields.text],
        // eslint-disable-next-line
        data: data
      };
    }

    var eventArgs = {};
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(eventArgs, selectedItem);

    if (e) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(eventArgs, {
        isInteracted: true,
        event: e,
        cancel: false,
        index: this.curUL && Array.prototype.indexOf.call(this.curUL.children, li)
      });
    }

    return eventArgs;
  };

  ListView.prototype.setSelectedItemData = function (li) {
    var data = this.getItemData(li); // eslint-disable-next-line

    var fieldData = Object(_common_list_base__WEBPACK_IMPORTED_MODULE_3__["getFieldValues"])(data, this.listBaseOption.fields);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data) && (typeof this.dataSource[0] === 'string' || typeof this.dataSource[0] === 'number')) {
      this.selectedItems = {
        item: li,
        text: li && li.innerText.trim(),
        data: this.dataSource
      };
    } else {
      this.selectedItems = {
        item: li,
        // eslint-disable-next-line
        text: fieldData && fieldData[this.listBaseOption.fields.text],
        // eslint-disable-next-line
        data: data
      };
    }
  };

  ListView.prototype.setSelectLI = function (li, e) {
    var _this = this;

    if (this.isValidLI(li) && !li.classList.contains(classNames.selected) && this.enable) {
      if (!this.showCheckBox) {
        this.removeSelect();
      }

      li.classList.add(classNames.selected);
      this.removeHover();
      this.setSelectedItemData(li);

      if (this.enableVirtualization) {
        this.virtualizationModule.setSelectLI(li, e);
      }

      var eventArgs = this.selectEventData(li, e);
      this.trigger('select', eventArgs, function (observedArgs) {
        if (!observedArgs.cancel) {
          _this.selectedLI = li;

          _this.renderSubList(li);
        }
      });
    }
  };

  ListView.prototype.setHoverLI = function (li) {
    if (this.isValidLI(li) && !li.classList.contains(classNames.hover) && this.enable) {
      var lastLi = this.element.querySelectorAll('.' + classNames.hover);

      if (lastLi && lastLi.length) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(lastLi, classNames.hover);
      }

      if (!li.classList.contains(classNames.selected) || this.showCheckBox) {
        li.classList.add(classNames.hover);
      }
    }
  }; //Data Source Related Functions


  ListView.prototype.getSubDS = function () {
    var levelKeys = this.curDSLevel;

    if (levelKeys.length) {
      var ds = this.localData;

      for (var _i = 0, levelKeys_1 = levelKeys; _i < levelKeys_1.length; _i++) {
        var key = levelKeys_1[_i];
        var field = {}; // eslint-disable-next-line

        field[this.fields.id] = key;
        this.curDSJSON = this.findItemFromDS(ds, field);
        var fieldData = Object(_common_list_base__WEBPACK_IMPORTED_MODULE_3__["getFieldValues"])(this.curDSJSON, this.listBaseOption.fields);
        ds = this.curDSJSON ? fieldData[this.fields.child] : ds;
      }

      return ds;
    }

    return this.localData;
  };

  ListView.prototype.getItemData = function (li) {
    var dataSource = this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] ? this.localData : this.dataSource;
    var fields = this.getElementUID(li);
    var curDS;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.querySelector('.' + classNames.hasChild)) && this.fields.groupBy) {
      curDS = this.curViewDS;
    } else {
      curDS = dataSource;
    }

    return this.findItemFromDS(curDS, fields);
  };

  ListView.prototype.findItemFromDS = function (dataSource, fields, parent) {
    var _this = this;

    var resultJSON;

    if (dataSource && dataSource.length && fields) {
      dataSource.some(function (data) {
        var fieldData = // eslint-disable-next-line
        Object(_common_list_base__WEBPACK_IMPORTED_MODULE_3__["getFieldValues"])(data, _this.listBaseOption.fields); //(!(fid) || id === fid) && (!(ftext) || text === ftext) && (!!fid || !!ftext)

        if ((fields[_this.fields.id] || fields[_this.fields.text]) && (!fields[_this.fields.id] || (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fieldData[_this.fields.id]) && fieldData[_this.fields.id].toString()) === fields[_this.fields.id].toString()) && (!fields[_this.fields.text] || fieldData[_this.fields.text] === fields[_this.fields.text])) {
          resultJSON = parent ? dataSource : data;
        } else if (typeof data !== 'object' && dataSource.indexOf(data) !== -1) {
          resultJSON = parent ? dataSource : data;
        } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fields[_this.fields.id]) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fieldData[_this.fields.id])) {
          var li = _this.element.querySelector('[data-uid="' + fields[_this.fields.id] + '"]'); // eslint-disable-next-line


          if (li && li.innerText.trim() === fieldData[_this.fields.text]) {
            resultJSON = data;
          } // eslint-disable-next-line

        } else if (fieldData.hasOwnProperty(_this.fields.child) && fieldData[_this.fields.child].length) {
          resultJSON = _this.findItemFromDS(fieldData[_this.fields.child], fields, parent);
        }

        return !!resultJSON;
      });
    } else {
      resultJSON = dataSource;
    }

    return resultJSON;
  };

  ListView.prototype.getQuery = function () {
    var columns = [];
    var query = this.query ? this.query : new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]();

    if (!this.query) {
      // eslint-disable-next-line
      for (var _i = 0, _a = Object.keys(this.fields.properties); _i < _a.length; _i++) {
        var column = _a[_i];

        if (column !== 'tableName' && !!this.fields["" + column] && this.fields["" + column] !== _common_list_base__WEBPACK_IMPORTED_MODULE_3__["ListBase"].defaultMappedFields["" + column] && columns.indexOf(this.fields["" + column]) === -1) {
          columns.push(this.fields["" + column]);
        }
      }

      query.select(columns); // eslint-disable-next-line

      if (this.fields.properties.hasOwnProperty('tableName')) {
        query.from(this.fields.tableName);
      }
    }

    return query;
  };

  ListView.prototype.setViewDataSource = function (dataSource) {
    if (dataSource === void 0) {
      dataSource = this.localData;
    } // eslint-disable-next-line


    var fieldValue = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fields.sortBy) ? this.fields.text : this.fields.sortBy;
    var query = _common_list_base__WEBPACK_IMPORTED_MODULE_3__["ListBase"].addSorting(this.sortOrder, fieldValue);

    if (dataSource && this.fields.groupBy) {
      if (this.sortOrder !== 'None') {
        this.curViewDS = _common_list_base__WEBPACK_IMPORTED_MODULE_3__["ListBase"].groupDataSource(_common_list_base__WEBPACK_IMPORTED_MODULE_3__["ListBase"].getDataSource(dataSource, query), this.listBaseOption.fields, this.sortOrder);
      } else {
        this.curViewDS = _common_list_base__WEBPACK_IMPORTED_MODULE_3__["ListBase"].groupDataSource(dataSource, this.listBaseOption.fields, this.sortOrder);
      }
    } else if (dataSource && this.sortOrder !== 'None') {
      this.curViewDS = _common_list_base__WEBPACK_IMPORTED_MODULE_3__["ListBase"].getDataSource(dataSource, query);
    } else {
      this.curViewDS = dataSource;
    }
  };

  ListView.prototype.isInAnimation = function () {
    return this.curUL.classList.contains('.e-animate');
  };

  ListView.prototype.renderRemoteLists = function (e, listViewComponent) {
    if (this.isDestroyed) {
      return;
    }

    this.localData = e.result;
    listViewComponent.removeElement(listViewComponent.contentContainer);
    this.renderList();
    this.trigger('actionComplete', e);
  };

  ListView.prototype.triggerActionFailure = function (e) {
    if (this.isDestroyed) {
      return;
    }

    this.trigger('actionFailure', e);
  };

  ListView.prototype.setLocalData = function () {
    var _this = this;

    this.trigger('actionBegin'); // eslint-disable-next-line

    var listViewComponent = this;

    if (this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) {
      if (this.dataSource.ready) {
        this.dataSource.ready.then(function (e) {
          /* eslint-disable */
          _this.isOffline = _this.dataSource.dataSource.offline;

          if (_this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] && _this.isOffline) {
            _this.renderRemoteLists(e, listViewComponent);
          }
        }).catch(function (e) {
          _this.triggerActionFailure(e);
        });
      } else {
        this.dataSource.executeQuery(this.getQuery()).then(function (e) {
          _this.renderRemoteLists(e, listViewComponent);
        }).catch(function (e) {
          _this.triggerActionFailure(e);
        });
      }
    } else if (!this.dataSource || !this.dataSource.length) {
      var ul = this.element.querySelector('ul');

      if (ul) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(ul);
        this.setProperties({
          dataSource: _common_list_base__WEBPACK_IMPORTED_MODULE_3__["ListBase"].createJsonFromElement(ul)
        }, true);
        this.localData = this.dataSource;
        this.renderList();
        this.trigger('actionComplete', {
          data: this.localData
        });
      }
    } else {
      this.localData = this.dataSource;
      this.renderList();
      this.trigger('actionComplete', {
        data: this.localData
      });
    }
  };

  ListView.prototype.reRender = function () {
    this.removeElement(this.headerEle);
    this.removeElement(this.ulElement);
    this.removeElement(this.contentContainer); // eslint-disable-next-line

    if (this.isReact) {
      this.clearTemplate();
    }

    if (Object.keys(window).indexOf('ejsInterop') === -1) {
      this.element.innerHTML = '';
    }

    this.headerEle = this.ulElement = this.liCollection = undefined;
    this.header();
    this.setLocalData();
  };

  ListView.prototype.resetCurrentList = function () {
    this.setViewDataSource(this.curViewDS);
    this.contentContainer.innerHTML = '';
    this.createList();
    this.renderIntoDom(this.curUL);
  };

  ListView.prototype.setAttributes = function (liElements) {
    for (var i = 0; i < liElements.length; i++) {
      var element = liElements[i];

      if (element.classList.contains('e-list-item')) {
        element.setAttribute('id', this.element.id + '_' + element.getAttribute('data-uid'));
        element.setAttribute('tabindex', '-1');
      }
    }
  };

  ListView.prototype.createList = function () {
    this.currentLiElements = [];
    this.isNestedList = false;
    this.ulElement = this.curUL = _common_list_base__WEBPACK_IMPORTED_MODULE_3__["ListBase"].createList(this.createElement, this.curViewDS, this.listBaseOption, null, this);
    this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);
    this.setAttributes(this.liCollection);
  };

  ListView.prototype.exceptionEvent = function (e) {
    this.trigger('actionFailure', e);
  };

  ListView.prototype.UpdateCurrentUL = function () {
    this.ulElement = this.curUL = this.element.querySelector('.' + classNames.parentItem);

    if (this.curUL) {
      // eslint-disable-next-line
      this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);
    }
  };

  ListView.prototype.renderSubList = function (li) {
    this.liElement = li;
    var uID = li.getAttribute('data-uid');

    if (li.classList.contains(classNames.hasChild) && uID) {
      var ul = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(li.parentNode, '.' + classNames.parentItem);
      var ele = this.element.querySelector('[pid=\'' + uID + '\']');
      this.curDSLevel.push(uID);
      this.setViewDataSource(this.getSubDS());

      if (!ele) {
        var data = this.curViewDS;
        ele = _common_list_base__WEBPACK_IMPORTED_MODULE_3__["ListBase"].createListFromJson(this.createElement, data, this.listBaseOption, this.curDSLevel.length, null, this); // eslint-disable-next-line

        if (this.isReact) {
          this.renderReactTemplates();
        }

        var lists = ele.querySelectorAll('.' + classNames.listItem);
        this.setAttributes(lists);
        ele.setAttribute('pID', uID);
        ele.style.display = 'none';
        this.renderIntoDom(ele);
      }

      this.switchView(ul, ele);
      this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);

      if (this.selectedItems) {
        var fieldData = Object(_common_list_base__WEBPACK_IMPORTED_MODULE_3__["getFieldValues"])(this.selectedItems.data, this.listBaseOption.fields); // eslint-disable-next-line

        this.header(fieldData[this.listBaseOption.fields.text], true, 'header');
      }

      this.selectedLI = undefined;
    }
  };

  ListView.prototype.renderIntoDom = function (ele) {
    this.contentContainer.appendChild(ele);
  };

  ListView.prototype.renderList = function (data) {
    this.setViewDataSource(data);

    if (this.enableVirtualization) {
      if (Object.keys(this.dataSource).length) {
        if ((this.template || this.groupTemplate) && !this.virtualizationModule.isNgTemplate()) {
          this.listBaseOption.itemCreated = this.virtualizationModule.createUIItem.bind(this.virtualizationModule);
        }
      }

      this.virtualizationModule.uiVirtualization();
    } else {
      this.createList();
      this.contentContainer = this.createElement('div', {
        className: classNames.container
      });
      this.element.appendChild(this.contentContainer);
      this.renderIntoDom(this.ulElement); // eslint-disable-next-line

      if (this.isReact) {
        this.renderReactTemplates();
      }
    }
  };

  ListView.prototype.getElementUID = function (obj) {
    var fields = {};

    if (obj instanceof Element) {
      // eslint-disable-next-line
      fields[this.fields.id] = obj.getAttribute('data-uid');
    } else {
      fields = obj;
    }

    return fields;
  };
  /**
   * Initializes the ListView component rendering.
   */


  ListView.prototype.render = function () {
    this.element.classList.add(classNames.root);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
      tabindex: '0'
    });
    this.setCSSClass();
    this.setEnableRTL();
    this.setEnable();
    this.setSize();
    this.wireEvents();
    this.header();
    this.setLocalData();
    this.setHTMLAttribute();
    this.rippleFn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(this.element, {
      selector: '.' + classNames.listItem
    });
    this.renderComplete();
  };
  /**
   * It is used to destroy the ListView component.
   */


  ListView.prototype.destroy = function () {
    // eslint-disable-next-line
    if (this.isReact) {
      this.clearTemplate();
    }

    this.unWireEvents();
    var classAr = [classNames.root, classNames.disable, 'e-rtl', 'e-has-header', 'e-lib'].concat(this.cssClass.split(' ').filter(function (css) {
      return css;
    }));
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], classAr);
    this.element.removeAttribute('role');
    this.element.removeAttribute('tabindex');
    this.curUL = this.ulElement = this.liCollection = this.headerEle = undefined;
    this.element.innerHTML = '';
    this.contentContainer = null;
    this.selectedItems = null;
    this.selectedLI = null;
    this.liElement = null;
    this.targetElement = null;
    this.currentLiElements = null;
    this.virtualCheckBox = null;

    _super.prototype.destroy.call(this);
  };
  /**
   * Switches back from the navigated sub list item.
   */


  ListView.prototype.back = function () {
    var pID = this.curDSLevel[this.curDSLevel.length - 1];

    if (pID === undefined || this.isInAnimation()) {
      return;
    }

    this.curDSLevel.pop();
    this.setViewDataSource(this.getSubDS());
    var toUL = this.element.querySelector('[data-uid=\'' + pID + '\']');
    var fromUL = this.curUL;

    if (!toUL) {
      this.createList();
      this.renderIntoDom(this.ulElement);
      toUL = this.curUL;
    } else {
      toUL = toUL.parentElement;
    }

    var fieldData = Object(_common_list_base__WEBPACK_IMPORTED_MODULE_3__["getFieldValues"])(this.curDSJSON, this.listBaseOption.fields); // eslint-disable-next-line

    var text = fieldData[this.fields.text];
    this.switchView(fromUL, toUL, true);
    this.removeFocus();
    var li = this.element.querySelector('[data-uid=\'' + pID + '\']');
    li.classList.remove(classNames.disable);
    li.classList.add(classNames.focused);

    if (!(this.showCheckBox && li.querySelector('.' + classNames.checkboxIcon).classList.contains(classNames.checked))) {
      li.classList.remove(classNames.selected);
    }

    this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);

    if (this.enableHtmlSanitizer) {
      this.setProperties({
        headerTitle: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(this.headerTitle)
      }, true);
    }

    this.header(this.curDSLevel.length ? text : this.headerTitle, this.curDSLevel.length ? true : false, 'header');
  };
  /**
   * Selects the list item from the ListView by passing the elements or field object.
   *
   * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.
   */


  ListView.prototype.selectItem = function (item) {
    if (this.enableVirtualization) {
      this.virtualizationModule.selectItem(item);
    } else if (this.showCheckBox) {
      this.setCheckboxLI(this.getLiFromObjOrElement(item));
    } else {
      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item) === true) {
        this.removeSelect();
      } else {
        this.setSelectLI(this.getLiFromObjOrElement(item));
      }
    }
  };

  ListView.prototype.getLiFromObjOrElement = function (obj) {
    var li;
    var dataSource = this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] ? this.localData : this.dataSource;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(obj)) {
      if (typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') {
        if (obj instanceof Element) {
          var uid = obj.getAttribute('data-uid').toString();

          for (var i = 0; i < this.liCollection.length; i++) {
            if (this.liCollection[i].getAttribute('data-uid').toString() === uid) {
              li = this.liCollection[i];
              break;
            }
          }
        } else {
          Array.prototype.some.call(this.curUL.querySelectorAll('.' + classNames.listItem), function (item) {
            if (item.innerText.trim() === obj.toString()) {
              li = item;
              return true;
            } else {
              return false;
            }
          });
        }
      } else {
        var resultJSON = this.getItemData(obj);
        var fieldData = Object(_common_list_base__WEBPACK_IMPORTED_MODULE_3__["getFieldValues"])(resultJSON, this.listBaseOption.fields);

        if (resultJSON) {
          li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');

          if (!this.enableVirtualization && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li)) {
            var curLi = this.element.querySelectorAll('.' + classNames.listItem);

            for (var i = 0; i < curLi.length; i++) {
              // eslint-disable-next-line
              if (curLi[i].innerText.trim() === fieldData[this.fields.text]) {
                li = curLi[i];
              }
            }
          }
        }
      }
    }

    return li;
  };
  /**
   * Selects multiple list items from the ListView.
   *
   * @param  {Fields[] | HTMLElement[] | Element[]} item - We can pass array of
   *  elements or array of fields Object with ID and Text fields.
   */


  ListView.prototype.selectMultipleItems = function (item) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item)) {
      for (var i = 0; i < item.length; i++) {
        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item[i])) {
          this.selectItem(item[i]);
        }
      }
    }
  };

  ListView.prototype.getParentId = function () {
    var parentId = [];

    if (this.isNestedList) {
      for (var i = this.curDSLevel.length - 1; i >= 0; i--) {
        parentId.push(this.curDSLevel[i]);
      }
    }

    return parentId;
  };

  ListView.prototype.updateSelectedId = function () {
    this.selectedId = [];
    var liCollection = this.curUL.getElementsByClassName(classNames.selected);

    for (var i = 0; i < liCollection.length; i++) {
      var tempData = this.getItemData(liCollection[i]);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(tempData) && tempData[this.listBaseOption.fields.id]) {
        this.selectedId.push(tempData[this.listBaseOption.fields.id]);
      }
    }
  };
  /**
   * Gets the details of the currently selected item from the list items.
   *
   */


  ListView.prototype.getSelectedItems = function () {
    // eslint-disable-next-line
    var finalValue;
    var isCompleted = false;
    this.selectedId = [];
    var dataSource = this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] ? this.localData : this.dataSource;

    if (this.enableVirtualization && !isCompleted) {
      finalValue = this.virtualizationModule.getSelectedItems();
      isCompleted = true;
    } else if (this.showCheckBox && !isCompleted) {
      // eslint-disable-next-line
      var liCollection = this.curUL.getElementsByClassName(classNames.selected);
      var liTextCollection = [];
      var liDataCollection = [];
      this.selectedId = [];
      var dataParent = [];

      for (var i = 0; i < liCollection.length; i++) {
        if (typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') {
          liTextCollection.push(liCollection[i].innerText.trim());
        } else {
          var tempData = this.getItemData(liCollection[i]);
          var fieldData = Object(_common_list_base__WEBPACK_IMPORTED_MODULE_3__["getFieldValues"])(tempData, this.listBaseOption.fields);

          if (this.isNestedList) {
            dataParent.push({
              data: tempData,
              parentId: this.getParentId()
            });
          } else {
            liDataCollection.push(tempData);
          }

          if (fieldData) {
            // eslint-disable-next-line
            liTextCollection.push(fieldData[this.listBaseOption.fields.text]); // eslint-disable-next-line

            this.selectedId.push(fieldData[this.listBaseOption.fields.id]);
          } else {
            liTextCollection.push(undefined);
            this.selectedId.push(undefined);
          }
        }
      }

      if ((typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') && !isCompleted) {
        finalValue = {
          item: liCollection,
          data: dataSource,
          text: liTextCollection
        };
        isCompleted = true;
      }

      if (this.isNestedList && !isCompleted) {
        finalValue = {
          item: liCollection,
          data: dataParent,
          text: liTextCollection
        };
        isCompleted = true;
      } else if (!isCompleted) {
        finalValue = {
          item: liCollection,
          data: liDataCollection,
          text: liTextCollection
        };
        isCompleted = true;
      }
    } else if (!isCompleted) {
      var liElement = this.element.getElementsByClassName(classNames.selected)[0];
      var fieldData = Object(_common_list_base__WEBPACK_IMPORTED_MODULE_3__["getFieldValues"])(this.getItemData(liElement), this.listBaseOption.fields);

      if ((typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') && !isCompleted) {
        finalValue = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement) ? {
          item: liElement,
          data: dataSource,
          text: liElement.innerText.trim()
        } : undefined;
        isCompleted = true;
      } else if (!isCompleted) {
        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fieldData) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement)) {
          finalValue = undefined;
          isCompleted = true;
        } else {
          // eslint-disable-next-line
          this.selectedId.push(fieldData[this.listBaseOption.fields.id]);
          finalValue = {
            text: fieldData[this.listBaseOption.fields.text],
            item: liElement,
            data: this.getItemData(liElement)
          };
          isCompleted = true;
        }
      }
    }

    return finalValue;
  };
  /**
   * Finds out an item details from the current list.
   *
   * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.
   */


  ListView.prototype.findItem = function (item) {
    return this.getItemData(item);
  };
  /**
   * Enables the disabled list items by passing the Id and text fields.
   *
   * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.
   */


  ListView.prototype.enableItem = function (item) {
    this.setItemState(item, true);

    if (this.enableVirtualization) {
      this.virtualizationModule.enableItem(item);
    }
  };
  /**
   * Disables the list items by passing the Id and text fields.
   *
   * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.
   */


  ListView.prototype.disableItem = function (item) {
    this.setItemState(item, false);

    if (this.enableVirtualization) {
      this.virtualizationModule.disableItem(item);
    }
  }; //A function that used to set state of the list item like enable, disable.


  ListView.prototype.setItemState = function (item, isEnable) {
    var resultJSON = this.getItemData(item);
    var fieldData = Object(_common_list_base__WEBPACK_IMPORTED_MODULE_3__["getFieldValues"])(resultJSON, this.listBaseOption.fields);

    if (resultJSON) {
      var li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');

      if (isEnable) {
        if (li) {
          li.classList.remove(classNames.disable);
        }

        delete resultJSON[this.fields.enabled];
      } else if (!isEnable) {
        if (li) {
          li.classList.add(classNames.disable);
        } // eslint-disable-next-line


        resultJSON[this.fields.enabled] = false;
      }
    }
  };
  /**
   * Shows the hide list item from the ListView.
   *
   * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.
   */


  ListView.prototype.showItem = function (item) {
    this.showHideItem(item, false, '');

    if (this.enableVirtualization) {
      this.virtualizationModule.showItem(item);
    }
  };
  /**
   * Hides an list item from the ListView.
   *
   * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.
   */


  ListView.prototype.hideItem = function (item) {
    this.showHideItem(item, true, 'none');

    if (this.enableVirtualization) {
      this.virtualizationModule.hideItem(item);
    }
  };

  ListView.prototype.showHideItem = function (obj, isHide, display) {
    var resultJSON = this.getItemData(obj);
    var fieldData = Object(_common_list_base__WEBPACK_IMPORTED_MODULE_3__["getFieldValues"])(resultJSON, this.listBaseOption.fields);

    if (resultJSON) {
      var li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');

      if (li) {
        li.style.display = display;
      }

      if (isHide) {
        // eslint-disable-next-line
        resultJSON[this.fields.isVisible] = false;
      } else {
        delete resultJSON[this.fields.isVisible];
      }
    }
  };
  /**
   * Adds the new list item(s) to the current ListView.
   * To add a new list item(s) in the ListView, we need to pass the `data` as an array of items that need
   * to be added and `fields` as the target item to which we need to add the given item(s) as its children.
   * For example fields: { text: 'Name', tooltip: 'Name', id:'id'}
   *
   * @param  {{Object}[]} data - JSON Array Data that need to add.
   *
   * @param  {Fields} fields - Target item to add the given data as its children (can be null).
   *
   */


  ListView.prototype.addItem = function (data, fields) {
    if (fields === void 0) {
      fields = undefined;
    }

    var dataSource = this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] ? this.localData : this.dataSource;
    this.addItemInternally(data, fields, dataSource);
  };

  ListView.prototype.addItemInternally = function (data, fields, dataSource) {
    if (data instanceof Array) {
      if (this.enableVirtualization) {
        this.virtualizationModule.addItem(data, fields, dataSource);
      } else {
        var ds = this.findItemFromDS(dataSource, fields);
        var child = void 0;

        if (ds) {
          var fieldData = Object(_common_list_base__WEBPACK_IMPORTED_MODULE_3__["getFieldValues"])(ds, this.listBaseOption.fields);
          child = fieldData[this.fields.child];

          if (!child) {
            child = [];
          }

          child = child.concat(data);
        } // check for whether target is nested level or top level in list


        if (ds instanceof Array) {
          for (var i = 0; i < data.length; i++) {
            dataSource.push(data[i]);
            this.setViewDataSource(dataSource); // since it is top level target, get the content container's first child
            // as it is always the top level UL

            var targetUL = this.contentContainer ? this.contentContainer.children[0] : null; // check for whether the list was previously empty or not, if it is
            // proceed to call initial render

            if (this.contentContainer && targetUL) {
              this.addItemIntoDom(data[i], targetUL, this.curViewDS);
            } else {
              this.reRender();
            }
          }

          this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);
        } else {
          // proceed as target item is in nested level, only if it is a valid target ds
          if (ds) {
            ds[this.fields.child] = child;
            this.addItemInNestedList(ds, data);
          }
        }
      }
    }
  };

  ListView.prototype.addItemInNestedList = function (targetItemData, itemQueue) {
    // eslint-disable-next-line
    var targetItemId = targetItemData[this.fields.id];
    var targetChildDS = targetItemData[this.fields.child];
    var isAlreadyRenderedUL = this.element.querySelector('[pid=\'' + targetItemId + '\']');
    var targetLi = this.element.querySelector('[data-uid=\'' + targetItemId + '\']');
    var targetUL = isAlreadyRenderedUL ? isAlreadyRenderedUL : targetLi ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(targetLi, 'ul') : null;
    var targetDS = isAlreadyRenderedUL ? targetChildDS : [targetItemData];
    var isTargetEmptyChild = targetLi ? !targetLi.classList.contains(classNames.hasChild) : false;
    var isRefreshTemplateNeeded = false; // if li element is already rendered, that element needs to be refreshed so that
    // it becomes child viewable due to new child items are added now

    if (isTargetEmptyChild) {
      var targetRefreshedElement = _common_list_base__WEBPACK_IMPORTED_MODULE_3__["ListBase"].createListItemFromJson(this.createElement, targetDS, this.listBaseOption, null, null, this);
      this.setAttributes(targetRefreshedElement);
      targetUL.insertBefore(targetRefreshedElement[0], targetLi);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(targetLi);
      isRefreshTemplateNeeded = true;
    } // if it is already rendered element, we need to create and append new elements


    if (isAlreadyRenderedUL && itemQueue) {
      for (var i = 0; i < itemQueue.length; i++) {
        targetDS.push(itemQueue[i]);
        this.addItemIntoDom(itemQueue[i], targetUL, targetDS);
      }

      isRefreshTemplateNeeded = true;
    }
  };

  ListView.prototype.addItemIntoDom = function (currentItem, targetUL, curViewDS) {
    var index = curViewDS.indexOf(currentItem);
    this.addListItem(currentItem, index, targetUL, curViewDS);
    var curItemDS = curViewDS[index - 1];

    if (curItemDS && curItemDS.isHeader && curItemDS.items.length === 1) {
      this.addListItem(curItemDS, index - 1, targetUL, curViewDS);
    }
  };

  ListView.prototype.addListItem = function (dataSource, index, ulElement, curViewDS) {
    var target = this.getLiFromObjOrElement(curViewDS[index + 1]) || this.getLiFromObjOrElement(curViewDS[index + 2]) || null;
    var li = _common_list_base__WEBPACK_IMPORTED_MODULE_3__["ListBase"].createListItemFromJson(this.createElement, [dataSource], this.listBaseOption, null, null, this);
    this.setAttributes(li); // eslint-disable-next-line

    if (this.template && this.isReact) {
      this.renderReactTemplates();
    }

    if (this.fields.groupBy && curViewDS[index + 1] && curViewDS[index + 1].isHeader) {
      var targetEle = this.getLiFromObjOrElement(curViewDS[index - 1]);

      if (targetEle) {
        target = targetEle.nextElementSibling;
      }
    }

    ulElement.insertBefore(li[0], target);
  };
  /**
   * Removes the list item from the data source based on a passed
   *  element like fields: { text: 'Name', tooltip: 'Name', id:'id'}
   *
   * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.
   */


  ListView.prototype.removeItem = function (item) {
    var listDataSource = this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] ? this.localData : this.dataSource;

    if (this.enableVirtualization) {
      this.virtualizationModule.removeItem(item);
    } else {
      this.removeItemFromList(item, listDataSource);
    }
  };

  ListView.prototype.removeItemFromList = function (obj, listDataSource) {
    var _this = this;

    var curViewDS = this.curViewDS;
    var fields = obj instanceof Element ? this.getElementUID(obj) : obj;
    var dataSource; // eslint-disable-next-line prefer-const

    dataSource = this.findItemFromDS(listDataSource, fields, true);

    if (dataSource) {
      var data_1; // eslint-disable-next-line prefer-const

      data_1 = this.findItemFromDS(dataSource, fields);
      var index = curViewDS.indexOf(data_1);
      var li = this.getLiFromObjOrElement(obj);
      var groupLi = void 0;
      this.validateNestedView(li);

      if (this.fields.groupBy && this.curViewDS[index - 1] && curViewDS[index - 1].isHeader && curViewDS[index - 1].items.length === 1) {
        if (li && li.previousElementSibling.classList.contains(classNames.groupListItem) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li.nextElementSibling) || li.nextElementSibling && li.nextElementSibling.classList.contains(classNames.groupListItem))) {
          groupLi = li.previousElementSibling;
        }
      }

      if (li) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(li);
      }

      if (groupLi) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(groupLi);
      } // eslint-disable-next-line


      var foundData = dataSource.length - 1 <= 0 ? this.findParent(this.localData, this.fields.id, // eslint-disable-next-line
      function (value) {
        return value === data_1[_this.fields.id];
      }, null) : null;
      var dsIndex = dataSource.indexOf(data_1);
      dataSource.splice(dsIndex, 1);
      this.setViewDataSource(listDataSource);

      if (foundData && foundData.parent && Array.isArray(foundData.parent[this.fields.child]) && foundData.parent[this.fields.child].length <= 0) {
        var parentLi = this.getLiFromObjOrElement(foundData.parent);

        if (parentLi) {
          var li_1 = _common_list_base__WEBPACK_IMPORTED_MODULE_3__["ListBase"].createListItemFromJson(this.createElement, [foundData.parent], this.listBaseOption, null, null, this);
          this.setAttributes(li_1);
          parentLi.parentElement.insertBefore(li_1[0], parentLi);
          parentLi.parentElement.removeChild(parentLi);
        }
      }

      if (dataSource.length <= 0) {
        this.back();
      }

      this.liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.listItem));
    }
  }; // validate before removing an element whether the current view is inside target element's child view


  ListView.prototype.validateNestedView = function (li) {
    var liID = li ? li.getAttribute('data-uid').toString().toLowerCase() : null;

    if (liID && this.curDSLevel && this.curDSLevel.length > 0) {
      while (this.curDSLevel.some(function (id) {
        return id.toString().toLowerCase() === liID;
      })) {
        this.back();
      }
    }
  };
  /**
   * Removes multiple items from the ListView by passing the array of elements or array of field objects.
   *
   * @param  {Fields[] | HTMLElement[] | Element[]} item - We can pass array of elements or array of field Object with ID and Text fields.
   */


  ListView.prototype.removeMultipleItems = function (item) {
    if (item.length) {
      for (var i = 0; i < item.length; i++) {
        this.removeItem(item[i]);
      }
    }
  }; // eslint-disable-next-line


  ListView.prototype.findParent = function (dataSource, id, callback, parent) {
    // eslint-disable-next-line no-prototype-builtins
    if (dataSource.hasOwnProperty(id) && callback(dataSource[id]) === true) {
      return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, dataSource);
    }

    for (var i = 0; i < Object.keys(dataSource).length; i++) {
      if (dataSource[Object.keys(dataSource)[i]] && typeof dataSource[Object.keys(dataSource)[i]] === 'object') {
        // eslint-disable-next-line
        var result = this.findParent(dataSource[Object.keys(dataSource)[i]], id, callback, dataSource);

        if (result != null) {
          if (!result.parent) {
            result.parent = parent;
          }

          return result;
        }
      }
    }

    return null;
  }; // Module Required function


  ListView.prototype.getModuleName = function () {
    return 'listview';
  };

  ListView.prototype.requiredModules = function () {
    var modules = [];

    if (this.enableVirtualization) {
      modules.push({
        args: [this],
        member: 'virtualization'
      });
    }

    return modules;
  };
  /**
   * Get the properties to be maintained in the persisted state.
   */


  ListView.prototype.getPersistData = function () {
    return this.addOnPersist(['cssClass', 'enableRtl', 'htmlAttributes', 'enable', 'fields', 'animation', 'headerTitle', 'sortOrder', 'showIcon', 'height', 'width', 'showCheckBox', 'checkBoxPosition', 'selectedId']);
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ListView.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ListView.prototype, "enableVirtualization", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({})], ListView.prototype, "htmlAttributes", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], ListView.prototype, "enable", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])([])], ListView.prototype, "dataSource", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], ListView.prototype, "query", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])(_common_list_base__WEBPACK_IMPORTED_MODULE_3__["ListBase"].defaultMappedFields, FieldSettings)], ListView.prototype, "fields", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({
    effect: 'SlideLeft',
    duration: 400,
    easing: 'ease'
  })], ListView.prototype, "animation", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('None')], ListView.prototype, "sortOrder", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ListView.prototype, "showIcon", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ListView.prototype, "showCheckBox", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Left')], ListView.prototype, "checkBoxPosition", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ListView.prototype, "headerTitle", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ListView.prototype, "showHeader", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ListView.prototype, "enableHtmlSanitizer", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ListView.prototype, "height", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ListView.prototype, "width", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ListView.prototype, "template", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ListView.prototype, "headerTemplate", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ListView.prototype, "groupTemplate", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ListView.prototype, "select", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ListView.prototype, "actionBegin", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ListView.prototype, "actionComplete", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ListView.prototype, "actionFailure", void 0);

  ListView = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], ListView);
  return ListView;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-lists/src/list-view/virtualization.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-lists/src/list-view/virtualization.js ***!
  \****************************************************************************/
/*! exports provided: Virtualization */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Virtualization", function() { return Virtualization; });
/* harmony import */ var _list_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./list-view */ "./node_modules/@syncfusion/ej2-lists/src/list-view/list-view.js");
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _common_list_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/list-base */ "./node_modules/@syncfusion/ej2-lists/src/common/list-base.js");
/* harmony import */ var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-data */ "./node_modules/@syncfusion/ej2-data/index.js");




var listElementCount = 1.5;
var windowElementCount = 3;

var Virtualization =
/** @class */
function () {
  function Virtualization(instance) {
    this.elementDifference = 0;
    this.listViewInstance = instance;
  }
  /**
   * For internal use only.
   *
   * @private
   */


  Virtualization.prototype.isNgTemplate = function () {
    return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["isNullOrUndefined"])(this.listViewInstance.templateRef) && typeof this.listViewInstance.templateRef !== 'string';
  };
  /**
   * Checks if the platform is a Vue and its template property is a function type.
   *
   * @returns {boolean} indicating the result of the check
   */


  Virtualization.prototype.isVueFunctionTemplate = function () {
    return this.listViewInstance.isVue && typeof this.listViewInstance.template === 'function';
  };
  /**
   * For internal use only.
   *
   * @private
   */


  Virtualization.prototype.uiVirtualization = function () {
    this.commonTemplate = '<div class="e-text-content" role="presentation"> ' + '<span class="e-list-text"> ${' + this.listViewInstance.fields.text + '} </span></div>';
    this.templateFunction = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["compile"])(this.listViewInstance.template || this.commonTemplate, this.listViewInstance);
    this.groupTemplateFunction = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["compile"])(this.listViewInstance.groupTemplate || this.commonTemplate, this.listViewInstance);
    this.wireScrollEvent(false);
    var curViewDS = this.listViewInstance.curViewDS;
    var firstDs = curViewDS.slice(0, 1);
    this.listViewInstance.ulElement = this.listViewInstance.curUL = _common_list_base__WEBPACK_IMPORTED_MODULE_2__["ListBase"].createList( // eslint-disable-next-line
    this.listViewInstance.createElement, firstDs, this.listViewInstance.listBaseOption, null, this.listViewInstance);
    this.listViewInstance.contentContainer = this.listViewInstance.createElement('div', {
      className: _list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].container
    });
    this.listViewInstance.element.appendChild(this.listViewInstance.contentContainer);
    this.listViewInstance.contentContainer.appendChild(this.listViewInstance.ulElement);
    this.listItemHeight = this.listViewInstance.ulElement.firstElementChild.getBoundingClientRect().height;
    this.expectedDomItemCount = this.ValidateItemCount(10000);
    this.domItemCount = this.ValidateItemCount(Object.keys(this.listViewInstance.curViewDS).length);
    this.uiFirstIndex = 0;
    this.uiLastIndex = this.domItemCount - 1;
    var otherDs = curViewDS.slice(1, this.domItemCount);
    var listItems = _common_list_base__WEBPACK_IMPORTED_MODULE_2__["ListBase"].createListItemFromJson( // eslint-disable-next-line
    this.listViewInstance.createElement, otherDs, this.listViewInstance.listBaseOption, null, null, this.listViewInstance);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["append"])(listItems, this.listViewInstance.ulElement);
    this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');
    this.topElement = this.listViewInstance.createElement('div');
    this.listViewInstance.ulElement.insertBefore(this.topElement, this.listViewInstance.ulElement.firstElementChild);
    this.bottomElement = this.listViewInstance.createElement('div');
    this.listViewInstance.ulElement.insertBefore(this.bottomElement, null);
    this.totalHeight = Object.keys(curViewDS).length * this.listItemHeight - this.domItemCount * this.listItemHeight;
    this.topElement.style.height = 0 + 'px';
    this.bottomElement.style.height = this.totalHeight + 'px';
    this.topElementHeight = 0;
    this.bottomElementHeight = this.totalHeight;
    this.listDiff = 0;
    this.uiIndicesInitialization();
  };

  Virtualization.prototype.wireScrollEvent = function (destroy) {
    if (!destroy) {
      if (this.listViewInstance.isWindow) {
        this.onVirtualScroll = this.onVirtualUiScroll.bind(this);
        window.addEventListener('scroll', this.onVirtualScroll);
      } else {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["EventHandler"].add(this.listViewInstance.element, 'scroll', this.onVirtualUiScroll, this);
      }
    } else {
      if (this.listViewInstance.isWindow === true) {
        window.removeEventListener('scroll', this.onVirtualScroll);
        window.removeEventListener('scroll', this.updateUl);
      } else {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["EventHandler"].remove(this.listViewInstance.element, 'scroll', this.onVirtualUiScroll);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["EventHandler"].remove(this.listViewInstance.element, 'scroll', this.updateUlContainer);
      }
    }
  };

  Virtualization.prototype.updateUlContainer = function (e) {
    var listDiff;
    var virtualElementContainer = this.listViewInstance.ulElement.querySelector('.' + _list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].virtualElementContainer);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["isNullOrUndefined"])(this.listViewInstance.liElementHeight)) {
      this.listViewInstance.updateLiElementHeight();
    }

    if (this.listViewInstance.isWindow) {
      // eslint-disable-next-line
      listDiff = Math.round(e.target.documentElement.scrollTop / this.listViewInstance.liElementHeight) - 2;
    } else {
      // eslint-disable-next-line
      listDiff = Math.round(e.target.scrollTop / this.listViewInstance.liElementHeight) - 2;
    }

    if ((listDiff - 1) * this.listViewInstance.liElementHeight < 0) {
      virtualElementContainer.style.top = '0px';
    } else {
      virtualElementContainer.style.top = listDiff * this.listViewInstance.liElementHeight + 'px';
    }
  };

  Virtualization.prototype.ValidateItemCount = function (dataSourceLength) {
    var height = parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["formatUnit"])(this.listViewInstance.height));
    var itemCount;

    if (this.listViewInstance.isWindow) {
      itemCount = Math.round(window.innerHeight / this.listItemHeight * windowElementCount);
    } else {
      if (typeof this.listViewInstance.height === 'string' && this.listViewInstance.height.indexOf('%') !== -1) {
        // eslint-disable-next-line max-len
        itemCount = Math.round(this.listViewInstance.element.getBoundingClientRect().height / this.listItemHeight * listElementCount);
      } else {
        itemCount = Math.round(height / this.listItemHeight * listElementCount);
      }
    }

    if (itemCount > dataSourceLength) {
      itemCount = dataSourceLength;
    }

    return itemCount;
  };

  Virtualization.prototype.uiIndicesInitialization = function () {
    this.uiIndices = {
      'activeIndices': [],
      'disabledItemIndices': [],
      'hiddenItemIndices': []
    };
    var data = this.listViewInstance.curViewDS;

    for (var i = 0; i < data.length; i++) {
      if (this.listViewInstance.showCheckBox && data[i][this.listViewInstance.fields.isChecked]) {
        this.uiIndices.activeIndices.push(i);
      } // eslint-disable-next-line


      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["isNullOrUndefined"])(data[i][this.listViewInstance.fields.enabled]) && !data[i][this.listViewInstance.fields.enabled]) {
        // eslint-disable-next-line
        this.uiIndices.disabledItemIndices.push(i);
      }
    }

    if (this.isNgTemplate()) {
      var items = this.listViewInstance.element.querySelectorAll('.' + _list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].listItem);

      for (var index = 0; index < items.length; index++) {
        items[index].context = this.listViewInstance.viewContainerRef.get(index).context;
      }
    }
  };

  Virtualization.prototype.refreshItemHeight = function () {
    if (this.listViewInstance.curViewDS.length) {
      var curViewDS = this.listViewInstance.curViewDS;
      this.listItemHeight = this.topElement.nextSibling.getBoundingClientRect().height;
      this.totalHeight = Object.keys(curViewDS).length * this.listItemHeight - this.domItemCount * this.listItemHeight;
      this.bottomElementHeight = this.totalHeight;
      this.bottomElement.style.height = this.totalHeight + 'px';
    }
  };

  Virtualization.prototype.getscrollerHeight = function (startingHeight) {
    return this.listViewInstance.isWindow ? pageYOffset - startingHeight <= 0 ? 0 : pageYOffset - startingHeight : this.listViewInstance.element.scrollTop - startingHeight <= 0 ? 0 : this.listViewInstance.element.scrollTop - startingHeight;
  };

  Virtualization.prototype.onVirtualUiScroll = function (e) {
    var _a;

    var startingHeight;

    if (this.listViewInstance.isWindow) {
      startingHeight = this.listViewInstance.ulElement.getBoundingClientRect().top - document.documentElement.getBoundingClientRect().top;
    } else {
      startingHeight = this.listViewInstance.headerEle ? this.listViewInstance.headerEle.getBoundingClientRect().height : 0;
    }

    this.scrollPosition = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["isNullOrUndefined"])(this.scrollPosition) ? 0 : this.scrollPosition;
    var scroll = this.getscrollerHeight(startingHeight);
    this.topElementHeight = this.listItemHeight * Math.floor(scroll / this.listItemHeight);
    this.bottomElementHeight = this.totalHeight - this.topElementHeight;
    _a = scroll <= this.totalHeight ? [this.topElementHeight, this.bottomElementHeight] : [this.totalHeight, 0], this.topElementHeight = _a[0], this.bottomElementHeight = _a[1];

    if (this.topElementHeight !== parseFloat(this.topElement.style.height)) {
      this.topElement.style.height = this.topElementHeight + 'px';
      this.bottomElement.style.height = this.bottomElementHeight + 'px';

      if (scroll > this.scrollPosition) {
        var listDiff = Math.round(this.topElementHeight / this.listItemHeight - this.listDiff);

        if (listDiff > this.expectedDomItemCount + 5) {
          this.onLongScroll(listDiff, true);
        } else {
          this.onNormalScroll(listDiff, true);
        }
      } else {
        var listDiff = Math.round(this.listDiff - this.topElementHeight / this.listItemHeight);

        if (listDiff > this.expectedDomItemCount + 5) {
          this.onLongScroll(listDiff, false);
        } else {
          this.onNormalScroll(listDiff, false);
        }
      }
    }

    this.listDiff = Math.round(this.topElementHeight / this.listItemHeight);

    if (typeof this.listViewInstance.onUIScrolled === 'function') {
      this.listViewInstance.onUIScrolled();
    }

    this.scrollPosition = scroll;
  };

  Virtualization.prototype.onLongScroll = function (listDiff, isScrollingDown) {
    var index = isScrollingDown ? this.uiFirstIndex + listDiff : this.uiFirstIndex - listDiff;
    var elements = this.listViewInstance.ulElement.querySelectorAll('li');

    for (var i = 0; i < elements.length; i++) {
      this.updateUI(elements[i], index);
      index++;
    }

    this.uiLastIndex = isScrollingDown ? this.uiLastIndex + listDiff : this.uiLastIndex - listDiff;
    this.uiFirstIndex = isScrollingDown ? this.uiFirstIndex + listDiff : this.uiFirstIndex - listDiff;
  };

  Virtualization.prototype.onNormalScroll = function (listDiff, isScrollingDown) {
    if (isScrollingDown) {
      for (var i = 0; i < listDiff; i++) {
        var index = ++this.uiLastIndex;
        this.updateUI(this.topElement.nextElementSibling, index, this.bottomElement);
        this.uiFirstIndex++;
      }
    } else {
      for (var i = 0; i < listDiff; i++) {
        var index = --this.uiFirstIndex;
        var target = this.topElement.nextSibling;
        this.updateUI(this.bottomElement.previousElementSibling, index, target);
        this.uiLastIndex--;
      }
    }
  };

  Virtualization.prototype.updateUiContent = function (element, index) {
    // eslint-disable-next-line
    var curViewDs = this.listViewInstance.curViewDS;

    if (typeof this.listViewInstance.dataSource[0] === 'string' || typeof this.listViewInstance.dataSource[0] === 'number') {
      element.dataset.uid = _common_list_base__WEBPACK_IMPORTED_MODULE_2__["ListBase"].generateId();
      element.getElementsByClassName(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].listItemText)[0].innerHTML = this.listViewInstance.curViewDS[index].toString();
    } else {
      // eslint-disable-next-line
      element.dataset.uid = curViewDs[index][this.listViewInstance.fields.id] ? // eslint-disable-next-line
      curViewDs[index][this.listViewInstance.fields.id] : _common_list_base__WEBPACK_IMPORTED_MODULE_2__["ListBase"].generateId();
      element.getElementsByClassName(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].listItemText)[0].innerHTML = // eslint-disable-next-line
      curViewDs[index][this.listViewInstance.fields.text];
    }

    if (this.listViewInstance.showIcon) {
      if (element.querySelector('.' + _list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].listIcon)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["detach"])(element.querySelector('.' + _list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].listIcon));
      }

      if (this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]) {
        var textContent = element.querySelector('.' + _list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].textContent);
        var target = this.listViewInstance.createElement('div', {
          className: _list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].listIcon + ' ' + this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]
        });
        textContent.insertBefore(target, element.querySelector('.' + _list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].listItemText));
      }
    }

    if (this.listViewInstance.showCheckBox && this.listViewInstance.fields.groupBy) {
      if (!this.checkListWrapper) {
        this.checkListWrapper = this.listViewInstance.curUL.querySelector('.' + _list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].checkboxWrapper).cloneNode(true);
      }

      var textContent = element.querySelector('.' + _list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].textContent);

      if (this.listViewInstance.curViewDS[index].isHeader) {
        if (element.querySelector('.' + _list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].checkboxWrapper)) {
          element.classList.remove(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].checklist);
          textContent.classList.remove(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].checkbox);
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["detach"])(element.querySelector('.' + _list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].checkboxWrapper));
        }
      } else {
        if (!element.querySelector('.' + _list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].checkboxWrapper)) {
          element.classList.add(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].checklist);
          textContent.classList.add(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].checkbox);
          textContent.insertBefore(this.checkListWrapper.cloneNode(true), element.querySelector('.' + _list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].listItemText));
        }
      }
    }
  };

  Virtualization.prototype.changeElementAttributes = function (element, index) {
    element.classList.remove(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].disable);

    if (this.uiIndices.disabledItemIndices.length && this.uiIndices.disabledItemIndices.indexOf(index) !== -1) {
      element.classList.add(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].disable);
    }

    element.style.display = '';

    if (this.uiIndices.hiddenItemIndices.length && this.uiIndices.hiddenItemIndices.indexOf(index) !== -1) {
      element.style.display = 'none';
    }

    if (this.listViewInstance.showCheckBox) {
      var checklistElement = element.querySelector('.' + _list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].checkboxWrapper);
      element.classList.remove(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].selected);
      element.classList.remove(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].focused);

      if (checklistElement) {
        checklistElement.removeAttribute('aria-checked');
        checklistElement.firstElementChild.classList.remove(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].checked);
      }

      if (this.uiIndices.activeIndices.length && this.uiIndices.activeIndices.indexOf(index) !== -1 && !this.listViewInstance.curUL.querySelector(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].selected)) {
        element.classList.add(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].selected);
        checklistElement.firstElementChild.classList.add(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].checked);
        checklistElement.setAttribute('aria-checked', 'true');

        if (this.activeIndex === index) {
          element.classList.add(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].focused);
        }
      }
    } else {
      element.classList.remove(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].selected);
      element.removeAttribute('aria-selected');

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["isNullOrUndefined"])(this.activeIndex) && this.activeIndex === index && !this.listViewInstance.curUL.querySelector(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].selected)) {
        element.classList.add(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].selected);
        element.setAttribute('aria-selected', 'true');
      }
    }

    if (this.listViewInstance.fields.groupBy) {
      if (this.listViewInstance.curViewDS[index].isHeader) {
        if (element.classList.contains(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].listItem)) {
          element.classList.remove(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].listItem);
          element.setAttribute('role', 'group');
          element.classList.add(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].groupListItem);
        }
      } else {
        if (element.classList.contains(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].groupListItem)) {
          element.classList.remove(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].groupListItem);
          element.setAttribute('role', 'listitem');
          element.classList.add(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].listItem);
        }
      }
    }
  };

  Virtualization.prototype.findDSAndIndexFromId = function (ds, fields) {
    var _this = this;

    var resultJSON = {};
    fields = this.listViewInstance.getElementUID(fields);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["isNullOrUndefined"])(fields)) {
      ds.some(function (data, index) {
        if (fields[_this.listViewInstance.fields.id] && // eslint-disable-next-line
        fields[_this.listViewInstance.fields.id] // eslint-disable-next-line
        === (data[_this.listViewInstance.fields.id] && data[_this.listViewInstance.fields.id]) || fields === data) {
          resultJSON.index = index;
          resultJSON.data = data;
          return true;
        } else {
          return false;
        }
      });
    }

    return resultJSON;
  };

  Virtualization.prototype.getSelectedItems = function () {
    var _this = this;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["isNullOrUndefined"])(this.activeIndex) || this.listViewInstance.showCheckBox && this.uiIndices.activeIndices.length) {
      var dataCollection = [];
      var textCollection = [];

      if (typeof this.listViewInstance.dataSource[0] === 'string' || typeof this.listViewInstance.dataSource[0] === 'number') {
        var curViewDS_1 = this.listViewInstance.curViewDS;

        if (this.listViewInstance.showCheckBox) {
          var indices = this.uiIndices.activeIndices;

          for (var i = 0; i < indices.length; i++) {
            dataCollection.push(curViewDS_1[indices[i]]);
          }

          return {
            text: dataCollection,
            // eslint-disable-next-line
            data: dataCollection,
            index: this.uiIndices.activeIndices.map(function (index) {
              return _this.listViewInstance.dataSource.indexOf(curViewDS_1[index]);
            })
          };
        } else {
          return {
            text: curViewDS_1[this.activeIndex],
            data: curViewDS_1[this.activeIndex],
            index: this.listViewInstance.dataSource.indexOf(curViewDS_1[this.activeIndex])
          };
        }
      } else {
        var curViewDS_2 = this.listViewInstance.curViewDS;
        var text = this.listViewInstance.fields.text;

        if (this.listViewInstance.showCheckBox) {
          var indexArray = this.uiIndices.activeIndices;

          for (var i = 0; i < indexArray.length; i++) {
            textCollection.push(curViewDS_2[indexArray[i]]["" + text]); // eslint-disable-next-line

            dataCollection.push(curViewDS_2[indexArray[i]]);
          } // eslint-disable-next-line


          var dataSource_1 = this.listViewInstance.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_3__["DataManager"] ? curViewDS_2 : this.listViewInstance.dataSource;
          return {
            text: textCollection,
            // eslint-disable-next-line
            data: dataCollection,
            index: this.uiIndices.activeIndices.map(function (index) {
              return dataSource_1.indexOf(curViewDS_2[index]);
            })
          };
        } else {
          // eslint-disable-next-line
          var dataSource = this.listViewInstance.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_3__["DataManager"] ? curViewDS_2 : this.listViewInstance.dataSource;
          return {
            text: curViewDS_2[this.activeIndex][this.listViewInstance.fields.text],
            // eslint-disable-next-line
            data: curViewDS_2[this.activeIndex],
            index: dataSource.indexOf(curViewDS_2[this.activeIndex])
          };
        }
      }
    } else {
      return undefined;
    }
  };

  Virtualization.prototype.selectItem = function (obj) {
    // eslint-disable-next-line
    var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);

    if (Object.keys(resutJSON).length) {
      var isSelected = this.activeIndex === resutJSON.index;
      var isChecked = void 0;
      this.activeIndex = resutJSON.index;

      if (this.listViewInstance.showCheckBox) {
        if (this.uiIndices.activeIndices.indexOf(resutJSON.index) === -1) {
          isChecked = true;
          this.uiIndices.activeIndices.push(resutJSON.index);
        } else {
          isChecked = false;
          this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(resutJSON.index), 1);
        }

        if (this.listViewInstance.curUL.querySelector('.' + _list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].focused)) {
          this.listViewInstance.curUL.querySelector('.' + _list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].focused).classList.remove(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].focused);
        }
      }

      if (this.listViewInstance.getLiFromObjOrElement(obj)) {
        if (this.listViewInstance.showCheckBox) {
          this.listViewInstance.setCheckboxLI(this.listViewInstance.getLiFromObjOrElement(obj));
        } else {
          this.listViewInstance.setSelectLI(this.listViewInstance.getLiFromObjOrElement(obj));
        }
      } else {
        // eslint-disable-next-line
        var eventArgs = void 0;

        if (typeof this.listViewInstance.dataSource[0] === 'string' || typeof this.listViewInstance.dataSource[0] === 'number') {
          eventArgs = {
            text: this.listViewInstance.curViewDS[this.activeIndex],
            data: this.listViewInstance.curViewDS[this.activeIndex],
            index: this.activeIndex
          };
        } else {
          var curViewDS = this.listViewInstance.curViewDS;
          eventArgs = {
            text: curViewDS[this.activeIndex][this.listViewInstance.fields.text],
            data: curViewDS[this.activeIndex],
            index: this.activeIndex
          };
        }

        if (this.listViewInstance.showCheckBox) {
          eventArgs.isChecked = isChecked;
          this.listViewInstance.trigger('select', eventArgs);
        } else if (!isSelected) {
          this.listViewInstance.removeSelect();
          this.listViewInstance.trigger('select', eventArgs);
        }
      }
    } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["isNullOrUndefined"])(obj) && !this.listViewInstance.showCheckBox) {
      this.listViewInstance.removeSelect();
      this.activeIndex = undefined;
    }
  };

  Virtualization.prototype.enableItem = function (obj) {
    // eslint-disable-next-line
    var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);

    if (Object.keys(resutJSON).length) {
      this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(resutJSON.index), 1);
    }
  };

  Virtualization.prototype.disableItem = function (obj) {
    // eslint-disable-next-line
    var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);

    if (Object.keys(resutJSON).length && this.uiIndices.disabledItemIndices.indexOf(resutJSON.index) === -1) {
      this.uiIndices.disabledItemIndices.push(resutJSON.index);
    }
  };

  Virtualization.prototype.showItem = function (obj) {
    // eslint-disable-next-line
    var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);

    if (Object.keys(resutJSON).length) {
      this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index), 1);
    }
  };

  Virtualization.prototype.hideItem = function (obj) {
    // eslint-disable-next-line
    var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);

    if (Object.keys(resutJSON).length && this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index) === -1) {
      this.uiIndices.hiddenItemIndices.push(resutJSON.index);
    }
  };

  Virtualization.prototype.removeItem = function (obj) {
    var dataSource;
    var curViewDS = this.listViewInstance.curViewDS; // eslint-disable-next-line

    var resutJSON = this.findDSAndIndexFromId(curViewDS, obj); // eslint-disable-next-line

    if (Object.keys(resutJSON).length) {
      dataSource = resutJSON.data;

      if (curViewDS[resutJSON.index - 1] && curViewDS[resutJSON.index - 1].isHeader && curViewDS[resutJSON.index - 1].items.length === 1) {
        this.removeUiItem(resutJSON.index - 1);
        this.removeUiItem(resutJSON.index - 1);
      } else {
        this.removeUiItem(resutJSON.index);
      }
    }

    var listDataSource = this.listViewInstance.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_3__["DataManager"] ? this.listViewInstance.localData : this.listViewInstance.dataSource;
    var index = listDataSource.indexOf(dataSource);

    if (index !== -1) {
      listDataSource.splice(index, 1);
      this.listViewInstance.setViewDataSource(listDataSource);
    } // recollect all the list item into collection


    this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');
  }; // eslint-disable-next-line


  Virtualization.prototype.setCheckboxLI = function (li, e) {
    var index = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;
    this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;

    if (li.classList.contains(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].selected)) {
      if (this.uiIndices.activeIndices.indexOf(index) === -1) {
        this.uiIndices.activeIndices.push(index);
      }
    } else {
      this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);
    }
  }; // eslint-disable-next-line


  Virtualization.prototype.setSelectLI = function (li, e) {
    this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;
  };

  Virtualization.prototype.checkedItem = function (checked) {
    if (checked) {
      this.uiIndices.activeIndices = [];
      this.activeIndex = undefined;
      var data = this.listViewInstance.curViewDS;

      for (var index = 0; index < data.length; index++) {
        if (!data[index].isHeader) {
          this.uiIndices.activeIndices.push(index);
        }
      }
    } else {
      this.activeIndex = undefined;
      this.uiIndices.activeIndices = [];
    }
  };

  Virtualization.prototype.addUiItem = function (index) {
    // virtually new add list item based on the scollbar position
    // if the scroll bar is at the top, just pretend the new item has been added since no UI
    // change is required for the item that has been added at last but when scroll bar is at the bottom
    // just detach top and inject into bottom to mimic new item is added
    var curViewDs = this.listViewInstance.curViewDS;
    this.changeUiIndices(index, true);

    if (this.activeIndex && this.activeIndex >= index) {
      this.activeIndex++;
    }

    if (this.listViewInstance.showCheckBox && curViewDs[index][this.listViewInstance.fields.isChecked]) {
      this.uiIndices.activeIndices.push(index);
    }

    if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {
      this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + 'px';
    }

    if (parseFloat(this.bottomElement.style.height)) {
      var liItem = this.listViewInstance.curUL.lastElementChild.previousSibling;
      var target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) || this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);

      if (target) {
        this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + 'px';
        this.updateUI(liItem, index, target);
      }
    } else {
      var liItem = this.listViewInstance.curUL.firstElementChild.nextSibling;
      var target = void 0;

      if (Object.keys(this.listViewInstance.curViewDS).length - 1 === index) {
        target = this.listViewInstance.curUL.lastElementChild;
      } else {
        target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) || this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);
      }

      this.topElement.style.height = parseFloat(this.topElement.style.height) + this.listItemHeight + 'px';
      this.uiFirstIndex++;
      this.uiLastIndex++;

      if (target) {
        this.updateUI(liItem, index, target);

        if (this.listViewInstance.isWindow === true) {
          window.scrollTo(0, pageYOffset + this.listItemHeight);
        } else {
          this.listViewInstance.element.scrollTop += this.listItemHeight;
        }
      }
    }

    this.totalHeight += this.listItemHeight;
    this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);
  };

  Virtualization.prototype.removeUiItem = function (index) {
    this.totalHeight -= this.listItemHeight;
    var curViewDS = this.listViewInstance.curViewDS[index];
    var liItem = this.listViewInstance.getLiFromObjOrElement(curViewDS);
    this.listViewInstance.curViewDS.splice(index, 1);

    if (this.activeIndex && this.activeIndex >= index) {
      this.activeIndex--;
    }

    if (liItem) {
      if (this.domItemCount > Object.keys(this.listViewInstance.curViewDS).length) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["detach"])(liItem);
        this.domItemCount--;
        this.uiLastIndex--;
        this.totalHeight = 0;
      } else {
        if (liItem.classList.contains(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].disable)) {
          liItem.classList.remove(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].disable);
          this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(index), 1);
        }

        if (liItem.style.display === 'none') {
          liItem.style.display = '';
          this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(index), 1);
        }

        if (this.listViewInstance.showCheckBox && liItem.classList.contains(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].selected)) {
          this.listViewInstance.removeSelect();
          this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);
          var checklistElement = liItem.querySelector('.' + _list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].checkboxWrapper);
          checklistElement.removeAttribute('aria-checked');
          checklistElement.firstElementChild.classList.remove(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].checked);

          if (liItem.classList.contains(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].focused)) {
            liItem.classList.remove(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].focused);
            this.activeIndex = undefined;
          }
        } else if (liItem.classList.contains(_list_view__WEBPACK_IMPORTED_MODULE_0__["classNames"].selected)) {
          this.listViewInstance.removeSelect();
          this.activeIndex = undefined;
        }

        if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {
          this.updateUI(liItem, this.uiLastIndex, this.bottomElement);
        } else if (parseFloat(this.bottomElement.style.height)) {
          this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) - this.listItemHeight + 'px';
          this.updateUI(liItem, this.uiLastIndex, this.bottomElement);
        } else {
          this.topElement.style.height = parseFloat(this.topElement.style.height) - this.listItemHeight + 'px';
          this.updateUI(liItem, this.uiFirstIndex - 1, this.topElement.nextSibling);
          this.uiLastIndex--;
          this.uiFirstIndex--;
        }
      }
    }

    this.changeUiIndices(index, false);
    this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);
  };

  Virtualization.prototype.changeUiIndices = function (index, increment) {
    var keys = Object.keys(this.uiIndices);

    for (var ind = 0; ind < keys.length; ind++) {
      this.uiIndices[keys[ind]] = this.uiIndices[keys[ind]].map(function (i) {
        if (i >= index) {
          return increment ? ++i : --i;
        } else {
          return i;
        }
      });
    }
  };

  Virtualization.prototype.addItem = function (data, fields, dataSource) {
    for (var i = 0; i < data.length; i++) {
      var currentItem = data[i]; // push the given data to main data array

      dataSource.push(currentItem); // recalculate all the group data or other datasource related things

      this.listViewInstance.setViewDataSource(dataSource); // render list items for first time due to no datasource present earlier

      if (!this.domItemCount) {
        // fresh rendering for first time
        if ((this.listViewInstance.template || this.listViewInstance.groupTemplate) && !this.isNgTemplate()) {
          this.listViewInstance.listBaseOption.template = null;
          this.listViewInstance.listBaseOption.groupTemplate = null;
          this.listViewInstance.listBaseOption.itemCreated = this.createUIItem.bind(this);
        }

        this.uiVirtualization(); // when expected expected DOM count doesn't meet the condition we need to create and inject new item into DOM
      } else if (this.domItemCount < this.expectedDomItemCount) {
        var ds = this.listViewInstance.findItemFromDS(dataSource, fields);

        if (ds instanceof Array) {
          if (this.listViewInstance.ulElement) {
            var index = this.listViewInstance.curViewDS.indexOf(currentItem); // inject new list item into DOM

            this.createAndInjectNewItem(currentItem, index); // check for group header item

            var curViewDS = this.listViewInstance.curViewDS[index - 1];

            if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {
              // target group item index in datasource
              --index; // inject new group header into DOM for previously created list item

              this.createAndInjectNewItem(curViewDS, index);
            }
          } // recollect all the list item into collection


          this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');
        }
      } else {
        // eslint-disable-next-line
        var index = this.listViewInstance.curViewDS.indexOf(currentItem); // virtually new add list item based on the scollbar position

        this.addUiItem(index); // check for group header item needs to be added

        var curViewDS = this.listViewInstance.curViewDS[index - 1];

        if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {
          this.addUiItem(index - 1);
        }
      }
    }
  };

  Virtualization.prototype.createAndInjectNewItem = function (itemData, index) {
    // generate li item for given datasource
    var target;
    var li = _common_list_base__WEBPACK_IMPORTED_MODULE_2__["ListBase"].createListItemFromJson(this.listViewInstance.createElement, // eslint-disable-next-line
    [itemData], this.listViewInstance.listBaseOption, null, null, this.listViewInstance); // check for target element whether to insert before last item or group item

    if (Object.keys(this.listViewInstance.curViewDS).length - 1 === index) {
      target = this.listViewInstance.curUL.lastElementChild;
    } else {
      // target group header's first child item to append its header
      target = this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 1]) || this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 2]);
    }

    if (this.listViewInstance.fields.groupBy && this.listViewInstance.curViewDS[index + 1] && this.listViewInstance.curViewDS[index + 1].isHeader) {
      var targetEle = this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index - 1]);

      if (targetEle) {
        target = targetEle.nextElementSibling;
      }
    } // insert before the target element


    this.listViewInstance.ulElement.insertBefore(li[0], target); // increment internal DOM count, last index count for new element

    this.domItemCount++;

    if (this.bottomElementHeight <= 0) {
      this.uiLastIndex++;
    } // recalculate the current item height, to avoid jumpy scroller


    this.refreshItemHeight();
  };

  Virtualization.prototype.createUIItem = function (args) {
    var template = document.createElement('div');
    this.templateData = args.curData.isHeader ? args.curData.items[0] : args.curData;

    if (this.listViewInstance.isReact) {
      this.commonTemplate = null;
    }

    if (this.listViewInstance.showCheckBox) {
      // eslint-disable-next-line
      this.listViewInstance.renderCheckbox(args);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["isNullOrUndefined"])(this.listViewInstance.virtualCheckBox) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["isNullOrUndefined"])(this.listViewInstance.virtualCheckBox.outerHTML)) {
        var div_1 = document.createElement('div');
        var nodes = this.templateFunction(this.templateData, this.listViewInstance);

        if (this.listViewInstance.template && this.listViewInstance.isReact) {
          this.listViewInstance.renderReactTemplates();
        }

        [].slice.call(nodes).forEach(function (ele) {
          div_1.appendChild(ele);
        });

        if (div_1.children && div_1.children[0]) {
          div_1.children[0].classList.add('e-checkbox');

          if (this.listViewInstance.checkBoxPosition === 'Left') {
            div_1.children[0].classList.add('e-checkbox-left');
          } else {
            div_1.children[0].classList.add('e-checkbox-right');
          }

          if (this.listViewInstance.checkBoxPosition === 'Left') {
            div_1.children[0].insertBefore(this.listViewInstance.virtualCheckBox, div_1.childNodes[0].children[0]);
          } else {
            div_1.children[0].appendChild(this.listViewInstance.virtualCheckBox);
          }

          template.innerHTML = div_1.innerHTML;
        }
      } else {
        var div_2 = document.createElement('div');
        var nodes = this.templateFunction(this.templateData, this.listViewInstance);

        if (this.listViewInstance.template && this.listViewInstance.isReact) {
          this.listViewInstance.renderReactTemplates();
        }

        [].slice.call(nodes).forEach(function (ele) {
          div_2.appendChild(ele);
        });
        template.innerHTML = div_2.innerHTML;
      }
    } else {
      var nodes = this.templateFunction(this.templateData, this.listViewInstance);

      if (this.listViewInstance.template && this.listViewInstance.isReact) {
        this.listViewInstance.renderReactTemplates();
      }

      [].slice.call(nodes).forEach(function (ele) {
        template.appendChild(ele);
      });
    }

    if (args.curData.isHeader) {
      this.headerData = args.curData;
    }

    var groupTemplate = this.listViewInstance.createElement('div');

    if (this.listViewInstance.fields.groupBy) {
      var nodes = this.groupTemplateFunction(this.headerData, this.listViewInstance);

      if (this.listViewInstance.template && this.listViewInstance.isReact) {
        this.listViewInstance.renderReactTemplates();
      }

      [].slice.call(nodes).forEach(function (ele) {
        groupTemplate.appendChild(ele);
      });
    }

    if ((!this.listViewInstance.isReact || typeof this.listViewInstance.template == "string" && !args.item.classList.contains("e-list-group-item") || typeof this.listViewInstance.groupTemplate == "string" && args.item.classList.contains("e-list-group-item")) && !this.listViewInstance.isVue) {
      args.item.innerHTML = '';
    }

    args.item.context = {
      data: args.curData,
      nodes: {
        flatTemplateNodes: [],
        groupTemplateNodes: []
      }
    };

    for (var i = 0; i < template.children.length; i++) {
      this.compileTemplate(template.children[i], args.item, false);
    }

    for (var i = 0; i < groupTemplate.children.length; i++) {
      this.compileTemplate(groupTemplate.children[i], args.item, true);
    }

    args.item.context.template = args.curData.isHeader ? template.firstElementChild : groupTemplate.firstElementChild;
    args.item.context.type = args.curData.isHeader ? 'flatList' : 'groupList';
    var element = args.curData.isHeader ? groupTemplate : template;

    if (element.firstElementChild && !this.listViewInstance.isReact && !this.listViewInstance.isVue) {
      args.item.insertBefore(element.firstElementChild, null);
    }
  };

  Virtualization.prototype.compileTemplate = function (element, item, isHeader) {
    var _this = this;

    var subNode = {};

    subNode.onChange = function (value) {
      var groupTemplateElements;
      var templateElements;

      if (_this.listViewInstance.isVue) {
        groupTemplateElements = _this.groupTemplateFunction(value);
        templateElements = _this.templateFunction(value);
      } else {
        groupTemplateElements = _this.groupTemplateFunction(value, _this.listViewInstance);
        templateElements = _this.templateFunction(value, _this.listViewInstance);
      }

      if (_this.listViewInstance.template && _this.listViewInstance.isReact) {
        _this.listViewInstance.renderReactTemplates();
      }

      var currentTemplate = templateElements;

      if (value.isHeader) {
        currentTemplate = groupTemplateElements;
      }

      [].slice.call(currentTemplate).forEach(function (currentElement) {
        var RemovableClass = element.classList.value.replace('e-checkbox', '');
        RemovableClass = RemovableClass.replace('e-checkbox-left', '');
        RemovableClass = RemovableClass.replace('e-checkbox-right', '');
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["removeClass"])([element], RemovableClass.split(' ').filter(function (css) {
          return css;
        }));
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["addClass"])([element], Array.from(currentElement.classList));

        for (var i = 0; i < element.attributes.length; i++) {
          if (element.attributes[i].name != 'class') {
            var newData = currentElement.getAttribute(element.attributes[i].name);
            element.setAttribute(element.attributes[i].name, newData);
          }
        }

        [].slice.call(element.children).forEach(function (ele) {
          if (!ele.classList.contains('e-listview-checkbox') && !(ele.classList.contains('e-checkbox-left') || ele.classList.contains('e-checkbox-right'))) {
            ele.remove();
          }
        });
        [].slice.call(currentElement.children).forEach(function (ele) {
          element.appendChild(ele);
        });
      });
    };

    this.updateContextData(item, subNode, isHeader);
  };

  Virtualization.prototype.onChange = function (newData, listElement) {
    listElement.context.data = newData; // eslint-disable-next-line max-len

    var groupTemplateNodes = listElement.context.nodes.groupTemplateNodes; // eslint-disable-next-line max-len

    var flatTemplateNodes = listElement.context.nodes.flatTemplateNodes; // eslint-disable-next-line

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["isNullOrUndefined"])(newData.isHeader) && newData.isHeader && listElement.context.type === 'groupList') {
      // eslint-disable-next-line
      var element = listElement.firstElementChild;
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["detach"])(listElement.firstElementChild);
      listElement.insertBefore(listElement.context.template, null);
      listElement.context.template = element;
      listElement.context.type = 'flatList';

      for (var i = 0; i < groupTemplateNodes.length; i++) {
        // eslint-disable-next-line
        groupTemplateNodes[i].onChange(newData);
      }
    } else if (!newData.isHeader && listElement.context.type === 'flatList') {
      var element = listElement.firstElementChild;
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["detach"])(listElement.firstElementChild);
      listElement.insertBefore(listElement.context.template, null);
      listElement.context.template = element;
      listElement.context.type = 'groupList';

      for (var i = 0; i < flatTemplateNodes.length; i++) {
        // eslint-disable-next-line
        flatTemplateNodes[i].onChange(newData);
      }
    } else if (!newData.isHeader) {
      for (var i = 0; i < flatTemplateNodes.length; i++) {
        // eslint-disable-next-line
        flatTemplateNodes[i].onChange(newData);
      }
    } else {
      for (var i = 0; i < groupTemplateNodes.length; i++) {
        // eslint-disable-next-line
        groupTemplateNodes[i].onChange(newData);
      }
    }
  }; // eslint-disable-next-line


  Virtualization.prototype.updateContextData = function (listElement, node, isHeader) {
    if (isHeader) {
      listElement.context.nodes.groupTemplateNodes.push(node);
    } else {
      listElement.context.nodes.flatTemplateNodes.push(node);
    }
  };

  Virtualization.prototype.reRenderUiVirtualization = function () {
    this.wireScrollEvent(true);

    if (this.listViewInstance.contentContainer) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["detach"])(this.listViewInstance.contentContainer);
    }

    this.listViewInstance.preRender(); // resetting the dom count to 0, to avoid edge case of dataSource suddenly becoming zero
    // and then manually adding item using addItem API

    this.domItemCount = 0;
    this.listViewInstance.header();
    this.listViewInstance.setLocalData();
  };

  Virtualization.prototype.updateUI = function (element, index, targetElement) {
    // eslint-disable-next-line @typescript-eslint/ban-types
    var onChange = this.isNgTemplate() ? this.onNgChange : this.isVueFunctionTemplate() ? this.onVueChange : this.onChange;

    if (this.listViewInstance.template || this.listViewInstance.groupTemplate) {
      var curViewDS = this.listViewInstance.curViewDS[index]; // eslint-disable-next-line

      element.dataset.uid = curViewDS[this.listViewInstance.fields.id] ? // eslint-disable-next-line
      curViewDS[this.listViewInstance.fields.id] : _common_list_base__WEBPACK_IMPORTED_MODULE_2__["ListBase"].generateId();
      onChange(curViewDS, element, this);
    } else {
      this.updateUiContent(element, index);
    }

    this.changeElementAttributes(element, index);

    if (targetElement) {
      this.listViewInstance.ulElement.insertBefore(element, targetElement);
    }
  };
  /**
   * Handles the UI change in vue for the list view.
   *
   * @param {DataSource} newData - The new data source for the list view.
   * @param {ElementContext} listElement - The HTML element context for the list view.
   * @param {Virtualization} virtualThis - The virtualization context for the list view.
   */


  Virtualization.prototype.onVueChange = function (newData, listElement, virtualThis) {
    var liItem = _common_list_base__WEBPACK_IMPORTED_MODULE_2__["ListBase"].createListItemFromJson(virtualThis.listViewInstance.createElement, // eslint-disable-next-line
    [newData], virtualThis.listViewInstance.listBaseOption, null, null, virtualThis.listViewInstance);

    while (listElement.lastChild) {
      listElement.removeChild(listElement.lastChild);
    }

    listElement.appendChild(liItem[0].firstChild);
  };

  Virtualization.prototype.onNgChange = function (newData, listElement, virtualThis) {
    // compile given target element with template for new data
    // eslint-disable-next-line
    var templateCompiler = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["compile"])(virtualThis.listViewInstance.template);
    var resultElement = templateCompiler(newData);

    while (listElement.lastChild) {
      listElement.removeChild(listElement.lastChild);
    }

    listElement.appendChild(resultElement[0]);
  };

  Virtualization.prototype.getModuleName = function () {
    return 'virtualization';
  };

  Virtualization.prototype.destroy = function () {
    this.wireScrollEvent(true);
    this.topElement = null;
    this.bottomElement = null;
  };

  return Virtualization;
}();



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-lists/src/sortable/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-lists/src/sortable/index.js ***!
  \******************************************************************/
/*! exports provided: Sortable, moveTo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _sortable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sortable */ "./node_modules/@syncfusion/ej2-lists/src/sortable/sortable.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sortable", function() { return _sortable__WEBPACK_IMPORTED_MODULE_0__["Sortable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "moveTo", function() { return _sortable__WEBPACK_IMPORTED_MODULE_0__["moveTo"]; });

/**
 * Sortable Module
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-lists/src/sortable/sortable.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-lists/src/sortable/sortable.js ***!
  \*********************************************************************/
/*! exports provided: Sortable, moveTo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sortable", function() { return Sortable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moveTo", function() { return moveTo; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};




/**
 * Sortable Module provides support to enable sortable functionality in Dom Elements.
 * ```html
 * <div id="sortable">
 *   <div>Item 1</div>
 *   <div>Item 2</div>
 *   <div>Item 3</div>
 *   <div>Item 4</div>
 *   <div>Item 5</div>
 * </div>
 * ```
 * ```typescript
 *   let ele: HTMLElement = document.getElementById('sortable');
 *   let sortObj: Sortable = new Sortable(ele, {});
 * ```
 */

var Sortable =
/** @class */
function (_super) {
  __extends(Sortable, _super);

  function Sortable(element, options) {
    var _this = _super.call(this, options, element) || this;

    _this.getHelper = function (e) {
      // eslint-disable-next-line prefer-const
      var target = _this.getSortableElement(e.sender.target);

      if (!_this.isValidTarget(target, _this)) {
        return false;
      }

      var element;

      if (_this.helper) {
        element = _this.helper({
          sender: target,
          element: e.element
        });
      } else {
        element = target.cloneNode(true);
        element.style.width = target.offsetWidth + "px";
        element.style.height = target.offsetHeight + "px";
      }

      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([element], ['e-sortableclone']);
      document.body.appendChild(element);
      return element;
    }; // eslint-disable-next-line


    _this.onDrag = function (e) {
      if (!e.target) {
        return;
      }

      _this.trigger('drag', {
        event: e.event,
        element: _this.element,
        target: e.target
      });

      var newInst = _this.getSortableInstance(e.target);

      var target = _this.getSortableElement(e.target, newInst);

      if ((_this.isValidTarget(target, newInst) || e.target.className.indexOf('e-list-group-item') > -1) && (_this.curTarget !== target || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newInst.placeHolder)) && (newInst.placeHolderElement ? newInst.placeHolderElement !== e.target : true)) {
        if (e.target.className.indexOf('e-list-group-item') > -1) {
          target = e.target;
        }

        _this.curTarget = target;

        if (_this.target === target) {
          return;
        }

        var oldIdx = _this.getIndex(newInst.placeHolderElement, newInst);

        var placeHolder = _this.getPlaceHolder(target, newInst);

        var newIdx = void 0;

        if (placeHolder) {
          oldIdx = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldIdx) ? _this.getIndex(_this.target) : oldIdx;
          newIdx = _this.getIndex(target, newInst, e.event);

          var isPlaceHolderPresent = _this.isPlaceHolderPresent(newInst);

          if (isPlaceHolderPresent && oldIdx === newIdx) {
            return;
          }

          if (isPlaceHolderPresent) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(newInst.placeHolderElement);
          }

          newInst.placeHolderElement = placeHolder;

          if (e.target.className.indexOf('e-list-group-item') > -1) {
            newInst.element.insertBefore(newInst.placeHolderElement, newInst.element.children[newIdx]);
          } else if (newInst.element !== _this.element && newIdx === newInst.element.childElementCount) {
            newInst.element.appendChild(newInst.placeHolderElement);
          } else {
            newInst.element.insertBefore(newInst.placeHolderElement, newInst.element.children[newIdx]);
          }

          _this.refreshDisabled(oldIdx, newIdx, newInst);
        } else {
          oldIdx = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldIdx) ? _this.getIndex(_this.target) : _this.getIndex(target, newInst) < oldIdx || !oldIdx ? oldIdx : oldIdx - 1;
          newIdx = _this.getIndex(target, newInst);
          var idx = newInst.element !== _this.element ? newIdx : oldIdx < newIdx ? newIdx + 1 : newIdx;

          _this.updateItemClass(newInst);

          newInst.element.insertBefore(_this.target, newInst.element.children[idx]);

          _this.refreshDisabled(oldIdx, newIdx, newInst);

          _this.curTarget = _this.target;

          _this.trigger('drop', {
            droppedElement: _this.target,
            element: newInst.element,
            previousIndex: oldIdx,
            currentIndex: newIdx,
            target: e.target,
            helper: document.getElementsByClassName('e-sortableclone')[0],
            event: e.event,
            scope: _this.scope
          });
        }
      } else if (_this.curTarget !== _this.target && _this.scope && _this.curTarget !== target && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newInst.placeHolder)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(_this.getSortableInstance(_this.curTarget).placeHolderElement);
        _this.curTarget = _this.target;
      }

      newInst = _this.getSortableInstance(_this.curTarget);

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target) && e.target !== newInst.placeHolderElement) {
        if (_this.isPlaceHolderPresent(newInst)) {
          _this.removePlaceHolder(newInst);
        }
      } else {
        var placeHolders = [].slice.call(document.getElementsByClassName('e-sortable-placeholder'));
        var inst_1;
        placeHolders.forEach(function (placeHolder) {
          inst_1 = _this.getSortableInstance(placeHolder);

          if (inst_1.element && inst_1 !== newInst) {
            _this.removePlaceHolder(inst_1);
          }
        });
      }
    }; // eslint-disable-next-line


    _this.onDragStart = function (e) {
      _this.target = _this.getSortableElement(e.target);
      var cancelDrag = false;

      _this.target.classList.add('e-grabbed');

      _this.curTarget = _this.target;
      e.helper = document.getElementsByClassName('e-sortableclone')[0];
      var args = {
        cancel: false,
        element: _this.element,
        target: _this.target
      };

      _this.trigger('beforeDragStart', args, function (observedArgs) {
        if (observedArgs.cancel) {
          cancelDrag = observedArgs.cancel;

          _this.onDragStop(e);
        }
      });

      if (cancelDrag) {
        return;
      }

      if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"]) {
        _this.trigger('dragStart', {
          event: e.event,
          element: _this.element,
          target: _this.target,
          bindEvents: e.bindEvents,
          dragElement: e.dragElement
        });
      } else {
        _this.trigger('dragStart', {
          event: e.event,
          element: _this.element,
          target: _this.target
        });
      }
    }; // eslint-disable-next-line


    _this.onDragStop = function (e) {
      var dropInst = _this.getSortableInstance(_this.curTarget);

      var prevIdx;
      var curIdx;
      var handled;
      prevIdx = _this.getIndex(_this.target);

      var isPlaceHolderPresent = _this.isPlaceHolderPresent(dropInst);

      if (isPlaceHolderPresent) {
        var curIdx_1 = _this.getIndex(dropInst.placeHolderElement, dropInst);

        var args = {
          previousIndex: prevIdx,
          currentIndex: curIdx_1,
          target: e.target,
          droppedElement: _this.target,
          helper: e.helper,
          cancel: false,
          handled: false
        };

        _this.trigger('beforeDrop', args, function (observedArgs) {
          if (!observedArgs.cancel) {
            handled = observedArgs.handled;

            _this.updateItemClass(dropInst);

            if (observedArgs.handled) {
              var ele = _this.target.cloneNode(true);

              _this.target.classList.remove('e-grabbed');

              _this.target = ele;
            }

            dropInst.element.insertBefore(_this.target, dropInst.placeHolderElement);

            var curIdx_2 = _this.getIndex(_this.target, dropInst);

            prevIdx = _this === dropInst && prevIdx - curIdx_2 > 1 ? prevIdx - 1 : prevIdx;

            _this.trigger('drop', {
              event: e.event,
              element: dropInst.element,
              previousIndex: prevIdx,
              currentIndex: curIdx_2,
              target: e.target,
              helper: e.helper,
              droppedElement: _this.target,
              scopeName: _this.scope,
              handled: handled
            });
          }

          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(dropInst.placeHolderElement);
        });
      }

      dropInst = _this.getSortableInstance(e.target); // eslint-disable-next-line prefer-const

      curIdx = dropInst.element.childElementCount;
      prevIdx = _this.getIndex(_this.target);

      if (dropInst.element === e.target || !isPlaceHolderPresent && _this.curTarget === _this.target) {
        var beforeDropArgs = {
          previousIndex: prevIdx,
          currentIndex: _this.curTarget === _this.target ? prevIdx : curIdx,
          target: e.target,
          droppedElement: _this.target,
          helper: e.helper,
          cancel: false
        };

        _this.trigger('beforeDrop', beforeDropArgs, function (observedArgs) {
          if ((dropInst.element === e.target || e.target.className.indexOf('e-list-nrt') > -1 || e.target.className.indexOf('e-list-nr-template') > -1 || e.target.closest('.e-list-nr-template')) && !observedArgs.cancel) {
            _this.updateItemClass(dropInst);

            dropInst.element.appendChild(_this.target);

            _this.trigger('drop', {
              event: e.event,
              element: dropInst.element,
              previousIndex: prevIdx,
              currentIndex: curIdx,
              target: e.target,
              helper: e.helper,
              droppedElement: _this.target,
              scopeName: _this.scope
            });
          }
        });
      }

      _this.target.classList.remove('e-grabbed');

      _this.target = null;
      _this.curTarget = null;
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(e.helper);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getComponent"])(_this.element, 'draggable').intDestroy(e.event);
    };

    _this.bind();

    return _this;
  }

  Sortable_1 = Sortable;

  Sortable.prototype.bind = function () {
    if (!this.element.id) {
      this.element.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('sortable');
    }

    if (!this.itemClass) {
      this.itemClass = 'e-sort-item';
      this.dataBind();
    }

    this.initializeDraggable();
  };

  Sortable.prototype.initializeDraggable = function () {
    new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Draggable"](this.element, {
      helper: this.getHelper,
      dragStart: this.onDragStart,
      drag: this.onDrag,
      dragStop: this.onDragStop,
      dragTarget: "." + this.itemClass,
      enableTapHold: true,
      tapHoldThreshold: 200,
      queryPositionInfo: this.queryPositionInfo,
      distance: 1
    });
    this.wireEvents();
  };

  Sortable.prototype.wireEvents = function () {
    var wrapper = this.element;
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(wrapper, 'keydown', this.keyDownHandler, this);
  };

  Sortable.prototype.unwireEvents = function () {
    var wrapper = this.element;
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(wrapper, 'keydown', this.keyDownHandler);
  };

  Sortable.prototype.keyDownHandler = function (e) {
    if (e.keyCode === 27) {
      var dragStop = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getComponent"])(this.element, 'draggable');

      if (dragStop) {
        dragStop.intDestroy(null);
      }

      var dragWrapper = document.getElementsByClassName('e-sortableclone')[0];

      if (dragWrapper) {
        dragWrapper.remove();
      }

      var dragPlaceholder = document.getElementsByClassName('e-sortable-placeholder')[0];

      if (dragPlaceholder) {
        dragPlaceholder.remove();
      }
    }
  };

  Sortable.prototype.getPlaceHolder = function (target, instance) {
    if (instance.placeHolder) {
      var placeHolderElement = instance.placeHolder({
        element: instance.element,
        grabbedElement: this.target,
        target: target
      });
      placeHolderElement.classList.add('e-sortable-placeholder');
      return placeHolderElement;
    }

    return null;
  };

  Sortable.prototype.isValidTarget = function (target, instance) {
    return target && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compareElementParent"])(target, instance.element) && target.classList.contains(instance.itemClass) && !target.classList.contains('e-disabled');
  };

  Sortable.prototype.removePlaceHolder = function (instance) {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(instance.placeHolderElement);
    instance.placeHolderElement = null;
  };

  Sortable.prototype.updateItemClass = function (instance) {
    if (this !== instance) {
      this.target.classList.remove(this.itemClass);
      this.target.classList.add(instance.itemClass);
    }
  };

  Sortable.prototype.getSortableInstance = function (element) {
    element = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(element, ".e-" + this.getModuleName());

    if (element) {
      var inst = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getComponent"])(element, Sortable_1);
      return inst.scope && this.scope && inst.scope === this.scope ? inst : this;
    } else {
      return this;
    }
  };

  Sortable.prototype.refreshDisabled = function (oldIdx, newIdx, instance) {
    if (instance === this) {
      var element = void 0;
      var increased = oldIdx < newIdx;
      var disabledIdx = void 0;
      var start = increased ? oldIdx : newIdx;
      var end = increased ? newIdx : oldIdx;

      while (start <= end) {
        element = this.element.children[start];

        if (element.classList.contains('e-disabled')) {
          disabledIdx = this.getIndex(element);
          this.element.insertBefore(element, this.element.children[increased ? disabledIdx + 2 : disabledIdx - 1]);
          start = increased ? disabledIdx + 2 : disabledIdx + 1;
        } else {
          start++;
        }
      }
    }
  };

  Sortable.prototype.getIndex = function (target, instance, e) {
    if (instance === void 0) {
      instance = this;
    }

    var idx;
    var placeHolderPresent;
    [].slice.call(instance.element.children).forEach(function (element, index) {
      if (element.classList.contains('e-sortable-placeholder')) {
        placeHolderPresent = true;
      }

      if (element === target) {
        idx = index;

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e)) {
          if (placeHolderPresent) {
            idx -= 1;
          }

          var offset = target.getBoundingClientRect();
          var clientY = offset.bottom - (offset.bottom - offset.top) / 2;
          var cltY = e.changedTouches ? e.changedTouches[0].clientY : e.clientY;
          idx = cltY <= clientY ? idx : idx + 1;
        }

        return;
      }
    });
    return idx;
  };

  Sortable.prototype.getSortableElement = function (element, instance) {
    if (instance === void 0) {
      instance = this;
    }

    return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(element, "." + instance.itemClass);
  };

  Sortable.prototype.queryPositionInfo = function (value) {
    value.left = pageXOffset ? parseFloat(value.left) - pageXOffset + "px" : value.left;
    value.top = pageYOffset ? parseFloat(value.top) - pageYOffset + "px" : value.top;
    return value;
  };

  Sortable.prototype.isPlaceHolderPresent = function (instance) {
    return instance.placeHolderElement && !!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(instance.placeHolderElement, "#" + instance.element.id);
  };
  /**
   * It is used to sort array of elements from source element to destination element.
   *
   * @param destination - Defines the destination element to which the sortable elements needs to be appended.
   *
   * If it is null, then the Sortable library element will be considered as destination.
   * @param targetIndexes - Specifies the sortable elements indexes which needs to be sorted.
   * @param insertBefore - Specifies the index before which the sortable elements needs to be appended.
   * If it is null, elements will be appended as last child.
   * @function moveTo
   * @returns {void}
   */


  Sortable.prototype.moveTo = function (destination, targetIndexes, insertBefore) {
    moveTo(this.element, destination, targetIndexes, insertBefore);
  };
  /**
   * It is used to destroy the Sortable library.
   */


  Sortable.prototype.destroy = function () {
    this.unwireEvents();

    if (this.itemClass === 'e-sort-item') {
      this.itemClass = null;
      this.dataBind();
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getComponent"])(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Draggable"]).destroy();

    _super.prototype.destroy.call(this);
  };

  Sortable.prototype.getModuleName = function () {
    return 'sortable';
  };

  Sortable.prototype.onPropertyChanged = function (newProp, oldProp) {
    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'itemClass':
          [].slice.call(this.element.children).forEach(function (element) {
            if (element.classList.contains(oldProp.itemClass)) {
              element.classList.remove(oldProp.itemClass);
            }

            if (newProp.itemClass) {
              element.classList.add(newProp.itemClass);
            }
          });
          break;
      }
    }
  };

  var Sortable_1;

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Sortable.prototype, "enableAnimation", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Sortable.prototype, "itemClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Sortable.prototype, "scope", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Sortable.prototype, "helper", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Sortable.prototype, "placeHolder", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Sortable.prototype, "drag", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Sortable.prototype, "beforeDragStart", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Sortable.prototype, "dragStart", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Sortable.prototype, "beforeDrop", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Sortable.prototype, "drop", void 0);

  Sortable = Sortable_1 = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Sortable);
  return Sortable;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Base"]);


/**
 * It is used to sort array of elements from source element to destination element.
 *
 * @private
 */

function moveTo(from, to, targetIndexes, insertBefore) {
  var targetElements = [];

  if (!to) {
    to = from;
  }

  if (targetIndexes && targetIndexes.length) {
    targetIndexes.forEach(function (index) {
      targetElements.push(from.children[index]);
    });
  } else {
    targetElements = [].slice.call(from.children);
  }

  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(insertBefore)) {
    targetElements.forEach(function (target) {
      to.appendChild(target);
    });
  } else {
    var insertElement_1 = to.children[insertBefore];
    targetElements.forEach(function (target) {
      to.insertBefore(target, insertElement_1);
    });
  }
}

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/index.js ***!
  \***********************************************************/
/*! exports provided: HScroll, VScroll, addScrolling, destroyScroll, MenuAnimationSettings, MenuItem, FieldSettings, Item, Toolbar, AccordionActionSettings, AccordionAnimationSettings, AccordionItem, Accordion, ContextMenu, Menu, TabActionSettings, TabAnimationSettings, Header, TabItem, Tab, FieldsSettings, ActionSettings, NodeAnimationSettings, TreeView, Sidebar, BreadcrumbOverflowMode, BreadcrumbItem, Breadcrumb, CarouselSwipeMode, CarouselItem, Carousel, AppBar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/index */ "./node_modules/@syncfusion/ej2-navigations/src/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HScroll", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["HScroll"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VScroll", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["VScroll"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addScrolling", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["addScrolling"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "destroyScroll", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["destroyScroll"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MenuAnimationSettings", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["MenuAnimationSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MenuItem", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["MenuItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FieldSettings", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["FieldSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Item", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Item"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Toolbar", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Toolbar"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AccordionActionSettings", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["AccordionActionSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AccordionAnimationSettings", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["AccordionAnimationSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AccordionItem", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["AccordionItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Accordion", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Accordion"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContextMenu", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["ContextMenu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Menu", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Menu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TabActionSettings", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["TabActionSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TabAnimationSettings", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["TabAnimationSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Header", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Header"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TabItem", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["TabItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Tab", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Tab"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FieldsSettings", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["FieldsSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ActionSettings", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["ActionSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NodeAnimationSettings", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["NodeAnimationSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TreeView", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["TreeView"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sidebar", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Sidebar"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BreadcrumbOverflowMode", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["BreadcrumbOverflowMode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BreadcrumbItem", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["BreadcrumbItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Breadcrumb", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Breadcrumb"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CarouselSwipeMode", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["CarouselSwipeMode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CarouselItem", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["CarouselItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Carousel", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Carousel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AppBar", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["AppBar"]; });

/**
 * index
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/accordion/accordion.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/accordion/accordion.js ***!
  \*****************************************************************************/
/*! exports provided: AccordionActionSettings, AccordionAnimationSettings, AccordionItem, Accordion */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccordionActionSettings", function() { return AccordionActionSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccordionAnimationSettings", function() { return AccordionAnimationSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccordionItem", function() { return AccordionItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Accordion", function() { return Accordion; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/* eslint-disable @typescript-eslint/no-explicit-any */








var CLS_ACRDN_ROOT = 'e-acrdn-root';
var CLS_ROOT = 'e-accordion';
var CLS_ITEM = 'e-acrdn-item';
var CLS_ITEMFOCUS = 'e-item-focus';
var CLS_ITEMHIDE = 'e-hide';
var CLS_HEADER = 'e-acrdn-header';
var CLS_HEADERICN = 'e-acrdn-header-icon';
var CLS_HEADERCTN = 'e-acrdn-header-content';
var CLS_CONTENT = 'e-acrdn-panel';
var CLS_CTENT = 'e-acrdn-content';
var CLS_TOOGLEICN = 'e-toggle-icon';
var CLS_COLLAPSEICN = 'e-tgl-collapse-icon e-icons';
var CLS_EXPANDICN = 'e-expand-icon';
var CLS_RTL = 'e-rtl';
var CLS_CTNHIDE = 'e-content-hide';
var CLS_SLCT = 'e-select';
var CLS_SLCTED = 'e-selected';
var CLS_ACTIVE = 'e-active';
var CLS_ANIMATE = 'e-animate';
var CLS_DISABLE = 'e-overlay';
var CLS_TOGANIMATE = 'e-toggle-animation';
var CLS_NEST = 'e-nested';
var CLS_EXPANDSTATE = 'e-expand-state';
var CLS_CONTAINER = 'e-accordion-container';
/**
 * Objects used for configuring the Accordion expanding item action properties.
 */

var AccordionActionSettings =
/** @class */
function (_super) {
  __extends(AccordionActionSettings, _super);

  function AccordionActionSettings() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('SlideDown')], AccordionActionSettings.prototype, "effect", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(400)], AccordionActionSettings.prototype, "duration", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('linear')], AccordionActionSettings.prototype, "easing", void 0);

  return AccordionActionSettings;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * Objects used for configuring the Accordion animation properties.
 */

var AccordionAnimationSettings =
/** @class */
function (_super) {
  __extends(AccordionAnimationSettings, _super);

  function AccordionAnimationSettings() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
    effect: 'SlideUp',
    duration: 400,
    easing: 'linear'
  }, AccordionActionSettings)], AccordionAnimationSettings.prototype, "collapse", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
    effect: 'SlideDown',
    duration: 400,
    easing: 'linear'
  }, AccordionActionSettings)], AccordionAnimationSettings.prototype, "expand", void 0);

  return AccordionAnimationSettings;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * An item object that is used to configure Accordion items.
 */

var AccordionItem =
/** @class */
function (_super) {
  __extends(AccordionItem, _super);

  function AccordionItem() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], AccordionItem.prototype, "content", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], AccordionItem.prototype, "header", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], AccordionItem.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], AccordionItem.prototype, "iconCss", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], AccordionItem.prototype, "expanded", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], AccordionItem.prototype, "visible", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], AccordionItem.prototype, "disabled", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], AccordionItem.prototype, "id", void 0);

  return AccordionItem;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * The Accordion is a vertically collapsible content panel that displays one or more panels at a time within the available space.
 * ```html
 * <div id='accordion'/>
 * <script>
 *   var accordionObj = new Accordion();
 *   accordionObj.appendTo('#accordion');
 * </script>
 * ```
 */

var Accordion =
/** @class */
function (_super) {
  __extends(Accordion, _super);
  /**
   * Initializes a new instance of the Accordion class.
   *
   * @param {AccordionModel} options  - Specifies Accordion model properties as options.
   * @param {string | HTMLElement} element  - Specifies the element that is rendered as an Accordion.
   */


  function Accordion(options, element) {
    var _this = _super.call(this, options, element) || this;
    /**
     * Contains the keyboard configuration of the Accordion.
     */


    _this.keyConfigs = {
      moveUp: 'uparrow',
      moveDown: 'downarrow',
      enter: 'enter',
      space: 'space',
      home: 'home',
      end: 'end'
    };
    return _this;
  }
  /**
   * Removes the control from the DOM and also removes all its related events.
   *
   * @returns {void}
   */


  Accordion.prototype.destroy = function () {
    if (this.isReact || this.isAngular || this.isVue) {
      this.clearTemplate();
    }

    var ele = this.element;

    _super.prototype.destroy.call(this);

    this.unWireEvents();
    this.isDestroy = true;
    this.restoreContent(null);
    [].slice.call(ele.children).forEach(function (el) {
      ele.removeChild(el);
    });

    if (this.trgtEle) {
      this.trgtEle = null;

      while (this.ctrlTem.firstElementChild) {
        ele.appendChild(this.ctrlTem.firstElementChild);
      }

      this.ctrlTem = null;
    }

    ele.classList.remove(CLS_ACRDN_ROOT);
    ele.removeAttribute('style');
    this.element.removeAttribute('data-ripple');

    if (!this.isNested && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isRippleEnabled"]) {
      this.removeRippleEffect();
    }
  };

  Accordion.prototype.preRender = function () {
    var nested = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, '.' + CLS_CONTENT);
    this.isNested = false;
    this.templateEle = [];

    if (!this.isDestroy) {
      this.isDestroy = false;
    }

    if (nested && nested.firstElementChild && nested.firstElementChild.firstElementChild) {
      if (nested.firstElementChild.firstElementChild.classList.contains(CLS_ROOT)) {
        nested.classList.add(CLS_NEST);
        this.isNested = true;
      }
    } else {
      this.element.classList.add(CLS_ACRDN_ROOT);
    }

    if (this.enableRtl) {
      this.add(this.element, CLS_RTL);
    }
  };

  Accordion.prototype.add = function (ele, val) {
    ele.classList.add(val);
  };

  Accordion.prototype.remove = function (ele, val) {
    ele.classList.remove(val);
  };
  /**
   * To initialize the control rendering
   *
   * @private
   * @returns {void}
   */


  Accordion.prototype.render = function () {
    this.initializeHeaderTemplate();
    this.initializeItemTemplate();
    this.initialize();
    this.renderControl();
    this.wireEvents();
    this.renderComplete();
  };

  Accordion.prototype.initialize = function () {
    var width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.width);
    var height = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.height);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
      'width': width,
      'height': height
    });

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.initExpand)) {
      this.initExpand = [];
    }

    if (this.expandedIndices.length > 0) {
      this.initExpand = this.expandedIndices;
    }
  };

  Accordion.prototype.renderControl = function () {
    this.trgtEle = this.element.children.length > 0 ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div', this.element) : null;
    this.renderItems();
    this.initItemExpand();
  };

  Accordion.prototype.wireFocusEvents = function () {
    var acrdItem = [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM));

    for (var _i = 0, acrdItem_1 = acrdItem; _i < acrdItem_1.length; _i++) {
      var item = acrdItem_1[_i];
      var headerEle = item.querySelector('.' + CLS_HEADER);

      if (item.childElementCount > 0 && headerEle) {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].clearEvents(headerEle);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(headerEle, 'focus', this.focusIn, this);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(headerEle, 'blur', this.focusOut, this);
      }
    }
  };

  Accordion.prototype.unWireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'click', this.clickHandler);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.keyModule)) {
      this.keyModule.destroy();
    }
  };

  Accordion.prototype.wireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'click', this.clickHandler, this);

    if (!this.isNested && !this.isDestroy) {
      this.removeRippleEffect = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(this.element, {
        selector: '.' + CLS_HEADER
      });
    }

    if (!this.isNested) {
      this.keyModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: 'keydown'
      });
    }
  };

  Accordion.prototype.templateParser = function (template) {
    if (template) {
      try {
        if (typeof template !== 'function' && document.querySelectorAll(template).length) {
          return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(document.querySelector(template).innerHTML.trim());
        } else {
          return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(template);
        }
      } catch (error) {
        return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(template);
      }
    }

    return undefined;
  };

  Accordion.prototype.initializeHeaderTemplate = function () {
    if (this.headerTemplate) {
      this.headerTemplateFn = this.templateParser(this.headerTemplate);
    }
  };

  Accordion.prototype.initializeItemTemplate = function () {
    if (this.itemTemplate) {
      this.itemTemplateFn = this.templateParser(this.itemTemplate);
    }
  };

  Accordion.prototype.getHeaderTemplate = function () {
    return this.headerTemplateFn;
  };

  Accordion.prototype.getItemTemplate = function () {
    return this.itemTemplateFn;
  };

  Accordion.prototype.focusIn = function (e) {
    e.target.parentElement.classList.add(CLS_ITEMFOCUS);
  };

  Accordion.prototype.focusOut = function (e) {
    e.target.parentElement.classList.remove(CLS_ITEMFOCUS);
  };

  Accordion.prototype.ctrlTemplate = function () {
    this.ctrlTem = this.element.cloneNode(true);
    var innerEles;
    var rootEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTAINER, this.element);

    if (rootEle) {
      innerEles = rootEle.children;
    } else {
      innerEles = this.element.children;
    }

    var items = [];
    [].slice.call(innerEles).forEach(function (el) {
      items.push({
        header: el.childElementCount > 0 && el.children[0] ? el.children[0] : '',
        content: el.childElementCount > 1 && el.children[1] ? el.children[1] : ''
      });
      el.parentNode.removeChild(el);
    });

    if (rootEle) {
      this.element.removeChild(rootEle);
    }

    this.setProperties({
      items: items
    }, true);
  };

  Accordion.prototype.toggleIconGenerate = function () {
    var tglIcon = this.createElement('div', {
      className: CLS_TOOGLEICN
    });
    var hdrColIcon = this.createElement('span', {
      className: CLS_COLLAPSEICN
    });
    tglIcon.appendChild(hdrColIcon);
    return tglIcon;
  };

  Accordion.prototype.initItemExpand = function () {
    var len = this.initExpand.length;

    if (len === 0) {
      return;
    }

    if (this.expandMode === 'Single') {
      this.expandItem(true, this.initExpand[len - 1]);
    } else {
      for (var i = 0; i < len; i++) {
        this.expandItem(true, this.initExpand[parseInt(i.toString(), 10)]);
      }
    }

    if (this.isReact) {
      this.renderReactTemplates();
    }
  };

  Accordion.prototype.renderItems = function () {
    var _this = this;

    var ele = this.element;
    var innerItem;
    var innerDataSourceItem;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.trgtEle)) {
      this.ctrlTemplate();
    }

    if (this.dataSource.length > 0) {
      this.dataSource.forEach(function (item, index) {
        innerDataSourceItem = _this.renderInnerItem(item, index);
        ele.appendChild(innerDataSourceItem);

        if (innerDataSourceItem.childElementCount > 0) {
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(innerDataSourceItem.querySelector('.' + CLS_HEADER), 'focus', _this.focusIn, _this);
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(innerDataSourceItem.querySelector('.' + CLS_HEADER), 'blur', _this.focusOut, _this);
        }
      });
    } else {
      var items = this.items;

      if (ele && items.length > 0) {
        items.forEach(function (item, index) {
          innerItem = _this.renderInnerItem(item, index);
          ele.appendChild(innerItem);

          if (innerItem.childElementCount > 0) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(innerItem.querySelector('.' + CLS_HEADER), 'focus', _this.focusIn, _this);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(innerItem.querySelector('.' + CLS_HEADER), 'blur', _this.focusOut, _this);
          }
        });
      }
    }

    if (this.isReact) {
      this.renderReactTemplates();
    }
  };

  Accordion.prototype.clickHandler = function (e) {
    var trgt = e.target;
    var items = this.getItems();
    var eventArgs = {};
    var tglIcon;
    var acrdEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_ROOT);

    if (acrdEle !== this.element) {
      return;
    }

    trgt.classList.add('e-target');
    var acrdnItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_ITEM);
    var acrdnHdr = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_HEADER);
    var acrdnCtn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_CONTENT);

    if (acrdnItem && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(acrdnHdr) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(acrdnCtn))) {
      acrdnHdr = acrdnItem.children[0];
      acrdnCtn = acrdnItem.children[1];
    }

    if (acrdnHdr) {
      tglIcon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TOOGLEICN, acrdnHdr);
    }

    var acrdnCtnItem;

    if (acrdnHdr) {
      acrdnCtnItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(acrdnHdr, '.' + CLS_ITEM);
    } else if (acrdnCtn) {
      acrdnCtnItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(acrdnCtn, '.' + CLS_ITEM);
    }

    var index = this.getIndexByItem(acrdnItem);

    if (acrdnCtnItem) {
      eventArgs.item = items[this.getIndexByItem(acrdnCtnItem)];
    }

    eventArgs.originalEvent = e;
    var ctnCheck = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(tglIcon) && acrdnItem.childElementCount <= 1;

    if (ctnCheck && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(acrdnCtn) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER + ' .' + CLS_TOOGLEICN, acrdnCtnItem)))) {
      acrdnItem.appendChild(this.contentRendering(index));
      this.ariaAttrUpdate(acrdnItem);
      this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);
    } else {
      this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);
    }

    if (this.isReact) {
      this.renderReactTemplates();
    }
  };

  Accordion.prototype.afterContentRender = function (trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem) {
    var _this = this;

    var acrdActive = [];
    this.trigger('clicked', eventArgs);
    var cntclkCheck = acrdnCtn && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-target', acrdnCtn));
    var inlineAcrdnSel = '.' + CLS_CONTENT + ' .' + CLS_ROOT;
    var inlineEleAcrdn = acrdnCtn && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_ROOT, acrdnCtn)) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, inlineAcrdnSel));
    var nestContCheck = acrdnCtn && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_ROOT, acrdnCtn)) || !(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_ROOT) === this.element);
    cntclkCheck = cntclkCheck && (inlineEleAcrdn || nestContCheck);
    trgt.classList.remove('e-target');

    if (trgt.classList.contains(CLS_CONTENT) || trgt.classList.contains(CLS_CTENT) || cntclkCheck) {
      return;
    }

    var acrdcontainer = this.element.querySelector('.' + CLS_CONTAINER);
    var acrdnchild = acrdcontainer ? acrdcontainer.children : this.element.children;
    [].slice.call(acrdnchild).forEach(function (el) {
      if (el.classList.contains(CLS_ACTIVE)) {
        acrdActive.push(el);
      }
    });
    var acrdAniEle = [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM + ' [' + CLS_ANIMATE + ']'));

    if (acrdAniEle.length > 0) {
      for (var _i = 0, acrdAniEle_1 = acrdAniEle; _i < acrdAniEle_1.length; _i++) {
        var el = acrdAniEle_1[_i];
        acrdActive.push(el.parentElement);
      }
    }

    var sameContentCheck = acrdActive.indexOf(acrdnCtnItem) !== -1 && acrdnCtn.getAttribute('e-animate') === 'true';
    var sameHeader = false;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(acrdnItem) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(acrdnHdr)) {
      var acrdnCtn_1 = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT, acrdnItem);
      var acrdnRoot = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(acrdnItem, '.' + CLS_ACRDN_ROOT);
      var expandState = acrdnRoot.querySelector('.' + CLS_EXPANDSTATE);

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(acrdnCtn_1)) {
        return;
      }

      sameHeader = expandState === acrdnItem;

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(acrdnCtn_1) && (!sameContentCheck || acrdnCtnItem.classList.contains(CLS_SLCTED))) {
        this.collapse(acrdnCtn_1);
      } else {
        if (acrdActive.length > 0 && this.expandMode === 'Single' && !sameContentCheck) {
          acrdActive.forEach(function (el) {
            _this.collapse(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT, el));

            el.classList.remove(CLS_EXPANDSTATE);
          });
        }

        this.expand(acrdnCtn_1);
      }

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(expandState) && !sameHeader) {
        expandState.classList.remove(CLS_EXPANDSTATE);
      }
    }
  };

  Accordion.prototype.eleMoveFocus = function (action, root, trgt) {
    var clst;
    var clstItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_ITEM);

    if (trgt === root) {
      clst = (action === 'moveUp' ? trgt.lastElementChild : trgt).querySelector('.' + CLS_HEADER);
    } else if (trgt.classList.contains(CLS_HEADER)) {
      clstItem = action === 'moveUp' ? clstItem.previousElementSibling : clstItem.nextElementSibling;

      if (clstItem) {
        clst = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER, clstItem);
      }
    }

    if (clst) {
      clst.focus();
    }
  };

  Accordion.prototype.keyActionHandler = function (e) {
    var trgt = e.target;
    var header = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, CLS_HEADER);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(header) && !trgt.classList.contains(CLS_ROOT) && !trgt.classList.contains(CLS_HEADER)) {
      return;
    }

    var clst;
    var root = this.element;
    var content;

    switch (e.action) {
      case 'moveUp':
        this.eleMoveFocus(e.action, root, trgt);
        break;

      case 'moveDown':
        this.eleMoveFocus(e.action, root, trgt);
        break;

      case 'space':
      case 'enter':
        content = trgt.nextElementSibling;

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(content) && content.classList.contains(CLS_CONTENT)) {
          if (content.getAttribute('e-animate') !== 'true') {
            trgt.click();
          }
        } else {
          trgt.click();
        }

        e.preventDefault();
        break;

      case 'home':
      case 'end':
        clst = e.action === 'home' ? root.firstElementChild.children[0] : root.lastElementChild.children[0];
        clst.focus();
        e.preventDefault();
        break;
    }
  };

  Accordion.prototype.headerEleGenerate = function () {
    var header = this.createElement('div', {
      className: CLS_HEADER,
      id: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('acrdn_header')
    });
    var ariaAttr = {
      'tabindex': '0',
      'role': 'button',
      'aria-disabled': 'false',
      'aria-expanded': 'false'
    };
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(header, ariaAttr);
    return header;
  };

  Accordion.prototype.renderInnerItem = function (item, index) {
    var innerEle = this.createElement('div', {
      className: CLS_ITEM,
      id: item.id || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('acrdn_item')
    });

    if (this.headerTemplate) {
      var ctnEle = this.headerEleGenerate();
      var hdrEle = this.createElement('div', {
        className: CLS_HEADERCTN
      });
      ctnEle.appendChild(hdrEle);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(this.getHeaderTemplate()(item, this, 'headerTemplate', this.element.id + '_headerTemplate', false), hdrEle);
      innerEle.appendChild(ctnEle);
      ctnEle.appendChild(this.toggleIconGenerate());
      this.add(innerEle, CLS_SLCT);
      return innerEle;
    }

    if (item.header && this.angularnativeCondiCheck(item, 'header')) {
      if (this.enableHtmlSanitizer && typeof item.header === 'string') {
        item.header = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(item.header);
      }

      var ctnEle = this.headerEleGenerate();
      var hdrEle = this.createElement('div', {
        className: CLS_HEADERCTN
      });
      ctnEle.appendChild(hdrEle);
      ctnEle.appendChild(this.fetchElement(hdrEle, item.header, index));
      innerEle.appendChild(ctnEle);
    }

    var hdr = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER, innerEle);

    if (item.expanded && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index) && !this.enablePersistence) {
      if (this.initExpand.indexOf(index) === -1) {
        this.initExpand.push(index);
      }
    }

    if (item.cssClass) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([innerEle], item.cssClass.split(' '));
    }

    if (item.disabled) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([innerEle], CLS_DISABLE);
    }

    if (item.visible === false) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([innerEle], CLS_ITEMHIDE);
    }

    if (item.iconCss) {
      var hdrIcnEle = this.createElement('div', {
        className: CLS_HEADERICN
      });
      var icon = this.createElement('span', {
        className: item.iconCss + ' e-icons'
      });
      hdrIcnEle.appendChild(icon);

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(hdr)) {
        hdr = this.headerEleGenerate();
        hdr.appendChild(hdrIcnEle);
        innerEle.appendChild(hdr);
      } else {
        hdr.insertBefore(hdrIcnEle, hdr.childNodes[0]);
      }
    }

    if (item.content && this.angularnativeCondiCheck(item, 'content')) {
      var hdrIcon = this.toggleIconGenerate();

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(hdr)) {
        hdr = this.headerEleGenerate();
        innerEle.appendChild(hdr);
      }

      hdr.appendChild(hdrIcon);
      this.add(innerEle, CLS_SLCT);
    }

    return innerEle;
  };

  Accordion.prototype.angularnativeCondiCheck = function (item, prop) {
    var property = prop === 'content' ? item.content : item.header;
    var content = property;

    if (this.isAngular && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(content.elementRef)) {
      var data = content.elementRef.nativeElement.data;

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data) || data === '' || data.indexOf('bindings=') === -1) {
        return true;
      }

      var parseddata = JSON.parse(content.elementRef.nativeElement.data.replace('bindings=', ''));

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(parseddata) && parseddata['ng-reflect-ng-if'] === 'false') {
        return false;
      } else {
        return true;
      }
    } else {
      return true;
    }
  };

  Accordion.prototype.fetchElement = function (ele, value, index) {
    var templateFn;
    var temString;

    try {
      if (document.querySelectorAll(value).length && value !== 'Button') {
        var eleVal = document.querySelector(value);
        temString = eleVal.outerHTML.trim();
        ele.appendChild(eleVal);
        eleVal.style.display = '';
      } else {
        templateFn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(value);
      }
    } catch (e) {
      if (typeof value === 'string') {
        ele.innerHTML = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(value);
      } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.trgtEle) && value instanceof HTMLElement) {
        ele.appendChild(value);
        ele.firstElementChild.style.display = '';
      } else {
        templateFn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(value);
      }
    }

    var tempArray;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(templateFn)) {
      if (this.isReact) {
        this.renderReactTemplates();
      }

      var templateProps = void 0;
      var templateName = void 0;

      if (ele.classList.contains(CLS_HEADERCTN)) {
        templateProps = this.element.id + index + '_header';
        templateName = 'header';
      } else if (ele.classList.contains(CLS_CTENT)) {
        templateProps = this.element.id + index + '_content';
        templateName = 'content';
      }

      tempArray = templateFn({}, this, templateName, templateProps, this.isStringTemplate);
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(tempArray) && tempArray.length > 0 && !(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(tempArray[0].tagName) && tempArray.length === 1)) {
      [].slice.call(tempArray).forEach(function (el) {
        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(el.tagName)) {
          el.style.display = '';
        }

        ele.appendChild(el);
      });
    } else if (ele.childElementCount === 0) {
      ele.innerHTML = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(value);
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(temString)) {
      if (this.templateEle.indexOf(value) === -1) {
        this.templateEle.push(value);
      }
    }

    return ele;
  };

  Accordion.prototype.ariaAttrUpdate = function (itemEle) {
    var header = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER, itemEle);
    var content = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT, itemEle);
    header.setAttribute('aria-controls', content.id);
    content.setAttribute('aria-labelledby', header.id);
    content.setAttribute('role', 'region');
  };

  Accordion.prototype.contentRendering = function (index) {
    var itemcnt = this.createElement('div', {
      className: CLS_CONTENT + ' ' + CLS_CTNHIDE,
      id: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('acrdn_panel')
    });
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(itemcnt, {
      'aria-hidden': 'true'
    });
    var ctn = this.createElement('div', {
      className: CLS_CTENT
    });

    if (this.dataSource.length > 0) {
      if (this.isReact) {
        this.renderReactTemplates();
      }

      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(this.getItemTemplate()(this.dataSource[parseInt(index.toString(), 10)], this, 'itemTemplate', this.element.id + '_itemTemplate', false), ctn);
      itemcnt.appendChild(ctn);
    } else {
      if (this.enableHtmlSanitizer && typeof this.items[parseInt(index.toString(), 10)].content) {
        this.items[parseInt(index.toString(), 10)].content = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(this.items[parseInt(index.toString(), 10)].content);
      }

      itemcnt.appendChild(this.fetchElement(ctn, this.items[parseInt(index.toString(), 10)].content, index));
    }

    return itemcnt;
  };

  Accordion.prototype.expand = function (trgt) {
    var _this = this;

    var items = this.getItems();
    var trgtItemEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_ITEM);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(trgt) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(trgt) && trgt.getAttribute('e-animate') !== 'true' || trgtItemEle.classList.contains(CLS_DISABLE)) {
      return;
    }

    var acrdnRoot = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgtItemEle, '.' + CLS_ACRDN_ROOT);
    var expandState = acrdnRoot.querySelector('.' + CLS_EXPANDSTATE);
    var animation = {
      name: this.animation.expand.effect,
      duration: this.animation.expand.duration,
      timingFunction: this.animation.expand.easing
    };
    var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TOOGLEICN, trgtItemEle).firstElementChild;
    var eventArgs = {
      element: trgtItemEle,
      item: items[this.getIndexByItem(trgtItemEle)],
      index: this.getIndexByItem(trgtItemEle),
      content: trgtItemEle.querySelector('.' + CLS_CONTENT),
      isExpanded: true
    };
    this.trigger('expanding', eventArgs, function (expandArgs) {
      if (!expandArgs.cancel) {
        icon.classList.add(CLS_TOGANIMATE);

        _this.expandedItemsPush(trgtItemEle);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(expandState)) {
          expandState.classList.remove(CLS_EXPANDSTATE);
        }

        trgtItemEle.classList.add(CLS_EXPANDSTATE);

        if (animation.name === 'None' && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["animationMode"] !== 'Enable' || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["animationMode"] === 'Disable') {
          _this.expandProgress('begin', icon, trgt, trgtItemEle, expandArgs);

          _this.expandProgress('end', icon, trgt, trgtItemEle, expandArgs);
        } else {
          _this.expandAnimation(animation.name, icon, trgt, trgtItemEle, animation, expandArgs);
        }
      }
    });
  };

  Accordion.prototype.expandAnimation = function (ef, icn, trgt, trgtItemEle, animate, args) {
    var _this = this;

    if (ef === 'None' && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["animationMode"] === 'Enable') {
      ef = 'SlideDown';
      animate.name = 'SlideDown';
    }

    var height;
    this.lastActiveItemId = trgtItemEle.id;

    if (ef === 'SlideDown') {
      animate.begin = function () {
        _this.expandProgress('begin', icn, trgt, trgtItemEle, args);

        trgt.style.position = 'absolute';
        height = trgtItemEle.offsetHeight;
        trgt.style.maxHeight = trgt.offsetHeight + 'px';
        trgtItemEle.style.maxHeight = '';
      };

      animate.progress = function () {
        trgtItemEle.style.minHeight = height + trgt.offsetHeight + 'px';
      };

      animate.end = function () {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(trgt, {
          'position': '',
          'maxHeight': ''
        });
        trgtItemEle.style.minHeight = '';

        _this.expandProgress('end', icn, trgt, trgtItemEle, args);
      };
    } else {
      animate.begin = function () {
        _this.expandProgress('begin', icn, trgt, trgtItemEle, args);
      };

      animate.end = function () {
        _this.expandProgress('end', icn, trgt, trgtItemEle, args);
      };
    }

    new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"](animate).animate(trgt);
  };

  Accordion.prototype.expandProgress = function (progress, icon, trgt, trgtItemEle, eventArgs) {
    this.remove(trgt, CLS_CTNHIDE);
    this.add(trgtItemEle, CLS_SLCTED);
    this.add(icon, CLS_EXPANDICN);

    if (progress === 'end') {
      this.add(trgtItemEle, CLS_ACTIVE);
      trgt.setAttribute('aria-hidden', 'false');
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(trgt.previousElementSibling, {
        'aria-expanded': 'true'
      });
      icon.classList.remove(CLS_TOGANIMATE);
      this.trigger('expanded', eventArgs);
    }
  };

  Accordion.prototype.expandedItemsPush = function (item) {
    var index = this.getIndexByItem(item);

    if (this.expandedIndices.indexOf(index) === -1) {
      var temp = [].slice.call(this.expandedIndices);
      temp.push(index);
      this.setProperties({
        expandedIndices: temp
      }, true);
    }
  };

  Accordion.prototype.getIndexByItem = function (item) {
    var itemEle = this.getItemElements();
    return [].slice.call(itemEle).indexOf(item);
  };

  Accordion.prototype.getItemElements = function () {
    var itemEle = [];
    var itemCollection = this.element.children;
    [].slice.call(itemCollection).forEach(function (el) {
      if (el.classList.contains(CLS_ITEM)) {
        itemEle.push(el);
      }
    });
    return itemEle;
  };

  Accordion.prototype.expandedItemsPop = function (item) {
    var index = this.getIndexByItem(item);
    var temp = [].slice.call(this.expandedIndices);
    temp.splice(temp.indexOf(index), 1);
    this.setProperties({
      expandedIndices: temp
    }, true);
  };

  Accordion.prototype.collapse = function (trgt) {
    var _this = this;

    var items = this.getItems();
    var trgtItemEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_ITEM);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(trgt) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(trgt) || trgtItemEle.classList.contains(CLS_DISABLE)) {
      return;
    }

    var animation = {
      name: this.animation.collapse.effect,
      duration: this.animation.collapse.duration,
      timingFunction: this.animation.collapse.easing
    };
    var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TOOGLEICN, trgtItemEle).firstElementChild;
    var eventArgs = {
      element: trgtItemEle,
      item: items[this.getIndexByItem(trgtItemEle)],
      index: this.getIndexByItem(trgtItemEle),
      content: trgtItemEle.querySelector('.' + CLS_CONTENT),
      isExpanded: false
    };
    this.trigger('expanding', eventArgs, function (expandArgs) {
      if (!expandArgs.cancel) {
        _this.expandedItemsPop(trgtItemEle);

        trgtItemEle.classList.remove(CLS_EXPANDSTATE);
        icon.classList.add(CLS_TOGANIMATE);

        if (animation.name === 'None' && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["animationMode"] !== 'Enable' || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["animationMode"] === 'Disable') {
          _this.collapseProgress('begin', icon, trgt, trgtItemEle, expandArgs);

          _this.collapseProgress('end', icon, trgt, trgtItemEle, expandArgs);
        } else {
          _this.collapseAnimation(animation.name, trgt, trgtItemEle, icon, animation, expandArgs);
        }
      }
    });
  };

  Accordion.prototype.collapseAnimation = function (ef, trgt, trgtItEl, icn, animate, args) {
    var _this = this;

    if (ef === 'None' && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["animationMode"] === 'Enable') {
      ef = 'SlideUp';
      animate.name = 'SlideUp';
    }

    var height;
    var trgtHeight;
    var itemHeight;
    var remain;
    this.lastActiveItemId = trgtItEl.id;

    if (ef === 'SlideUp') {
      animate.begin = function () {
        itemHeight = trgtItEl.offsetHeight;
        trgtItEl.style.minHeight = itemHeight + 'px';
        trgt.style.position = 'absolute';
        height = trgtItEl.offsetHeight;
        trgtHeight = trgt.offsetHeight;
        trgt.style.maxHeight = trgtHeight + 'px';

        _this.collapseProgress('begin', icn, trgt, trgtItEl, args);
      };

      animate.progress = function () {
        remain = height - (trgtHeight - trgt.offsetHeight);

        if (remain < itemHeight) {
          trgtItEl.style.minHeight = remain + 'px';
        }
      };

      animate.end = function () {
        trgt.style.display = 'none';

        _this.collapseProgress('end', icn, trgt, trgtItEl, args);

        trgtItEl.style.minHeight = '';
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(trgt, {
          'position': '',
          'maxHeight': '',
          'display': ''
        });
      };
    } else {
      animate.begin = function () {
        _this.collapseProgress('begin', icn, trgt, trgtItEl, args);
      };

      animate.end = function () {
        _this.collapseProgress('end', icn, trgt, trgtItEl, args);
      };
    }

    new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"](animate).animate(trgt);
  };

  Accordion.prototype.collapseProgress = function (progress, icon, trgt, trgtItemEle, eventArgs) {
    this.remove(icon, CLS_EXPANDICN);
    this.remove(trgtItemEle, CLS_SLCTED);

    if (progress === 'end') {
      this.add(trgt, CLS_CTNHIDE);
      icon.classList.remove(CLS_TOGANIMATE);
      this.remove(trgtItemEle, CLS_ACTIVE);
      trgt.setAttribute('aria-hidden', 'true');
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(trgt.previousElementSibling, {
        'aria-expanded': 'false'
      });
      this.trigger('expanded', eventArgs);
    }
  };
  /**
   * Returns the current module name.
   *
   * @returns {string} - It returns the current module name.
   * @private
   */


  Accordion.prototype.getModuleName = function () {
    return 'accordion';
  };

  Accordion.prototype.getItems = function () {
    var items;

    if (this.itemTemplate && this.headerTemplate) {
      items = this.dataSource;
    } else {
      items = this.items;
    }

    return items;
  };
  /**
   * Adds new item to the Accordion with the specified index of the Accordion.
   *
   * @param  {AccordionItemModel | AccordionItemModel[] | Object | Object[]} item - Item array that is to be added to the Accordion.
   * @param  {number} index - Number value that determines where the item should be added.
   * By default, item is added at the last index if the index is not specified.
   * @returns {void}
   */


  Accordion.prototype.addItem = function (item, index) {
    var _this = this;

    var ele = this.element;
    var itemEle = this.getItemElements();
    var items = this.getItems();

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index)) {
      index = items.length;
    }

    if (ele.childElementCount >= index) {
      var addItems = item instanceof Array ? item : [item];
      addItems.forEach(function (addItem, i) {
        var itemIndex = index + i;
        items.splice(itemIndex, 0, addItem);

        var innerItemEle = _this.renderInnerItem(addItem, itemIndex);

        if (ele.childElementCount === itemIndex) {
          ele.appendChild(innerItemEle);
        } else {
          ele.insertBefore(innerItemEle, itemEle[parseInt(itemIndex.toString(), 10)]);
        }

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(innerItemEle.querySelector('.' + CLS_HEADER), 'focus', _this.focusIn, _this);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(innerItemEle.querySelector('.' + CLS_HEADER), 'blur', _this.focusOut, _this);
        _this.expandedIndices = [];

        _this.expandedItemRefresh();

        if (addItem && addItem.expanded) {
          _this.expandItem(true, itemIndex);
        }
      });
    }

    if (this.isReact) {
      this.renderReactTemplates();
    }
  };

  Accordion.prototype.expandedItemRefresh = function () {
    var _this = this;

    var itemEle = this.getItemElements();
    [].slice.call(itemEle).forEach(function (el) {
      if (el.classList.contains(CLS_SLCTED)) {
        _this.expandedItemsPush(el);
      }
    });
  };
  /**
   * Dynamically removes item from Accordion.
   *
   * @param  {number} index - Number value that determines which item should be removed.
   * @returns {void}.
   */


  Accordion.prototype.removeItem = function (index) {
    if (this.isReact || this.isAngular) {
      var item = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM, this.element)[parseInt(index.toString(), 10)];
      var header = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADERCTN, item);
      var content = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CTENT, item);
      this.clearAccordionTemplate(header, this.dataSource.length > 0 ? 'headerTemplate' : 'header', CLS_HEADERCTN);
      this.clearAccordionTemplate(content, this.dataSource.length > 0 ? 'itemTemplate' : 'content', CLS_CTENT);
    }

    var itemEle = this.getItemElements();
    var ele = itemEle[parseInt(index.toString(), 10)];
    var items = this.getItems();

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele)) {
      return;
    }

    this.restoreContent(index);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(ele);
    items.splice(index, 1);
    this.expandedIndices = [];
    this.expandedItemRefresh();
  };
  /**
   * Sets focus to the specified index item header in Accordion.
   *
   * @param  {number} index - Number value that determines which item should be focused.
   * @returns {void}.
   */


  Accordion.prototype.select = function (index) {
    var itemEle = this.getItemElements();
    var ele = itemEle[parseInt(index.toString(), 10)];

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER, ele))) {
      return;
    }

    ele.children[0].focus();
  };
  /**
   * Shows or hides the specified item from Accordion.
   *
   * @param  {number} index - Number value that determines which item should be hidden/shown.
   * @param  {boolean} isHidden - Boolean value that determines the action either hide (true) or show (false). Default value is false.
   * If the `isHidden` value is false, the item is shown or else item it is hidden.
   * @returns {void}.
   */


  Accordion.prototype.hideItem = function (index, isHidden) {
    var itemEle = this.getItemElements();
    var ele = itemEle[parseInt(index.toString(), 10)];

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele)) {
      return;
    }

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(isHidden)) {
      isHidden = true;
    }

    if (isHidden) {
      this.add(ele, CLS_ITEMHIDE);
    } else {
      this.remove(ele, CLS_ITEMHIDE);
    }
  };
  /**
   * Enables/Disables the specified Accordion item.
   *
   * @param  {number} index - Number value that determines which item should be enabled/disabled.
   * @param  {boolean} isEnable - Boolean value that determines the action as enable (true) or disable (false).
   * If the `isEnable` value is true, the item is enabled or else it is disabled.
   * @returns {void}.
   */


  Accordion.prototype.enableItem = function (index, isEnable) {
    var itemEle = this.getItemElements();
    var ele = itemEle[parseInt(index.toString(), 10)];

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele)) {
      return;
    }

    var eleHeader = ele.firstElementChild;

    if (isEnable) {
      this.remove(ele, CLS_DISABLE);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(eleHeader, {
        'tabindex': '0',
        'aria-disabled': 'false'
      });
      eleHeader.focus();
    } else {
      if (ele.classList.contains(CLS_ACTIVE)) {
        this.expandItem(false, index);
        this.eleMoveFocus('movedown', this.element, eleHeader);
      }

      this.add(ele, CLS_DISABLE);
      eleHeader.setAttribute('aria-disabled', 'true');
      eleHeader.removeAttribute('tabindex');
    }
  };
  /**
   * Expands/Collapses the specified Accordion item.
   *
   * @param  {boolean} isExpand - Boolean value that determines the action as expand or collapse.
   * @param  {number} index - Number value that determines which item should be expanded/collapsed.`index` is optional parameter.
   * Without Specifying index, based on the `isExpand` value all Accordion item can be expanded or collapsed.
   * @returns {void}.
   */


  Accordion.prototype.expandItem = function (isExpand, index) {
    var _this = this;

    var itemEle = this.getItemElements();

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index)) {
      if (this.expandMode === 'Single' && isExpand) {
        var ele = itemEle[itemEle.length - 1];
        this.itemExpand(isExpand, ele, this.getIndexByItem(ele));
      } else {
        var item = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + this.lastActiveItemId, this.element);
        [].slice.call(itemEle).forEach(function (el) {
          _this.itemExpand(isExpand, el, _this.getIndexByItem(el));

          el.classList.remove(CLS_EXPANDSTATE);
        });
        var expandedItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_EXPANDSTATE, this.element);

        if (expandedItem) {
          expandedItem.classList.remove(CLS_EXPANDSTATE);
        }

        if (item) {
          item.classList.add(CLS_EXPANDSTATE);
        }
      }
    } else {
      var ele = itemEle[parseInt(index.toString(), 10)];

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele) || !ele.classList.contains(CLS_SLCT) || ele.classList.contains(CLS_ACTIVE) && isExpand) {
        return;
      } else {
        if (this.expandMode === 'Single') {
          this.expandItem(false);
        }

        this.itemExpand(isExpand, ele, index);
      }
    }
  };

  Accordion.prototype.itemExpand = function (isExpand, ele, index) {
    var ctn = ele.children[1];

    if (ele.classList.contains(CLS_DISABLE)) {
      return;
    }

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ctn) && isExpand) {
      ctn = this.contentRendering(index);
      ele.appendChild(ctn);
      this.ariaAttrUpdate(ele);
      this.expand(ctn);
    } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ctn)) {
      if (isExpand) {
        this.expand(ctn);
      } else {
        this.collapse(ctn);
      }
    }

    if (this.isReact) {
      this.renderReactTemplates();
    }
  };

  Accordion.prototype.destroyItems = function () {
    this.restoreContent(null);

    if (this.isReact || this.isAngular || this.isVue) {
      this.clearTemplate();
    }

    [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM)).forEach(function (el) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(el);
    });
  };

  Accordion.prototype.restoreContent = function (index) {
    var ctnElePos;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index)) {
      ctnElePos = this.element;
    } else {
      ctnElePos = this.element.querySelectorAll('.' + CLS_ITEM)[parseInt(index.toString(), 10)];
    }

    this.templateEle.forEach(function (eleStr) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ctnElePos.querySelector(eleStr))) {
        document.body.appendChild(ctnElePos.querySelector(eleStr)).style.display = 'none';
      }
    });
  };

  Accordion.prototype.updateItem = function (item, index) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item)) {
      var items = this.getItems();
      var itemObj = items[parseInt(index.toString(), 10)];
      items.splice(index, 1);
      this.restoreContent(index);
      var header = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADERCTN, item);
      var content = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CTENT, item);

      if (this.isReact || this.isAngular) {
        this.clearAccordionTemplate(header, 'header', CLS_HEADERCTN);
        this.clearAccordionTemplate(content, 'content', CLS_CTENT);
      }

      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(item);
      this.addItem(itemObj, index);
    }
  };

  Accordion.prototype.setTemplate = function (template, toElement, index) {
    this.fetchElement(toElement, template, index);

    if (this.isReact) {
      this.renderReactTemplates();
    }
  };

  Accordion.prototype.clearAccordionTemplate = function (templateEle, templateName, className) {
    if (this.registeredTemplate && this.registeredTemplate["" + templateName]) {
      var registeredTemplates = this.registeredTemplate;

      for (var index = 0; index < registeredTemplates["" + templateName].length; index++) {
        var registeredItem = registeredTemplates["" + templateName][parseInt(index.toString(), 10)].rootNodes[0];
        var closestItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(registeredItem, '.' + className);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(closestItem) && closestItem === templateEle || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(registeredItem.parentNode)) {
          this.clearTemplate([templateName], [registeredTemplates["" + templateName][parseInt(index.toString(), 10)]]);
          break;
        }
      }
    } else if (this.portals && this.portals.length > 0) {
      var portals = this.portals;

      for (var index = 0; index < portals.length; index++) {
        var portalItem = portals[parseInt(index.toString(), 10)];
        var closestItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(portalItem.containerInfo, '.' + className);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(closestItem) && closestItem === templateEle) {
          this.clearTemplate([templateName], index);
          break;
        }
      }
    }
  };

  Accordion.prototype.getPersistData = function () {
    var keyEntity = ['expandedIndices'];
    return this.addOnPersist(keyEntity);
  };
  /**
   * Gets called when the model property changes.The data that describes the old and new values of the property that changed.
   *
   * @param  {AccordionModel} newProp - It contains the new value of data.
   * @param  {AccordionModel} oldProp - It contains the old value of data.
   * @returns {void}
   * @private
   */


  Accordion.prototype.onPropertyChanged = function (newProp, oldProp) {
    var acrdn = this.element;
    var isRefresh = false;

    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'items':
          if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {
            var changedProp = Object.keys(newProp.items);

            for (var j = 0; j < changedProp.length; j++) {
              var index = parseInt(Object.keys(newProp.items)[parseInt(j.toString(), 10)], 10);
              var property = Object.keys(newProp.items[parseInt(index.toString(), 10)]);

              for (var k = 0; k < property.length; k++) {
                var item = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM, this.element)[parseInt(index.toString(), 10)];
                var oldVal = Object(oldProp.items[parseInt(index.toString(), 10)])["" + property[parseInt(k.toString(), 10)]];
                var newVal = Object(newProp.items[parseInt(index.toString(), 10)])["" + property[parseInt(k.toString(), 10)]];
                var temp = property[parseInt(k.toString(), 10)];
                var content = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CTENT, item);

                if (temp === 'header' || temp === 'iconCss' || temp === 'expanded' || temp === 'content' && oldVal === '') {
                  this.updateItem(item, index);
                }

                if (property[parseInt(k.toString(), 10)] === 'cssClass' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item)) {
                  if (oldVal) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([item], oldVal.split(' '));
                  }

                  if (newVal) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([item], newVal.split(' '));
                  }
                }

                if (property[parseInt(k.toString(), 10)] === 'visible' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item)) {
                  if (Object(newProp.items[parseInt(index.toString(), 10)])["" + property[parseInt(k.toString(), 10)]] === false) {
                    item.classList.add(CLS_ITEMHIDE);
                  } else {
                    item.classList.remove(CLS_ITEMHIDE);
                  }
                }

                if (property[parseInt(k.toString(), 10)] === 'disabled' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item)) {
                  this.enableItem(index, !newVal);
                }

                if (property.indexOf('header') < 0 && property[parseInt(k.toString(), 10)] === 'content' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item) && item.children.length === 2) {
                  if (typeof newVal === 'function') {
                    if (this.isAngular || this.isReact) {
                      this.clearAccordionTemplate(content, property[parseInt(k.toString(), 10)], CLS_CTENT);
                    }

                    var activeContent = item.querySelector('.' + CLS_CTENT);
                    activeContent.innerHTML = '';
                    this.setTemplate(newVal, activeContent, index);
                  } else {
                    if (item.classList.contains(CLS_SLCTED)) {
                      this.expandItem(false, index);
                    }

                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(item.querySelector('.' + CLS_CONTENT));
                  }
                }
              }
            }
          } else {
            isRefresh = true;
          }

          break;

        case 'dataSource':
        case 'expandedIndices':
          if (this.expandedIndices === null) {
            this.expandedIndices = [];
          }

          isRefresh = true;
          break;

        case 'headerTemplate':
          this.initializeHeaderTemplate();
          isRefresh = true;
          break;

        case 'itemTemplate':
          this.initializeItemTemplate();
          isRefresh = true;
          break;

        case 'enableRtl':
          if (newProp.enableRtl) {
            this.add(acrdn, CLS_RTL);
          } else {
            this.remove(acrdn, CLS_RTL);
          }

          break;

        case 'height':
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
            'height': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.height)
          });
          break;

        case 'width':
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
            'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.width)
          });
          break;

        case 'expandMode':
          if (newProp.expandMode === 'Single' && this.expandedIndices.length > 1) {
            this.expandItem(false);
          }

          break;
      }
    }

    if (isRefresh) {
      this.initExpand = [];

      if (this.expandedIndices.length > 0) {
        this.initExpand = this.expandedIndices;
      }

      this.destroyItems();
      this.renderItems();
      this.initItemExpand();
    }
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([], AccordionItem)], Accordion.prototype, "items", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])([])], Accordion.prototype, "dataSource", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Accordion.prototype, "itemTemplate", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Accordion.prototype, "headerTemplate", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('100%')], Accordion.prototype, "width", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Accordion.prototype, "height", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])([])], Accordion.prototype, "expandedIndices", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Multiple')], Accordion.prototype, "expandMode", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Accordion.prototype, "enableHtmlSanitizer", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, AccordionAnimationSettings)], Accordion.prototype, "animation", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Accordion.prototype, "clicked", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Accordion.prototype, "expanding", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Accordion.prototype, "expanded", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Accordion.prototype, "created", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Accordion.prototype, "destroyed", void 0);

  Accordion = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Accordion);
  return Accordion;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/accordion/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/accordion/index.js ***!
  \*************************************************************************/
/*! exports provided: AccordionActionSettings, AccordionAnimationSettings, AccordionItem, Accordion */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _accordion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./accordion */ "./node_modules/@syncfusion/ej2-navigations/src/accordion/accordion.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AccordionActionSettings", function() { return _accordion__WEBPACK_IMPORTED_MODULE_0__["AccordionActionSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AccordionAnimationSettings", function() { return _accordion__WEBPACK_IMPORTED_MODULE_0__["AccordionAnimationSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AccordionItem", function() { return _accordion__WEBPACK_IMPORTED_MODULE_0__["AccordionItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Accordion", function() { return _accordion__WEBPACK_IMPORTED_MODULE_0__["Accordion"]; });

/**
 * Accordion all modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/appbar/appbar.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/appbar/appbar.js ***!
  \***********************************************************************/
/*! exports provided: AppBar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppBar", function() { return AppBar; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};


 // Constant variables

var CLS_APPBAR = 'e-appbar';
var CLS_HORIZONTAL_BOTTOM = 'e-horizontal-bottom';
var CLS_STICKY = 'e-sticky';
var CLS_PROMINENT = 'e-prominent';
var CLS_DENSE = 'e-dense';
var CLS_RTL = 'e-rtl';
var CLS_LIGHT = 'e-light';
var CLS_DARK = 'e-dark';
var CLS_PRIMARY = 'e-primary';
var CLS_INHERIT = 'e-inherit';
/**
 * The AppBar displays the information and actions related to the current application screen. It is used to show branding, screen titles, navigation, and actions.
 * Support to inherit colors from AppBar provided to <c>Button</c>, <c>DropDownButton</c>, <c>Menu</c> and <c>TextBox</c>.
 * Set <c>CssClass</c> property with <code>e-inherit</code> CSS class to inherit the background and color from AppBar.
 */

var AppBar =
/** @class */
function (_super) {
  __extends(AppBar, _super);
  /**
   * Constructor for creating the AppBar widget
   *
   * @param {AppBarModel} options Accepts the AppBar model properties to initiate the rendering
   * @param {string | HTMLElement} element Accepts the DOM element reference
   */


  function AppBar(options, element) {
    return _super.call(this, options, element) || this;
  }
  /**
   * Removes the control from the DOM and also removes all its related events.
   *
   * @returns {void}
   */


  AppBar.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this.element.classList.remove(CLS_APPBAR);
    this.element.removeAttribute('style');
    this.element.removeAttribute('role');
  };

  AppBar.prototype.getModuleName = function () {
    return 'appbar';
  };

  AppBar.prototype.getPersistData = function () {
    return this.addOnPersist([]);
  };

  AppBar.prototype.preRender = function () {// pre render code
  };

  AppBar.prototype.render = function () {
    this.element.classList.add(CLS_APPBAR);

    if (this.element.tagName !== 'HEADER') {
      this.element.setAttribute('role', 'header');
    }

    if (this.cssClass) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], this.cssClass.split(' '));
    }

    if (this.position === 'Bottom') {
      this.element.classList.add(CLS_HORIZONTAL_BOTTOM);
    }

    if (this.isSticky) {
      this.element.classList.add(CLS_STICKY);
    }

    if (this.enableRtl) {
      this.element.classList.add(CLS_RTL);
    }

    this.setHeightMode();
    this.setColorMode();

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes)) {
      this.setHtmlAttributes(this.htmlAttributes, this.element);
    }
  };

  AppBar.prototype.onPropertyChanged = function (newProp, oldProp) {
    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'mode':
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], [CLS_DENSE, CLS_PROMINENT]);
          this.setHeightMode();
          break;

        case 'position':
          if (this.position === 'Bottom') {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], CLS_HORIZONTAL_BOTTOM);
          } else {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], CLS_HORIZONTAL_BOTTOM);
          }

          break;

        case 'cssClass':
          if (oldProp.cssClass) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], oldProp.cssClass.split(' '));
          }

          if (newProp.cssClass) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], newProp.cssClass.split(' '));
          }

          break;

        case 'isSticky':
          if (this.isSticky) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], CLS_STICKY);
          } else {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], CLS_STICKY);
          }

          break;

        case 'htmlAttributes':
          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes)) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldProp.htmlAttributes)) {
              var keys = Object.keys(oldProp.htmlAttributes);

              for (var _b = 0, keys_1 = keys; _b < keys_1.length; _b++) {
                var key = keys_1[_b];

                if (key === 'class') {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], oldProp.htmlAttributes["" + key]);
                } else {
                  this.element.removeAttribute(key);
                }
              }
            }

            this.setHtmlAttributes(newProp.htmlAttributes, this.element);
          }

          break;

        case 'colorMode':
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], [CLS_DARK, CLS_PRIMARY, CLS_INHERIT, CLS_LIGHT]);
          this.setColorMode();
          break;

        case 'enableRtl':
          if (this.enableRtl) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], CLS_RTL);
          } else {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], CLS_RTL);
          }

          break;
      }
    }
  };

  AppBar.prototype.setHtmlAttributes = function (attribute, element) {
    var keys = Object.keys(attribute);

    for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
      var key = keys_2[_i];

      if (key === 'class') {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([element], attribute["" + key]);
      } else {
        element.setAttribute(key, attribute["" + key]);
      }
    }
  };

  AppBar.prototype.setHeightMode = function () {
    if (this.mode === 'Prominent') {
      this.element.classList.add(CLS_PROMINENT);
    } else if (this.mode === 'Dense') {
      this.element.classList.add(CLS_DENSE);
    }
  };

  AppBar.prototype.setColorMode = function () {
    switch (this.colorMode) {
      case 'Light':
        this.element.classList.add(CLS_LIGHT);
        break;

      case 'Dark':
        this.element.classList.add(CLS_DARK);
        break;

      case 'Primary':
        this.element.classList.add(CLS_PRIMARY);
        break;

      case 'Inherit':
        this.element.classList.add(CLS_INHERIT);
        break;
    }
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Regular')], AppBar.prototype, "mode", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Top')], AppBar.prototype, "position", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], AppBar.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], AppBar.prototype, "isSticky", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], AppBar.prototype, "htmlAttributes", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Light')], AppBar.prototype, "colorMode", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], AppBar.prototype, "created", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], AppBar.prototype, "destroyed", void 0);

  AppBar = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], AppBar);
  return AppBar;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/appbar/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/appbar/index.js ***!
  \**********************************************************************/
/*! exports provided: AppBar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _appbar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./appbar */ "./node_modules/@syncfusion/ej2-navigations/src/appbar/appbar.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AppBar", function() { return _appbar__WEBPACK_IMPORTED_MODULE_0__["AppBar"]; });

/** AppBar export modules */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/breadcrumb/breadcrumb.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/breadcrumb/breadcrumb.js ***!
  \*******************************************************************************/
/*! exports provided: BreadcrumbOverflowMode, BreadcrumbItem, Breadcrumb */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BreadcrumbOverflowMode", function() { return BreadcrumbOverflowMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BreadcrumbItem", function() { return BreadcrumbItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Breadcrumb", function() { return Breadcrumb; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-lists */ "./node_modules/@syncfusion/ej2-lists/index.js");
/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-popups */ "./node_modules/@syncfusion/ej2-popups/index.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};




var ICONRIGHT = 'e-icon-right';
var ITEMTEXTCLASS = 'e-breadcrumb-text';
var ICONCLASS = 'e-breadcrumb-icon';
var MENUCLASS = 'e-breadcrumb-menu';
var ITEMCLASS = 'e-breadcrumb-item';
var POPUPCLASS = 'e-breadcrumb-popup';
var WRAPMODECLASS = 'e-breadcrumb-wrap-mode';
var SCROLLMODECLASS = 'e-breadcrumb-scroll-mode';
var TABINDEX = 'tabindex';
var DISABLEDCLASS = 'e-disabled';
var ARIADISABLED = 'aria-disabled';
var DOT = '.';
/**
 * Defines the Breadcrumb overflow modes.
 */

var BreadcrumbOverflowMode;

(function (BreadcrumbOverflowMode) {
  /**
   * Hidden mode shows the maximum number of items possible in the container space and hides the remaining items.
   * Clicking on a previous item will make the hidden item visible.
   */
  BreadcrumbOverflowMode["Hidden"] = "Hidden";
  /**
   * Collapsed mode shows the first and last Breadcrumb items and hides the remaining items with a collapsed icon.
   * When the collapsed icon is clicked, all items become visible and navigable.
   */

  BreadcrumbOverflowMode["Collapsed"] = "Collapsed";
  /**
   * Menu mode shows the number of Breadcrumb items that can be accommodated within the container space and creates a submenu with the remaining items.
   */

  BreadcrumbOverflowMode["Menu"] = "Menu";
  /**
   * Wrap mode wraps the items to multiple lines when the Breadcrumb’s width exceeds the container space.
   */

  BreadcrumbOverflowMode["Wrap"] = "Wrap";
  /**
   * Scroll mode shows an HTML scroll bar when the Breadcrumb’s width exceeds the container space.
   */

  BreadcrumbOverflowMode["Scroll"] = "Scroll";
  /**
   * None mode shows all the items in a single line.
   */

  BreadcrumbOverflowMode["None"] = "None";
})(BreadcrumbOverflowMode || (BreadcrumbOverflowMode = {}));

var BreadcrumbItem =
/** @class */
function (_super) {
  __extends(BreadcrumbItem, _super);

  function BreadcrumbItem() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], BreadcrumbItem.prototype, "text", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], BreadcrumbItem.prototype, "url", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], BreadcrumbItem.prototype, "iconCss", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], BreadcrumbItem.prototype, "disabled", void 0);

  return BreadcrumbItem;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * Breadcrumb is a graphical user interface that helps to identify or highlight the current location within a hierarchical structure of websites.
 * The aim is to make the user aware of their current position in a hierarchy of website links.
 * ```html
 * <nav id='breadcrumb'></nav>
 * ```
 * ```typescript
 * <script>
 * var breadcrumbObj = new Breadcrumb({ items: [{ text: 'Home', url: '/' }, { text: 'Index', url: './index.html }]});
 * breadcrumbObj.appendTo("#breadcrumb");
 * </script>
 * ```
 */

var Breadcrumb =
/** @class */
function (_super) {
  __extends(Breadcrumb, _super);
  /**
   * Constructor for creating the widget.
   *
   * @private
   * @param {BreadcrumbModel} options - Specifies the Breadcrumb model.
   * @param {string | HTMLElement} element - Specifies the element.
   */


  function Breadcrumb(options, element) {
    var _this = _super.call(this, options, element) || this;

    _this.isPopupCreated = false;
    return _this;
  }
  /**
   * @private
   * @returns {void}
   */


  Breadcrumb.prototype.preRender = function () {// pre render code
  };
  /**
   * Initialize the control rendering.
   *
   * @private
   * @returns {void}
   */


  Breadcrumb.prototype.render = function () {
    this.initialize();
    this.renderItems(this.items);
    this.wireEvents();
  };

  Breadcrumb.prototype.initialize = function () {
    this._maxItems = this.maxItems;
    this.element.setAttribute('aria-label', 'breadcrumb');

    if (this.cssClass) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], this.cssClass.replace(/\s+/g, ' ').trim().split(' '));
    }

    if (this.enableRtl) {
      this.element.classList.add('e-rtl');
    }

    if (this.disabled) {
      this.element.classList.add(DISABLEDCLASS);
      this.element.setAttribute(ARIADISABLED, 'true');
    }

    if (this.overflowMode === 'Wrap') {
      this.element.classList.add(WRAPMODECLASS);
    } else if (this.overflowMode === 'Scroll') {
      this.element.classList.add(SCROLLMODECLASS);
    }

    this.initItems();
    this.initPvtProps();
  };

  Breadcrumb.prototype.initPvtProps = function () {
    if (this.overflowMode === 'Hidden' && this._maxItems > 0) {
      this.endIndex = this.getEndIndex();
      this.startIndex = this.endIndex + 1 - (this._maxItems - 1);
    }

    if (this.overflowMode === 'Menu') {
      if (this._maxItems >= 0) {
        this.startIndex = this._maxItems > 1 ? 1 : 0;
        this.endIndex = this.getEndIndex();
        this.popupUl = this.createElement('ul', {
          attrs: {
            TABINDEX: '0',
            'role': 'menu'
          }
        });
      } else {
        this.startIndex = this.endIndex = null;
      }
    }
  };

  Breadcrumb.prototype.getEndIndex = function () {
    var _this = this;

    var endIndex;

    if (this.activeItem) {
      this.items.forEach(function (item, idx) {
        if (item.url === _this.activeItem || item.text === _this.activeItem) {
          endIndex = idx;
        }
      });
    } else {
      endIndex = this.items.length - 1;
    }

    return endIndex;
  };

  Breadcrumb.prototype.initItems = function () {
    if (!this.items.length) {
      var baseUri = void 0;
      var uri = void 0;
      var items = [];

      if (this.url) {
        var url = new URL(this.url, window.location.origin);
        baseUri = url.origin + '/';
        uri = url.href.split(baseUri)[1].split('/');
      } else {
        baseUri = window.location.origin + '/';
        uri = window.location.href.split(baseUri)[1].split('/');
      }

      items.push({
        iconCss: 'e-icons e-home',
        url: baseUri
      });

      for (var i = 0; i < uri.length; i++) {
        if (uri[i]) {
          items.push({
            text: uri[i],
            url: baseUri + uri[i]
          });
          baseUri += uri[i] + '/';
        }
      }

      this.setProperties({
        items: items
      }, true);
    }
  };

  Breadcrumb.prototype.renderItems = function (items) {
    var _this = this;

    var item;
    var isSingleLevel;
    var isIconRight = this.element.classList.contains(ICONRIGHT);
    var itemsLength = items.length;

    if (itemsLength) {
      var isActiveItem = void 0;
      var isLastItem = void 0;
      var isLastItemInPopup_1;
      var j_1 = 0;
      var wrapDiv = void 0;
      var len = itemsLength * 2 - 1;
      var isItemCancelled_1 = false;
      var ol = this.createElement('ol', {
        className: this.overflowMode === 'Wrap' ? 'e-breadcrumb-wrapped-ol' : ''
      });
      var firstOl = this.createElement('ol', {
        className: this.overflowMode === 'Wrap' ? 'e-breadcrumb-first-ol' : ''
      });
      var showIcon = this.hasField(items, 'iconCss');
      var isCollasped = this.overflowMode === 'Collapsed' && this._maxItems > 0 && itemsLength > this._maxItems && !this.isExpanded;
      var isDefaultOverflowMode_1 = this.overflowMode === 'Hidden' && this._maxItems > 0;

      if (this.overflowMode === 'Menu' && this.popupUl) {
        this.popupUl.innerHTML = '';
      }

      var listBaseOptions = {
        moduleName: this.getModuleName(),
        showIcon: showIcon,
        itemNavigable: true,
        itemCreated: function (args) {
          var isLastItem = args.curData.isLastItem;

          if (isLastItem && args.item.children.length && !_this.itemTemplate) {
            delete args.curData.isLastItem;

            if (!isLastItemInPopup_1 && !_this.enableActiveItemNavigation) {
              args.item.innerHTML = _this.createElement('span', {
                className: ITEMTEXTCLASS,
                innerHTML: args.item.children[0].innerHTML
              }).outerHTML;
            }
          }

          if (args.curData.iconCss && !args.curData.text && !_this.itemTemplate) {
            args.item.classList.add('e-icon-item');
          }

          if (isDefaultOverflowMode_1) {
            args.item.setAttribute('item-index', j_1.toString());
          }

          var eventArgs = {
            item: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, args.curData.properties ? args.curData.properties : args.curData),
            element: args.item,
            cancel: false
          };

          _this.trigger('beforeItemRender', eventArgs);

          isItemCancelled_1 = eventArgs.cancel;
          var containsRightIcon = isIconRight || eventArgs.element.classList.contains(ICONRIGHT);

          if (containsRightIcon && args.curData.iconCss && !_this.itemTemplate) {
            args.item.querySelector('.e-anchor-wrap').appendChild(args.item.querySelector(DOT + ICONCLASS));
          }

          if (eventArgs.item.disabled) {
            args.item.setAttribute(ARIADISABLED, 'true');
            args.item.classList.add(DISABLEDCLASS);
          }

          if ((eventArgs.item.disabled || _this.disabled) && args.item.children.length && !_this.itemTemplate) {
            args.item.children[0].setAttribute(TABINDEX, '-1');
          }

          if (args.curData.isEmptyUrl) {
            args.item.children[0].removeAttribute('href');

            if ((!isLastItem || isLastItem && _this.enableActiveItemNavigation) && !(eventArgs.item.disabled || _this.disabled)) {
              args.item.children[0].setAttribute(TABINDEX, '0');
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(args.item.children[0], 'keydown', _this.keyDownHandler, _this);
            }
          }

          args.item.removeAttribute('role');

          if (isLastItem) {
            args.item.setAttribute('data-active-item', '');
          }

          if (!_this.itemTemplate) {
            _this.beforeItemRenderChanges(args.curData, eventArgs.item, args.item, containsRightIcon);
          }
        }
      };

      for (var i = 0; i < len; i % 2 && j_1++, i++) {
        isActiveItem = this.activeItem && (this.activeItem === items[j_1].url || this.activeItem === items[j_1].text);

        if (isCollasped && i > 1 && i < len - 2) {
          continue;
        } else if (isDefaultOverflowMode_1 && (j_1 < this.startIndex || j_1 > this.endIndex) && (i % 2 ? j_1 !== this.startIndex - 1 : true) && j_1 !== 0) {
          continue;
        }

        if (i % 2) {
          // separator item
          wrapDiv = this.createElement('div', {
            className: 'e-breadcrumb-item-wrapper'
          });

          if (this.separatorTemplate && this.separatorTemplate === '/' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.separatorTemplate)) {
            listBaseOptions.template = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["initializeCSPTemplate"])(function () {
              return '/';
            });
          } else {
            listBaseOptions.template = this.separatorTemplate;
          }

          listBaseOptions.itemClass = 'e-breadcrumb-separator';
          isSingleLevel = false;
          item = [{
            previousItem: items[j_1],
            nextItem: items[j_1 + 1]
          }];
        } else {
          // list item
          listBaseOptions.itemClass = '';

          if (this.itemTemplate) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            listBaseOptions.template = this.itemTemplate;
            isSingleLevel = false;
          } else {
            isSingleLevel = true;
          }

          item = [Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, items[j_1].properties ? items[j_1].properties : items[j_1])];

          if (!item[0].url && !this.itemTemplate) {
            item = [Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, item[0], {
              isEmptyUrl: true,
              url: '#'
            })];
          }

          isLastItem = (isDefaultOverflowMode_1 || this.overflowMode === 'Menu') && j_1 === this.endIndex;

          if ((i === len - 1 || isLastItem) && !this.itemTemplate || isActiveItem) {
            item[0].isLastItem = true;
          }
        }

        var parent_1 = ol;
        var lastPopupItemIdx = this.startIndex + this.endIndex - this._maxItems;

        if (this.overflowMode === 'Menu' && (j_1 >= this.startIndex && j_1 <= lastPopupItemIdx && (i % 2 ? !(j_1 === lastPopupItemIdx) : true) && this.endIndex >= this._maxItems && this._maxItems > 0 || this._maxItems === 0)) {
          if (i % 2) {
            continue;
          } else {
            parent_1 = this.popupUl;

            if (isLastItem) {
              isLastItemInPopup_1 = true;
            }
          }
        } else if (this.overflowMode === 'Wrap') {
          if (i === 0) {
            parent_1 = firstOl;
          } else {
            parent_1 = wrapDiv;
          }
        }

        var li = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__["ListBase"].createList(this.createElement, item, listBaseOptions, isSingleLevel, this).childNodes;

        if (!isItemCancelled_1) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(li, parent_1);
        } else if (isDefaultOverflowMode_1 || isCollasped || this.overflowMode === 'Menu' || this.overflowMode === 'Wrap') {
          items.splice(j_1, 1);
          this.initPvtProps();
          return this.reRenderItems();
        } else if (i === len - 1 || isLastItem) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(parent_1.lastElementChild);
        }

        if (this.overflowMode === 'Wrap' && i !== 0 && i % 2 === 0) {
          ol.appendChild(wrapDiv);
        }

        if (isCollasped && i === 1) {
          var li_1 = this.createElement('li', {
            className: 'e-icons e-breadcrumb-collapsed',
            attrs: {
              TABINDEX: '0'
            }
          });
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(li_1, 'keyup', this.expandHandler, this);
          ol.appendChild(li_1);
        }

        if (this.overflowMode === 'Menu' && this.startIndex === i && this.endIndex >= this._maxItems && this._maxItems >= 0) {
          var menu = this.getMenuElement();
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(menu, 'keyup', this.keyDownHandler, this);
          ol.appendChild(menu);
        }

        if (isActiveItem || isLastItem) {
          break;
        }

        if (isItemCancelled_1) {
          i++;
        }
      }

      if (this.isReact) {
        this.renderReactTemplates();
      }

      if (this.overflowMode === 'Wrap') {
        this.element.appendChild(firstOl);
      }

      this.element.appendChild(ol);
      this.calculateMaxItems();
    }
  };

  Breadcrumb.prototype.calculateMaxItems = function () {
    if (this.overflowMode === 'Hidden' || this.overflowMode === 'Collapsed' || this.overflowMode === 'Menu') {
      var maxItems = void 0;
      var width = this.element.offsetWidth;
      var liElems = [].slice.call(this.element.children[0].children).reverse();
      var liWidth = this.overflowMode === 'Menu' ? 0 : liElems[liElems.length - 1].offsetWidth + (liElems[liElems.length - 2] ? liElems[liElems.length - 2].offsetWidth : 0);

      if (this.overflowMode === 'Menu') {
        var menuEle = this.getMenuElement();
        this.element.appendChild(menuEle);
        liWidth += menuEle.offsetWidth;
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(menuEle);
      }

      for (var i = 0; i < liElems.length - 2; i++) {
        if (liWidth > width) {
          maxItems = Math.ceil((i - 1) / 2) + (this.overflowMode === 'Menu' && i <= 2 ? 0 : 1);

          if ((this.maxItems > maxItems && !(this.maxItems > -1 && maxItems === -1) || this.maxItems === -1) && this._maxItems !== maxItems) {
            this._maxItems = maxItems;
            this.initPvtProps();
            return this.reRenderItems();
          } else {
            break;
          }
        } else {
          if (this.overflowMode === 'Menu' && i === 2) {
            liWidth += liElems[liElems.length - 1].offsetWidth + liElems[liElems.length - 2].offsetWidth;

            if (liWidth > width) {
              this._maxItems = 1;
              this.initPvtProps();
              return this.reRenderItems();
            }
          }

          if (!(this.overflowMode === 'Menu' && liElems[i].classList.contains(MENUCLASS))) {
            liWidth += liElems[i].offsetWidth;
          }
        }
      }
    } else if ((this.overflowMode === 'Wrap' || this.overflowMode === 'Scroll') && this._maxItems > 0) {
      var width = 0;
      var liElems = this.element.querySelectorAll(DOT + ITEMCLASS);

      if (liElems.length > this._maxItems + this._maxItems - 1) {
        for (var i = this.overflowMode === 'Wrap' ? 1 : 0; i < this._maxItems + this._maxItems - 1; i++) {
          width += liElems[i].offsetWidth;
        }

        width = width + 5 + parseInt(getComputedStyle(this.element.children[0]).paddingLeft, 10) * 2;

        if (this.overflowMode === 'Wrap') {
          this.element.querySelector('.e-breadcrumb-wrapped-ol').style.width = width + 'px';
        } else {
          this.element.style.width = width + 'px';
        }
      }
    }
  };

  Breadcrumb.prototype.hasField = function (items, field) {
    for (var i = 0, len = items.length; i < len; i++) {
      if (items[i]["" + field]) {
        return true;
      }
    }

    return false;
  };

  Breadcrumb.prototype.getMenuElement = function () {
    return this.createElement('li', {
      className: 'e-icons e-breadcrumb-menu',
      attrs: {
        TABINDEX: '0'
      }
    });
  };

  Breadcrumb.prototype.beforeItemRenderChanges = function (prevItem, currItem, elem, isRightIcon) {
    var wrapElem = elem.querySelector('.e-anchor-wrap');

    if (currItem.text !== prevItem.text) {
      wrapElem.childNodes.forEach(function (child) {
        if (child.nodeType === Node.TEXT_NODE) {
          child.textContent = currItem.text;
        }
      });
    }

    if (currItem.iconCss !== prevItem.iconCss && wrapElem) {
      // wrapElem - for checking it is item not a separator
      var iconElem = elem.querySelector(DOT + ICONCLASS);

      if (iconElem) {
        if (currItem.iconCss) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([iconElem], prevItem.iconCss.split(' '));
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([iconElem], currItem.iconCss.split(' '));
        } else {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(iconElem);
        }
      } else if (currItem.iconCss) {
        var iconElem_1 = this.createElement('span', {
          className: ICONCLASS + ' ' + currItem.iconCss
        });

        if (isRightIcon) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([iconElem_1], wrapElem);
        } else {
          wrapElem.insertBefore(iconElem_1, wrapElem.childNodes[0]);
        }
      }
    }

    if (currItem.url !== prevItem.url && this.enableNavigation) {
      var anchor = elem.querySelector('a.' + ITEMTEXTCLASS);

      if (anchor) {
        if (currItem.url) {
          anchor.setAttribute('href', currItem.url);
        } else {
          anchor.removeAttribute('href');
        }
      }
    }
  };

  Breadcrumb.prototype.reRenderItems = function () {
    this.element.innerHTML = '';
    this.renderItems(this.items);
  };

  Breadcrumb.prototype.clickHandler = function (e) {
    var li = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, DOT + ITEMCLASS + ':not(.e-breadcrumb-separator)');

    if (!this.enableNavigation) {
      e.preventDefault();
    }

    if (li && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, DOT + ITEMTEXTCLASS) || this.itemTemplate)) {
      var idx = void 0;

      if (this.overflowMode === 'Wrap') {
        idx = [].slice.call(this.element.querySelectorAll(DOT + ITEMCLASS)).indexOf(li);
      } else {
        idx = [].slice.call(li.parentElement.children).indexOf(li);
      }

      if (this.overflowMode === 'Menu') {
        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, DOT + POPUPCLASS)) {
          idx += this.startIndex;
          this.endIndex = idx;

          if (e.type === 'keydown') {
            this.documentClickHandler(e);
          }
        } else if (this.element.querySelector(DOT + MENUCLASS)) {
          if (idx > [].slice.call(this.element.children[0].children).indexOf(this.element.querySelector(DOT + MENUCLASS))) {
            idx += this.popupUl.childElementCount * 2 - 2;
            idx = Math.floor(idx / 2);
            this.endIndex = idx;
          } else {
            this.startIndex = this.endIndex = idx;
          }
        } else {
          idx = Math.floor(idx / 2);
          this.startIndex = this.endIndex = idx;
        }
      } else {
        idx = Math.floor(idx / 2);
      }

      if (this.overflowMode === 'Hidden' && this._maxItems > 0 && this.endIndex !== 0) {
        idx = parseInt(li.getAttribute('item-index'), 10);

        if (this.startIndex > 1) {
          this.startIndex -= this.endIndex - idx;
        }

        this.endIndex = idx;
      }

      this.trigger('itemClick', {
        element: li,
        item: this.items[idx],
        event: e
      });
      this.activeItem = this.items[idx].url || this.items[idx].text;
      this.dataBind();
    }

    if (e.target.classList.contains('e-breadcrumb-collapsed')) {
      this.isExpanded = true;
      this.reRenderItems();
    }

    if (e.target.classList.contains(MENUCLASS) && !this.isPopupCreated) {
      this.renderPopup();
    }
  };

  Breadcrumb.prototype.renderPopup = function () {
    var _this = this;

    var wrapper = this.createElement('div', {
      className: POPUPCLASS + ' ' + this.cssClass + (this.enableRtl ? ' e-rtl' : '')
    });
    document.body.appendChild(wrapper);
    this.isPopupCreated = true;
    this.popupObj = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["Popup"](wrapper, {
      content: this.popupUl,
      relateTo: this.element.querySelector(DOT + MENUCLASS),
      enableRtl: this.enableRtl,
      position: {
        X: 'left',
        Y: 'bottom'
      },
      collision: {
        X: 'fit',
        Y: 'flip'
      },
      open: function () {
        _this.popupUl.focus();
      }
    });
    this.popupWireEvents();
    this.popupObj.show();
  };

  Breadcrumb.prototype.documentClickHandler = function (e) {
    if (this.overflowMode === 'Menu' && this.popupObj && this.popupObj.element.classList.contains('e-popup-open') && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, DOT + MENUCLASS)) {
      this.popupObj.hide();
      this.popupObj.destroy();
      this.isPopupCreated = false;
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.popupObj.element);
    }
  };

  Breadcrumb.prototype.resize = function () {
    this._maxItems = this.maxItems;
    this.initPvtProps();
    this.reRenderItems();
  };

  Breadcrumb.prototype.expandHandler = function (e) {
    if (e.key === 'Enter') {
      this.isExpanded = true;
      this.reRenderItems();
    }
  };

  Breadcrumb.prototype.keyDownHandler = function (e) {
    if (e.key === 'Enter') {
      this.clickHandler(e);
    }
  };

  Breadcrumb.prototype.popupKeyDownHandler = function (e) {
    if (e.key === 'Escape') {
      this.documentClickHandler(e);
    }
  };
  /**
   * Called internally if any of the property value changed.
   *
   * @private
   * @param {BreadcrumbModel} newProp - Specifies the new properties.
   * @param {BreadcrumbModel} oldProp - Specifies the old properties.
   * @returns {void}
   */


  Breadcrumb.prototype.onPropertyChanged = function (newProp, oldProp) {
    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'items':
        case 'enableActiveItemNavigation':
          this.reRenderItems();
          break;

        case 'activeItem':
          this._maxItems = this.maxItems;
          this.initPvtProps();
          this.reRenderItems();
          break;

        case 'overflowMode':
        case 'maxItems':
          this._maxItems = this.maxItems;
          this.initPvtProps();
          this.reRenderItems();

          if (oldProp.overflowMode === 'Wrap') {
            this.element.classList.remove(WRAPMODECLASS);
          } else if (newProp.overflowMode === 'Wrap') {
            this.element.classList.add(WRAPMODECLASS);
          }

          if (oldProp.overflowMode === 'Scroll') {
            this.element.classList.remove(SCROLLMODECLASS);
          } else if (newProp.overflowMode === 'Scroll') {
            this.element.classList.add(SCROLLMODECLASS);
          }

          break;

        case 'url':
          this.initItems();
          this.reRenderItems();
          break;

        case 'cssClass':
          if (oldProp.cssClass) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], oldProp.cssClass.split(' '));
          }

          if (newProp.cssClass) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], newProp.cssClass.replace(/\s+/g, ' ').trim().split(' '));
          }

          if (oldProp.cssClass && oldProp.cssClass.indexOf(ICONRIGHT) > -1 && !(newProp.cssClass && newProp.cssClass.indexOf(ICONRIGHT) > -1) || !(oldProp.cssClass && oldProp.cssClass.indexOf(ICONRIGHT) > -1) && newProp.cssClass && newProp.cssClass.indexOf(ICONRIGHT) > -1) {
            this.reRenderItems();
          }

          break;

        case 'enableRtl':
          this.element.classList.toggle('e-rtl');
          break;

        case 'disabled':
          this.element.classList.toggle(DISABLEDCLASS);
          this.element.setAttribute(ARIADISABLED, newProp.disabled + '');
          break;
      }
    }
  };

  Breadcrumb.prototype.wireEvents = function () {
    this.delegateClickHanlder = this.documentClickHandler.bind(this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'click', this.delegateClickHanlder, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'click', this.clickHandler, this);
    window.addEventListener('resize', this.resize.bind(this));
  };

  Breadcrumb.prototype.popupWireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.popupObj.element, 'click', this.clickHandler, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.popupObj.element, 'keydown', this.popupKeyDownHandler, this);
  };

  Breadcrumb.prototype.unWireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'click', this.delegateClickHanlder);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'click', this.clickHandler);
    window.removeEventListener('resize', this.resize.bind(this));

    if (this.popupObj) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.popupObj.element, 'click', this.clickHandler);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.popupObj.element, 'keydown', this.popupKeyDownHandler);
    }
  };
  /**
   * Get the properties to be maintained in the persisted state.
   *
   * @returns {string} - Persist data
   */


  Breadcrumb.prototype.getPersistData = function () {
    return this.addOnPersist(['activeItem']);
  };
  /**
   * Get module name.
   *
   * @private
   * @returns {string} - Module Name
   */


  Breadcrumb.prototype.getModuleName = function () {
    return 'breadcrumb';
  };
  /**
   * Destroys the widget.
   *
   * @returns {void}
   */


  Breadcrumb.prototype.destroy = function () {
    var _this = this;

    var classes = [];
    var attributes = ['aria-label'];

    if (this.cssClass) {
      classes.concat(this.cssClass.split(' '));
    }

    if (this.enableRtl) {
      classes.push('e-rtl');
    }

    if (this.disabled) {
      classes.push(DISABLEDCLASS);
      attributes.push(ARIADISABLED);
    }

    if (this.overflowMode === 'Wrap') {
      classes.push(WRAPMODECLASS);
    } else if (this.overflowMode === 'Scroll') {
      classes.push(SCROLLMODECLASS);
    }

    this.unWireEvents();
    this.element.innerHTML = '';
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], classes);
    attributes.forEach(function (attribute) {
      _this.element.removeAttribute(attribute);
    });

    _super.prototype.destroy.call(this);
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Breadcrumb.prototype, "url", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([], BreadcrumbItem)], Breadcrumb.prototype, "items", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Breadcrumb.prototype, "activeItem", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(-1)], Breadcrumb.prototype, "maxItems", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Menu')], Breadcrumb.prototype, "overflowMode", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Breadcrumb.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Breadcrumb.prototype, "itemTemplate", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('/')], Breadcrumb.prototype, "separatorTemplate", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Breadcrumb.prototype, "enableNavigation", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Breadcrumb.prototype, "enableActiveItemNavigation", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Breadcrumb.prototype, "disabled", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Breadcrumb.prototype, "locale", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Breadcrumb.prototype, "beforeItemRender", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Breadcrumb.prototype, "itemClick", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Breadcrumb.prototype, "created", void 0);

  Breadcrumb = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Breadcrumb);
  return Breadcrumb;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/breadcrumb/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/breadcrumb/index.js ***!
  \**************************************************************************/
/*! exports provided: BreadcrumbOverflowMode, BreadcrumbItem, Breadcrumb */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _breadcrumb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./breadcrumb */ "./node_modules/@syncfusion/ej2-navigations/src/breadcrumb/breadcrumb.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BreadcrumbOverflowMode", function() { return _breadcrumb__WEBPACK_IMPORTED_MODULE_0__["BreadcrumbOverflowMode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BreadcrumbItem", function() { return _breadcrumb__WEBPACK_IMPORTED_MODULE_0__["BreadcrumbItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Breadcrumb", function() { return _breadcrumb__WEBPACK_IMPORTED_MODULE_0__["Breadcrumb"]; });

/**
 * Breadcrumb modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/carousel/carousel.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/carousel/carousel.js ***!
  \***************************************************************************/
/*! exports provided: CarouselSwipeMode, CarouselItem, Carousel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CarouselSwipeMode", function() { return CarouselSwipeMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CarouselItem", function() { return CarouselItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Carousel", function() { return Carousel; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ "./node_modules/@syncfusion/ej2-buttons/index.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/* eslint-disable @typescript-eslint/no-explicit-any */





 // Constant variables

var CLS_CAROUSEL = 'e-carousel';
var CLS_ACTIVE = 'e-active';
var CLS_RTL = 'e-rtl';
var CLS_PARTIAL = 'e-partial';
var CLS_SWIPE = 'e-swipe';
var CLS_SLIDE_CONTAINER = 'e-carousel-slide-container';
var CLS_ITEMS = 'e-carousel-items';
var CLS_CLONED = 'e-cloned';
var CLS_ITEM = 'e-carousel-item';
var CLS_PREVIOUS = 'e-previous';
var CLS_NEXT = 'e-next';
var CLS_PREV_ICON = 'e-previous-icon';
var CLS_NEXT_ICON = 'e-next-icon';
var CLS_NAVIGATORS = 'e-carousel-navigators';
var CLS_INDICATORS = 'e-carousel-indicators';
var CLS_INDICATOR_BARS = 'e-indicator-bars';
var CLS_INDICATOR_BAR = 'e-indicator-bar';
var CLS_INDICATOR = 'e-indicator';
var CLS_ICON = 'e-icons';
var CLS_PLAY_PAUSE = 'e-play-pause';
var CLS_PLAY_ICON = 'e-play-icon';
var CLS_PAUSE_ICON = 'e-pause-icon';
var CLS_PREV_BUTTON = 'e-previous-button';
var CLS_NEXT_BUTTON = 'e-next-button';
var CLS_PLAY_BUTTON = 'e-play-button';
var CLS_FLAT = 'e-flat';
var CLS_ROUND = 'e-round';
var CLS_HOVER_ARROWS = 'e-hover-arrows';
var CLS_HOVER = 'e-carousel-hover';
var CLS_TEMPLATE = 'e-template';
var CLS_SLIDE_ANIMATION = 'e-carousel-slide-animation';
var CLS_FADE_ANIMATION = 'e-carousel-fade-animation';
var CLS_CUSTOM_ANIMATION = 'e-carousel-custom-animation';
var CLS_ANIMATION_NONE = 'e-carousel-animation-none';
var CLS_PREV_SLIDE = 'e-prev';
var CLS_NEXT_SLIDE = 'e-next';
var CLS_TRANSITION_START = 'e-transition-start';
var CLS_TRANSITION_END = 'e-transition-end';
/**
 * Specifies the action (touch & mouse) which enables the slide swiping action in carousel.
 * * Touch - Enables or disables the swiping action in touch interaction.
 * * Mouse - Enables or disables the swiping action in mouse interaction.
 * @aspNumberEnum
 */

var CarouselSwipeMode;

(function (CarouselSwipeMode) {
  /** Enables or disables the swiping action in touch interaction. */
  CarouselSwipeMode[CarouselSwipeMode["Touch"] = 1] = "Touch";
  /** Enables or disables the swiping action in mouse interaction. */

  CarouselSwipeMode[CarouselSwipeMode["Mouse"] = 2] = "Mouse";
})(CarouselSwipeMode || (CarouselSwipeMode = {}));
/** Specifies the carousel individual item. */


var CarouselItem =
/** @class */
function (_super) {
  __extends(CarouselItem, _super);

  function CarouselItem() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], CarouselItem.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], CarouselItem.prototype, "interval", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], CarouselItem.prototype, "template", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], CarouselItem.prototype, "htmlAttributes", void 0);

  return CarouselItem;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);



var Carousel =
/** @class */
function (_super) {
  __extends(Carousel, _super);
  /**
   * Constructor for creating the Carousel widget
   *
   * @param {CarouselModel} options Accepts the carousel model properties to initiate the rendering
   * @param {string | HTMLElement} element Accepts the DOM element reference
   */


  function Carousel(options, element) {
    var _this = _super.call(this, options, element) || this;

    _this.isSwipe = false;
    return _this;
  }

  Carousel.prototype.getModuleName = function () {
    return CLS_CAROUSEL.replace('e-', '');
  };

  Carousel.prototype.getPersistData = function () {
    return this.addOnPersist(['selectedIndex']);
  };

  Carousel.prototype.preRender = function () {
    this.keyConfigs = {
      home: 'home',
      end: 'end',
      space: 'space',
      moveLeft: 'leftarrow',
      moveRight: 'rightarrow',
      moveUp: 'uparrow',
      moveDown: 'downarrow'
    };
    var defaultLocale = {
      nextSlide: 'Next slide',
      of: 'of',
      pauseSlideTransition: 'Pause slide transition',
      playSlideTransition: 'Play slide transition',
      previousSlide: 'Previous slide',
      slide: 'Slide',
      slideShow: 'Slide show'
    };
    this.localeObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"](this.getModuleName(), defaultLocale, this.locale);
  };

  Carousel.prototype.render = function () {
    this.initialize();
    this.renderSlides();
    this.renderNavigators();
    this.renderPlayButton();
    this.renderIndicators();
    this.applyAnimation();
    this.wireEvents();
  };

  Carousel.prototype.onPropertyChanged = function (newProp, oldProp) {
    var target;
    var rtlElement;

    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'animationEffect':
          this.applyAnimation();
          break;

        case 'cssClass':
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(this.element, [newProp.cssClass], [oldProp.cssClass]);
          break;

        case 'selectedIndex':
          this.setActiveSlide(this.selectedIndex, oldProp.selectedIndex > this.selectedIndex ? 'Previous' : 'Next');
          this.autoSlide();
          break;

        case 'htmlAttributes':
          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes)) {
            this.setHtmlAttributes(this.htmlAttributes, this.element);
          }

          break;

        case 'enableTouchSwipe':
          if (!this.enableTouchSwipe && this.touchModule) {
            this.touchModule.destroy();
          }

          if (this.element.querySelector("." + CLS_ITEMS)) {
            this.renderTouchActions();
          }

          break;

        case 'loop':
          if (this.loop && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.autoSlideInterval)) {
            this.applySlideInterval();
          }

          this.handleNavigatorsActions(this.selectedIndex);

          if (this.partialVisible || !(this.swipeMode === (~CarouselSwipeMode.Touch & ~CarouselSwipeMode.Mouse))) {
            this.reRenderSlides();
          }

          break;

        case 'enableRtl':
          rtlElement = [].slice.call(this.element.querySelectorAll("." + CLS_PREV_BUTTON + ",\n                ." + CLS_NEXT_BUTTON + ", ." + CLS_PLAY_BUTTON));
          rtlElement.push(this.element);

          if (this.enableRtl) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])(rtlElement, CLS_RTL);
          } else {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(rtlElement, CLS_RTL);
          }

          if (this.partialVisible || !(this.swipeMode === (~CarouselSwipeMode.Touch & ~CarouselSwipeMode.Mouse))) {
            var cloneCount = this.loop ? this.getNumOfItems() : 0;
            var slideWidth = this.itemsContainer.firstElementChild.clientWidth;
            this.itemsContainer.style.transform = this.getTranslateX(slideWidth, this.selectedIndex + cloneCount);
          }

          break;

        case 'buttonsVisibility':
          target = this.element.querySelector("." + CLS_NAVIGATORS);

          if (target) {
            switch (this.buttonsVisibility) {
              case 'Hidden':
                this.resetTemplates(['previousButtonTemplate', 'nextButtonTemplate']);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(target);
                break;

              case 'VisibleOnHover':
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([].slice.call(target.childNodes), CLS_HOVER_ARROWS);
                break;

              case 'Visible':
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([].slice.call(target.childNodes), CLS_HOVER_ARROWS);
                break;
            }
          } else {
            this.renderNavigators();
            this.renderPlayButton();
          }

          break;

        case 'width':
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
            'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.width)
          });
          break;

        case 'height':
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
            'height': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.height)
          });
          break;

        case 'autoPlay':
          if (this.showPlayButton && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.playButtonTemplate)) {
            this.playButtonClickHandler(null, true);
          }

          this.autoSlide();
          break;

        case 'interval':
          this.autoSlide();
          break;

        case 'showIndicators':
        case 'indicatorsType':
          target = this.element.querySelector("." + CLS_INDICATORS);

          if (target) {
            this.resetTemplates(['indicatorsTemplate']);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(target);
          }

          this.renderIndicators();
          break;

        case 'showPlayButton':
          target = this.element.querySelector("." + CLS_PLAY_PAUSE);

          if (!this.showPlayButton && target) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(target);
            this.resetTemplates(['playButtonTemplate']);
          }

          this.renderPlayButton();
          break;

        case 'items':
        case 'dataSource':
          var selectedData = prop === 'dataSource' ? this.dataSource : this.items;

          if (selectedData.length > 0 && this.selectedIndex >= selectedData.length) {
            this.setActiveSlide(selectedData.length - 1, 'Previous');
            this.autoSlide();
          }

          this.reRenderSlides();
          this.reRenderIndicators();
          break;

        case 'partialVisible':
          if (this.partialVisible) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], CLS_PARTIAL);
          } else {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], CLS_PARTIAL);
          }

          this.reRenderSlides();
          break;

        case 'swipeMode':
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mousedown touchstart', this.swipeStart);
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mousemove touchmove', this.swiping);
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseup touchend', this.swipStop);
          this.swipeModehandlers();
          this.reRenderSlides();
          break;
      }
    }
  };

  Carousel.prototype.reRenderSlides = function () {
    var target = this.element.querySelector("." + CLS_ITEMS);

    if (target) {
      this.resetTemplates(['itemTemplate']);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(target);
    }

    this.renderSlides();
  };

  Carousel.prototype.reRenderIndicators = function () {
    var target = this.element.querySelector("." + CLS_INDICATORS);

    if (target) {
      this.resetTemplates(['indicatorsTemplate']);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(target);
    }

    this.renderIndicators();
  };

  Carousel.prototype.initialize = function () {
    var carouselClasses = [];
    carouselClasses.push(CLS_CAROUSEL);

    if (this.cssClass) {
      carouselClasses.push(this.cssClass);
    }

    if (this.enableRtl) {
      carouselClasses.push(CLS_RTL);
    }

    if (this.partialVisible) {
      carouselClasses.push(CLS_PARTIAL);
    }

    if (!(this.swipeMode === (~CarouselSwipeMode.Touch & ~CarouselSwipeMode.Mouse))) {
      carouselClasses.push(CLS_SWIPE);
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], carouselClasses);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
      'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.width),
      'height': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.height)
    });
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
      'tabindex': '0',
      'role': 'group',
      'aria-roledescription': 'carousel',
      'aria-label': this.localeObj.getConstant('slideShow')
    });

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes)) {
      this.setHtmlAttributes(this.htmlAttributes, this.element);
    }
  };

  Carousel.prototype.renderSlides = function () {
    var _this = this;

    var slideContainer = this.element.querySelector('.' + CLS_SLIDE_CONTAINER);

    if (!slideContainer) {
      slideContainer = this.createElement('div', {
        className: CLS_SLIDE_CONTAINER
      });
      this.element.appendChild(slideContainer);
    }

    this.itemsContainer = this.createElement('div', {
      className: CLS_ITEMS,
      attrs: {
        'aria-live': this.autoPlay ? 'off' : 'polite'
      }
    });
    slideContainer.appendChild(this.itemsContainer);
    var numOfItems = this.getNumOfItems();

    if (numOfItems > 0 && this.loop) {
      if (this.items.length > 0) {
        this.items.slice(-numOfItems).forEach(function (item, index) {
          _this.renderSlide(item, item.template, index, _this.itemsContainer, true);
        });
      } else if (this.dataSource.length > 0) {
        this.dataSource.slice(-numOfItems).forEach(function (item, index) {
          _this.renderSlide(item, _this.itemTemplate, index, _this.itemsContainer, true);
        });
      }
    }

    if (this.items.length > 0) {
      this.slideItems = this.items;
      this.items.forEach(function (item, index) {
        _this.renderSlide(item, item.template, index, _this.itemsContainer);
      });
    } else if (this.dataSource.length > 0) {
      this.slideItems = this.dataSource;
      this.dataSource.forEach(function (item, index) {
        _this.renderSlide(item, _this.itemTemplate, index, _this.itemsContainer);
      });
    }

    if (numOfItems > 0 && this.loop) {
      if (this.items.length > 0) {
        this.items.slice(0, numOfItems).forEach(function (item, index) {
          _this.renderSlide(item, item.template, index, _this.itemsContainer, true);
        });
      } else if (this.dataSource.length > 0) {
        this.dataSource.slice(0, numOfItems).forEach(function (item, index) {
          _this.renderSlide(item, _this.itemTemplate, index, _this.itemsContainer, true);
        });
      }
    }

    this.renderTemplates();
    this.itemsContainer.style.setProperty('--carousel-items-count', "" + this.itemsContainer.children.length);
    var slideWidth = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.itemsContainer.firstElementChild) ? 0 : this.itemsContainer.firstElementChild.clientWidth;
    this.itemsContainer.style.transitionProperty = 'none';
    var cloneCount = this.loop ? numOfItems : 0;
    this.itemsContainer.style.transform = this.getTranslateX(slideWidth, this.selectedIndex + cloneCount);
    this.autoSlide();
    this.renderTouchActions();
    this.renderKeyboardActions();
  };

  Carousel.prototype.getTranslateX = function (slideWidth, count) {
    if (count === void 0) {
      count = 1;
    }

    return this.enableRtl ? "translateX(" + slideWidth * count + "px)" : "translateX(" + -slideWidth * count + "px)";
  };

  Carousel.prototype.renderSlide = function (item, itemTemplate, index, container, isClone) {
    if (isClone === void 0) {
      isClone = false;
    }

    var itemEle = this.createElement('div', {
      id: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('carousel_item'),
      className: CLS_ITEM + " " + (item.cssClass ? item.cssClass : '') + " " + (this.selectedIndex === index && !isClone ? CLS_ACTIVE : ''),
      attrs: {
        'aria-hidden': this.selectedIndex === index && !isClone ? 'false' : 'true',
        'data-index': index.toString(),
        'role': 'group',
        'aria-roledescription': 'slide'
      }
    });

    if (isClone) {
      itemEle.classList.add(CLS_CLONED);
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.htmlAttributes)) {
      this.setHtmlAttributes(item.htmlAttributes, itemEle);
    }

    var templateId = this.element.id + '_template';
    var template = this.templateParser(itemTemplate)(item, this, 'itemTemplate', templateId, false);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(template, itemEle);
    container.appendChild(itemEle);
  };

  Carousel.prototype.renderNavigators = function () {
    if (this.buttonsVisibility === 'Hidden') {
      return;
    }

    var navigators = this.createElement('div', {
      className: CLS_NAVIGATORS
    });
    var itemsContainer = this.element.querySelector("." + CLS_SLIDE_CONTAINER);
    itemsContainer.insertAdjacentElement('afterend', navigators);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.slideItems) && this.slideItems.length > 1) {
      this.renderNavigatorButton('Previous');
      this.renderNavigatorButton('Next');
    }

    this.renderTemplates();
  };

  Carousel.prototype.renderNavigatorButton = function (direction) {
    var buttonContainer = this.createElement('div', {
      className: (direction === 'Previous' ? CLS_PREVIOUS : CLS_NEXT) + ' ' + (this.buttonsVisibility === 'VisibleOnHover' ? CLS_HOVER_ARROWS : '')
    });

    if (direction === 'Previous' && this.previousButtonTemplate) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([buttonContainer], CLS_TEMPLATE);
      var templateId = this.element.id + '_previousButtonTemplate';
      var template = this.templateParser(this.previousButtonTemplate)({
        type: 'Previous'
      }, this, 'previousButtonTemplate', templateId, false);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(template, buttonContainer);
    } else if (direction === 'Next' && this.nextButtonTemplate) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([buttonContainer], CLS_TEMPLATE);
      var templateId = this.element.id + '_nextButtonTemplate';
      var template = this.templateParser(this.nextButtonTemplate)({
        type: 'Next'
      }, this, 'nextButtonTemplate', templateId, false);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(template, buttonContainer);
    } else {
      var button = this.createElement('button', {
        attrs: {
          'aria-label': this.localeObj.getConstant(direction === 'Previous' ? 'previousSlide' : 'nextSlide'),
          'type': 'button'
        }
      });
      var buttonObj = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__["Button"]({
        cssClass: CLS_FLAT + ' ' + CLS_ROUND + ' ' + (direction === 'Previous' ? CLS_PREV_BUTTON : CLS_NEXT_BUTTON),
        iconCss: CLS_ICON + ' ' + (direction === 'Previous' ? CLS_PREV_ICON : CLS_NEXT_ICON),
        enableRtl: this.enableRtl,
        disabled: !this.loop && this.selectedIndex === (direction === 'Previous' ? 0 : this.slideItems.length - 1)
      });
      buttonObj.appendTo(button);
      buttonContainer.appendChild(button);
    }

    this.element.querySelector('.' + CLS_NAVIGATORS).appendChild(buttonContainer);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(buttonContainer, 'click', this.navigatorClickHandler, this);
  };

  Carousel.prototype.renderPlayButton = function () {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.slideItems) || this.buttonsVisibility === 'Hidden' || !this.showPlayButton || this.slideItems.length <= 1) {
      return;
    }

    var playPauseWrap = this.createElement('div', {
      className: CLS_PLAY_PAUSE + ' ' + (this.buttonsVisibility === 'VisibleOnHover' ? CLS_HOVER_ARROWS : '')
    });

    if (this.playButtonTemplate) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([playPauseWrap], CLS_TEMPLATE);
      var templateId = this.element.id + '_playButtonTemplate';
      var template = this.templateParser(this.playButtonTemplate)({}, this, 'playButtonTemplate', templateId, false);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(template, playPauseWrap);
    } else {
      var playButton = this.createElement('button', {
        attrs: {
          'aria-label': this.localeObj.getConstant(this.autoPlay ? 'pauseSlideTransition' : 'playSlideTransition'),
          'type': 'button'
        }
      });
      var isLastSlide = this.selectedIndex === this.slideItems.length - 1 && !this.loop;
      var buttonObj = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__["Button"]({
        cssClass: CLS_FLAT + ' ' + CLS_ROUND + ' ' + CLS_PLAY_BUTTON,
        iconCss: CLS_ICON + ' ' + (this.autoPlay && !isLastSlide ? CLS_PAUSE_ICON : CLS_PLAY_ICON),
        isToggle: true,
        enableRtl: this.enableRtl
      });

      if (isLastSlide) {
        this.setProperties({
          autoPlay: false
        }, true);
        playButton.setAttribute('aria-label', this.localeObj.getConstant('playSlideTransition'));
        this.itemsContainer.setAttribute('aria-live', 'polite');
      }

      buttonObj.appendTo(playButton);
      playPauseWrap.appendChild(playButton);
    }

    var navigators = this.element.querySelector("." + CLS_NAVIGATORS);
    navigators.insertBefore(playPauseWrap, navigators.lastElementChild);
    this.renderTemplates();
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(playPauseWrap, 'click', this.playButtonClickHandler, this);
  };

  Carousel.prototype.renderIndicators = function () {
    var _this = this;

    if (!this.showIndicators) {
      return;
    }

    var indicatorClass = 'e-default';

    if (!this.indicatorsTemplate) {
      indicatorClass = "e-" + this.indicatorsType.toLowerCase();
    }

    var indicatorWrap = this.createElement('div', {
      className: CLS_INDICATORS + " " + indicatorClass
    });
    var indicatorBars = this.createElement('div', {
      className: CLS_INDICATOR_BARS
    });
    indicatorWrap.appendChild(indicatorBars);
    var progress;

    if (this.slideItems) {
      switch (this.indicatorsType) {
        case 'Fraction':
          if (this.indicatorsTemplate) {
            this.renderIndicatorTemplate(indicatorBars, this.selectedIndex + 1);
          } else {
            indicatorBars.innerText = this.selectedIndex + 1 + " / " + this.slideItems.length;
          }

          break;

        case 'Progress':
          if (this.indicatorsTemplate) {
            this.renderIndicatorTemplate(indicatorBars, this.selectedIndex + 1);
          } else {
            progress = this.createElement('div', {
              className: CLS_INDICATOR_BAR
            });
            progress.style.setProperty('--carousel-items-current', "" + (this.selectedIndex + 1));
            progress.style.setProperty('--carousel-items-count', "" + this.slideItems.length);
            indicatorBars.appendChild(progress);
          }

          break;

        case 'Default':
        case 'Dynamic':
          this.slideItems.forEach(function (item, index) {
            var indicatorBar = _this.createElement('div', {
              className: CLS_INDICATOR_BAR + ' ' + (_this.selectedIndex === index ? CLS_ACTIVE : _this.selectedIndex - 1 === index ? CLS_PREV_SLIDE : _this.selectedIndex + 1 === index ? CLS_NEXT_SLIDE : ''),
              attrs: {
                'data-index': index.toString(),
                'aria-current': _this.selectedIndex === index ? 'true' : 'false'
              }
            });

            indicatorBar.style.setProperty('--carousel-items-current', "" + _this.selectedIndex);

            if (_this.indicatorsTemplate) {
              _this.renderIndicatorTemplate(indicatorBar, index);
            } else if (_this.indicatorsType === 'Default') {
              var indicator = _this.createElement('button', {
                className: CLS_INDICATOR,
                attrs: {
                  'type': 'button',
                  'aria-label': _this.localeObj.getConstant('slide') + ' ' + (index + 1) + ' ' + _this.localeObj.getConstant('of') + ' ' + _this.slideItems.length
                }
              });

              indicatorBar.appendChild(indicator);
              indicator.appendChild(_this.createElement('div', {}));
              var buttonObj = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__["Button"]({
                cssClass: 'e-flat e-small'
              });
              buttonObj.appendTo(indicator);
            }

            indicatorBars.appendChild(indicatorBar);

            if (_this.indicatorsType === 'Default') {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(indicatorBar, 'click', _this.indicatorClickHandler, _this);
            }
          });
          break;
      }
    }

    this.element.appendChild(indicatorWrap);
  };

  Carousel.prototype.renderIndicatorTemplate = function (indicatorBar, index) {
    if (index === void 0) {
      index = 0;
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([indicatorBar], CLS_TEMPLATE);
    var templateId = this.element.id + '_indicatorsTemplate';
    var template = this.templateParser(this.indicatorsTemplate)({
      index: index,
      selectedIndex: this.selectedIndex
    }, this, 'indicatorsTemplate', templateId, false);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(template, indicatorBar);
  };

  Carousel.prototype.renderKeyboardActions = function () {
    this.keyModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.element, {
      keyAction: this.keyHandler.bind(this),
      keyConfigs: this.keyConfigs
    });
  };

  Carousel.prototype.renderTouchActions = function () {
    if (!this.enableTouchSwipe) {
      return;
    }

    this.touchModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.element, {
      swipe: this.swipeHandler.bind(this)
    });
  };

  Carousel.prototype.applyAnimation = function () {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], [CLS_CUSTOM_ANIMATION, CLS_FADE_ANIMATION, CLS_SLIDE_ANIMATION, CLS_ANIMATION_NONE]);

    switch (this.animationEffect) {
      case 'Slide':
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], CLS_SLIDE_ANIMATION);
        break;

      case 'Fade':
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], CLS_FADE_ANIMATION);
        break;

      case 'None':
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], CLS_ANIMATION_NONE);
        break;

      case 'Custom':
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], CLS_CUSTOM_ANIMATION);
        break;
    }
  };

  Carousel.prototype.autoSlide = function () {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.slideItems) || this.slideItems.length <= 1) {
      return;
    }

    this.resetSlideInterval();
    this.applySlideInterval();
  };

  Carousel.prototype.autoSlideChange = function () {
    var activeSlide = this.element.querySelector("." + CLS_ACTIVE);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(activeSlide)) {
      return;
    }

    var activeIndex = parseInt(activeSlide.dataset.index, 10);

    if (!this.loop && activeIndex === this.slideItems.length - 1) {
      this.resetSlideInterval();
    } else {
      var index = (activeIndex + 1) % this.slideItems.length;

      if (!this.element.classList.contains(CLS_HOVER)) {
        this.setActiveSlide(index, 'Next');
      }

      this.autoSlide();
    }
  };

  Carousel.prototype.applySlideInterval = function () {
    var _this = this;

    if (!this.autoPlay || this.element.classList.contains(CLS_HOVER)) {
      return;
    }

    var itemInterval = this.interval;

    if (this.items.length > 0 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.items[this.selectedIndex].interval)) {
      itemInterval = this.items[this.selectedIndex].interval;
    }

    this.autoSlideInterval = setInterval(function () {
      return _this.autoSlideChange();
    }, itemInterval);
  };

  Carousel.prototype.resetSlideInterval = function () {
    clearInterval(this.autoSlideInterval);
    this.autoSlideInterval = null;
  };

  Carousel.prototype.getSlideIndex = function (direction) {
    var currentIndex = this.selectedIndex;

    if (direction === 'Previous') {
      currentIndex--;

      if (currentIndex < 0) {
        currentIndex = this.slideItems.length - 1;
      }
    } else {
      currentIndex++;

      if (currentIndex === this.slideItems.length) {
        currentIndex = 0;
      }
    }

    return currentIndex;
  };

  Carousel.prototype.setActiveSlide = function (currentIndex, direction, isSwiped) {
    var _this = this;

    if (isSwiped === void 0) {
      isSwiped = false;
    }

    if (this.element.querySelectorAll("." + CLS_ITEM + "." + CLS_PREV_SLIDE + ",." + CLS_ITEM + "." + CLS_NEXT_SLIDE).length > 0) {
      return;
    }

    var allSlides = [].slice.call(this.element.querySelectorAll("." + CLS_ITEM + ":not(.e-cloned)"));
    var activeSlide = this.element.querySelector("." + CLS_ITEM + "." + CLS_ACTIVE);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(activeSlide) && this.showIndicators) {
      var activeIndicator = this.element.querySelector("." + CLS_INDICATOR_BAR + "." + CLS_ACTIVE);
      var activeIndex_1 = parseInt(activeIndicator.dataset.index, 10);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([allSlides[parseInt(activeIndex_1.toString(), 10)]], CLS_ACTIVE);
      return;
    } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(activeSlide)) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([allSlides[parseInt(currentIndex.toString(), 10)]], CLS_ACTIVE);
      return;
    }

    var activeIndex = parseInt(activeSlide.dataset.index, 10);
    var currentSlide = allSlides[parseInt(currentIndex.toString(), 10)];
    var eventArgs = {
      currentIndex: activeIndex,
      nextIndex: currentIndex,
      currentSlide: activeSlide,
      nextSlide: currentSlide,
      slideDirection: direction,
      isSwiped: isSwiped,
      cancel: false
    };
    this.trigger('slideChanging', eventArgs, function (args) {
      if (args.cancel) {
        return;
      }

      _this.setProperties({
        selectedIndex: currentIndex
      }, true);

      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(args.currentSlide, {
        'aria-hidden': 'true'
      });
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(args.nextSlide, {
        'aria-hidden': 'false'
      });

      _this.refreshIndicators(activeIndex, currentIndex);

      _this.slideChangedEventArgs = {
        currentIndex: args.nextIndex,
        previousIndex: args.currentIndex,
        currentSlide: args.nextSlide,
        previousSlide: args.currentSlide,
        slideDirection: direction,
        isSwiped: isSwiped
      };
      var slideWidth = allSlides[parseInt(currentIndex.toString(), 10)].clientWidth;

      var numOfItems = _this.getNumOfItems();

      if (!_this.isSwipe) {
        _this.itemsContainer.style.transitionDuration = '0.6s';
      }

      _this.isSwipe = false;

      if (_this.animationEffect === 'Fade') {
        _this.itemsContainer.classList.add('e-fade-in-out');
      } else {
        _this.itemsContainer.style.transitionProperty = 'transform';
      }

      if (_this.loop) {
        if (_this.slideChangedEventArgs.currentIndex === 0 && _this.slideChangedEventArgs.slideDirection === 'Next') {
          _this.itemsContainer.style.transform = _this.getTranslateX(slideWidth, allSlides.length + numOfItems);
        } else if (_this.slideChangedEventArgs.currentIndex === _this.slideItems.length - 1 && _this.slideChangedEventArgs.slideDirection === 'Previous') {
          _this.itemsContainer.style.transform = _this.partialVisible ? _this.getTranslateX(slideWidth) : 'translateX(0px)';
        } else {
          _this.itemsContainer.style.transform = _this.getTranslateX(slideWidth, currentIndex + numOfItems);
        }
      } else {
        _this.itemsContainer.style.transform = _this.getTranslateX(slideWidth, currentIndex);
      }

      if (_this.animationEffect === 'Slide') {
        if (direction === 'Previous') {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([args.nextSlide], CLS_PREV_SLIDE);
          args.nextSlide.setAttribute('data-slide-height', args.nextSlide.offsetHeight.toString());
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([args.currentSlide, args.nextSlide], CLS_TRANSITION_END);
        } else {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([args.nextSlide], CLS_NEXT_SLIDE);
          args.nextSlide.setAttribute('data-slide-height', args.nextSlide.offsetHeight.toString());
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([args.currentSlide, args.nextSlide], CLS_TRANSITION_START);
        }
      } else if (_this.animationEffect === 'Fade') {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([args.currentSlide], CLS_ACTIVE);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([args.nextSlide], CLS_ACTIVE);
      } else if (_this.animationEffect === 'Custom') {
        if (direction === 'Previous') {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([args.nextSlide], CLS_NEXT_SLIDE);
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([args.currentSlide], CLS_PREV_SLIDE);
        } else {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([args.currentSlide], CLS_PREV_SLIDE);
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([args.nextSlide], CLS_NEXT_SLIDE);
        }
      } else {
        _this.onTransitionEnd();
      }

      _this.handleNavigatorsActions(currentIndex);
    });
  };

  Carousel.prototype.onTransitionEnd = function () {
    var _this = this;

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(this.element.querySelectorAll("." + CLS_ITEMS), 'e-fade-in-out');
    var numOfItems = this.getNumOfItems();

    if (this.slideChangedEventArgs) {
      this.itemsContainer.style.transitionProperty = 'none';

      if (this.loop && (this.slideChangedEventArgs.currentIndex === 0 && this.slideChangedEventArgs.slideDirection === 'Next' || this.slideChangedEventArgs.currentIndex === this.slideItems.length - 1 && this.slideChangedEventArgs.slideDirection === 'Previous')) {
        var slideWidth = this.slideChangedEventArgs.currentSlide.clientWidth;
        this.itemsContainer.style.transform = this.getTranslateX(slideWidth, this.slideChangedEventArgs.currentIndex + numOfItems);
      }

      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.slideChangedEventArgs.currentSlide], CLS_ACTIVE);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.slideChangedEventArgs.previousSlide], CLS_ACTIVE);
      this.trigger('slideChanged', this.slideChangedEventArgs, function () {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(_this.element.querySelectorAll("." + CLS_ITEM), [CLS_PREV_SLIDE, CLS_NEXT_SLIDE, CLS_TRANSITION_START, CLS_TRANSITION_END]);
        _this.slideChangedEventArgs = null;
      });
    }
  };

  Carousel.prototype.refreshIndicators = function (activeIndex, currentIndex) {
    var _this = this;

    var slideIndicator = this.element.querySelector("." + CLS_INDICATOR_BARS);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(slideIndicator)) {
      return;
    }

    var indicators = [].slice.call(slideIndicator.childNodes);

    switch (this.indicatorsType) {
      case 'Default':
      case 'Dynamic':
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(indicators[parseInt(activeIndex.toString(), 10)], {
          'aria-current': 'false'
        });
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(indicators[parseInt(currentIndex.toString(), 10)], {
          'aria-current': 'true'
        });
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(indicators, [CLS_ACTIVE, CLS_PREV_SLIDE, CLS_NEXT_SLIDE]);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([indicators[parseInt(currentIndex.toString(), 10)]], CLS_ACTIVE);

        if (indicators[currentIndex - 1]) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([indicators[currentIndex - 1]], CLS_PREV_SLIDE);
        }

        if (indicators[currentIndex + 1]) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([indicators[currentIndex + 1]], CLS_NEXT_SLIDE);
        }

        indicators.forEach(function (item) {
          return item.style.setProperty('--carousel-items-current', "" + _this.selectedIndex);
        });
        break;

      case 'Fraction':
        if (this.indicatorsTemplate) {
          if (slideIndicator.children.length > 0) {
            slideIndicator.removeChild(slideIndicator.firstElementChild);
          }

          this.renderIndicatorTemplate(slideIndicator, currentIndex + 1);
        } else {
          slideIndicator.innerText = this.selectedIndex + 1 + " / " + this.slideItems.length;
        }

        break;

      case 'Progress':
        if (this.indicatorsTemplate) {
          if (slideIndicator.children.length > 0) {
            slideIndicator.removeChild(slideIndicator.firstElementChild);
          }

          this.renderIndicatorTemplate(slideIndicator, currentIndex + 1);
        } else {
          slideIndicator.firstElementChild.style.setProperty('--carousel-items-current', "" + (this.selectedIndex + 1));
        }

        break;
    }
  };

  Carousel.prototype.setHtmlAttributes = function (attribute, element) {
    var keys = Object.keys(attribute);

    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
      var key = keys_1[_i];

      if (key === 'class') {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([element], attribute["" + key]);
      } else {
        element.setAttribute(key, attribute["" + key]);
      }
    }
  };

  Carousel.prototype.templateParser = function (template) {
    if (template) {
      try {
        if (typeof template !== 'function' && document.querySelectorAll(template).length) {
          return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(document.querySelector(template).innerHTML.trim());
        } else {
          return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(template);
        }
      } catch (error) {
        return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(template);
      }
    }

    return undefined;
  };

  Carousel.prototype.getNavigatorState = function (target, isPrevious) {
    var button = target.querySelector("." + (isPrevious ? CLS_PREV_BUTTON : CLS_NEXT_BUTTON));

    if (button) {
      var buttonObj = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(button, _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__["Button"]);
      return buttonObj.disabled;
    }

    return false;
  };

  Carousel.prototype.navigatorClickHandler = function (e) {
    var target = e.currentTarget;
    var isDisabled = this.getNavigatorState(target, target.classList.contains(CLS_PREVIOUS));

    if (isDisabled) {
      return;
    }

    var direction = target.classList.contains(CLS_PREVIOUS) ? 'Previous' : 'Next';
    this.setActiveSlide(this.getSlideIndex(direction), direction);
    this.autoSlide();
  };

  Carousel.prototype.indicatorClickHandler = function (e) {
    var target = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, "." + CLS_INDICATOR_BAR);
    var index = parseInt(target.dataset.index, 10);

    if (this.selectedIndex !== index) {
      this.setActiveSlide(index, this.selectedIndex > index ? 'Previous' : 'Next');
      this.autoSlide();
    }
  };

  Carousel.prototype.playButtonClickHandler = function (e, isPropertyChange) {
    if (isPropertyChange === void 0) {
      isPropertyChange = false;
    }

    var playButton = this.element.querySelector("." + CLS_PLAY_BUTTON);

    if (playButton) {
      var buttonObj = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(playButton, _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__["Button"]);

      if (!isPropertyChange) {
        this.setProperties({
          autoPlay: !this.autoPlay
        }, true);
      }

      playButton.setAttribute('aria-label', this.localeObj.getConstant(this.autoPlay ? 'pauseSlideTransition' : 'playSlideTransition'));
      buttonObj.iconCss = CLS_ICON + ' ' + (this.autoPlay ? CLS_PAUSE_ICON : CLS_PLAY_ICON);
      buttonObj.dataBind();
      this.itemsContainer.setAttribute('aria-live', this.autoPlay ? 'off' : 'polite');

      if (this.autoPlay && !this.loop && this.selectedIndex === this.slideItems.length - 1) {
        this.setActiveSlide(0, 'Next');
      }

      this.autoSlide();
    }
  };

  Carousel.prototype.keyHandler = function (e) {
    var direction;
    var slideIndex;
    var isSlideTransition = false;
    var target = e.target;
    e.preventDefault();

    switch (e.action) {
      case 'space':
        if (this.showIndicators && target.classList.contains(CLS_INDICATOR)) {
          target.click();
        } else if (target.classList.contains(CLS_CAROUSEL) || target.classList.contains(CLS_PLAY_BUTTON)) {
          this.playButtonClickHandler(e);
        } else if (target.classList.contains(CLS_NEXT_BUTTON)) {
          this.next();
        } else if (target.classList.contains(CLS_PREV_BUTTON)) {
          this.prev();
        }

        break;

      case 'end':
        slideIndex = this.slideItems.length - 1;
        direction = 'Next';
        isSlideTransition = true;
        break;

      case 'home':
        slideIndex = 0;
        direction = 'Previous';
        isSlideTransition = true;
        break;

      case 'moveUp':
      case 'moveLeft':
      case 'moveDown':
      case 'moveRight':
        if (this.showIndicators && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.indicatorsTemplate)) {
          this.element.focus();
        }

        direction = e.action === 'moveUp' || e.action === 'moveLeft' ? 'Previous' : 'Next';
        slideIndex = this.getSlideIndex(direction);
        isSlideTransition = !this.isSuspendSlideTransition(slideIndex, direction);
        break;
    }

    if (isSlideTransition) {
      this.setActiveSlide(slideIndex, direction);
      this.autoSlide();
      isSlideTransition = false;
    }
  };

  Carousel.prototype.swipeHandler = function (e) {
    if (this.element.classList.contains(CLS_HOVER) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.slideItems) || this.slideItems.length <= 1) {
      return;
    }

    var direction = e.swipeDirection === 'Right' ? 'Previous' : 'Next';
    var slideIndex = this.getSlideIndex(direction);

    if (!this.isSuspendSlideTransition(slideIndex, direction)) {
      this.setActiveSlide(slideIndex, direction, true);
      this.autoSlide();
    }
  };

  Carousel.prototype.isSuspendSlideTransition = function (index, direction) {
    return !this.loop && (direction === 'Next' && index === 0 || direction === 'Previous' && index === this.slideItems.length - 1);
  };

  Carousel.prototype.handleNavigatorsActions = function (index) {
    if (this.buttonsVisibility === 'Hidden') {
      return;
    }

    if (this.showPlayButton) {
      var playButton = this.element.querySelector("." + CLS_PLAY_BUTTON);
      var isLastSlide = this.selectedIndex === this.slideItems.length - 1 && !this.loop;
      var isButtonUpdate = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.playButtonTemplate) && playButton && isLastSlide;

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.playButtonTemplate) && playButton && !isLastSlide) {
        isButtonUpdate = !playButton.classList.contains(CLS_ACTIVE);
      }

      if (isButtonUpdate) {
        this.setProperties({
          autoPlay: !isLastSlide
        }, true);
        playButton.setAttribute('aria-label', this.localeObj.getConstant(this.autoPlay ? 'pauseSlideTransition' : 'playSlideTransition'));
        this.itemsContainer.setAttribute('aria-live', this.autoPlay ? 'off' : 'polite');
        var buttonObj = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(playButton, _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__["Button"]);
        buttonObj.iconCss = CLS_ICON + ' ' + (this.autoPlay ? CLS_PAUSE_ICON : CLS_PLAY_ICON);
        buttonObj.dataBind();
      }
    }

    var prevButton = this.element.querySelector("." + CLS_PREV_BUTTON);

    if (prevButton && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.previousButtonTemplate)) {
      var buttonObj = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(prevButton, _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__["Button"]);
      buttonObj.disabled = !this.loop && index === 0;
      buttonObj.dataBind();
    }

    var nextButton = this.element.querySelector("." + CLS_NEXT_BUTTON);

    if (nextButton && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.nextButtonTemplate)) {
      var buttonObj = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(nextButton, _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__["Button"]);
      buttonObj.disabled = !this.loop && index === this.slideItems.length - 1;
      buttonObj.dataBind();
    }
  };

  Carousel.prototype.onHoverActions = function (e) {
    var navigator = this.element.querySelector("." + CLS_NAVIGATORS);

    switch (e.type) {
      case 'mouseenter':
        if (this.buttonsVisibility === 'VisibleOnHover' && navigator) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([].slice.call(navigator.childNodes), CLS_HOVER_ARROWS);
        }

        if (this.pauseOnHover) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], CLS_HOVER);
        }

        break;

      case 'mouseleave':
        if (this.buttonsVisibility === 'VisibleOnHover' && navigator) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([].slice.call(navigator.childNodes), CLS_HOVER_ARROWS);
        }

        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], CLS_HOVER);
        break;
    }

    this.autoSlide();
  };

  Carousel.prototype.onFocusActions = function (e) {
    switch (e.type) {
      case 'focusin':
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], CLS_HOVER);
        break;

      case 'focusout':
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], CLS_HOVER);
        break;
    }

    this.autoSlide();
  };

  Carousel.prototype.destroyButtons = function () {
    var buttonCollections = [].slice.call(this.element.querySelectorAll('.e-control.e-btn'));

    for (var _i = 0, buttonCollections_1 = buttonCollections; _i < buttonCollections_1.length; _i++) {
      var button = buttonCollections_1[_i];
      var instance = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(button, _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__["Button"]);

      if (instance) {
        instance.destroy();
      }
    }
  };

  Carousel.prototype.getNumOfItems = function () {
    return this.partialVisible ? 2 : 1;
  };

  Carousel.prototype.getTranslateValue = function (element) {
    var style = getComputedStyle(element);
    return window.WebKitCSSMatrix ? new WebKitCSSMatrix(style.webkitTransform).m41 : 0;
  };

  Carousel.prototype.swipeStart = function (e) {
    if (!this.timeStampStart) {
      this.timeStampStart = Date.now();
    }

    this.isSwipe = false;
    this.itemsContainer.classList.add('e-swipe-start');
    this.prevPageX = e.touches ? e.touches[0].pageX : e.pageX;
    this.initialTranslate = this.getTranslateValue(this.itemsContainer);
  };

  Carousel.prototype.swiping = function (e) {
    if (!this.itemsContainer.classList.contains('e-swipe-start')) {
      return;
    }

    e.preventDefault();
    var pageX = e.touches ? e.touches[0].pageX : e.pageX;
    var positionDiff = this.prevPageX - pageX;

    if (!this.loop && (this.enableRtl && (this.selectedIndex === 0 && positionDiff > 0 || this.selectedIndex === this.itemsContainer.childElementCount - 1 && positionDiff < 0) || !this.enableRtl && (this.selectedIndex === 0 && positionDiff < 0 || this.selectedIndex === this.itemsContainer.childElementCount - 1 && positionDiff > 0))) {
      return;
    }

    this.itemsContainer.style.transform = "translateX(" + (this.initialTranslate + (this.enableRtl ? positionDiff : -positionDiff)) + "px)";
  };

  Carousel.prototype.swipStop = function () {
    this.isSwipe = true;
    var time = Date.now() - this.timeStampStart;
    var distanceX = this.getTranslateValue(this.itemsContainer) - this.initialTranslate;
    distanceX = distanceX < 0 ? distanceX * -1 : distanceX;

    if (this.isSwipe) {
      var offsetDist = distanceX * (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice ? 6 : 1.66);
      this.itemsContainer.style.transitionDuration = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice ? distanceX : offsetDist) / time / 10 + 's';
    }

    var slideWidth = this.itemsContainer.firstElementChild.clientWidth;
    var threshold = slideWidth / 2;
    this.itemsContainer.classList.remove('e-swipe-start');
    var value = this.getTranslateValue(this.itemsContainer);

    if (value - this.initialTranslate < -threshold) {
      this.swipeNavigation(!this.enableRtl);
    } else if (value - this.initialTranslate > threshold) {
      this.swipeNavigation(this.enableRtl);
    } else {
      this.itemsContainer.style.transform = "translateX(" + this.initialTranslate + "px)";

      if (this.animationEffect === 'Fade') {
        this.itemsContainer.classList.add('e-fade-in-out');
      }
    }
  };

  Carousel.prototype.swipeNavigation = function (isRtl) {
    if (isRtl) {
      this.next();
    } else {
      this.prev();
    }
  };

  Carousel.prototype.swipeModehandlers = function () {
    if ((this.swipeMode & CarouselSwipeMode.Touch) === CarouselSwipeMode.Touch) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.itemsContainer, 'touchstart', this.swipeStart, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.itemsContainer, 'touchmove', this.swiping, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.itemsContainer, 'touchend', this.swipStop, this);
    }

    if ((this.swipeMode & CarouselSwipeMode.Mouse) === CarouselSwipeMode.Mouse) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.itemsContainer, 'mousedown', this.swipeStart, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.itemsContainer, 'mousemove', this.swiping, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.itemsContainer, 'mouseup', this.swipStop, this);
    }

    if (this.swipeMode === 0 && (this.swipeMode & CarouselSwipeMode.Mouse & CarouselSwipeMode.Touch) === (CarouselSwipeMode.Mouse & CarouselSwipeMode.Touch)) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.itemsContainer, 'mousedown touchstart', this.swipeStart, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.itemsContainer, 'mousemove touchmove', this.swiping, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.itemsContainer, 'mouseup touchend', this.swipStop, this);
    }
  };

  Carousel.prototype.resizeHandler = function () {
    if (this.itemsContainer && this.itemsContainer.firstElementChild) {
      var numOfItems = this.getNumOfItems();
      var slideWidth = this.itemsContainer.firstElementChild.clientWidth;
      this.itemsContainer.style.transform = this.getTranslateX(slideWidth, this.selectedIndex + numOfItems);
    }
  };

  Carousel.prototype.wireEvents = function () {
    if (!(this.animationEffect === 'Custom')) {
      this.swipeModehandlers();
    }

    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'focusin focusout', this.onFocusActions, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'mouseenter mouseleave', this.onHoverActions, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element.firstElementChild, 'animationend', this.onTransitionEnd, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element.firstElementChild, 'transitionend', this.onTransitionEnd, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(window, 'resize', this.resizeHandler, this);
  };

  Carousel.prototype.unWireEvents = function () {
    var _this = this;

    var indicators = [].slice.call(this.element.querySelectorAll("." + CLS_INDICATOR_BAR));
    indicators.forEach(function (indicator) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(indicator, 'click', _this.indicatorClickHandler);
    });
    var navigators = [].slice.call(this.element.querySelectorAll("." + CLS_PREVIOUS + ",." + CLS_NEXT));
    navigators.forEach(function (navigator) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(navigator, 'click', _this.navigatorClickHandler);
    });
    var playIcon = this.element.querySelector("." + CLS_PLAY_PAUSE);

    if (playIcon) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(playIcon, 'click', this.playButtonClickHandler);
    }

    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element.firstElementChild, 'animationend', this.onTransitionEnd);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element.firstElementChild, 'transitionend', this.onTransitionEnd);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].clearEvents(this.element);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].clearEvents(this.itemsContainer);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(window, 'resize', this.resizeHandler);
  };
  /**
   * Method to transit from the current slide to the previous slide.
   *
   * @returns {void}
   */


  Carousel.prototype.prev = function () {
    if (!this.loop && this.selectedIndex === 0) {
      return;
    }

    var index = this.selectedIndex === 0 ? this.slideItems.length - 1 : this.selectedIndex - 1;
    this.setActiveSlide(index, 'Previous');
    this.autoSlide();
  };
  /**
   * Method to transit from the current slide to the next slide.
   *
   * @returns {void}
   */


  Carousel.prototype.next = function () {
    if (!this.loop && this.selectedIndex === this.slideItems.length - 1) {
      return;
    }

    var index = this.selectedIndex === this.slideItems.length - 1 ? 0 : this.selectedIndex + 1;
    this.setActiveSlide(index, 'Next');
    this.autoSlide();
  };
  /**
   * Method to play the slides programmatically.
   *
   * @returns {void}
   */


  Carousel.prototype.play = function () {
    var playIcon = this.element.querySelector("." + CLS_PLAY_ICON);

    if (this.showPlayButton && playIcon) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(playIcon, [CLS_PAUSE_ICON], [CLS_PLAY_ICON]);
      var playButton = this.element.querySelector("." + CLS_PLAY_BUTTON);
      playButton.setAttribute('aria-label', this.localeObj.getConstant('pauseSlideTransition'));
    }

    this.setProperties({
      autoPlay: true
    }, true);
    this.itemsContainer.setAttribute('aria-live', 'off');
    this.applySlideInterval();
  };
  /**
   * Method to pause the slides programmatically.
   *
   * @returns {void}
   */


  Carousel.prototype.pause = function () {
    var pauseIcon = this.element.querySelector("." + CLS_PAUSE_ICON);

    if (this.showPlayButton && pauseIcon) {
      var playButton = this.element.querySelector("." + CLS_PLAY_BUTTON);
      playButton.setAttribute('aria-label', this.localeObj.getConstant('playSlideTransition'));
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(pauseIcon, [CLS_PLAY_ICON], [CLS_PAUSE_ICON]);
    }

    this.setProperties({
      autoPlay: false
    }, true);
    this.itemsContainer.setAttribute('aria-live', 'off');
    this.resetSlideInterval();
  };
  /**
   * Method to render react and angular templates
   *
   * @returns {void}
   * @private
   */


  Carousel.prototype.renderTemplates = function () {
    if (this.isAngular || this.isReact) {
      this.renderReactTemplates();
    }
  };
  /**
   * Method to reset react and angular templates
   *
   * @param {string[]} templates Accepts the template ID
   * @returns {void}
   * @private
   */


  Carousel.prototype.resetTemplates = function (templates) {
    if (this.isAngular || this.isReact) {
      this.clearTemplate(templates);
    }
  };
  /**
   * Method for destroy the carousel component.
   *
   * @returns {void}
   */


  Carousel.prototype.destroy = function () {
    var _this = this;

    this.resetTemplates();

    if (this.touchModule) {
      this.touchModule.destroy();
      this.touchModule = null;
    }

    this.keyModule.destroy();
    this.keyModule = null;
    this.resetSlideInterval();
    this.destroyButtons();
    this.unWireEvents();
    [].slice.call(this.element.children).forEach(function (ele) {
      _this.element.removeChild(ele);
    });
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], [CLS_CAROUSEL, this.cssClass, CLS_RTL, CLS_SWIPE]);
    ['tabindex', 'role', 'style'].forEach(function (attr) {
      _this.element.removeAttribute(attr);
    });
    this.itemsContainer = null;

    _super.prototype.destroy.call(this);
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([], CarouselItem)], Carousel.prototype, "items", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Slide')], Carousel.prototype, "animationEffect", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Carousel.prototype, "previousButtonTemplate", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Carousel.prototype, "nextButtonTemplate", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Carousel.prototype, "indicatorsTemplate", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Carousel.prototype, "playButtonTemplate", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Carousel.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])([])], Carousel.prototype, "dataSource", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Carousel.prototype, "itemTemplate", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], Carousel.prototype, "selectedIndex", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('100%')], Carousel.prototype, "width", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('100%')], Carousel.prototype, "height", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(5000)], Carousel.prototype, "interval", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Carousel.prototype, "autoPlay", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Carousel.prototype, "pauseOnHover", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Carousel.prototype, "loop", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Carousel.prototype, "showPlayButton", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Carousel.prototype, "enableTouchSwipe", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Carousel.prototype, "showIndicators", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Default')], Carousel.prototype, "indicatorsType", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Visible')], Carousel.prototype, "buttonsVisibility", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Carousel.prototype, "partialVisible", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(CarouselSwipeMode.Touch)], Carousel.prototype, "swipeMode", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Carousel.prototype, "htmlAttributes", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Carousel.prototype, "slideChanging", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Carousel.prototype, "slideChanged", void 0);

  Carousel = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Carousel);
  return Carousel;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/carousel/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/carousel/index.js ***!
  \************************************************************************/
/*! exports provided: CarouselSwipeMode, CarouselItem, Carousel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _carousel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./carousel */ "./node_modules/@syncfusion/ej2-navigations/src/carousel/carousel.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CarouselSwipeMode", function() { return _carousel__WEBPACK_IMPORTED_MODULE_0__["CarouselSwipeMode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CarouselItem", function() { return _carousel__WEBPACK_IMPORTED_MODULE_0__["CarouselItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Carousel", function() { return _carousel__WEBPACK_IMPORTED_MODULE_0__["Carousel"]; });

/** Carousel export modules */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/common/h-scroll.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/common/h-scroll.js ***!
  \*************************************************************************/
/*! exports provided: HScroll */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HScroll", function() { return HScroll; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};




var CLS_ROOT = 'e-hscroll';
var CLS_RTL = 'e-rtl';
var CLS_DISABLE = 'e-overlay';
var CLS_HSCROLLBAR = 'e-hscroll-bar';
var CLS_HSCROLLCON = 'e-hscroll-content';
var CLS_NAVARROW = 'e-nav-arrow';
var CLS_NAVRIGHTARROW = 'e-nav-right-arrow';
var CLS_NAVLEFTARROW = 'e-nav-left-arrow';
var CLS_HSCROLLNAV = 'e-scroll-nav';
var CLS_HSCROLLNAVRIGHT = 'e-scroll-right-nav';
var CLS_HSCROLLNAVLEFT = 'e-scroll-left-nav';
var CLS_DEVICE = 'e-scroll-device';
var CLS_OVERLAY = 'e-scroll-overlay';
var CLS_RIGHTOVERLAY = 'e-scroll-right-overlay';
var CLS_LEFTOVERLAY = 'e-scroll-left-overlay';
var OVERLAY_MAXWID = 40;
/**
 * HScroll module is introduces horizontal scroller when content exceeds the current viewing area.
 * It can be useful for the components like Toolbar, Tab which needs horizontal scrolling alone.
 * Hidden content can be view by touch moving or icon click.
 * ```html
 * <div id="scroll"/>
 * <script>
 *   var scrollObj = new HScroll();
 *   scrollObj.appendTo("#scroll");
 * </script>
 * ```
 */

var HScroll =
/** @class */
function (_super) {
  __extends(HScroll, _super);
  /**
   * Initializes a new instance of the HScroll class.
   *
   * @param {HScrollModel} options  - Specifies HScroll model properties as options.
   * @param {string | HTMLElement} element  - Specifies the element for which horizontal scrolling applies.
   */


  function HScroll(options, element) {
    return _super.call(this, options, element) || this;
  }
  /**
   * Initialize the event handler
   *
   * @private
   * @returns {void}
   */


  HScroll.prototype.preRender = function () {
    this.browser = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name;
    this.browserCheck = this.browser === 'mozilla';
    this.isDevice = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice;
    this.customStep = true;
    var element = this.element;
    this.ieCheck = this.browser === 'edge' || this.browser === 'msie';
    this.initialize();

    if (element.id === '') {
      element.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('hscroll');
      this.uniqueId = true;
    }

    element.style.display = 'block';

    if (this.enableRtl) {
      element.classList.add(CLS_RTL);
    }
  };
  /**
   * To Initialize the horizontal scroll  rendering
   *
   * @private
   * @returns {void}
   */


  HScroll.prototype.render = function () {
    this.touchModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.element, {
      scroll: this.touchHandler.bind(this),
      swipe: this.swipeHandler.bind(this)
    });
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.scrollEle, 'scroll', this.scrollHandler, this);

    if (!this.isDevice) {
      this.createNavIcon(this.element);
    } else {
      this.element.classList.add(CLS_DEVICE);
      this.createOverlay(this.element);
    }

    this.setScrollState();
  };

  HScroll.prototype.setScrollState = function () {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.scrollStep) || this.scrollStep < 0) {
      this.scrollStep = this.scrollEle.offsetWidth;
      this.customStep = false;
    } else {
      this.customStep = true;
    }
  };

  HScroll.prototype.initialize = function () {
    var scrollEle = this.createElement('div', {
      className: CLS_HSCROLLCON
    });
    var scrollDiv = this.createElement('div', {
      className: CLS_HSCROLLBAR
    });
    scrollDiv.setAttribute('tabindex', '-1');
    var ele = this.element;
    var innerEle = [].slice.call(ele.children);

    for (var _i = 0, innerEle_1 = innerEle; _i < innerEle_1.length; _i++) {
      var ele_1 = innerEle_1[_i];
      scrollEle.appendChild(ele_1);
    }

    scrollDiv.appendChild(scrollEle);
    ele.appendChild(scrollDiv);
    scrollDiv.style.overflowX = 'hidden';
    this.scrollEle = scrollDiv;
    this.scrollItems = scrollEle;
  };

  HScroll.prototype.getPersistData = function () {
    var keyEntity = ['scrollStep'];
    return this.addOnPersist(keyEntity);
  };
  /**
   * Returns the current module name.
   *
   * @returns {string} - It returns the current module name.
   * @private
   */


  HScroll.prototype.getModuleName = function () {
    return 'hScroll';
  };
  /**
   * Removes the control from the DOM and also removes all its related events.
   *
   * @returns {void}
   */


  HScroll.prototype.destroy = function () {
    var ele = this.element;
    ele.style.display = '';
    ele.classList.remove(CLS_ROOT);
    ele.classList.remove(CLS_DEVICE);
    ele.classList.remove(CLS_RTL);
    var nav = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.e-' + ele.id + '_nav.' + CLS_HSCROLLNAV, ele);
    var overlay = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_OVERLAY, ele);
    [].slice.call(overlay).forEach(function (ele) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(ele);
    });

    for (var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++) {
      var elem = _a[_i];
      ele.appendChild(elem);
    }

    if (this.uniqueId) {
      this.element.removeAttribute('id');
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.scrollEle);

    if (nav.length > 0) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(nav[0]);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nav[1])) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(nav[1]);
      }
    }

    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.scrollEle, 'scroll', this.scrollHandler);
    this.touchModule.destroy();
    this.touchModule = null;

    _super.prototype.destroy.call(this);
  };
  /**
   * Specifies the value to disable/enable the HScroll component.
   * When set to `true` , the component will be disabled.
   *
   * @param  {boolean} value - Based on this Boolean value, HScroll will be enabled (false) or disabled (true).
   * @returns {void}.
   */


  HScroll.prototype.disable = function (value) {
    var navEles = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.e-scroll-nav:not(.' + CLS_DISABLE + ')', this.element);

    if (value) {
      this.element.classList.add(CLS_DISABLE);
    } else {
      this.element.classList.remove(CLS_DISABLE);
    }

    [].slice.call(navEles).forEach(function (el) {
      el.setAttribute('tabindex', !value ? '0' : '-1');
    });
  };

  HScroll.prototype.createOverlay = function (element) {
    var id = element.id.concat('_nav');
    var rightOverlayEle = this.createElement('div', {
      className: CLS_OVERLAY + ' ' + CLS_RIGHTOVERLAY
    });
    var clsRight = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVRIGHT);
    var rightEle = this.createElement('div', {
      id: id.concat('_right'),
      className: clsRight
    });
    var navItem = this.createElement('div', {
      className: CLS_NAVRIGHTARROW + ' ' + CLS_NAVARROW + ' e-icons'
    });
    rightEle.appendChild(navItem);
    var leftEle = this.createElement('div', {
      className: CLS_OVERLAY + ' ' + CLS_LEFTOVERLAY
    });

    if (this.ieCheck) {
      rightEle.classList.add('e-ie-align');
    }

    element.appendChild(rightOverlayEle);
    element.appendChild(rightEle);
    element.insertBefore(leftEle, element.firstChild);
    this.eventBinding([rightEle]);
  };

  HScroll.prototype.createNavIcon = function (element) {
    var id = element.id.concat('_nav');
    var clsRight = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVRIGHT);
    var rightAttributes = {
      'role': 'button',
      'id': id.concat('_right'),
      'aria-label': 'Scroll right'
    };
    var nav = this.createElement('div', {
      className: clsRight,
      attrs: rightAttributes
    });
    nav.setAttribute('aria-disabled', 'false');
    var navItem = this.createElement('div', {
      className: CLS_NAVRIGHTARROW + ' ' + CLS_NAVARROW + ' e-icons'
    });
    var clsLeft = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVLEFT);
    var leftAttributes = {
      'role': 'button',
      'id': id.concat('_left'),
      'aria-label': 'Scroll left'
    };
    var navEle = this.createElement('div', {
      className: clsLeft + ' ' + CLS_DISABLE,
      attrs: leftAttributes
    });
    navEle.setAttribute('aria-disabled', 'true');
    var navLeftItem = this.createElement('div', {
      className: CLS_NAVLEFTARROW + ' ' + CLS_NAVARROW + ' e-icons'
    });
    navEle.appendChild(navLeftItem);
    nav.appendChild(navItem);
    element.appendChild(nav);
    element.insertBefore(navEle, element.firstChild);

    if (this.ieCheck) {
      nav.classList.add('e-ie-align');
      navEle.classList.add('e-ie-align');
    }

    this.eventBinding([nav, navEle]);
  };

  HScroll.prototype.onKeyPress = function (e) {
    var _this = this;

    if (e.key === 'Enter') {
      var timeoutFun_1 = function () {
        _this.keyTimeout = true;

        _this.eleScrolling(10, e.target, true);
      };

      this.keyTimer = window.setTimeout(function () {
        timeoutFun_1();
      }, 100);
    }
  };

  HScroll.prototype.onKeyUp = function (e) {
    if (e.key !== 'Enter') {
      return;
    }

    if (this.keyTimeout) {
      this.keyTimeout = false;
    } else {
      e.target.click();
    }

    clearTimeout(this.keyTimer);
  };

  HScroll.prototype.eventBinding = function (ele) {
    var _this = this;

    [].slice.call(ele).forEach(function (el) {
      new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](el, {
        tapHold: _this.tabHoldHandler.bind(_this),
        tapHoldThreshold: 500
      });
      el.addEventListener('keydown', _this.onKeyPress.bind(_this));
      el.addEventListener('keyup', _this.onKeyUp.bind(_this));
      el.addEventListener('mouseup', _this.repeatScroll.bind(_this));
      el.addEventListener('touchend', _this.repeatScroll.bind(_this));
      el.addEventListener('contextmenu', function (e) {
        e.preventDefault();
      });
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(el, 'click', _this.clickEventHandler, _this);
    });
  };

  HScroll.prototype.repeatScroll = function () {
    clearInterval(this.timeout);
  };

  HScroll.prototype.tabHoldHandler = function (e) {
    var _this = this;

    var trgt = e.originalEvent.target;
    trgt = this.contains(trgt, CLS_HSCROLLNAV) ? trgt.firstElementChild : trgt;
    var scrollDis = 10;

    var timeoutFun = function () {
      _this.eleScrolling(scrollDis, trgt, true);
    };

    this.timeout = window.setInterval(function () {
      timeoutFun();
    }, 50);
  };

  HScroll.prototype.contains = function (ele, className) {
    return ele.classList.contains(className);
  };

  HScroll.prototype.eleScrolling = function (scrollDis, trgt, isContinuous) {
    var rootEle = this.element;
    var classList = trgt.classList;

    if (classList.contains(CLS_HSCROLLNAV)) {
      classList = trgt.querySelector('.' + CLS_NAVARROW).classList;
    }

    if (this.contains(rootEle, CLS_RTL) && this.browserCheck) {
      scrollDis = -scrollDis;
    }

    if (!this.contains(rootEle, CLS_RTL) || this.browserCheck || this.ieCheck) {
      if (classList.contains(CLS_NAVRIGHTARROW)) {
        this.frameScrollRequest(scrollDis, 'add', isContinuous);
      } else {
        this.frameScrollRequest(scrollDis, '', isContinuous);
      }
    } else {
      if (classList.contains(CLS_NAVLEFTARROW)) {
        this.frameScrollRequest(scrollDis, 'add', isContinuous);
      } else {
        this.frameScrollRequest(scrollDis, '', isContinuous);
      }
    }
  };

  HScroll.prototype.clickEventHandler = function (e) {
    this.eleScrolling(this.scrollStep, e.target, false);
  };

  HScroll.prototype.swipeHandler = function (e) {
    var swipeEle = this.scrollEle;
    var distance;

    if (e.velocity <= 1) {
      distance = e.distanceX / (e.velocity * 10);
    } else {
      distance = e.distanceX / e.velocity;
    }

    var start = 0.5;

    var animate = function () {
      var step = Math.sin(start);

      if (step <= 0) {
        window.cancelAnimationFrame(step);
      } else {
        if (e.swipeDirection === 'Left') {
          swipeEle.scrollLeft += distance * step;
        } else if (e.swipeDirection === 'Right') {
          swipeEle.scrollLeft -= distance * step;
        }

        start -= 0.5;
        window.requestAnimationFrame(animate);
      }
    };

    animate();
  };

  HScroll.prototype.scrollUpdating = function (scrollVal, action) {
    if (action === 'add') {
      this.scrollEle.scrollLeft += scrollVal;
    } else {
      this.scrollEle.scrollLeft -= scrollVal;
    }

    if (this.enableRtl && this.scrollEle.scrollLeft > 0) {
      this.scrollEle.scrollLeft = 0;
    }
  };

  HScroll.prototype.frameScrollRequest = function (scrollVal, action, isContinuous) {
    var _this = this;

    var step = 10;

    if (isContinuous) {
      this.scrollUpdating(scrollVal, action);
      return;
    }

    if (!this.customStep) {
      [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_OVERLAY, this.element)).forEach(function (el) {
        scrollVal -= el.offsetWidth;
      });
    }

    var animate = function () {
      var scrollValue;
      var scrollStep;

      if (_this.contains(_this.element, CLS_RTL) && _this.browserCheck) {
        scrollValue = -scrollVal;
        scrollStep = -step;
      } else {
        scrollValue = scrollVal;
        scrollStep = step;
      }

      if (scrollValue < step) {
        window.cancelAnimationFrame(scrollStep);
      } else {
        _this.scrollUpdating(scrollStep, action);

        scrollVal -= scrollStep;
        window.requestAnimationFrame(animate);
      }
    };

    animate();
  };

  HScroll.prototype.touchHandler = function (e) {
    var ele = this.scrollEle;
    var distance = e.distanceX;

    if (this.ieCheck && this.contains(this.element, CLS_RTL)) {
      distance = -distance;
    }

    if (e.scrollDirection === 'Left') {
      ele.scrollLeft = ele.scrollLeft + distance;
    } else if (e.scrollDirection === 'Right') {
      ele.scrollLeft = ele.scrollLeft - distance;
    }
  };

  HScroll.prototype.arrowDisabling = function (addDisable, removeDisable) {
    if (this.isDevice) {
      var arrowEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(addDisable) ? removeDisable : addDisable;
      var arrowIcon = arrowEle.querySelector('.' + CLS_NAVARROW);

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(addDisable)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(arrowIcon, [CLS_NAVRIGHTARROW], [CLS_NAVLEFTARROW]);
      } else {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(arrowIcon, [CLS_NAVLEFTARROW], [CLS_NAVRIGHTARROW]);
      }
    } else if (addDisable && removeDisable) {
      addDisable.classList.add(CLS_DISABLE);
      addDisable.setAttribute('aria-disabled', 'true');
      addDisable.removeAttribute('tabindex');
      removeDisable.classList.remove(CLS_DISABLE);
      removeDisable.setAttribute('aria-disabled', 'false');
      removeDisable.setAttribute('tabindex', '0');
    }

    this.repeatScroll();
  };

  HScroll.prototype.scrollHandler = function (e) {
    var target = e.target;
    var width = target.offsetWidth;
    var rootEle = this.element;
    var navLeftEle = this.element.querySelector('.' + CLS_HSCROLLNAVLEFT);
    var navRightEle = this.element.querySelector('.' + CLS_HSCROLLNAVRIGHT);
    var leftOverlay = this.element.querySelector('.' + CLS_LEFTOVERLAY);
    var rightOverlay = this.element.querySelector('.' + CLS_RIGHTOVERLAY);
    var scrollLeft = target.scrollLeft;

    if (scrollLeft <= 0) {
      scrollLeft = -scrollLeft;
    }

    if (this.isDevice) {
      if (this.enableRtl && !(this.browserCheck || this.ieCheck)) {
        leftOverlay = this.element.querySelector('.' + CLS_RIGHTOVERLAY);
        rightOverlay = this.element.querySelector('.' + CLS_LEFTOVERLAY);
      }

      if (scrollLeft < OVERLAY_MAXWID) {
        leftOverlay.style.width = scrollLeft + 'px';
      } else {
        leftOverlay.style.width = '40px';
      }

      if (target.scrollWidth - Math.ceil(width + scrollLeft) < OVERLAY_MAXWID) {
        rightOverlay.style.width = target.scrollWidth - Math.ceil(width + scrollLeft) + 'px';
      } else {
        rightOverlay.style.width = '40px';
      }
    }

    if (scrollLeft === 0) {
      this.arrowDisabling(navLeftEle, navRightEle);
    } else if (Math.ceil(width + scrollLeft + .1) >= target.scrollWidth) {
      this.arrowDisabling(navRightEle, navLeftEle);
    } else {
      var disEle = this.element.querySelector('.' + CLS_HSCROLLNAV + '.' + CLS_DISABLE);

      if (disEle) {
        disEle.classList.remove(CLS_DISABLE);
        disEle.setAttribute('aria-disabled', 'false');
        disEle.setAttribute('tabindex', '0');
      }
    }
  };
  /**
   * Gets called when the model property changes.The data that describes the old and new values of property that changed.
   *
   * @param  {HScrollModel} newProp - It contains the new value of data.
   * @param  {HScrollModel} oldProp - It contains the old value of data.
   * @returns {void}
   * @private
   */


  HScroll.prototype.onPropertyChanged = function (newProp, oldProp) {
    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'scrollStep':
          this.setScrollState();
          break;

        case 'enableRtl':
          newProp.enableRtl ? this.element.classList.add(CLS_RTL) : this.element.classList.remove(CLS_RTL);
          break;
      }
    }
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], HScroll.prototype, "scrollStep", void 0);

  HScroll = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], HScroll);
  return HScroll;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/common/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/common/index.js ***!
  \**********************************************************************/
/*! exports provided: HScroll, VScroll, addScrolling, destroyScroll, MenuAnimationSettings, MenuItem, FieldSettings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _h_scroll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./h-scroll */ "./node_modules/@syncfusion/ej2-navigations/src/common/h-scroll.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HScroll", function() { return _h_scroll__WEBPACK_IMPORTED_MODULE_0__["HScroll"]; });

/* harmony import */ var _v_scroll__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v-scroll */ "./node_modules/@syncfusion/ej2-navigations/src/common/v-scroll.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VScroll", function() { return _v_scroll__WEBPACK_IMPORTED_MODULE_1__["VScroll"]; });

/* harmony import */ var _menu_scroll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./menu-scroll */ "./node_modules/@syncfusion/ej2-navigations/src/common/menu-scroll.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addScrolling", function() { return _menu_scroll__WEBPACK_IMPORTED_MODULE_2__["addScrolling"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "destroyScroll", function() { return _menu_scroll__WEBPACK_IMPORTED_MODULE_2__["destroyScroll"]; });

/* harmony import */ var _menu_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./menu-base */ "./node_modules/@syncfusion/ej2-navigations/src/common/menu-base.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MenuAnimationSettings", function() { return _menu_base__WEBPACK_IMPORTED_MODULE_3__["MenuAnimationSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MenuItem", function() { return _menu_base__WEBPACK_IMPORTED_MODULE_3__["MenuItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FieldSettings", function() { return _menu_base__WEBPACK_IMPORTED_MODULE_3__["FieldSettings"]; });

/**
 * Navigation Common modules
 */






/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/common/menu-base.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/common/menu-base.js ***!
  \**************************************************************************/
/*! exports provided: FieldSettings, MenuItem, MenuAnimationSettings, MenuBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FieldSettings", function() { return FieldSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MenuItem", function() { return MenuItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MenuAnimationSettings", function() { return MenuAnimationSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MenuBase", function() { return MenuBase; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-lists */ "./node_modules/@syncfusion/ej2-lists/index.js");
/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-popups */ "./node_modules/@syncfusion/ej2-popups/index.js");
/* harmony import */ var _common_h_scroll__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/h-scroll */ "./node_modules/@syncfusion/ej2-navigations/src/common/h-scroll.js");
/* harmony import */ var _common_v_scroll__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/v-scroll */ "./node_modules/@syncfusion/ej2-navigations/src/common/v-scroll.js");
/* harmony import */ var _common_menu_scroll__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/menu-scroll */ "./node_modules/@syncfusion/ej2-navigations/src/common/menu-scroll.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};













var ENTER = 'enter';
var ESCAPE = 'escape';
var FOCUSED = 'e-focused';
var HEADER = 'e-menu-header';
var SELECTED = 'e-selected';
var SEPARATOR = 'e-separator';
var UPARROW = 'uparrow';
var DOWNARROW = 'downarrow';
var LEFTARROW = 'leftarrow';
var RIGHTARROW = 'rightarrow';
var HOME = 'home';
var END = 'end';
var TAB = 'tab';
var CARET = 'e-caret';
var ITEM = 'e-menu-item';
var DISABLED = 'e-disabled';
var HIDE = 'e-menu-hide';
var ICONS = 'e-icons';
var RTL = 'e-rtl';
var POPUP = 'e-menu-popup';
var TEMPLATE_PROPERTY = 'Template';
/**
 * Configures the field options of the Menu.
 */

var FieldSettings =
/** @class */
function (_super) {
  __extends(FieldSettings, _super);

  function FieldSettings() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('id')], FieldSettings.prototype, "itemId", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('parentId')], FieldSettings.prototype, "parentId", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('text')], FieldSettings.prototype, "text", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('iconCss')], FieldSettings.prototype, "iconCss", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('url')], FieldSettings.prototype, "url", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('separator')], FieldSettings.prototype, "separator", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('items')], FieldSettings.prototype, "children", void 0);

  return FieldSettings;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * Specifies menu items.
 */

var MenuItem =
/** @class */
function (_super) {
  __extends(MenuItem, _super);

  function MenuItem() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MenuItem.prototype, "iconCss", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], MenuItem.prototype, "id", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MenuItem.prototype, "separator", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([], MenuItem)], MenuItem.prototype, "items", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], MenuItem.prototype, "text", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], MenuItem.prototype, "url", void 0);

  return MenuItem;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * Animation configuration settings.
 */

var MenuAnimationSettings =
/** @class */
function (_super) {
  __extends(MenuAnimationSettings, _super);

  function MenuAnimationSettings() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('SlideDown')], MenuAnimationSettings.prototype, "effect", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(400)], MenuAnimationSettings.prototype, "duration", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('ease')], MenuAnimationSettings.prototype, "easing", void 0);

  return MenuAnimationSettings;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * Base class for Menu and ContextMenu components.
 *
 *  @private
 */

var MenuBase =
/** @class */
function (_super) {
  __extends(MenuBase, _super);
  /**
   * Constructor for creating the widget.
   *
   * @private
   * @param {MenuBaseModel} options - Specifies the menu base model
   * @param {string | HTMLUListElement} element - Specifies the element
   */


  function MenuBase(options, element) {
    var _this = _super.call(this, options, element) || this;

    _this.navIdx = [];
    _this.animation = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"]({});
    _this.isTapHold = false;
    _this.tempItem = [];
    _this.showSubMenuOn = 'Auto';
    return _this;
  }
  /**
   * Initialized third party configuration settings.
   *
   * @private
   * @returns {void}
   */


  MenuBase.prototype.preRender = function () {
    if (!this.isMenu) {
      var ul = void 0;

      if (this.element.tagName === 'EJS-CONTEXTMENU') {
        ul = this.createElement('ul', {
          id: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])(this.getModuleName()),
          className: 'e-control e-lib e-' + this.getModuleName()
        });
        var ejInst = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('ej2_instances', this.element);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], ['e-control', 'e-lib', 'e-' + this.getModuleName()]);
        this.clonedElement = this.element;
        this.element = ul;
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('ej2_instances', ejInst, this.element);
      } else {
        ul = this.createElement('ul', {
          id: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])(this.getModuleName())
        });
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([].slice.call(this.element.cloneNode(true).children), ul);
        var refEle = this.element.nextElementSibling;

        if (refEle) {
          this.element.parentElement.insertBefore(ul, refEle);
        } else {
          this.element.parentElement.appendChild(ul);
        }

        this.clonedElement = ul;
      }

      this.clonedElement.style.display = 'none';
    }

    if (this.element.tagName === 'EJS-MENU') {
      var ele = this.element;
      var ejInstance = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('ej2_instances', ele);
      var ul = this.createElement('ul');
      var wrapper = this.createElement('EJS-MENU', {
        className: 'e-' + this.getModuleName() + '-wrapper'
      });

      for (var idx = 0, len = ele.attributes.length; idx < len; idx++) {
        ul.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);
      }

      ele.parentNode.insertBefore(wrapper, ele);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(ele);
      ele = ul;
      wrapper.appendChild(ele);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('ej2_instances', ejInstance, ele);
      this.clonedElement = wrapper;
      this.element = ele;

      if (!this.element.id) {
        this.element.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])(this.getModuleName());
      }
    }
  };
  /**
   * Initialize the control rendering.
   *
   * @private
   * @returns {void}
   */


  MenuBase.prototype.render = function () {
    var _this = this;

    this.initialize();
    this.renderItems();
    this.wireEvents();
    this.renderComplete();
    var wrapper = this.getWrapper(); // eslint-disable-next-line

    if (this.template && this.enableScrolling && (this.isReact || this.isAngular)) {
      requestAnimationFrame(function () {
        Object(_common_menu_scroll__WEBPACK_IMPORTED_MODULE_5__["addScrolling"])(_this.createElement, wrapper, _this.element, 'hscroll', _this.enableRtl);
      });
    }
  };

  MenuBase.prototype.initialize = function () {
    var wrapper = this.getWrapper();

    if (!wrapper) {
      wrapper = this.createElement('div', {
        className: 'e-' + this.getModuleName() + '-wrapper'
      });

      if (this.isMenu) {
        this.element.parentElement.insertBefore(wrapper, this.element);
      } else {
        document.body.appendChild(wrapper);
      }
    }

    if (this.cssClass) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([wrapper], this.cssClass.replace(/\s+/g, ' ').trim().split(' '));
    }

    if (this.enableRtl) {
      wrapper.classList.add(RTL);
    }

    wrapper.appendChild(this.element);

    if (this.isMenu && this.hamburgerMode) {
      if (!this.target) {
        this.createHeaderContainer(wrapper);
      }
    }

    this.defaultOption = this.showItemOnClick;
  };

  MenuBase.prototype.renderItems = function () {
    if (!this.items.length) {
      var items = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__["ListBase"].createJsonFromElement(this.element, {
        fields: {
          child: 'items'
        }
      });
      this.setProperties({
        items: items
      }, true);

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isMenu) {
        this.element = this.removeChildElement(this.element);
      } else {
        this.element.innerHTML = '';
      }
    }

    var ul = this.createItems(this.items);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(Array.prototype.slice.call(ul.children), this.element);
    this.element.classList.add('e-menu-parent');

    if (this.isMenu) {
      if (!this.hamburgerMode && this.element.classList.contains('e-vertical')) {
        this.setBlankIconStyle(this.element);
      }

      if (this.enableScrolling) {
        var wrapper = this.getWrapper();

        if (this.element.classList.contains('e-vertical')) {
          Object(_common_menu_scroll__WEBPACK_IMPORTED_MODULE_5__["addScrolling"])(this.createElement, wrapper, this.element, 'vscroll', this.enableRtl);
        } else {
          Object(_common_menu_scroll__WEBPACK_IMPORTED_MODULE_5__["addScrolling"])(this.createElement, wrapper, this.element, 'hscroll', this.enableRtl);
        }
      }
    }
  };

  MenuBase.prototype.wireEvents = function () {
    var wrapper = this.getWrapper();

    if (this.target) {
      var target = void 0;
      var targetElems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])(this.target);

      for (var i = 0, len = targetElems.length; i < len; i++) {
        target = targetElems[i];

        if (this.isMenu) {
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(target, 'click', this.menuHeaderClickHandler, this);
        } else {
          if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIos) {
            new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](target, {
              tapHold: this.touchHandler.bind(this)
            });
          } else {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(target, 'contextmenu', this.cmenuHandler, this);
          }
        }
      }

      this.targetElement = target;

      if (!this.isMenu) {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.targetElement, 'mousewheel DOMMouseScroll', this.scrollHandler, this);

        for (var _i = 0, _a = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["getScrollableParent"])(this.targetElement); _i < _a.length; _i++) {
          var parent_1 = _a[_i];
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(parent_1, 'mousewheel DOMMouseScroll', this.scrollHandler, this);
        }
      }
    }

    if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
      this.delegateMoverHandler = this.moverHandler.bind(this);
      this.delegateMouseDownHandler = this.mouseDownHandler.bind(this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.isMenu ? document : wrapper, 'mouseover', this.delegateMoverHandler, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mousedown', this.delegateMouseDownHandler, this);
    }

    this.delegateClickHandler = this.clickHandler.bind(this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'click', this.delegateClickHandler, this);
    this.wireKeyboardEvent(wrapper);
    this.rippleFn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(wrapper, {
      selector: '.' + ITEM
    });
  };

  MenuBase.prototype.wireKeyboardEvent = function (element) {
    var keyConfigs = {
      downarrow: DOWNARROW,
      uparrow: UPARROW,
      enter: ENTER,
      leftarrow: LEFTARROW,
      rightarrow: RIGHTARROW,
      escape: ESCAPE
    };

    if (this.isMenu) {
      keyConfigs.home = HOME;
      keyConfigs.end = END;
      keyConfigs.tab = TAB;
    }

    new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](element, {
      keyAction: this.keyBoardHandler.bind(this),
      keyConfigs: keyConfigs
    });
  };

  MenuBase.prototype.mouseDownHandler = function (e) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.e-' + this.getModuleName() + '-wrapper') !== this.getWrapper() && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.e-' + this.getModuleName() + '-popup')) {
      this.closeMenu(this.isMenu ? null : this.navIdx.length, e);
    }
  };

  MenuBase.prototype.keyHandler = function (e) {
    if (e.keyCode === 38 || e.keyCode === 40) {
      if (e.target && (e.target.classList.contains('e-contextmenu') || e.target.classList.contains('e-menu-item'))) {
        e.preventDefault();
      }
    }
  };

  MenuBase.prototype.keyBoardHandler = function (e) {
    var actionName = '';
    var trgt = e.target;
    var actionNeeded = this.isMenu && !this.hamburgerMode && !this.element.classList.contains('e-vertical') && this.navIdx.length < 1;
    e.preventDefault();

    if (this.enableScrolling && e.keyCode === 13 && trgt.classList.contains('e-scroll-nav')) {
      this.removeLIStateByClass([FOCUSED, SELECTED], [Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.e-' + this.getModuleName() + '-wrapper')]);
    }

    if (actionNeeded) {
      switch (e.action) {
        case RIGHTARROW:
          actionName = RIGHTARROW;
          e.action = DOWNARROW;
          break;

        case LEFTARROW:
          actionName = LEFTARROW;
          e.action = UPARROW;
          break;

        case DOWNARROW:
          actionName = DOWNARROW;
          e.action = RIGHTARROW;
          break;

        case UPARROW:
          actionName = UPARROW;
          e.action = '';
          break;
      }
    } else if (this.enableRtl) {
      switch (e.action) {
        case LEFTARROW:
          actionNeeded = true;
          actionName = LEFTARROW;
          e.action = RIGHTARROW;
          break;

        case RIGHTARROW:
          actionNeeded = true;
          actionName = RIGHTARROW;
          e.action = LEFTARROW;
          break;
      }
    }

    switch (e.action) {
      case DOWNARROW:
      case UPARROW:
      case END:
      case HOME:
      case TAB:
        this.upDownKeyHandler(e);
        break;

      case RIGHTARROW:
        this.rightEnterKeyHandler(e);
        break;

      case LEFTARROW:
        this.leftEscKeyHandler(e);
        break;

      case ENTER:
        if (this.hamburgerMode && trgt.tagName === 'SPAN' && trgt.classList.contains('e-menu-icon')) {
          this.menuHeaderClickHandler(e);
        } else {
          this.rightEnterKeyHandler(e);
        }

        break;

      case ESCAPE:
        this.leftEscKeyHandler(e);
        break;
    }

    if (actionNeeded) {
      e.action = actionName;
    }
  };

  MenuBase.prototype.upDownKeyHandler = function (e) {
    var cul = this.getUlByNavIdx();
    var defaultIdx = e.action === DOWNARROW || e.action === HOME || e.action === TAB ? 0 : cul.childElementCount - 1;
    var fliIdx = defaultIdx;
    var fli = this.getLIByClass(cul, FOCUSED);

    if (fli) {
      if (e.action !== END && e.action !== HOME) {
        fliIdx = this.getIdx(cul, fli);
      }

      fli.classList.remove(FOCUSED);

      if (e.action !== END && e.action !== HOME) {
        if (e.action === DOWNARROW) {
          fliIdx++;
        } else {
          fliIdx--;
        }

        if (fliIdx === (e.action === DOWNARROW ? cul.childElementCount : -1)) {
          fliIdx = defaultIdx;
        }
      }
    }

    var cli = cul.children[fliIdx];
    fliIdx = this.isValidLI(cli, fliIdx, e.action);
    cul.children[fliIdx].classList.add(FOCUSED);
    cul.children[fliIdx].focus();
  };

  MenuBase.prototype.isValidLI = function (cli, index, action) {
    var cul = this.getUlByNavIdx();
    var defaultIdx = action === DOWNARROW || action === HOME || action === TAB ? 0 : cul.childElementCount - 1;

    if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED) || cli.classList.contains(HIDE)) {
      if (action === DOWNARROW && index === cul.childElementCount - 1) {
        index = defaultIdx;
      } else if (action === UPARROW && index === 0) {
        index = defaultIdx;
      } else if (action === DOWNARROW || action === RIGHTARROW) {
        index++;
      } else {
        index--;
      }
    }

    cli = cul.children[index];

    if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED) || cli.classList.contains(HIDE)) {
      index = this.isValidLI(cli, index, action);
    }

    return index;
  };

  MenuBase.prototype.getUlByNavIdx = function (navIdxLen) {
    var _this = this;

    if (navIdxLen === void 0) {
      navIdxLen = this.navIdx.length;
    }

    if (this.isMenu) {
      var popup = [this.getWrapper()].concat([].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + POPUP)))[navIdxLen];
      var popups_1 = [];
      var allPopup = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + POPUP);
      allPopup.forEach(function (elem) {
        if (_this.element.id === elem.id.split('-')[2] || elem.id.split('-')[2] + '-' + elem.id.split('-')[3]) {
          popups_1.push(elem);
        }
      });
      popup = [this.getWrapper()].concat([].slice.call(popups_1))[navIdxLen];
      return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(popup) ? null : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-menu-parent', popup);
    } else {
      return this.getWrapper().children[navIdxLen];
    }
  };

  MenuBase.prototype.rightEnterKeyHandler = function (e) {
    var eventArgs;
    var cul = this.getUlByNavIdx();
    var fli = this.getLIByClass(cul, FOCUSED);

    if (fli) {
      var fliIdx = this.getIdx(cul, fli);
      var navIdx = this.navIdx.concat(fliIdx);
      var item = this.getItem(navIdx);

      if (item.items.length) {
        this.navIdx.push(fliIdx);
        this.keyType = 'right';
        this.action = e.action;
        this.openMenu(fli, item, -1, -1, e);
      } else {
        if (e.action === ENTER) {
          if (this.isMenu && this.navIdx.length === 0) {
            this.removeLIStateByClass([SELECTED], [this.getWrapper()]);
          } else {
            fli.classList.remove(FOCUSED);
          }

          fli.classList.add(SELECTED);
          eventArgs = {
            element: fli,
            item: item,
            event: e
          };
          this.trigger('select', eventArgs);
          this.closeMenu(null, e);
        }
      }
    }
  };

  MenuBase.prototype.leftEscKeyHandler = function (e) {
    if (this.navIdx.length) {
      this.keyType = 'left';
      this.closeMenu(this.navIdx.length, e);
    } else {
      if (e.action === ESCAPE) {
        this.closeMenu(null, e);
      }
    }
  };

  MenuBase.prototype.scrollHandler = function (e) {
    this.closeMenu(null, e);
  };

  MenuBase.prototype.touchHandler = function (e) {
    this.isTapHold = true;
    this.cmenuHandler(e.originalEvent);
  };

  MenuBase.prototype.cmenuHandler = function (e) {
    e.preventDefault();
    this.currentTarget = e.target;
    this.isCMenu = true;
    this.pageX = e.changedTouches ? e.changedTouches[0].pageX + 1 : e.pageX + 1;
    this.pageY = e.changedTouches ? e.changedTouches[0].pageY + 1 : e.pageY + 1;
    this.closeMenu(null, e);

    if (this.isCMenu) {
      if (this.canOpen(e.target)) {
        this.openMenu(null, null, this.pageY, this.pageX, e);
      }

      this.isCMenu = false;
    }
  }; // eslint:disable-next-line:max-func-body-length


  MenuBase.prototype.closeMenu = function (ulIndex, e, isIterated) {
    var _this = this;

    if (ulIndex === void 0) {
      ulIndex = 0;
    }

    if (e === void 0) {
      e = null;
    }

    if (this.isMenuVisible()) {
      var sli = void 0;
      var item_1;
      var wrapper_1 = this.getWrapper();
      var beforeCloseArgs = void 0;
      var items_1;
      var popups = this.getPopups();
      var isClose = false;
      var cnt = this.isMenu ? popups.length + 1 : wrapper_1.childElementCount;
      var ul_1 = this.isMenu && cnt !== 1 ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-ul', popups[cnt - 2]) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.e-menu-parent', wrapper_1)[cnt - 1];

      if (this.isMenu && ul_1.classList.contains('e-menu')) {
        sli = this.getLIByClass(ul_1, SELECTED);

        if (sli) {
          sli.classList.remove(SELECTED);
        }

        isClose = true;
      }

      if (!isClose) {
        var liElem_1 = e && e.target && this.getLI(e.target);

        if (liElem_1) {
          this.cli = liElem_1;
        } else {
          this.cli = ul_1.children[0];
        }

        item_1 = this.navIdx.length ? this.getItem(this.navIdx) : null;
        items_1 = item_1 ? item_1.items : this.items;
        beforeCloseArgs = {
          element: ul_1,
          parentItem: item_1,
          items: items_1,
          event: e,
          cancel: false,
          isFocused: true
        };
        this.trigger('beforeClose', beforeCloseArgs, function (observedCloseArgs) {
          var popupEle;
          var closeArgs;
          var popupId = '';
          var popupObj;
          var isOpen = !observedCloseArgs.cancel;

          if (isOpen || _this.isCMenu) {
            if (_this.isMenu) {
              popupEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(ul_1, '.' + POPUP);

              if (_this.hamburgerMode) {
                popupEle.parentElement.style.minHeight = '';
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(ul_1, '.e-menu-item').setAttribute('aria-expanded', 'false');
              }

              _this.unWireKeyboardEvent(popupEle);

              Object(_common_menu_scroll__WEBPACK_IMPORTED_MODULE_5__["destroyScroll"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(popupEle.children[0], _common_v_scroll__WEBPACK_IMPORTED_MODULE_4__["VScroll"]), popupEle.children[0]);
              popupObj = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(popupEle, _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["Popup"]);
              popupObj.hide();
              popupId = popupEle.id;
              popupObj.destroy();
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(popupEle);
            } else {
              _this.toggleAnimation(ul_1, false);
            }

            closeArgs = {
              element: ul_1,
              parentItem: item_1,
              items: items_1
            };

            _this.trigger('onClose', closeArgs);

            _this.navIdx.pop();

            if (!_this.isMenu) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(ul_1, 'keydown', _this.keyHandler);

              if (_this.keyType === 'right') {
                _this.keyType = '';
              }
            }
          }

          _this.updateReactTemplate();

          var trgtliId;
          var closedLi;
          var trgtLi;

          var trgtpopUp = _this.getWrapper() && _this.getUlByNavIdx();

          if (_this.isCMenu) {
            if (_this.canOpen(e.target)) {
              _this.openMenu(null, null, _this.pageY, _this.pageX, e);
            }

            _this.isCMenu = false;
          }

          if (_this.isMenu && trgtpopUp && popupId.length) {
            // eslint-disable-next-line
            trgtliId = new RegExp('(.*)-ej2menu-' + _this.element.id + '-popup').exec(popupId)[1];
            closedLi = trgtpopUp.querySelector('[id="' + trgtliId + '"]');
            trgtLi = liElem_1 && trgtpopUp.querySelector('[id="' + liElem_1.id + '"]');
          } else if (trgtpopUp) {
            closedLi = trgtpopUp.querySelector('.e-menu-item.e-selected');
            trgtLi = liElem_1 && trgtpopUp.querySelector('[id="' + liElem_1.id + '"]');
          }

          var submenus = liElem_1 && liElem_1.querySelectorAll('.e-menu-item');

          if (isOpen && _this.hamburgerMode && ulIndex && !submenus.length) {
            _this.afterCloseMenu(e);
          } else if (isOpen && !_this.hamburgerMode && closedLi && !trgtLi && _this.keyType !== 'left' && (_this.navIdx.length || !_this.isMenu && _this.navIdx.length === 0)) {
            var ele = e && e.target.classList.contains('e-vscroll') ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.e-menu-wrapper') : null;

            if (ele) {
              ele = ele.querySelector('.e-menu-item');

              if (_this.showItemOnClick || ele && _this.getIndex(ele.id, true).length <= _this.navIdx.length) {
                _this.closeMenu(_this.navIdx[_this.navIdx.length - 1], e, true);
              }
            } else {
              _this.closeMenu(_this.navIdx[_this.navIdx.length - 1], e);
            }
          } else if (isOpen && !isIterated && !ulIndex && (_this.hamburgerMode && _this.navIdx.length || _this.navIdx.length === 1 && liElem_1 && trgtpopUp !== liElem_1.parentElement)) {
            _this.closeMenu(null, e);
          } else if (isOpen && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ulIndex) && _this.navIdx.length) {
            _this.closeMenu(null, e);
          } else if (isOpen && !_this.isMenu && !ulIndex && _this.navIdx.length === 0 && !_this.isMenusClosed) {
            _this.isMenusClosed = true;

            _this.closeMenu(0, e);
          } else if (isOpen && _this.isMenu && e && e.target && _this.navIdx.length !== 0 && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.e-menu-parent.e-control')) {
            _this.closeMenu(0, e);
          } else if (isOpen && !_this.isMenu && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.e-menu-parent', wrapper_1)[ulIndex - 1] && e.which === 3) {
            _this.closeMenu(null, e);
          } else {
            if (isOpen && (_this.keyType === 'right' || _this.keyType === 'click')) {
              _this.afterCloseMenu(e);
            } else {
              var cul = _this.getUlByNavIdx();

              var sli_1 = _this.getLIByClass(cul, SELECTED);

              if (sli_1) {
                sli_1.setAttribute('aria-expanded', 'false');
                sli_1.classList.remove(SELECTED);

                if (observedCloseArgs.isFocused && liElem_1 || _this.keyType === 'left') {
                  sli_1.classList.add(FOCUSED);

                  if (!e.target || !e.target.classList.contains('e-edit-template')) {
                    sli_1.focus();
                  }
                }
              }

              if (!isOpen && _this.hamburgerMode && liElem_1 && liElem_1.getAttribute('aria-expanded') === 'false' && liElem_1.getAttribute('aria-haspopup') === 'true') {
                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(liElem_1, '.e-menu-parent.e-control')) {
                  _this.navIdx = [];
                } else {
                  _this.navIdx.pop();
                }

                _this.navIdx.push(_this.cliIdx);

                var item_2 = _this.getItem(_this.navIdx);

                liElem_1.setAttribute('aria-expanded', 'true');

                _this.openMenu(liElem_1, item_2, -1, -1, e);
              }
            }

            if (_this.navIdx.length < 1) {
              if (_this.showSubMenuOn === 'Hover' || _this.showSubMenuOn === 'Click') {
                _this.showItemOnClick = _this.defaultOption;
                _this.showSubMenuOn = 'Auto';
              }
            }
          }

          _this.removeStateWrapper();
        });
      }
    }
  };

  MenuBase.prototype.updateReactTemplate = function () {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    if (this.isReact && this.template && this.navIdx.length === 0) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      var portals = this.portals.splice(0, this.items.length);
      this.clearTemplate(['template']); // eslint-disable-next-line @typescript-eslint/no-explicit-any

      this.portals = portals;
      this.renderReactTemplates();
    }
  };

  MenuBase.prototype.getMenuItemModel = function (item, level) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item)) {
      return null;
    }

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(level)) {
      level = 0;
    }

    var fields = this.getFields(level);
    return {
      text: item[fields.text],
      id: item[fields.id],
      items: item[fields.child],
      separator: item[fields.separator],
      iconCss: item[fields.iconCss],
      url: item[fields.url]
    };
  };

  MenuBase.prototype.getPopups = function () {
    var _this = this;

    var popups = [];
    [].slice.call(document.querySelectorAll('.' + POPUP)).forEach(function (elem) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(elem.querySelector('.' + ITEM)) && _this.getIndex(elem.querySelector('.' + ITEM).id, true).length) {
        popups.push(elem);
      }
    });
    return popups;
  };

  MenuBase.prototype.isMenuVisible = function () {
    return this.navIdx.length > 0 || this.element.classList.contains('e-contextmenu') && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(this.element).valueOf();
  };

  MenuBase.prototype.canOpen = function (target) {
    var canOpen = true;

    if (this.filter) {
      canOpen = false;
      var filter = this.filter.split(' ');

      for (var i = 0, len = filter.length; i < len; i++) {
        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + filter[i])) {
          canOpen = true;
          break;
        }
      }
    }

    return canOpen;
  };

  MenuBase.prototype.openMenu = function (li, item, top, left, e, target) {
    var _this = this;

    if (top === void 0) {
      top = 0;
    }

    if (left === void 0) {
      left = 0;
    }

    if (e === void 0) {
      e = null;
    }

    if (target === void 0) {
      target = this.targetElement;
    }

    var wrapper = this.getWrapper();
    this.lItem = li;
    var elemId = this.element.id !== '' ? this.element.id : 'menu';
    this.isMenusClosed = false;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(top)) {
      top = -1;
    }

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(left)) {
      left = -1;
    }

    if (li) {
      this.uList = this.createItems(item[this.getField('children', this.navIdx.length - 1)]);

      if (!this.isMenu && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
        wrapper.lastChild.style.display = 'none';
        var data = {
          text: item[this.getField('text')].toString(),
          iconCss: ICONS + ' e-previous'
        };
        var hdata = new MenuItem(this.items[0], 'items', data, true);
        var hli = this.createItems([hdata]).children[0];
        hli.classList.add(HEADER);
        this.uList.insertBefore(hli, this.uList.children[0]);
      }

      if (this.isMenu) {
        this.popupWrapper = this.createElement('div', {
          className: 'e-' + this.getModuleName() + '-wrapper ' + POPUP,
          id: li.id + '-ej2menu-' + elemId + '-popup'
        });

        if (this.hamburgerMode) {
          top = li.offsetHeight;
          li.appendChild(this.popupWrapper);
        } else {
          document.body.appendChild(this.popupWrapper);
        }

        this.isNestedOrVertical = this.element.classList.contains('e-vertical') || this.navIdx.length !== 1;
        this.popupObj = this.generatePopup(this.popupWrapper, this.uList, li, this.isNestedOrVertical);

        if (this.template) {
          this.renderReactTemplates();
        }

        if (this.hamburgerMode) {
          this.calculateIndentSize(this.uList, li);
        } else {
          if (this.cssClass) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.popupWrapper], this.cssClass.replace(/\s+/g, ' ').trim().split(' '));
          }

          this.popupObj.hide();
        }

        if (!this.hamburgerMode && !this.showItemOnClick && this.hoverDelay) {
          window.clearInterval(this.timer);
          this.timer = window.setTimeout(function () {
            _this.triggerBeforeOpen(li, _this.uList, item, e, 0, 0, 'menu');
          }, this.hoverDelay);
        } else {
          this.triggerBeforeOpen(li, this.uList, item, e, 0, 0, 'menu');
        }
      } else {
        this.uList.style.zIndex = this.element.style.zIndex;
        wrapper.appendChild(this.uList);

        if (!this.showItemOnClick && this.hoverDelay) {
          window.clearInterval(this.timer);
          this.timer = window.setTimeout(function () {
            _this.triggerBeforeOpen(li, _this.uList, item, e, top, left, 'none');
          }, this.hoverDelay);
        } else {
          this.triggerBeforeOpen(li, this.uList, item, e, top, left, 'none');
        }
      }
    } else {
      this.uList = this.element;
      this.uList.style.zIndex = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["getZindexPartial"])(target ? target : this.element).toString();

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e)) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var ev = document.createEvent('MouseEvents');
        ev.initEvent('click', true, false); // eslint-disable-next-line @typescript-eslint/no-explicit-any

        var targetEvent = this.copyObject(ev, {});
        targetEvent.target = targetEvent.srcElement = target;
        targetEvent.currentTarget = target; // eslint-disable-next-line @typescript-eslint/no-explicit-any

        this.triggerBeforeOpen(li, this.uList, item, targetEvent, top, left, 'none');
      } else {
        this.triggerBeforeOpen(li, this.uList, item, e, top, left, 'none');
      }
    }
  }; // eslint-disable-next-line @typescript-eslint/no-explicit-any


  MenuBase.prototype.copyObject = function (source, destination) {
    for (var prop in source) {
      destination["" + prop] = source["" + prop];
    }

    return destination;
  };

  MenuBase.prototype.calculateIndentSize = function (ul, li) {
    var liStyle = getComputedStyle(li);
    var liIndent = parseInt(liStyle.textIndent, 10);

    if (this.navIdx.length < 2 && !li.classList.contains('e-blankicon')) {
      liIndent *= 2;
    } else {
      liIndent += liIndent / 4;
    }

    ul.style.textIndent = liIndent + 'px';
    var blankIconElem = ul.querySelectorAll('.e-blankicon');

    if (blankIconElem && blankIconElem.length) {
      var menuIconElem = ul.querySelector('.e-menu-icon');
      var menuIconElemStyle = getComputedStyle(menuIconElem);
      var blankIconIndent = parseInt(menuIconElemStyle.marginRight, 10) + menuIconElem.offsetWidth + liIndent;

      for (var i = 0; i < blankIconElem.length; i++) {
        blankIconElem[i].style.textIndent = blankIconIndent + 'px';
      }
    }
  };

  MenuBase.prototype.generatePopup = function (popupWrapper, ul, li, isNestedOrVertical) {
    var _this = this;

    var popupObj = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["Popup"](popupWrapper, {
      actionOnScroll: this.hamburgerMode ? 'none' : 'reposition',
      relateTo: li,
      collision: this.hamburgerMode ? {
        X: 'none',
        Y: 'none'
      } : {
        X: isNestedOrVertical || this.enableRtl ? 'none' : 'flip',
        Y: 'fit'
      },
      position: isNestedOrVertical && !this.hamburgerMode ? {
        X: 'right',
        Y: 'top'
      } : {
        X: 'left',
        Y: 'bottom'
      },
      targetType: 'relative',
      enableRtl: this.enableRtl,
      content: ul,
      open: function () {
        var scrollEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-menu-vscroll', popupObj.element);

        if (scrollEle) {
          scrollEle.style.height = 'inherit';
          scrollEle.style.maxHeight = '';
        }

        var ul = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-ul', popupObj.element);
        popupObj.element.style.maxHeight = '';
        ul.focus();

        _this.triggerOpen(ul);
      }
    });
    return popupObj;
  };

  MenuBase.prototype.createHeaderContainer = function (wrapper) {
    wrapper = wrapper || this.getWrapper();
    var spanElem = this.createElement('span', {
      className: 'e-' + this.getModuleName() + '-header'
    });
    var tempTitle = this.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(this.title) : this.title;
    var spanTitle = this.createElement('span', {
      className: 'e-' + this.getModuleName() + '-title',
      innerHTML: tempTitle
    });
    var spanIcon = this.createElement('span', {
      className: 'e-icons e-' + this.getModuleName() + '-icon',
      attrs: {
        'tabindex': '0'
      }
    });
    spanElem.appendChild(spanTitle);
    spanElem.appendChild(spanIcon);
    wrapper.insertBefore(spanElem, this.element);
  };

  MenuBase.prototype.openHamburgerMenu = function (e) {
    if (this.hamburgerMode) {
      this.triggerBeforeOpen(null, this.element, null, e, 0, 0, 'hamburger');
    }
  };

  MenuBase.prototype.closeHamburgerMenu = function (e) {
    var _this = this;

    var beforeCloseArgs = {
      element: this.element,
      parentItem: null,
      event: e,
      items: this.items,
      cancel: false
    };
    this.trigger('beforeClose', beforeCloseArgs, function (observedHamburgerCloseArgs) {
      if (!observedHamburgerCloseArgs.cancel) {
        _this.closeMenu(null, e);

        _this.element.classList.add('e-hide-menu');

        _this.trigger('onClose', {
          element: _this.element,
          parentItem: null,
          items: _this.items
        });
      }
    });
  };

  MenuBase.prototype.callFit = function (element, x, y, top, left) {
    return Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["fit"])(element, null, {
      X: x,
      Y: y
    }, {
      top: top,
      left: left
    });
  };

  MenuBase.prototype.triggerBeforeOpen = function (li, ul, item, e, top, left, type) {
    var _this = this;

    var items = li ? item[this.getField('children', this.navIdx.length - 1)] : this.items;
    var eventArgs = {
      element: ul,
      items: items,
      parentItem: item,
      event: e,
      cancel: false,
      top: top,
      left: left,
      showSubMenuOn: 'Auto'
    };
    var menuType = type;
    this.trigger('beforeOpen', eventArgs, function (observedOpenArgs) {
      switch (menuType) {
        case 'menu':
          if (!_this.hamburgerMode) {
            if (observedOpenArgs.showSubMenuOn !== 'Auto') {
              _this.showItemOnClick = !_this.defaultOption;
              _this.showSubMenuOn = observedOpenArgs.showSubMenuOn;
            }

            _this.top = observedOpenArgs.top;
            _this.left = observedOpenArgs.left;
          }

          _this.popupWrapper.style.display = 'block';

          if (!_this.hamburgerMode) {
            _this.popupWrapper.style.maxHeight = _this.popupWrapper.getBoundingClientRect().height + 'px';

            if (_this.enableScrolling) {
              Object(_common_menu_scroll__WEBPACK_IMPORTED_MODULE_5__["addScrolling"])(_this.createElement, _this.popupWrapper, _this.uList, 'vscroll', _this.enableRtl);
            }

            _this.checkScrollOffset(e);
          }

          if (!_this.hamburgerMode && !_this.left && !_this.top) {
            _this.popupObj.refreshPosition(_this.lItem, true);

            _this.left = parseInt(_this.popupWrapper.style.left, 10);
            _this.top = parseInt(_this.popupWrapper.style.top, 10);

            if (_this.enableRtl) {
              _this.left = _this.isNestedOrVertical ? _this.left - _this.popupWrapper.offsetWidth - _this.lItem.parentElement.offsetWidth + 2 : _this.left - _this.popupWrapper.offsetWidth + _this.lItem.offsetWidth;
            } // eslint-disable-next-line


            if (_this.template && (_this.isReact || _this.isAngular)) {
              requestAnimationFrame(function () {
                _this.collision();

                _this.popupWrapper.style.display = '';
              });
            } else {
              _this.collision();

              _this.popupWrapper.style.display = '';
            }
          } else {
            _this.popupObj.collision = {
              X: 'none',
              Y: 'none'
            };
            _this.popupWrapper.style.display = '';
          }

          break;

        case 'none':
          _this.top = observedOpenArgs.top;
          _this.left = observedOpenArgs.left;
          break;

        case 'hamburger':
          if (!observedOpenArgs.cancel) {
            _this.element.classList.remove('e-hide-menu');

            _this.triggerOpen(_this.element);
          }

          break;
      }

      if (menuType !== 'hamburger') {
        if (observedOpenArgs.cancel) {
          if (_this.isMenu) {
            _this.popupObj.destroy();

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(_this.popupWrapper);
          } else if (ul.className.indexOf('e-ul') > -1) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(ul);
          }

          _this.navIdx.pop();
        } else {
          if (_this.isMenu) {
            if (_this.hamburgerMode) {
              _this.popupWrapper.style.top = _this.top + 'px';
              _this.popupWrapper.style.left = 0 + 'px';

              _this.toggleAnimation(_this.popupWrapper);
            } else {
              _this.setBlankIconStyle(_this.popupWrapper);

              _this.wireKeyboardEvent(_this.popupWrapper);

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(_this.popupWrapper, {
                selector: '.' + ITEM
              });
              _this.popupWrapper.style.left = _this.left + 'px';
              _this.popupWrapper.style.top = _this.top + 'px';
              var animationOptions = _this.animationSettings.effect !== 'None' ? {
                name: _this.animationSettings.effect,
                duration: _this.animationSettings.duration,
                timingFunction: _this.animationSettings.easing
              } : null;

              _this.popupObj.show(animationOptions, _this.lItem);
            }
          } else {
            _this.setBlankIconStyle(_this.uList);

            _this.setPosition(_this.lItem, _this.uList, _this.top, _this.left);

            _this.toggleAnimation(_this.uList);
          }
        }
      }

      if (_this.keyType === 'right') {
        var cul = _this.getUlByNavIdx();

        li.classList.remove(FOCUSED);

        if (_this.isMenu && _this.navIdx.length === 1) {
          _this.removeLIStateByClass([SELECTED], [_this.getWrapper()]);
        }

        li.classList.add(SELECTED);

        if (_this.action === ENTER) {
          var eventArgs_1 = {
            element: li,
            item: item,
            event: e
          };

          _this.trigger('select', eventArgs_1);
        }

        li.focus();
        cul = _this.getUlByNavIdx();

        var index = _this.isValidLI(cul.children[0], 0, _this.action);

        cul.children[index].classList.add(FOCUSED);
        cul.children[index].focus();
      }
    });
  };

  MenuBase.prototype.collision = function () {
    var collide;
    collide = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["isCollide"])(this.popupWrapper, null, this.left, this.top);

    if ((this.isNestedOrVertical || this.enableRtl) && (collide.indexOf('right') > -1 || collide.indexOf('left') > -1)) {
      this.popupObj.collision.X = 'none';
      var offWidth = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.lItem, '.e-' + this.getModuleName() + '-wrapper').offsetWidth;
      this.left = this.enableRtl ? Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["calculatePosition"])(this.lItem, this.isNestedOrVertical ? 'right' : 'left', 'top').left : this.left - this.popupWrapper.offsetWidth - offWidth + 2;
    }

    collide = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["isCollide"])(this.popupWrapper, null, this.left, this.top);

    if (collide.indexOf('left') > -1 || collide.indexOf('right') > -1) {
      this.left = this.callFit(this.popupWrapper, true, false, this.top, this.left).left;
    }

    this.popupWrapper.style.left = this.left + 'px';
  };

  MenuBase.prototype.setBlankIconStyle = function (menu) {
    var blankIconList = [].slice.call(menu.getElementsByClassName('e-blankicon'));

    if (!blankIconList.length) {
      return;
    }

    var iconLi = menu.querySelector('.e-menu-item:not(.e-blankicon):not(.e-separator)');

    if (!iconLi) {
      return;
    }

    var icon = iconLi.querySelector('.e-menu-icon');

    if (!icon) {
      return;
    }

    var cssProp = this.enableRtl ? {
      padding: 'paddingRight',
      margin: 'marginLeft'
    } : {
      padding: 'paddingLeft',
      margin: 'marginRight'
    };
    var iconCssProps = getComputedStyle(icon);
    var iconSize = parseInt(iconCssProps.fontSize, 10);

    if (!!parseInt(iconCssProps.width, 10) && parseInt(iconCssProps.width, 10) > iconSize) {
      iconSize = parseInt(iconCssProps.width, 10);
    } // eslint:disable


    var size = iconSize + parseInt( // eslint-disable-next-line @typescript-eslint/no-explicit-any
    iconCssProps[cssProp.margin], 10) + parseInt(getComputedStyle(iconLi)[cssProp.padding], 10) + "px";
    blankIconList.forEach(function (li) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      li.style[cssProp.padding] = size;
    }); // eslint:enable
  };

  MenuBase.prototype.checkScrollOffset = function (e) {
    var wrapper = this.getWrapper();

    if (wrapper.children[0].classList.contains('e-menu-hscroll') && this.navIdx.length === 1) {
      var trgt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e) ? this.element : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + ITEM);
      var offsetEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-hscroll-bar', wrapper);

      if (offsetEle.scrollLeft > trgt.offsetLeft) {
        offsetEle.scrollLeft -= offsetEle.scrollLeft - trgt.offsetLeft;
      }

      var offsetLeft = offsetEle.scrollLeft + offsetEle.offsetWidth;
      var offsetRight = trgt.offsetLeft + trgt.offsetWidth;

      if (offsetLeft < offsetRight) {
        offsetEle.scrollLeft += offsetRight - offsetLeft;
      }
    }
  };

  MenuBase.prototype.setPosition = function (li, ul, top, left) {
    var px = 'px';
    this.toggleVisiblity(ul);

    if (ul === this.element || left > -1 && top > -1) {
      var collide = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["isCollide"])(ul, null, left, top);

      if (collide.indexOf('right') > -1) {
        left = left - ul.offsetWidth;
      }

      if (collide.indexOf('bottom') > -1) {
        var offset = this.callFit(ul, false, true, top, left);
        top = offset.top - 20;

        if (top < 0) {
          var newTop = pageYOffset + document.documentElement.clientHeight - ul.getBoundingClientRect().height;

          if (newTop > -1) {
            top = newTop;
          }
        }
      }

      collide = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["isCollide"])(ul, null, left, top);

      if (collide.indexOf('left') > -1) {
        var offset = this.callFit(ul, true, false, top, left);
        left = offset.left;
      }
    } else {
      if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
        top = Number(this.element.style.top.replace(px, ''));
        left = Number(this.element.style.left.replace(px, ''));
      } else {
        var x = this.enableRtl ? 'left' : 'right';
        var offset = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["calculatePosition"])(li, x, 'top');
        top = offset.top;
        left = offset.left;
        var collide = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["isCollide"])(ul, null, this.enableRtl ? left - ul.offsetWidth : left, top);
        var xCollision = collide.indexOf('left') > -1 || collide.indexOf('right') > -1;

        if (xCollision) {
          offset = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["calculatePosition"])(li, this.enableRtl ? 'right' : 'left', 'top');
          left = offset.left;
        }

        if (this.enableRtl || xCollision) {
          left = this.enableRtl && xCollision ? left : left - ul.offsetWidth;
        }

        if (collide.indexOf('bottom') > -1) {
          offset = this.callFit(ul, false, true, top, left);
          top = offset.top;
        }
      }
    }

    this.toggleVisiblity(ul, false);
    ul.style.top = top + px;
    ul.style.left = left + px;
  };

  MenuBase.prototype.toggleVisiblity = function (ul, isVisible) {
    if (isVisible === void 0) {
      isVisible = true;
    }

    ul.style.visibility = isVisible ? 'hidden' : '';
    ul.style.display = isVisible ? 'block' : 'none';
  };

  MenuBase.prototype.createItems = function (items) {
    var _this = this;

    var level = this.navIdx ? this.navIdx.length : 0;
    var fields = this.getFields(level);
    var showIcon = this.hasField(items, this.getField('iconCss', level));
    var listBaseOptions = {
      showIcon: showIcon,
      moduleName: 'menu',
      fields: fields,
      template: this.template,
      itemNavigable: true,
      itemCreating: function (args) {
        if (!args.curData[args.fields[fields.id]]) {
          args.curData[args.fields[fields.id]] = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('menuitem');
        }

        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.curData.htmlAttributes)) {
          args.curData.htmlAttributes = {};
        }

        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIE) {
          args.curData.htmlAttributes.role = 'menuitem';
          args.curData.htmlAttributes.tabindex = '-1';
        } else {
          Object.assign(args.curData.htmlAttributes, {
            role: 'menuitem',
            tabindex: '-1'
          });
        }

        if (_this.isMenu && !args.curData[_this.getField('separator', level)]) {
          args.curData.htmlAttributes['aria-label'] = args.curData[args.fields.text] ? args.curData[args.fields.text] : args.curData[args.fields.id];
        }

        if (args.curData[args.fields[fields.iconCss]] === '') {
          args.curData[args.fields[fields.iconCss]] = null;
        }
      },
      itemCreated: function (args) {
        if (args.curData[_this.getField('separator', level)]) {
          args.item.classList.add(SEPARATOR);
          args.item.setAttribute('role', 'separator');
        }

        if (showIcon && !args.curData[args.fields.iconCss] && !args.curData[_this.getField('separator', level)]) {
          args.item.classList.add('e-blankicon');
        }

        if (args.curData[args.fields.child] && args.curData[args.fields.child].length) {
          var span = _this.createElement('span', {
            className: ICONS + ' ' + CARET
          });

          args.item.appendChild(span);
          args.item.setAttribute('aria-haspopup', 'true');
          args.item.setAttribute('aria-expanded', 'false');
          args.item.classList.add('e-menu-caret-icon');
        }

        if (_this.isMenu && _this.template) {
          args.item.setAttribute('id', args.curData[args.fields.id].toString());
          args.item.removeAttribute('data-uid');

          if (args.item.classList.contains('e-level-1')) {
            args.item.classList.remove('e-level-1');
          }

          if (args.item.classList.contains('e-has-child')) {
            args.item.classList.remove('e-has-child');
          }

          args.item.removeAttribute('aria-level');
        }

        var eventArgs = {
          item: args.curData,
          element: args.item
        };

        _this.trigger('beforeItemRender', eventArgs);
      }
    };
    this.setProperties({
      'items': this.items
    }, true);

    if (this.isMenu) {
      listBaseOptions.templateID = this.element.id + TEMPLATE_PROPERTY;
    }

    var ul = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__["ListBase"].createList(this.createElement, items, listBaseOptions, !this.template, this);
    ul.setAttribute('tabindex', '0');

    if (this.isMenu) {
      ul.setAttribute('role', 'menu');
    } else {
      ul.setAttribute('role', 'menubar');
    }

    return ul;
  };

  MenuBase.prototype.moverHandler = function (e) {
    var trgt = e.target;
    this.liTrgt = trgt;
    var cli = this.getLI(trgt);
    var wrapper = cli ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(cli, '.e-' + this.getModuleName() + '-wrapper') : this.getWrapper();
    var hdrWrapper = this.getWrapper();
    var regex = new RegExp('-ej2menu-(.*)-popup');
    var ulId;
    var isDifferentElem = false;

    if (!wrapper) {
      return;
    }

    if (wrapper.id !== '') {
      ulId = regex.exec(wrapper.id)[1];
    } else {
      ulId = wrapper.querySelector('ul').id;
    }

    if (ulId !== this.element.id) {
      this.removeLIStateByClass([FOCUSED, SELECTED], [this.getWrapper()]);

      if (this.navIdx.length) {
        isDifferentElem = true;
      } else {
        return;
      }
    }

    if (cli && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(cli, '.e-' + this.getModuleName() + '-wrapper') && !isDifferentElem) {
      this.removeLIStateByClass([FOCUSED], this.isMenu ? [wrapper].concat(this.getPopups()) : [wrapper]);
      this.removeLIStateByClass([FOCUSED], this.isMenu ? [hdrWrapper].concat(this.getPopups()) : [hdrWrapper]);
      cli.classList.add(FOCUSED);

      if (!this.showItemOnClick) {
        this.clickHandler(e);
      }
    } else if (this.isMenu && this.showItemOnClick && !isDifferentElem) {
      this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));
    }

    if (this.isMenu) {
      if (!this.showItemOnClick && trgt.parentElement !== wrapper && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.e-' + this.getModuleName() + '-popup') && (!cli || cli && !this.getIndex(cli.id, true).length) && this.showSubMenuOn !== 'Hover') {
        this.removeLIStateByClass([FOCUSED], [wrapper]);

        if (this.navIdx.length) {
          this.isClosed = true;
          this.closeMenu(null, e);
        }
      } else if (isDifferentElem && !this.showItemOnClick) {
        if (this.navIdx.length) {
          this.isClosed = true;
          this.closeMenu(null, e);
        }
      }

      if (!this.isClosed) {
        this.removeStateWrapper();
      }

      this.isClosed = false;
    }
  };

  MenuBase.prototype.removeStateWrapper = function () {
    if (this.liTrgt) {
      var wrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.liTrgt, '.e-menu-vscroll');

      if (this.liTrgt.tagName === 'DIV' && wrapper) {
        this.removeLIStateByClass([FOCUSED, SELECTED], [wrapper]);
      }
    }
  };

  MenuBase.prototype.removeLIStateByClass = function (classList, element) {
    var li;

    var _loop_1 = function (i) {
      classList.forEach(function (className) {
        li = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + className, element[i]);

        if (li) {
          li.classList.remove(className);
        }
      });
    };

    for (var i = 0; i < element.length; i++) {
      _loop_1(i);
    }
  };

  MenuBase.prototype.getField = function (propName, level) {
    if (level === void 0) {
      level = 0;
    }

    var fieldName = this.fields["" + propName];
    return typeof fieldName === 'string' ? fieldName : !fieldName[level] ? fieldName[fieldName.length - 1].toString() : fieldName[level].toString();
  };

  MenuBase.prototype.getFields = function (level) {
    if (level === void 0) {
      level = 0;
    }

    return {
      id: this.getField('itemId', level),
      iconCss: this.getField('iconCss', level),
      text: this.getField('text', level),
      url: this.getField('url', level),
      child: this.getField('children', level),
      separator: this.getField('separator', level)
    };
  };

  MenuBase.prototype.hasField = function (items, field) {
    for (var i = 0, len = items.length; i < len; i++) {
      if (items[i]["" + field]) {
        return true;
      }
    }

    return false;
  };

  MenuBase.prototype.menuHeaderClickHandler = function (e) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.e-menu-wrapper').querySelector('ul.e-menu-parent').id !== this.element.id) {
      return;
    }

    if (this.element.className.indexOf('e-hide-menu') > -1) {
      this.openHamburgerMenu(e);
    } else {
      this.closeHamburgerMenu(e);
    }
  };

  MenuBase.prototype.clickHandler = function (e) {
    if (this.isTapHold) {
      this.isTapHold = false;
    } else {
      var wrapper = this.getWrapper();
      var trgt = e.target;
      var cli = this.cli = this.getLI(trgt);
      var regex = new RegExp('-ej2menu-(.*)-popup');
      var cliWrapper = cli ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(cli, '.e-' + this.getModuleName() + '-wrapper') : null;
      var isInstLI = cli && cliWrapper && (this.isMenu ? this.getIndex(cli.id, true).length > 0 : wrapper.firstElementChild.id === cliWrapper.firstElementChild.id);

      if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && this.isMenu) {
        this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));
        this.mouseDownHandler(e);
      }

      if (cli && cliWrapper && this.isMenu) {
        var cliWrapperId = cliWrapper.id ? regex.exec(cliWrapper.id)[1] : cliWrapper.querySelector('.e-menu-parent').id;

        if (this.element.id !== cliWrapperId) {
          return;
        }
      }

      if (isInstLI && e.type === 'click' && !cli.classList.contains(HEADER)) {
        this.setLISelected(cli);
        var navIdx = this.getIndex(cli.id, true);
        var item = this.getItem(navIdx);
        var eventArgs = {
          element: cli,
          item: item,
          event: e
        };
        this.trigger('select', eventArgs);
      }

      if (isInstLI && (e.type === 'mouseover' || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice || this.showItemOnClick)) {
        var ul = void 0;

        if (cli.classList.contains(HEADER)) {
          ul = wrapper.children[this.navIdx.length - 1];
          this.toggleAnimation(ul);
          var sli = this.getLIByClass(ul, SELECTED);

          if (sli) {
            sli.classList.remove(SELECTED);
          }

          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(cli.parentNode);
          this.navIdx.pop();
        } else {
          if (!cli.classList.contains(SEPARATOR)) {
            this.showSubMenu = true;
            var cul = cli.parentNode;
            this.cliIdx = this.getIdx(cul, cli);

            if (this.isMenu || !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              var culIdx = this.isMenu ? Array.prototype.indexOf.call([wrapper].concat(this.getPopups()), Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(cul, '.' + 'e-' + this.getModuleName() + '-wrapper')) : this.getIdx(wrapper, cul);

              if (this.navIdx[culIdx] === this.cliIdx) {
                this.showSubMenu = false;
              }

              if (culIdx !== this.navIdx.length && (e.type !== 'mouseover' || this.showSubMenu)) {
                var sli = this.getLIByClass(cul, SELECTED);

                if (sli) {
                  sli.classList.remove(SELECTED);
                }

                this.isClosed = true;
                this.keyType = 'click';

                if (this.showItemOnClick) {
                  this.setLISelected(cli);
                }

                this.closeMenu(culIdx + 1, e);

                if (this.showItemOnClick) {
                  this.setLISelected(cli);
                }
              }
            }

            if (!this.isClosed) {
              this.afterCloseMenu(e);
            }

            this.isClosed = false;
          }
        }
      } else {
        if (this.isMenu && trgt.tagName === 'DIV' && this.navIdx.length && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.e-menu-vscroll')) {
          var popupEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + POPUP);
          var cIdx = Array.prototype.indexOf.call(this.getPopups(), popupEle) + 1;

          if (cIdx < this.navIdx.length) {
            this.closeMenu(cIdx + 1, e);

            if (popupEle) {
              this.removeLIStateByClass([FOCUSED, SELECTED], [popupEle]);
            }
          }
        } else if (this.isMenu && this.hamburgerMode && trgt.tagName === 'SPAN' && trgt.classList.contains('e-menu-icon')) {
          this.menuHeaderClickHandler(e);
        } else {
          if (trgt.tagName !== 'UL' || (this.isMenu ? trgt.parentElement.classList.contains('e-menu-wrapper') && !this.getIndex(trgt.querySelector('.' + ITEM).id, true).length : trgt.parentElement !== wrapper)) {
            if (!cli) {
              this.removeLIStateByClass([SELECTED], [wrapper]);
            }

            if (!cli || !cli.querySelector('.' + CARET)) {
              this.closeMenu(null, e);
            }
          }
        }
      }
    }
  };

  MenuBase.prototype.afterCloseMenu = function (e) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e)) {
      return;
    }

    var isHeader;

    if (this.showSubMenu) {
      if (this.showItemOnClick && this.navIdx.length === 0) {
        isHeader = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.e-menu-parent.e-control');
      } else {
        isHeader = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, '.e-menu-parent.e-control');
      }

      var idx = this.navIdx.concat(this.cliIdx);
      var item = this.getItem(idx);

      if (item && item[this.getField('children', idx.length - 1)] && item[this.getField('children', idx.length - 1)].length) {
        if (e.type === 'mouseover' || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && this.isMenu) {
          this.setLISelected(this.cli);
        }

        if (!this.hamburgerMode && isHeader || this.hamburgerMode && this.cli.getAttribute('aria-expanded') === 'false') {
          this.cli.setAttribute('aria-expanded', 'true');
          this.navIdx.push(this.cliIdx);
          this.openMenu(this.cli, item, null, null, e);
        }
      } else {
        if (e.type !== 'mouseover') {
          this.closeMenu(null, e);
        }
      }

      if (!isHeader) {
        var cul = this.getUlByNavIdx();
        var sli = this.getLIByClass(cul, SELECTED);

        if (sli) {
          sli.setAttribute('aria-expanded', 'false');
          sli.classList.remove(SELECTED);
        }
      }
    }

    this.keyType = '';
  };

  MenuBase.prototype.setLISelected = function (li) {
    var sli = this.getLIByClass(li.parentElement, SELECTED);

    if (sli) {
      sli.classList.remove(SELECTED);
    }

    if (!this.isMenu) {
      li.classList.remove(FOCUSED);
    }

    li.classList.add(SELECTED);
  };

  MenuBase.prototype.getLIByClass = function (ul, classname) {
    for (var i = 0, len = ul.children.length; i < len; i++) {
      if (ul.children[i].classList.contains(classname)) {
        return ul.children[i];
      }
    }

    return null;
  };
  /**
   * This method is used to get the index of the menu item in the Menu based on the argument.
   *
   * @param {MenuItem | string} item - item be passed to get the index | id to be passed to get the item index.
   * @param {boolean} isUniqueId - Set `true` if it is a unique id.
   * @returns {void}
   */


  MenuBase.prototype.getItemIndex = function (item, isUniqueId) {
    var idx;

    if (typeof item === 'string') {
      idx = item;
    } else {
      idx = item.id;
    }

    var isText = isUniqueId === false ? false : true;
    var navIdx = this.getIndex(idx, isText);
    return navIdx;
  };
  /**
   * This method is used to set the menu item in the Menu based on the argument.
   *
   * @param {MenuItem} item - item need to be updated.
   * @param {string} id - id / text to be passed to update the item.
   * @param {boolean} isUniqueId - Set `true` if it is a unique id.
   * @returns {void}
   */


  MenuBase.prototype.setItem = function (item, id, isUniqueId) {
    var idx;

    if (isUniqueId) {
      idx = id ? id : item.id;
    } else {
      idx = id ? id : item.text;
    }

    var navIdx = this.getIndex(idx, isUniqueId);
    var newItem = this.getItem(navIdx);
    Object.assign(newItem, item);
  };

  MenuBase.prototype.getItem = function (navIdx) {
    navIdx = navIdx.slice();
    var idx = navIdx.pop();
    var items = this.getItems(navIdx);
    return items[idx];
  };

  MenuBase.prototype.getItems = function (navIdx) {
    var items = this.items;

    for (var i = 0; i < navIdx.length; i++) {
      items = items[navIdx[i]][this.getField('children', i)];
    }

    return items;
  };

  MenuBase.prototype.setItems = function (newItems, navIdx) {
    var items = this.getItems(navIdx);
    items.splice(0, items.length);

    for (var i = 0; i < newItems.length; i++) {
      items.splice(i, 0, newItems[i]);
    }
  };

  MenuBase.prototype.getIdx = function (ul, li, skipHdr) {
    if (skipHdr === void 0) {
      skipHdr = true;
    }

    var idx = Array.prototype.indexOf.call(ul.children, li);

    if (skipHdr && ul.children[0].classList.contains(HEADER)) {
      idx--;
    }

    return idx;
  };

  MenuBase.prototype.getLI = function (elem) {
    if (elem.tagName === 'LI' && elem.classList.contains('e-menu-item')) {
      return elem;
    }

    return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(elem, 'li.e-menu-item');
  };

  MenuBase.prototype.updateItemsByNavIdx = function () {
    var items = this.items;
    var count = 0;

    for (var index = 0; index < this.navIdx.length; index++) {
      items = items[index].items;

      if (!items) {
        break;
      }

      count++;
      var ul = this.getUlByNavIdx(count);

      if (!ul) {
        break;
      }

      this.updateItem(ul, items);
    }
  };

  MenuBase.prototype.removeChildElement = function (elem) {
    while (elem.firstElementChild) {
      elem.removeChild(elem.firstElementChild);
    }

    return elem;
  };
  /**
   * Called internally if any of the property value changed.
   *
   * @private
   * @param {MenuBaseModel} newProp - Specifies the new properties
   * @param {MenuBaseModel} oldProp - Specifies the old properties
   * @returns {void}
   */


  MenuBase.prototype.onPropertyChanged = function (newProp, oldProp) {
    var _this = this;

    var wrapper = this.getWrapper();

    var _loop_2 = function (prop) {
      switch (prop) {
        case 'cssClass':
          if (oldProp.cssClass) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([wrapper], oldProp.cssClass.split(' '));
          }

          if (newProp.cssClass) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([wrapper], newProp.cssClass.replace(/\s+/g, ' ').trim().split(' '));
          }

          break;

        case 'enableRtl':
          wrapper.classList.toggle(RTL);
          break;

        case 'showItemOnClick':
          this_1.unWireEvents();
          this_1.showItemOnClick = newProp.showItemOnClick;
          this_1.wireEvents();
          break;

        case 'enableScrolling':
          if (newProp.enableScrolling) {
            var ul_2;

            if (this_1.element.classList.contains('e-vertical')) {
              Object(_common_menu_scroll__WEBPACK_IMPORTED_MODULE_5__["addScrolling"])(this_1.createElement, wrapper, this_1.element, 'vscroll', this_1.enableRtl);
            } else {
              Object(_common_menu_scroll__WEBPACK_IMPORTED_MODULE_5__["addScrolling"])(this_1.createElement, wrapper, this_1.element, 'hscroll', this_1.enableRtl);
            }

            this_1.getPopups().forEach(function (wrapper) {
              ul_2 = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-ul', wrapper);
              Object(_common_menu_scroll__WEBPACK_IMPORTED_MODULE_5__["addScrolling"])(_this.createElement, wrapper, ul_2, 'vscroll', _this.enableRtl);
            });
          } else {
            var ul_3 = wrapper.children[0];

            if (this_1.element.classList.contains('e-vertical')) {
              Object(_common_menu_scroll__WEBPACK_IMPORTED_MODULE_5__["destroyScroll"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(ul_3, _common_v_scroll__WEBPACK_IMPORTED_MODULE_4__["VScroll"]), ul_3);
            } else {
              Object(_common_menu_scroll__WEBPACK_IMPORTED_MODULE_5__["destroyScroll"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(ul_3, _common_h_scroll__WEBPACK_IMPORTED_MODULE_3__["HScroll"]), ul_3);
            }

            wrapper.style.overflow = '';
            wrapper.appendChild(this_1.element);
            this_1.getPopups().forEach(function (wrapper) {
              ul_3 = wrapper.children[0];
              Object(_common_menu_scroll__WEBPACK_IMPORTED_MODULE_5__["destroyScroll"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(ul_3, _common_v_scroll__WEBPACK_IMPORTED_MODULE_4__["VScroll"]), ul_3);
              wrapper.style.overflow = '';
            });
          }

          break;

        case 'items':
          {
            var idx = void 0;
            var navIdx = void 0;
            var item = void 0; // eslint-disable-next-line @typescript-eslint/no-explicit-any

            if (this_1.isReact && this_1.template) {
              this_1.clearTemplate(['template']);
            }

            if (!Object.keys(oldProp.items).length) {
              this_1.updateItem(this_1.element, this_1.items);

              if (this_1.enableScrolling && this_1.element.parentElement.classList.contains('e-custom-scroll')) {
                if (this_1.element.classList.contains('e-vertical')) {
                  Object(_common_menu_scroll__WEBPACK_IMPORTED_MODULE_5__["addScrolling"])(this_1.createElement, wrapper, this_1.element, 'vscroll', this_1.enableRtl);
                } else {
                  Object(_common_menu_scroll__WEBPACK_IMPORTED_MODULE_5__["addScrolling"])(this_1.createElement, wrapper, this_1.element, 'hscroll', this_1.enableRtl);
                }
              }

              if (!this_1.hamburgerMode) {
                for (var i = 1, count = wrapper.childElementCount; i < count; i++) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(wrapper.lastElementChild);
                }
              }

              this_1.navIdx = [];
            } else {
              var keys = Object.keys(newProp.items);

              for (var i = 0; i < keys.length; i++) {
                navIdx = this_1.getChangedItemIndex(newProp, [], Number(keys[i]));

                if (navIdx.length <= this_1.getWrapper().children.length) {
                  idx = navIdx.pop();
                  item = this_1.getItems(navIdx);
                  this_1.insertAfter([item[idx]], item[idx].text);
                  this_1.removeItem(item, navIdx, idx);
                  this_1.setItems(item, navIdx);
                }

                navIdx.length = 0;
              }
            }

            break;
          }
      }
    };

    var this_1 = this;

    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      _loop_2(prop);
    }
  };

  MenuBase.prototype.updateItem = function (ul, items) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isMenu) {
      ul = this.removeChildElement(ul);
    } else {
      if (this.enableScrolling) {
        var wrapper1 = this.getWrapper();
        var ul1 = wrapper1.children[0];

        if (this.element.classList.contains('e-vertical')) {
          Object(_common_menu_scroll__WEBPACK_IMPORTED_MODULE_5__["destroyScroll"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(ul1, _common_v_scroll__WEBPACK_IMPORTED_MODULE_4__["VScroll"]), ul1);
        } else {
          Object(_common_menu_scroll__WEBPACK_IMPORTED_MODULE_5__["destroyScroll"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(ul1, _common_h_scroll__WEBPACK_IMPORTED_MODULE_3__["HScroll"]), ul1);
        }
      }

      ul.innerHTML = '';
    }

    var lis = [].slice.call(this.createItems(items).children);
    lis.forEach(function (li) {
      ul.appendChild(li);
    });
  };

  MenuBase.prototype.getChangedItemIndex = function (newProp, index, idx) {
    index.push(idx);
    var key = Object.keys(newProp.items[idx]).pop();

    if (key === 'items') {
      var item = newProp.items[idx];
      var popStr = Object.keys(item.items).pop();

      if (popStr) {
        this.getChangedItemIndex(item, index, Number(popStr));
      }
    } else {
      if (key === 'isParentArray' && index.length > 1) {
        index.pop();
      }
    }

    return index;
  };

  MenuBase.prototype.removeItem = function (item, navIdx, idx) {
    item.splice(idx, 1);
    var uls = this.getWrapper().children;

    if (navIdx.length < uls.length) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(uls[navIdx.length].children[idx]);
    }
  };
  /**
   * Used to unwire the bind events.
   *
   * @private
   * @param {string} targetSelctor - Specifies the target selector
   * @returns {void}
   */


  MenuBase.prototype.unWireEvents = function (targetSelctor) {
    if (targetSelctor === void 0) {
      targetSelctor = this.target;
    }

    var wrapper = this.getWrapper();

    if (targetSelctor) {
      var target = void 0;
      var touchModule = void 0;
      var targetElems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])(targetSelctor);

      for (var i = 0, len = targetElems.length; i < len; i++) {
        target = targetElems[i];

        if (this.isMenu) {
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, 'click', this.menuHeaderClickHandler);
        } else {
          if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIos) {
            touchModule = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(target, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"]);

            if (touchModule) {
              touchModule.destroy();
            }
          } else {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, 'contextmenu', this.cmenuHandler);
          }
        }
      }

      if (!this.isMenu) {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.targetElement, 'mousewheel DOMMouseScroll', this.scrollHandler);

        for (var _i = 0, _a = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["getScrollableParent"])(this.targetElement); _i < _a.length; _i++) {
          var parent_2 = _a[_i];
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(parent_2, 'mousewheel DOMMouseScroll', this.scrollHandler);
        }
      }
    }

    if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.isMenu ? document : wrapper, 'mouseover', this.delegateMoverHandler);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mousedown', this.delegateMouseDownHandler);
    }

    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'click', this.delegateClickHandler);
    this.unWireKeyboardEvent(wrapper);
    this.rippleFn();
  };

  MenuBase.prototype.unWireKeyboardEvent = function (element) {
    var keyboardModule = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"]);

    if (keyboardModule) {
      keyboardModule.destroy();
    }
  };

  MenuBase.prototype.toggleAnimation = function (ul, isMenuOpen) {
    var _this = this;

    if (isMenuOpen === void 0) {
      isMenuOpen = true;
    }

    var pUlHeight;
    var pElement;

    if (this.animationSettings.effect === 'None' || !isMenuOpen) {
      this.end(ul, isMenuOpen);
    } else {
      this.animation.animate(ul, {
        name: this.animationSettings.effect,
        duration: this.animationSettings.duration,
        timingFunction: this.animationSettings.easing,
        begin: function (options) {
          if (_this.hamburgerMode) {
            pElement = options.element.parentElement;
            options.element.style.position = 'absolute';
            pUlHeight = pElement.offsetHeight;
            options.element.style.maxHeight = options.element.offsetHeight + 'px';
            pElement.style.maxHeight = '';
          } else {
            options.element.style.display = 'block';
            options.element.style.maxHeight = options.element.getBoundingClientRect().height + 'px';
          }
        },
        progress: function (options) {
          if (_this.hamburgerMode) {
            pElement.style.minHeight = pUlHeight + options.element.offsetHeight + 'px';
          }
        },
        end: function (options) {
          if (_this.hamburgerMode) {
            options.element.style.position = '';
            options.element.style.maxHeight = '';
            pElement.style.minHeight = '';
            options.element.style.top = 0 + 'px';
            options.element.children[0].focus();

            _this.triggerOpen(options.element.children[0]);
          } else {
            _this.end(options.element, isMenuOpen);
          }
        }
      });
    }
  };

  MenuBase.prototype.triggerOpen = function (ul) {
    var item = this.navIdx.length ? this.getItem(this.navIdx) : null;
    var eventArgs = {
      element: ul,
      parentItem: item,
      items: item ? item.items : this.items
    };
    this.trigger('onOpen', eventArgs);

    if (!this.isMenu) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(ul, 'keydown', this.keyHandler, this);
    }
  };

  MenuBase.prototype.end = function (ul, isMenuOpen) {
    if (isMenuOpen) {
      ul.style.display = 'block';
      ul.style.maxHeight = '';
      this.triggerOpen(ul);

      if (ul.querySelector('.' + FOCUSED)) {
        ul.querySelector('.' + FOCUSED).focus();
      } else {
        var ele = this.getWrapper().children[this.getIdx(this.getWrapper(), ul) - 1];

        if (this.currentTarget) {
          if (!(this.currentTarget.classList.contains('e-numerictextbox') || this.currentTarget.classList.contains('e-textbox') || this.currentTarget.tagName === 'INPUT')) {
            if (ele) {
              ele.querySelector('.' + SELECTED).focus();
            } else {
              this.element.focus();
            }
          }
        } else {
          if (ele) {
            ele.querySelector('.' + SELECTED).focus();
          } else {
            this.element.focus();
          }
        }
      }
    } else {
      if (ul === this.element) {
        var fli = this.getLIByClass(this.element, FOCUSED);

        if (fli) {
          fli.classList.remove(FOCUSED);
        }

        var sli = this.getLIByClass(this.element, SELECTED);

        if (sli) {
          sli.classList.remove(SELECTED);
        }

        ul.style.display = 'none';
      } else {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(ul);
      }
    }
  };
  /**
   * Get the properties to be maintained in the persisted state.
   *
   * @returns {string} - Persist data
   */


  MenuBase.prototype.getPersistData = function () {
    return '';
  };
  /**
   * Get wrapper element.
   *
   * @returns {Element} - Wrapper element
   * @private
   */


  MenuBase.prototype.getWrapper = function () {
    return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, '.e-' + this.getModuleName() + '-wrapper');
  };

  MenuBase.prototype.getIndex = function (data, isUniqueId, items, nIndex, isCallBack, level) {
    if (items === void 0) {
      items = this.items;
    }

    if (nIndex === void 0) {
      nIndex = [];
    }

    if (isCallBack === void 0) {
      isCallBack = false;
    }

    if (level === void 0) {
      level = 0;
    }

    var item;
    level = isCallBack ? level + 1 : 0;

    for (var i = 0, len = items.length; i < len; i++) {
      item = items[i];

      if ((isUniqueId ? item[this.getField('itemId', level)] : item[this.getField('text', level)]) === data) {
        nIndex.push(i);
        break;
      } else if (item[this.getField('children', level)] && item[this.getField('children', level)].length) {
        nIndex = this.getIndex(data, isUniqueId, item[this.getField('children', level)], nIndex, true, level);

        if (nIndex[nIndex.length - 1] === -1) {
          if (i !== len - 1) {
            nIndex.pop();
          }
        } else {
          nIndex.unshift(i);
          break;
        }
      } else {
        if (i === len - 1) {
          nIndex.push(-1);
        }
      }
    }

    return !isCallBack && nIndex[0] === -1 ? [] : nIndex;
  };
  /**
   * This method is used to enable or disable the menu items in the Menu based on the items and enable argument.
   *
   * @param {string[]} items - Text items that needs to be enabled/disabled.
   * @param {boolean} enable - Set `true`/`false` to enable/disable the list items.
   * @param {boolean} isUniqueId - Set `true` if it is a unique id.
   * @returns {void}
   */


  MenuBase.prototype.enableItems = function (items, enable, isUniqueId) {
    if (enable === void 0) {
      enable = true;
    }

    var ul;
    var idx;
    var navIdx;
    var disabled = DISABLED;
    var skipItem;

    for (var i = 0; i < items.length; i++) {
      navIdx = this.getIndex(items[i], isUniqueId);

      if (this.navIdx.length) {
        if (navIdx.length !== 1) {
          skipItem = false;

          for (var i_1 = 0, len = navIdx.length - 1; i_1 < len; i_1++) {
            if (navIdx[i_1] !== this.navIdx[i_1]) {
              skipItem = true;
              break;
            }
          }

          if (skipItem) {
            continue;
          }
        }
      } else {
        if (navIdx.length !== 1) {
          continue;
        }
      }

      idx = navIdx.pop();
      ul = this.getUlByNavIdx(navIdx.length);

      if (ul && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(idx)) {
        if (enable) {
          if (this.isMenu) {
            ul.children[idx].classList.remove(disabled);
            ul.children[idx].removeAttribute('aria-disabled');
          } else {
            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && !ul.classList.contains('e-contextmenu')) {
              ul.children[idx + 1].classList.remove(disabled);
            } else {
              ul.children[idx].classList.remove(disabled);
            }
          }
        } else {
          if (this.isMenu) {
            ul.children[idx].classList.add(disabled);
            ul.children[idx].setAttribute('aria-disabled', 'true');
          } else {
            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && !ul.classList.contains('e-contextmenu')) {
              ul.children[idx + 1].classList.add(disabled);
            } else {
              ul.children[idx].classList.add(disabled);
            }
          }
        }
      }
    }
  };
  /**
   * This method is used to show the menu items in the Menu based on the items text.
   *
   * @param {string[]} items - Text items that needs to be shown.
   * @param {boolean} isUniqueId - Set `true` if it is a unique id.
   * @returns {void}
   */


  MenuBase.prototype.showItems = function (items, isUniqueId) {
    this.showHideItems(items, false, isUniqueId);
  };
  /**
   * This method is used to hide the menu items in the Menu based on the items text.
   *
   * @param {string[]} items - Text items that needs to be hidden.
   * @param {boolean} isUniqueId - Set `true` if it is a unique id.
   * @returns {void}
   */


  MenuBase.prototype.hideItems = function (items, isUniqueId) {
    this.showHideItems(items, true, isUniqueId);
  };

  MenuBase.prototype.showHideItems = function (items, ishide, isUniqueId) {
    var ul;
    var index;
    var navIdx;

    for (var i = 0; i < items.length; i++) {
      navIdx = this.getIndex(items[i], isUniqueId);
      index = navIdx.pop();
      ul = this.getUlByNavIdx(navIdx.length);

      if (ul) {
        var validUl = isUniqueId ? ul.children[index].id : ul.children[index].textContent;

        if (ishide && validUl === items[i]) {
          ul.children[index].classList.add(HIDE);
        } else if (!ishide && validUl === items[i]) {
          ul.children[index].classList.remove(HIDE);
        }
      }
    }
  };
  /**
   * It is used to remove the menu items from the Menu based on the items text.
   *
   * @param {string[]} items Text items that needs to be removed.
   * @param {boolean} isUniqueId - Set `true` if it is a unique id.
   * @returns {void}
   */


  MenuBase.prototype.removeItems = function (items, isUniqueId) {
    var idx;
    var navIdx;
    var iitems;

    for (var i = 0; i < items.length; i++) {
      navIdx = this.getIndex(items[i], isUniqueId);
      idx = navIdx.pop();
      iitems = this.getItems(navIdx);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(idx)) {
        this.removeItem(iitems, navIdx, idx);
      }
    }
  };
  /**
   * It is used to insert the menu items after the specified menu item text.
   *
   * @param {MenuItemModel[]} items - Items that needs to be inserted.
   * @param {string} text - Text item after that the element to be inserted.
   * @param {boolean} isUniqueId - Set `true` if it is a unique id.
   * @returns {void}
   */


  MenuBase.prototype.insertAfter = function (items, text, isUniqueId) {
    this.insertItems(items, text, isUniqueId);
  };
  /**
   * It is used to insert the menu items before the specified menu item text.
   *
   * @param {MenuItemModel[]} items - Items that needs to be inserted.
   * @param {string} text - Text item before that the element to be inserted.
   * @param  {boolean} isUniqueId - Set `true` if it is a unique id.
   * @returns {void}
   */


  MenuBase.prototype.insertBefore = function (items, text, isUniqueId) {
    this.insertItems(items, text, isUniqueId, false);
  };

  MenuBase.prototype.insertItems = function (items, text, isUniqueId, isAfter) {
    if (isAfter === void 0) {
      isAfter = true;
    }

    var li;
    var idx;
    var navIdx;
    var iitems;
    var menuitem;

    for (var i = 0; i < items.length; i++) {
      navIdx = this.getIndex(text, isUniqueId);
      idx = navIdx.pop();
      iitems = this.getItems(navIdx);
      menuitem = new MenuItem(iitems[0], 'items', items[i], true);
      iitems.splice(isAfter ? idx + 1 : idx, 0, menuitem);
      var uls = this.isMenu ? [this.getWrapper()].concat(this.getPopups()) : [].slice.call(this.getWrapper().children);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(idx) && navIdx.length < uls.length) {
        idx = isAfter ? idx + 1 : idx;
        li = this.createItems(iitems).children[idx];
        var ul = this.isMenu ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-menu-parent', uls[navIdx.length]) : uls[navIdx.length];
        ul.insertBefore(li, ul.children[idx]);
      }
    }
  };

  MenuBase.prototype.removeAttributes = function () {
    var _this = this;

    ['top', 'left', 'display', 'z-index'].forEach(function (key) {
      _this.element.style.removeProperty(key);
    });
    ['role', 'tabindex', 'class', 'style'].forEach(function (key) {
      if (key === 'class' && _this.element.classList.contains('e-menu-parent')) {
        _this.element.classList.remove('e-menu-parent');
      }

      if (['class', 'style'].indexOf(key) === -1 || !_this.element.getAttribute(key)) {
        _this.element.removeAttribute(key);
      }

      if (_this.isMenu && key === 'class' && _this.element.classList.contains('e-vertical')) {
        _this.element.classList.remove('e-vertical');
      }
    });
  };
  /**
   * Destroys the widget.
   *
   * @returns {void}
   */


  MenuBase.prototype.destroy = function () {
    var wrapper = this.getWrapper();

    if (wrapper) {
      this.unWireEvents();

      if (!this.isMenu) {
        this.clonedElement.style.display = '';

        if (this.clonedElement.tagName === 'EJS-CONTEXTMENU') {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.clonedElement], ['e-control', 'e-lib', 'e-' + this.getModuleName()]);
          this.element = this.clonedElement;
        } else {
          if (this.refreshing && this.clonedElement.childElementCount && this.clonedElement.children[0].tagName === 'LI') {
            this.setProperties({
              'items': []
            }, true);
          }

          if (document.getElementById(this.clonedElement.id)) {
            var refEle = this.clonedElement.nextElementSibling;

            if (refEle && refEle !== wrapper) {
              this.clonedElement.parentElement.insertBefore(this.element, refEle);
            } else {
              this.clonedElement.parentElement.appendChild(this.element);
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isMenu) {
              this.element = this.removeChildElement(this.element);
            } else {
              this.element.innerHTML = '';
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([].slice.call(this.clonedElement.children), this.element);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.clonedElement);
            this.removeAttributes();
          }
        }

        this.clonedElement = null;
      } else {
        this.closeMenu();

        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isMenu) {
          this.element = this.removeChildElement(this.element);
        } else {
          this.element.innerHTML = '';
        }

        this.removeAttributes();
        wrapper.parentNode.insertBefore(this.element, wrapper);
        this.clonedElement = null;
      }

      if (this.isMenu && this.clonedElement) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.element);
        wrapper.style.display = '';
        wrapper.classList.remove('e-' + this.getModuleName() + '-wrapper');
        wrapper.removeAttribute('data-ripple');
      } else {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(wrapper);
      }

      _super.prototype.destroy.call(this);

      if (this.template) {
        this.clearTemplate(['template']);
      }
    }

    this.rippleFn = null;
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MenuBase.prototype, "beforeItemRender", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MenuBase.prototype, "beforeOpen", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MenuBase.prototype, "onOpen", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MenuBase.prototype, "beforeClose", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MenuBase.prototype, "onClose", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MenuBase.prototype, "select", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MenuBase.prototype, "created", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], MenuBase.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], MenuBase.prototype, "hoverDelay", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MenuBase.prototype, "showItemOnClick", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], MenuBase.prototype, "target", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], MenuBase.prototype, "filter", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MenuBase.prototype, "template", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MenuBase.prototype, "enableScrolling", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MenuBase.prototype, "enableHtmlSanitizer", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
    itemId: 'id',
    text: 'text',
    parentId: 'parentId',
    iconCss: 'iconCss',
    url: 'url',
    separator: 'separator',
    children: 'items'
  }, FieldSettings)], MenuBase.prototype, "fields", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([], MenuItem)], MenuBase.prototype, "items", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
    duration: 400,
    easing: 'ease',
    effect: 'SlideDown'
  }, MenuAnimationSettings)], MenuBase.prototype, "animationSettings", void 0);

  MenuBase = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], MenuBase);
  return MenuBase;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/common/menu-scroll.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/common/menu-scroll.js ***!
  \****************************************************************************/
/*! exports provided: addScrolling, destroyScroll */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addScrolling", function() { return addScrolling; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "destroyScroll", function() { return destroyScroll; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _v_scroll__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v-scroll */ "./node_modules/@syncfusion/ej2-navigations/src/common/v-scroll.js");
/* harmony import */ var _h_scroll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./h-scroll */ "./node_modules/@syncfusion/ej2-navigations/src/common/h-scroll.js");



/**
 * Used to add scroll in menu.
 *
 * @param {createElementType} createElement - Specifies the create element model
 * @param {HTMLElement} container - Specifies the element container
 * @param {HTMLElement} content - Specifies the content element
 * @param {string} scrollType - Specifies the scroll type
 * @param {boolean} enableRtl - Specifies the enable RTL property
 * @param {boolean} offset - Specifies the offset value
 * @returns {HTMLElement} - Element
 * @hidden
 */

function addScrolling(createElement, container, content, scrollType, enableRtl, offset) {
  var containerOffset;
  var contentOffset;
  var parentElem = container.parentElement;

  if (scrollType === 'vscroll') {
    containerOffset = offset || container.getBoundingClientRect().height;
    contentOffset = content.getBoundingClientRect().height;
  } else {
    containerOffset = container.getBoundingClientRect().width;
    contentOffset = content.getBoundingClientRect().width;
  }

  if (containerOffset < contentOffset) {
    return createScrollbar(createElement, container, content, scrollType, enableRtl, offset);
  } else if (parentElem) {
    var width = parentElem.getBoundingClientRect().width;

    if (width < containerOffset && scrollType === 'hscroll') {
      contentOffset = width;
      container.style.maxWidth = width + 'px';
      return createScrollbar(createElement, container, content, scrollType, enableRtl, offset);
    }

    return content;
  } else {
    return content;
  }
}
/**
 * Used to create scroll bar in menu.
 *
 * @param {createElementType} createElement - Specifies the create element model
 * @param {HTMLElement} container - Specifies the element container
 * @param {HTMLElement} content - Specifies the content element
 * @param {string} scrollType - Specifies the scroll type
 * @param {boolean} enableRtl - Specifies the enable RTL property
 * @param {boolean} offset - Specifies the offset value
 * @returns {HTMLElement} - Element
 * @hidden
 */

function createScrollbar(createElement, container, content, scrollType, enableRtl, offset) {
  var scrollEle = createElement('div', {
    className: 'e-menu-' + scrollType
  });
  container.appendChild(scrollEle);
  scrollEle.appendChild(content);

  if (offset) {
    scrollEle.style.overflow = 'hidden';
    scrollEle.style.height = offset + 'px';
  } else {
    scrollEle.style.maxHeight = container.style.maxHeight;
    container.style.overflow = 'hidden';
  }

  var scrollObj;

  if (scrollType === 'vscroll') {
    scrollObj = new _v_scroll__WEBPACK_IMPORTED_MODULE_1__["VScroll"]({
      enableRtl: enableRtl
    }, scrollEle);
    scrollObj.scrollStep = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-' + scrollType + '-bar', container).offsetHeight / 2;
  } else {
    scrollObj = new _h_scroll__WEBPACK_IMPORTED_MODULE_2__["HScroll"]({
      enableRtl: enableRtl
    }, scrollEle);
    scrollObj.scrollStep = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-' + scrollType + '-bar', container).offsetWidth;
  }

  return scrollEle;
}
/**
 * Used to destroy the scroll option.
 *
 * @param {VScroll | HScroll} scrollObj - Specifies the scroller object
 * @param {Element} element - Specifies the element
 * @param {HTMLElement} skipEle - Specifies the skip  element
 * @returns {void}
 * @hidden
 */


function destroyScroll(scrollObj, element, skipEle) {
  if (scrollObj) {
    var menu = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-menu-parent', element);

    if (menu) {
      if (!skipEle || skipEle === menu) {
        scrollObj.destroy();
        element.parentElement.appendChild(menu);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(element);
      }
    } else {
      scrollObj.destroy();
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(element);
    }
  }
}

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/common/v-scroll.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/common/v-scroll.js ***!
  \*************************************************************************/
/*! exports provided: VScroll */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VScroll", function() { return VScroll; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};




var CLS_ROOT = 'e-vscroll';
var CLS_RTL = 'e-rtl';
var CLS_DISABLE = 'e-overlay';
var CLS_VSCROLLBAR = 'e-vscroll-bar';
var CLS_VSCROLLCON = 'e-vscroll-content';
var CLS_NAVARROW = 'e-nav-arrow';
var CLS_NAVUPARROW = 'e-nav-up-arrow';
var CLS_NAVDOWNARROW = 'e-nav-down-arrow';
var CLS_VSCROLLNAV = 'e-scroll-nav';
var CLS_VSCROLLNAVUP = 'e-scroll-up-nav';
var CLS_VSCROLLNAVDOWN = 'e-scroll-down-nav';
var CLS_DEVICE = 'e-scroll-device';
var CLS_OVERLAY = 'e-scroll-overlay';
var CLS_UPOVERLAY = 'e-scroll-up-overlay';
var CLS_DOWNOVERLAY = 'e-scroll-down-overlay';
var OVERLAY_MAXWID = 40;
/**
 * VScroll module is introduces vertical scroller when content exceeds the current viewing area.
 * It can be useful for the components like Toolbar, Tab which needs vertical scrolling alone.
 * Hidden content can be view by touch moving or icon click.
 * ```html
 * <div id="scroll"/>
 * <script>
 *   var scrollObj = new VScroll();
 *   scrollObj.appendTo("#scroll");
 * </script>
 * ```
 */

var VScroll =
/** @class */
function (_super) {
  __extends(VScroll, _super);
  /**
   * Initializes a new instance of the VScroll class.
   *
   * @param {VScrollModel} options  - Specifies VScroll model properties as options.
   * @param {string | HTMLElement} element  - Specifies the element for which vertical scrolling applies.
   */


  function VScroll(options, element) {
    return _super.call(this, options, element) || this;
  }
  /**
   * Initialize the event handler
   *
   * @private
   * @returns {void}
   */


  VScroll.prototype.preRender = function () {
    this.browser = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name;
    this.browserCheck = this.browser === 'mozilla';
    this.isDevice = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice;
    this.customStep = true;
    var ele = this.element;
    this.ieCheck = this.browser === 'edge' || this.browser === 'msie';
    this.initialize();

    if (ele.id === '') {
      ele.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('vscroll');
      this.uniqueId = true;
    }

    ele.style.display = 'block';

    if (this.enableRtl) {
      ele.classList.add(CLS_RTL);
    }
  };
  /**
   * To Initialize the vertical scroll rendering
   *
   * @private
   * @returns {void}
   */


  VScroll.prototype.render = function () {
    this.touchModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.element, {
      scroll: this.touchHandler.bind(this),
      swipe: this.swipeHandler.bind(this)
    });
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.scrollEle, 'scroll', this.scrollEventHandler, this);

    if (!this.isDevice) {
      this.createNavIcon(this.element);
    } else {
      this.element.classList.add(CLS_DEVICE);
      this.createOverlayElement(this.element);
    }

    this.setScrollState();
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'wheel', this.wheelEventHandler, this);
  };

  VScroll.prototype.setScrollState = function () {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.scrollStep) || this.scrollStep < 0) {
      this.scrollStep = this.scrollEle.offsetHeight;
      this.customStep = false;
    } else {
      this.customStep = true;
    }
  };

  VScroll.prototype.initialize = function () {
    var scrollCnt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: CLS_VSCROLLCON
    });
    var scrollBar = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: CLS_VSCROLLBAR
    });
    scrollBar.setAttribute('tabindex', '-1');
    var ele = this.element;
    var innerEle = [].slice.call(ele.children);

    for (var _i = 0, innerEle_1 = innerEle; _i < innerEle_1.length; _i++) {
      var ele_1 = innerEle_1[_i];
      scrollCnt.appendChild(ele_1);
    }

    scrollBar.appendChild(scrollCnt);
    ele.appendChild(scrollBar);
    scrollBar.style.overflow = 'hidden';
    this.scrollEle = scrollBar;
    this.scrollItems = scrollCnt;
  };

  VScroll.prototype.getPersistData = function () {
    var keyEntity = ['scrollStep'];
    return this.addOnPersist(keyEntity);
  };
  /**
   * Returns the current module name.
   *
   * @returns {string} - It returns the current module name.
   * @private
   */


  VScroll.prototype.getModuleName = function () {
    return 'vScroll';
  };
  /**
   * Removes the control from the DOM and also removes all its related events.
   *
   * @returns {void}
   */


  VScroll.prototype.destroy = function () {
    var el = this.element;
    el.style.display = '';
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], [CLS_ROOT, CLS_DEVICE, CLS_RTL]);
    var navs = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.e-' + el.id + '_nav.' + CLS_VSCROLLNAV, el);
    var overlays = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_OVERLAY, el);
    [].slice.call(overlays).forEach(function (ele) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(ele);
    });

    for (var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++) {
      var elem = _a[_i];
      el.appendChild(elem);
    }

    if (this.uniqueId) {
      this.element.removeAttribute('id');
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.scrollEle);

    if (navs.length > 0) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(navs[0]);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(navs[1])) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(navs[1]);
      }
    }

    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.scrollEle, 'scroll', this.scrollEventHandler);
    this.touchModule.destroy();
    this.touchModule = null;

    _super.prototype.destroy.call(this);
  };
  /**
   * Specifies the value to disable/enable the VScroll component.
   * When set to `true` , the component will be disabled.
   *
   * @param  {boolean} value - Based on this Boolean value, VScroll will be enabled (false) or disabled (true).
   * @returns {void}.
   */


  VScroll.prototype.disable = function (value) {
    var navEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.e-scroll-nav:not(.' + CLS_DISABLE + ')', this.element);

    if (value) {
      this.element.classList.add(CLS_DISABLE);
    } else {
      this.element.classList.remove(CLS_DISABLE);
    }

    [].slice.call(navEle).forEach(function (el) {
      el.setAttribute('tabindex', !value ? '0' : '-1');
    });
  };

  VScroll.prototype.createOverlayElement = function (element) {
    var id = element.id.concat('_nav');
    var downOverlayEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: CLS_OVERLAY + ' ' + CLS_DOWNOVERLAY
    });
    var clsDown = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVDOWN);
    var downEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      id: id.concat('down'),
      className: clsDown
    });
    var navItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: CLS_NAVDOWNARROW + ' ' + CLS_NAVARROW + ' e-icons'
    });
    downEle.appendChild(navItem);
    var upEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: CLS_OVERLAY + ' ' + CLS_UPOVERLAY
    });

    if (this.ieCheck) {
      downEle.classList.add('e-ie-align');
    }

    element.appendChild(downOverlayEle);
    element.appendChild(downEle);
    element.insertBefore(upEle, element.firstChild);
    this.eventBinding([downEle]);
  };

  VScroll.prototype.createNavIcon = function (element) {
    var id = element.id.concat('_nav');
    var clsDown = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVDOWN);
    var nav = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      id: id.concat('_down'),
      className: clsDown
    });
    nav.setAttribute('aria-disabled', 'false');
    var navItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: CLS_NAVDOWNARROW + ' ' + CLS_NAVARROW + ' e-icons'
    });
    var clsUp = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVUP);
    var navElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      id: id.concat('_up'),
      className: clsUp + ' ' + CLS_DISABLE
    });
    navElement.setAttribute('aria-disabled', 'true');
    var navUpItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: CLS_NAVUPARROW + ' ' + CLS_NAVARROW + ' e-icons'
    });
    navElement.appendChild(navUpItem);
    nav.appendChild(navItem);
    nav.setAttribute('tabindex', '0');
    element.appendChild(nav);
    element.insertBefore(navElement, element.firstChild);

    if (this.ieCheck) {
      nav.classList.add('e-ie-align');
      navElement.classList.add('e-ie-align');
    }

    this.eventBinding([nav, navElement]);
  };

  VScroll.prototype.onKeyPress = function (ev) {
    var _this = this;

    if (ev.key === 'Enter') {
      var timeoutFun_1 = function () {
        _this.keyTimeout = true;

        _this.eleScrolling(10, ev.target, true);
      };

      this.keyTimer = window.setTimeout(function () {
        timeoutFun_1();
      }, 100);
    }
  };

  VScroll.prototype.onKeyUp = function (ev) {
    if (ev.key !== 'Enter') {
      return;
    }

    if (this.keyTimeout) {
      this.keyTimeout = false;
    } else {
      ev.target.click();
    }

    clearTimeout(this.keyTimer);
  };

  VScroll.prototype.eventBinding = function (element) {
    var _this = this;

    [].slice.call(element).forEach(function (ele) {
      new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](ele, {
        tapHold: _this.tabHoldHandler.bind(_this),
        tapHoldThreshold: 500
      });
      ele.addEventListener('keydown', _this.onKeyPress.bind(_this));
      ele.addEventListener('keyup', _this.onKeyUp.bind(_this));
      ele.addEventListener('mouseup', _this.repeatScroll.bind(_this));
      ele.addEventListener('touchend', _this.repeatScroll.bind(_this));
      ele.addEventListener('contextmenu', function (e) {
        e.preventDefault();
      });
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(ele, 'click', _this.clickEventHandler, _this);
    });
  };

  VScroll.prototype.repeatScroll = function () {
    clearInterval(this.timeout);
  };

  VScroll.prototype.tabHoldHandler = function (ev) {
    var _this = this;

    var trgt = ev.originalEvent.target;
    trgt = this.contains(trgt, CLS_VSCROLLNAV) ? trgt.firstElementChild : trgt;
    var scrollDistance = 10;

    var timeoutFun = function () {
      _this.eleScrolling(scrollDistance, trgt, true);
    };

    this.timeout = window.setInterval(function () {
      timeoutFun();
    }, 50);
  };

  VScroll.prototype.contains = function (element, className) {
    return element.classList.contains(className);
  };

  VScroll.prototype.eleScrolling = function (scrollDis, trgt, isContinuous) {
    var classList = trgt.classList;

    if (classList.contains(CLS_VSCROLLNAV)) {
      classList = trgt.querySelector('.' + CLS_NAVARROW).classList;
    }

    if (classList.contains(CLS_NAVDOWNARROW)) {
      this.frameScrollRequest(scrollDis, 'add', isContinuous);
    } else if (classList.contains(CLS_NAVUPARROW)) {
      this.frameScrollRequest(scrollDis, '', isContinuous);
    }
  };

  VScroll.prototype.clickEventHandler = function (event) {
    this.eleScrolling(this.scrollStep, event.target, false);
  };

  VScroll.prototype.wheelEventHandler = function (e) {
    e.preventDefault();
    this.frameScrollRequest(this.scrollStep, e.deltaY > 0 ? 'add' : '', false);
  };

  VScroll.prototype.swipeHandler = function (e) {
    var swipeElement = this.scrollEle;
    var distance;

    if (e.velocity <= 1) {
      distance = e.distanceY / (e.velocity * 10);
    } else {
      distance = e.distanceY / e.velocity;
    }

    var start = 0.5;

    var animate = function () {
      var step = Math.sin(start);

      if (step <= 0) {
        window.cancelAnimationFrame(step);
      } else {
        if (e.swipeDirection === 'Up') {
          swipeElement.scrollTop += distance * step;
        } else if (e.swipeDirection === 'Down') {
          swipeElement.scrollTop -= distance * step;
        }

        start -= 0.02;
        window.requestAnimationFrame(animate);
      }
    };

    animate();
  };

  VScroll.prototype.scrollUpdating = function (scrollVal, action) {
    if (action === 'add') {
      this.scrollEle.scrollTop += scrollVal;
    } else {
      this.scrollEle.scrollTop -= scrollVal;
    }
  };

  VScroll.prototype.frameScrollRequest = function (scrollValue, action, isContinuous) {
    var _this = this;

    var step = 10;

    if (isContinuous) {
      this.scrollUpdating(scrollValue, action);
      return;
    }

    if (!this.customStep) {
      [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_OVERLAY, this.element)).forEach(function (el) {
        scrollValue -= el.offsetHeight;
      });
    }

    var animate = function () {
      if (scrollValue < step) {
        window.cancelAnimationFrame(step);
      } else {
        _this.scrollUpdating(step, action);

        scrollValue -= step;
        window.requestAnimationFrame(animate);
      }
    };

    animate();
  };

  VScroll.prototype.touchHandler = function (e) {
    var el = this.scrollEle;
    var distance = e.distanceY;

    if (e.scrollDirection === 'Up') {
      el.scrollTop = el.scrollTop + distance;
    } else if (e.scrollDirection === 'Down') {
      el.scrollTop = el.scrollTop - distance;
    }
  };

  VScroll.prototype.arrowDisabling = function (addDisableCls, removeDisableCls) {
    if (this.isDevice) {
      var arrowEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(addDisableCls) ? removeDisableCls : addDisableCls;
      var arrowIcon = arrowEle.querySelector('.' + CLS_NAVARROW);

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(addDisableCls)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(arrowIcon, [CLS_NAVDOWNARROW], [CLS_NAVUPARROW]);
      } else {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(arrowIcon, [CLS_NAVUPARROW], [CLS_NAVDOWNARROW]);
      }
    } else {
      addDisableCls.classList.add(CLS_DISABLE);
      addDisableCls.setAttribute('aria-disabled', 'true');
      addDisableCls.removeAttribute('tabindex');
      removeDisableCls.classList.remove(CLS_DISABLE);
      removeDisableCls.setAttribute('aria-disabled', 'false');
      removeDisableCls.setAttribute('tabindex', '0');
    }

    this.repeatScroll();
  };

  VScroll.prototype.scrollEventHandler = function (e) {
    var target = e.target;
    var height = target.offsetHeight;
    var navUpEle = this.element.querySelector('.' + CLS_VSCROLLNAVUP);
    var navDownEle = this.element.querySelector('.' + CLS_VSCROLLNAVDOWN);
    var upOverlay = this.element.querySelector('.' + CLS_UPOVERLAY);
    var downOverlay = this.element.querySelector('.' + CLS_DOWNOVERLAY);
    var scrollTop = target.scrollTop;

    if (scrollTop <= 0) {
      scrollTop = -scrollTop;
    }

    if (this.isDevice) {
      if (scrollTop < OVERLAY_MAXWID) {
        upOverlay.style.height = scrollTop + 'px';
      } else {
        upOverlay.style.height = '40px';
      }

      if (target.scrollHeight - Math.ceil(height + scrollTop) < OVERLAY_MAXWID) {
        downOverlay.style.height = target.scrollHeight - Math.ceil(height + scrollTop) + 'px';
      } else {
        downOverlay.style.height = '40px';
      }
    }

    if (scrollTop === 0) {
      this.arrowDisabling(navUpEle, navDownEle);
    } else if (Math.ceil(height + scrollTop + .1) >= target.scrollHeight) {
      this.arrowDisabling(navDownEle, navUpEle);
    } else {
      var disEle = this.element.querySelector('.' + CLS_VSCROLLNAV + '.' + CLS_DISABLE);

      if (disEle) {
        disEle.classList.remove(CLS_DISABLE);
        disEle.setAttribute('aria-disabled', 'false');
        disEle.setAttribute('tabindex', '0');
      }
    }
  };
  /**
   * Gets called when the model property changes.The data that describes the old and new values of property that changed.
   *
   * @param  {VScrollModel} newProp - It contains the new value of data.
   * @param  {VScrollModel} oldProp - It contains the old value of data.
   * @returns {void}
   * @private
   */


  VScroll.prototype.onPropertyChanged = function (newProp, oldProp) {
    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'scrollStep':
          this.setScrollState();
          break;

        case 'enableRtl':
          if (newProp.enableRtl) {
            this.element.classList.add(CLS_RTL);
          } else {
            this.element.classList.remove(CLS_RTL);
          }

          break;
      }
    }
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], VScroll.prototype, "scrollStep", void 0);

  VScroll = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], VScroll);
  return VScroll;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/context-menu/context-menu.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/context-menu/context-menu.js ***!
  \***********************************************************************************/
/*! exports provided: ContextMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContextMenu", function() { return ContextMenu; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-popups */ "./node_modules/@syncfusion/ej2-popups/index.js");
/* harmony import */ var _common_menu_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/menu-base */ "./node_modules/@syncfusion/ej2-navigations/src/common/menu-base.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/* eslint-disable @typescript-eslint/triple-slash-reference */
/// <reference path='../common/menu-base-model.d.ts'/>





/**
 * The ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.
 * ```html
 * <div id = 'target'></div>
 * <ul id = 'contextmenu'></ul>
 * ```
 * ```typescript
 * <script>
 * var contextMenuObj = new ContextMenu({items: [{ text: 'Cut' }, { text: 'Copy' },{ text: 'Paste' }], target: '#target'});
 * </script>
 * ```
 */

var ContextMenu =
/** @class */
function (_super) {
  __extends(ContextMenu, _super);
  /**
   * Constructor for creating the widget.
   *
   * @private
   * @param {ContextMenuModel} options - Specifies the context menu model
   * @param {string} element - Specifies the element
   */


  function ContextMenu(options, element) {
    return _super.call(this, options, element) || this;
  }
  /**
   * For internal use only - prerender processing.
   *
   * @private
   * @returns {void}
   */


  ContextMenu.prototype.preRender = function () {
    this.isMenu = false;
    this.element.id = this.element.id || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('ej2-contextmenu');

    _super.prototype.preRender.call(this);
  };

  ContextMenu.prototype.initialize = function () {
    _super.prototype.initialize.call(this);

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
      'role': 'menubar',
      'tabindex': '0'
    });
    this.element.style.zIndex = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["getZindexPartial"])(this.element).toString();
  };
  /**
   * This method is used to open the ContextMenu in specified position.
   *
   * @param {number} top - To specify ContextMenu vertical positioning.
   * @param {number} left - To specify ContextMenu horizontal positioning.
   * @param {HTMLElement} target - To calculate z-index for ContextMenu based upon the specified target.
   * @function open
   * @returns {void}
   */


  ContextMenu.prototype.open = function (top, left, target) {
    _super.prototype.openMenu.call(this, null, null, top, left, null, target);
  };
  /**
   * Closes the ContextMenu if it is opened.
   *
   * @function close
   * @returns {void}
   */


  ContextMenu.prototype.close = function () {
    _super.prototype.closeMenu.call(this);
  };
  /**
   * Called internally if any of the property value changed.
   *
   * @private
   * @param {ContextMenuModel} newProp - Specifies new properties
   * @param {ContextMenuModel} oldProp - Specifies old properties
   * @returns {void}
   */


  ContextMenu.prototype.onPropertyChanged = function (newProp, oldProp) {
    _super.prototype.onPropertyChanged.call(this, newProp, oldProp);

    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'filter':
          this.close();
          this.filter = newProp.filter;
          break;

        case 'target':
          this.unWireEvents(oldProp.target);
          this.wireEvents();
          break;
      }
    }
  };
  /**
   * Get module name.
   *
   * @returns {string} - Module Name
   * @private
   */


  ContextMenu.prototype.getModuleName = function () {
    return 'contextmenu';
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ContextMenu.prototype, "target", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ContextMenu.prototype, "filter", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([], _common_menu_base__WEBPACK_IMPORTED_MODULE_2__["MenuItem"])], ContextMenu.prototype, "items", void 0);

  ContextMenu = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], ContextMenu);
  return ContextMenu;
}(_common_menu_base__WEBPACK_IMPORTED_MODULE_2__["MenuBase"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/context-menu/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/context-menu/index.js ***!
  \****************************************************************************/
/*! exports provided: ContextMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _context_menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./context-menu */ "./node_modules/@syncfusion/ej2-navigations/src/context-menu/context-menu.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContextMenu", function() { return _context_menu__WEBPACK_IMPORTED_MODULE_0__["ContextMenu"]; });

/**
 * ContextMenu modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/index.js ***!
  \***************************************************************/
/*! exports provided: HScroll, VScroll, addScrolling, destroyScroll, MenuAnimationSettings, MenuItem, FieldSettings, Item, Toolbar, AccordionActionSettings, AccordionAnimationSettings, AccordionItem, Accordion, ContextMenu, Menu, TabActionSettings, TabAnimationSettings, Header, TabItem, Tab, FieldsSettings, ActionSettings, NodeAnimationSettings, TreeView, Sidebar, BreadcrumbOverflowMode, BreadcrumbItem, Breadcrumb, CarouselSwipeMode, CarouselItem, Carousel, AppBar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common/index */ "./node_modules/@syncfusion/ej2-navigations/src/common/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HScroll", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["HScroll"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VScroll", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["VScroll"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addScrolling", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["addScrolling"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "destroyScroll", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["destroyScroll"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MenuAnimationSettings", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["MenuAnimationSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MenuItem", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["MenuItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FieldSettings", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["FieldSettings"]; });

/* harmony import */ var _toolbar_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toolbar/index */ "./node_modules/@syncfusion/ej2-navigations/src/toolbar/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Item", function() { return _toolbar_index__WEBPACK_IMPORTED_MODULE_1__["Item"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Toolbar", function() { return _toolbar_index__WEBPACK_IMPORTED_MODULE_1__["Toolbar"]; });

/* harmony import */ var _accordion_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./accordion/index */ "./node_modules/@syncfusion/ej2-navigations/src/accordion/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AccordionActionSettings", function() { return _accordion_index__WEBPACK_IMPORTED_MODULE_2__["AccordionActionSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AccordionAnimationSettings", function() { return _accordion_index__WEBPACK_IMPORTED_MODULE_2__["AccordionAnimationSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AccordionItem", function() { return _accordion_index__WEBPACK_IMPORTED_MODULE_2__["AccordionItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Accordion", function() { return _accordion_index__WEBPACK_IMPORTED_MODULE_2__["Accordion"]; });

/* harmony import */ var _context_menu_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./context-menu/index */ "./node_modules/@syncfusion/ej2-navigations/src/context-menu/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContextMenu", function() { return _context_menu_index__WEBPACK_IMPORTED_MODULE_3__["ContextMenu"]; });

/* harmony import */ var _menu_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./menu/index */ "./node_modules/@syncfusion/ej2-navigations/src/menu/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Menu", function() { return _menu_index__WEBPACK_IMPORTED_MODULE_4__["Menu"]; });

/* harmony import */ var _tab_index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tab/index */ "./node_modules/@syncfusion/ej2-navigations/src/tab/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TabActionSettings", function() { return _tab_index__WEBPACK_IMPORTED_MODULE_5__["TabActionSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TabAnimationSettings", function() { return _tab_index__WEBPACK_IMPORTED_MODULE_5__["TabAnimationSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Header", function() { return _tab_index__WEBPACK_IMPORTED_MODULE_5__["Header"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TabItem", function() { return _tab_index__WEBPACK_IMPORTED_MODULE_5__["TabItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Tab", function() { return _tab_index__WEBPACK_IMPORTED_MODULE_5__["Tab"]; });

/* harmony import */ var _treeview_index__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./treeview/index */ "./node_modules/@syncfusion/ej2-navigations/src/treeview/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FieldsSettings", function() { return _treeview_index__WEBPACK_IMPORTED_MODULE_6__["FieldsSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ActionSettings", function() { return _treeview_index__WEBPACK_IMPORTED_MODULE_6__["ActionSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NodeAnimationSettings", function() { return _treeview_index__WEBPACK_IMPORTED_MODULE_6__["NodeAnimationSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TreeView", function() { return _treeview_index__WEBPACK_IMPORTED_MODULE_6__["TreeView"]; });

/* harmony import */ var _sidebar_index__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./sidebar/index */ "./node_modules/@syncfusion/ej2-navigations/src/sidebar/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sidebar", function() { return _sidebar_index__WEBPACK_IMPORTED_MODULE_7__["Sidebar"]; });

/* harmony import */ var _breadcrumb_index__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./breadcrumb/index */ "./node_modules/@syncfusion/ej2-navigations/src/breadcrumb/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BreadcrumbOverflowMode", function() { return _breadcrumb_index__WEBPACK_IMPORTED_MODULE_8__["BreadcrumbOverflowMode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BreadcrumbItem", function() { return _breadcrumb_index__WEBPACK_IMPORTED_MODULE_8__["BreadcrumbItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Breadcrumb", function() { return _breadcrumb_index__WEBPACK_IMPORTED_MODULE_8__["Breadcrumb"]; });

/* harmony import */ var _carousel_index__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./carousel/index */ "./node_modules/@syncfusion/ej2-navigations/src/carousel/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CarouselSwipeMode", function() { return _carousel_index__WEBPACK_IMPORTED_MODULE_9__["CarouselSwipeMode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CarouselItem", function() { return _carousel_index__WEBPACK_IMPORTED_MODULE_9__["CarouselItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Carousel", function() { return _carousel_index__WEBPACK_IMPORTED_MODULE_9__["Carousel"]; });

/* harmony import */ var _appbar_index__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./appbar/index */ "./node_modules/@syncfusion/ej2-navigations/src/appbar/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AppBar", function() { return _appbar_index__WEBPACK_IMPORTED_MODULE_10__["AppBar"]; });

/**
 * Navigation all modules
 */












/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/menu/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/menu/index.js ***!
  \********************************************************************/
/*! exports provided: Menu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menu */ "./node_modules/@syncfusion/ej2-navigations/src/menu/menu.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Menu", function() { return _menu__WEBPACK_IMPORTED_MODULE_0__["Menu"]; });

/**
 * Menu modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/menu/menu.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/menu/menu.js ***!
  \*******************************************************************/
/*! exports provided: Menu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Menu", function() { return Menu; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _common_menu_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/menu-base */ "./node_modules/@syncfusion/ej2-navigations/src/common/menu-base.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/* eslint-disable @typescript-eslint/triple-slash-reference */
/// <reference path='../common/menu-base-model.d.ts'/>





var VMENU = 'e-vertical';
var SCROLLABLE = 'e-scrollable';
var HAMBURGER = 'e-hamburger';
/**
 * The Menu is a graphical user interface that serve as navigation headers for your application or site.
 * ```html
 * <ul id = 'menu'></ul>
 * ```
 * ```typescript
 * <script>
 * var menuObj = new Menu({ items: [{ text: 'Home' }, { text: 'Contact Us' },{ text: 'Login' }]});
 * menuObj.appendTo("#menu");
 * </script>
 * ```
 */

var Menu =
/** @class */
function (_super) {
  __extends(Menu, _super);
  /**
   * Constructor for creating the component.
   *
   * @private
   * @param {MenuModel} options - Specifies the menu model
   * @param {string} element - Specifies the element
   */


  function Menu(options, element) {
    var _this = _super.call(this, options, element) || this;

    _this.tempItems = [];
    return _this;
  }
  /**
   * Get module name.
   *
   * @private
   * @returns {string} - Module Name
   */


  Menu.prototype.getModuleName = function () {
    return 'menu';
  };
  /**
   * For internal use only - prerender processing.
   *
   * @private
   * @returns {void}
   */


  Menu.prototype.preRender = function () {
    this.isMenu = true;
    this.element.id = this.element.id || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('ej2-menu');

    if (this.template) {
      try {
        if (typeof this.template !== 'function' && document.querySelectorAll(this.template).length) {
          this.template = document.querySelector(this.template).innerHTML.trim();
          this.clearChanges();
        }
      } catch (e) {
        /* action on catch */
      }

      this.updateMenuItems(this.items);
    } else {
      this.updateMenuItems(this.items);
    }

    _super.prototype.preRender.call(this);
  };

  Menu.prototype.initialize = function () {
    _super.prototype.initialize.call(this);

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
      'role': 'menubar',
      'tabindex': '0'
    });

    if (this.orientation === 'Vertical') {
      this.element.classList.add(VMENU);

      if (this.hamburgerMode && !this.target) {
        this.element.previousElementSibling.classList.add(VMENU);
      }

      this.element.setAttribute('aria-orientation', 'vertical');
    } else {
      if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && !this.enableScrolling) {
        this.element.parentElement.classList.add(SCROLLABLE);
      }
    }

    if (this.hamburgerMode) {
      this.element.parentElement.classList.add(HAMBURGER);

      if (this.orientation === 'Horizontal') {
        this.element.classList.add('e-hide-menu');
      }
    }
  };

  Menu.prototype.updateMenuItems = function (items) {
    this.tempItems = items;
    this.items = [];
    this.tempItems.map(this.createMenuItems, this);
    this.setProperties({
      items: this.items
    }, true);
    this.tempItems = [];
  };
  /**
   * Called internally if any of the property value changed.
   *
   * @private
   * @param {MenuModel} newProp - Specifies the new properties.
   * @param {MenuModel} oldProp - Specifies the old properties.
   * @returns {void}
   */


  Menu.prototype.onPropertyChanged = function (newProp, oldProp) {
    var _this = this;

    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'orientation':
          if (newProp.orientation === 'Vertical') {
            this.element.classList.add(VMENU);

            if (this.hamburgerMode) {
              if (!this.target) {
                this.element.previousElementSibling.classList.add(VMENU);
              }

              this.element.classList.remove('e-hide-menu');
            }

            this.element.setAttribute('aria-orientation', 'vertical');
          } else {
            this.element.classList.remove(VMENU);

            if (this.hamburgerMode) {
              if (!this.target) {
                this.element.previousElementSibling.classList.remove(VMENU);
              }

              this.element.classList.add('e-hide-menu');
            }

            this.element.removeAttribute('aria-orientation');
          }

          break;

        case 'items':
          if (!Object.keys(oldProp.items).length) {
            this.updateMenuItems(newProp.items);
          }

          break;

        case 'hamburgerMode':
          if (!this.element.previousElementSibling) {
            _super.prototype.createHeaderContainer.call(this);
          }

          if (newProp.hamburgerMode) {
            this.element.parentElement.classList.add(HAMBURGER);
            [].slice.call(this.element.getElementsByClassName('e-blankicon')).forEach(function (li) {
              li.style[_this.enableRtl ? 'paddingRight' : 'paddingLeft'] = '';
            });
          } else {
            this.element.parentElement.classList.remove(HAMBURGER);

            if (this.orientation === 'Vertical') {
              this.setBlankIconStyle(this.element);
            }
          }

          if (this.orientation === 'Vertical') {
            if (!this.target) {
              this.element.previousElementSibling.classList.add(VMENU);
            }

            this.element.classList.remove('e-hide-menu');
          } else {
            if (this.target) {
              this.element.previousElementSibling.classList.add(VMENU);
            } else {
              this.element.previousElementSibling.classList.remove(VMENU);
            }

            this.element.classList[newProp.hamburgerMode ? 'add' : 'remove']('e-hide-menu');
          }

          break;

        case 'title':
          if (this.hamburgerMode && this.element.previousElementSibling) {
            newProp.title = this.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(newProp.title) : newProp.title;
            this.element.previousElementSibling.querySelector('.e-menu-title').innerHTML = newProp.title;
          }

          break;

        case 'target':
          if (this.hamburgerMode) {
            this.unWireEvents(oldProp.target);
            this.wireEvents();

            if (this.orientation === 'Horizontal') {
              if (!newProp.target) {
                if (!this.element.previousElementSibling) {
                  _super.prototype.createHeaderContainer.call(this);
                }

                this.element.previousElementSibling.classList.remove(VMENU);
              } else {
                this.element.previousElementSibling.classList.add(VMENU);
              }

              this.element.classList.add('e-hide-menu');
            }
          }

          break;
      }
    }

    _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
  };

  Menu.prototype.createMenuItems = function (item) {
    var idx;
    var i;
    var items = this.items;
    var pIdField = this.getField('parentId');

    if (item["" + pIdField]) {
      idx = this.getIndex(item["" + pIdField].toString(), true);

      for (i = 0; i < idx.length; i++) {
        if (!items[idx[i]].items) {
          items[idx[i]].items = [];
        }

        items = items[idx[i]].items;
      }

      items.push(item);
    } else {
      this.items.push(item);
    }
  };
  /**
   * This method is used to open the Menu in hamburger mode.
   *
   * @function open
   * @returns {void}
   */


  Menu.prototype.open = function () {
    _super.prototype.openHamburgerMenu.call(this);
  };
  /**
   * Closes the Menu if it is opened in hamburger mode.
   *
   * @function close
   * @returns {void}
   */


  Menu.prototype.close = function () {
    _super.prototype.closeHamburgerMenu.call(this);
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Horizontal')], Menu.prototype, "orientation", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Menu.prototype, "target", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Menu.prototype, "template", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Menu.prototype, "enableScrolling", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Menu.prototype, "hamburgerMode", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Menu')], Menu.prototype, "title", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Menu.prototype, "enableHtmlSanitizer", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
    itemId: 'id',
    text: 'text',
    parentId: 'parentId',
    iconCss: 'iconCss',
    url: 'url',
    separator: 'separator',
    children: 'items'
  }, _common_menu_base__WEBPACK_IMPORTED_MODULE_1__["FieldSettings"])], Menu.prototype, "fields", void 0);

  Menu = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Menu);
  return Menu;
}(_common_menu_base__WEBPACK_IMPORTED_MODULE_1__["MenuBase"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/sidebar/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/sidebar/index.js ***!
  \***********************************************************************/
/*! exports provided: Sidebar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _sidebar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sidebar */ "./node_modules/@syncfusion/ej2-navigations/src/sidebar/sidebar.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sidebar", function() { return _sidebar__WEBPACK_IMPORTED_MODULE_0__["Sidebar"]; });

/**
 * Sidebar modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/sidebar/sidebar.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/sidebar/sidebar.js ***!
  \*************************************************************************/
/*! exports provided: Sidebar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sidebar", function() { return Sidebar; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};




var CONTROL = 'e-control';
var ROOT = 'e-sidebar';
var DOCKER = 'e-dock';
var CLOSE = 'e-close';
var OPEN = 'e-open';
var TRASITION = 'e-transition';
var DEFAULTBACKDROP = 'e-sidebar-overlay';
var RTL = 'e-rtl';
var RIGHT = 'e-right';
var LEFT = 'e-left';
var OVER = 'e-over';
var PUSH = 'e-push';
var SLIDE = 'e-slide';
var VISIBILITY = 'e-visibility';
var DISPLAY = 'e-sidebar-display';
var MAINCONTENTANIMATION = 'e-content-animation';
var DISABLEANIMATION = 'e-disable-animation';
var CONTEXT = 'e-sidebar-context';
var SIDEBARABSOLUTE = 'e-sidebar-absolute';
/**
 * Sidebar is an expandable or collapsible
 * component that typically act as a side container to place the primary or secondary content alongside of the main content.
 * ```html
 * <aside id="sidebar">
 * </aside>
 * ```
 * ```typescript
 * <script>
 *   let sidebarObject: Sidebar = new Sidebar();
 *   sidebarObject.appendTo("#sidebar");
 * </script>
 * ```
 */

var Sidebar =
/** @class */
function (_super) {
  __extends(Sidebar, _super);
  /* eslint-enable */


  function Sidebar(options, element) {
    return _super.call(this, options, element) || this;
  }

  Sidebar.prototype.preRender = function () {
    this.setWidth();
  };

  Sidebar.prototype.render = function () {
    this.initialize();
    this.wireEvents();
    this.renderComplete();
  };

  Sidebar.prototype.initialize = function () {
    this.setTarget();
    this.addClass();
    this.setZindex();

    if (this.enableDock) {
      this.setDock();
    }

    if (this.isOpen) {
      this.show();
      this.firstRender = true;
    } else {
      this.setMediaQuery();
    }

    this.checkType(true);
    this.setType(this.type);
    this.setCloseOnDocumentClick();
    this.setEnableRTL();

    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
      this.windowWidth = window.innerWidth;
    }
  };

  Sidebar.prototype.setEnableRTL = function () {
    (this.enableRtl ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"] : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], RTL);
  };

  Sidebar.prototype.setTarget = function () {
    this.targetEle = this.element.nextElementSibling;
    this.sidebarEleCopy = this.element.cloneNode(true);

    if (typeof this.target === 'string') {
      this.setProperties({
        target: document.querySelector(this.target)
      }, true);
    }

    if (this.target) {
      this.target.insertBefore(this.element, this.target.children[0]);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], SIDEBARABSOLUTE);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.target], CONTEXT);
      this.targetEle = this.getTargetElement();
    }
  };

  Sidebar.prototype.getTargetElement = function () {
    var siblingElement = this.element.nextElementSibling;

    while (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(siblingElement)) {
      if (!siblingElement.classList.contains(ROOT)) {
        break;
      }

      siblingElement = siblingElement.nextElementSibling;
    }

    return siblingElement;
  };

  Sidebar.prototype.setCloseOnDocumentClick = function () {
    if (this.closeOnDocumentClick) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mousedown touchstart', this.documentclickHandler, this);
    } else {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mousedown touchstart', this.documentclickHandler);
    }
  };

  Sidebar.prototype.setWidth = function () {
    if (this.enableDock && this.position === 'Left') {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
        'width': this.setDimension(this.dockSize)
      });
    } else if (this.enableDock && this.position === 'Right') {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
        'width': this.setDimension(this.dockSize)
      });
    } else if (!this.enableDock) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
        'width': this.setDimension(this.width)
      });
    }
  };

  Sidebar.prototype.setDimension = function (width) {
    if (typeof width === 'number') {
      width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
    } else if (typeof width === 'string') {
      width = width.match(/px|%|em/) ? width : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
    } else {
      width = '100%';
    }

    return width;
  };

  Sidebar.prototype.setZindex = function () {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
      'z-index': '' + this.zIndex
    });
  };

  Sidebar.prototype.addClass = function () {
    if (this.element.tagName === 'EJS-SIDEBAR') {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], DISPLAY);
    }

    var classELement = document.querySelector('.e-main-content');

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(classELement || this.targetEle)) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([classELement || this.targetEle], [MAINCONTENTANIMATION]);
    }

    this.tabIndex = this.element.hasAttribute('tabindex') ? this.element.getAttribute('tabindex') : null;

    if (!this.enableDock && this.type !== 'Auto') {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], [VISIBILITY]);
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], [OPEN, CLOSE, RIGHT, LEFT, SLIDE, PUSH, OVER]);
    this.element.classList.add(ROOT);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], this.position === 'Right' ? RIGHT : LEFT);

    if (this.enableDock) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], DOCKER);
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tabIndex)) {
      this.element.setAttribute('tabindex', this.tabIndex);
    }

    if (this.type === 'Auto' && !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
      this.show();
    } else if (!this.isOpen) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], [CLOSE, DISABLEANIMATION]);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], DISABLEANIMATION);
    }
  };

  Sidebar.prototype.checkType = function (val) {
    if (!(this.type === 'Push' || this.type === 'Over' || this.type === 'Slide')) {
      this.type = 'Auto';
    } else {
      if (!this.element.classList.contains(CLOSE) && !val) {
        this.hide();
      }
    }
  };

  Sidebar.prototype.transitionEnd = function (e) {
    this.setDock();

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e) && !this.firstRender) {
      this.triggerChange();
    }

    this.firstRender = false;
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'transitionend', this.transitionEnd);
  };

  Sidebar.prototype.destroyBackDrop = function () {
    var sibling = document.querySelector('.e-main-content') || this.targetEle;

    if (this.target && this.showBackdrop && sibling && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.defaultBackdropDiv)) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.defaultBackdropDiv], DEFAULTBACKDROP);
    } else if (this.showBackdrop && this.modal) {
      this.modal.style.display = 'none';
      this.modal.outerHTML = '';
      this.modal = null;
    }
  };
  /* eslint-disable */

  /**
   * Hide the Sidebar component, if it is in an open state.
   *
   * @returns {void}
   *
   */


  Sidebar.prototype.hide = function (e) {
    var _this = this;

    var closeArguments = {
      model: this,
      element: this.element,
      cancel: false,
      isInteracted: !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e),
      event: e || null
    };
    this.trigger('close', closeArguments, function (observedcloseArgs) {
      if (!observedcloseArgs.cancel) {
        if (_this.element.classList.contains(CLOSE)) {
          return;
        }

        if (_this.element.classList.contains(OPEN) && !_this.animate) {
          _this.triggerChange();
        }

        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this.element], CLOSE);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_this.element], OPEN);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(_this.element, {
          'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(_this.enableDock ? _this.dockSize : _this.width)
        });

        _this.setType(_this.type);

        var sibling = document.querySelector('.e-main-content') || _this.targetEle;

        if (!_this.enableDock && sibling) {
          sibling.style.transform = 'translateX(' + 0 + 'px)';
          sibling.style[_this.position === 'Left' ? 'marginLeft' : 'marginRight'] = '0px';
        }

        _this.destroyBackDrop();

        _this.setAnimation();

        if (_this.type === 'Slide') {
          document.body.classList.remove('e-sidebar-overflow');
        }

        _this.setProperties({
          isOpen: false
        }, true);

        if (_this.enableDock) {
          setTimeout(function () {
            return _this.setTimeOut();
          }, 50);
        }

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(_this.element, 'transitionend', _this.transitionEnd, _this);
      }
    });
  };

  Sidebar.prototype.setTimeOut = function () {
    var sibling = document.querySelector('.e-main-content') || this.targetEle;
    var elementWidth = this.element.getBoundingClientRect().width;

    if (this.element.classList.contains(OPEN) && sibling && !(this.type === 'Over' && this.enableDock)) {
      if (this.position === 'Left') {
        sibling.style.marginLeft = this.setDimension(this.width === 'auto' ? elementWidth : this.width);
      } else {
        sibling.style.marginRight = this.setDimension(this.width === 'auto' ? elementWidth : this.width);
      }
    } else if (this.element.classList.contains(CLOSE) && sibling) {
      if (this.position === 'Left') {
        sibling.style.marginLeft = this.setDimension(this.dockSize === 'auto' ? elementWidth : this.dockSize);
      } else {
        sibling.style.marginRight = this.setDimension(this.dockSize === 'auto' ? elementWidth : this.dockSize);
      }
    }
  };
  /* eslint-disable */

  /**
   * Shows the Sidebar component, if it is in closed state.
   *
   * @returns {void}
   */


  Sidebar.prototype.show = function (e) {
    var _this = this;

    var openArguments = {
      model: this,
      element: this.element,
      cancel: false,
      isInteracted: !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e),
      event: e || null
    };
    this.trigger('open', openArguments, function (observedopenArgs) {
      if (!observedopenArgs.cancel) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_this.element], VISIBILITY);

        if (_this.element.classList.contains(OPEN)) {
          return;
        }

        if (_this.element.classList.contains(CLOSE) && !_this.animate) {
          _this.triggerChange();
        }

        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this.element], [OPEN, TRASITION]);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(_this.element, {
          'transform': ''
        });
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_this.element], CLOSE);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(_this.element, {
          'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(_this.width)
        });

        _this.setType(_this.type);

        _this.createBackDrop();

        _this.setAnimation();

        if (_this.type === 'Slide') {
          document.body.classList.add('e-sidebar-overflow');
        }

        _this.setProperties({
          isOpen: true
        }, true);

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(_this.element, 'transitionend', _this.transitionEnd, _this);
      }
    });
  };

  Sidebar.prototype.setAnimation = function () {
    if (this.animate) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], DISABLEANIMATION);
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], DISABLEANIMATION);
    }
  };

  Sidebar.prototype.triggerChange = function () {
    var changeArguments = {
      name: 'change',
      element: this.element
    };
    this.trigger('change', changeArguments);
  };

  Sidebar.prototype.setDock = function () {
    if (this.enableDock && this.position === 'Left' && !this.getState()) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
        'transform': 'translateX(' + -100 + '%) translateX(' + this.setDimension(this.dockSize) + ')'
      });
    } else if (this.enableDock && this.position === 'Right' && !this.getState()) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
        'transform': 'translateX(' + 100 + '%) translateX(' + '-' + this.setDimension(this.dockSize) + ')'
      });
    }

    if (this.element.classList.contains(CLOSE) && this.enableDock) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
        'width': this.setDimension(this.dockSize)
      });
    }
  };

  Sidebar.prototype.createBackDrop = function () {
    if (this.target && this.showBackdrop && this.getState()) {
      var targetString = this.target;
      var sibling = document.querySelector('.e-main-content') || this.targetEle;
      this.defaultBackdropDiv = this.createElement('div');
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.defaultBackdropDiv], DEFAULTBACKDROP);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.defaultBackdropDiv, {
        height: targetString.style.height
      });
      sibling.appendChild(this.defaultBackdropDiv);
    } else if (this.showBackdrop && !this.modal && this.getState()) {
      this.modal = this.createElement('div');
      this.modal.className = DEFAULTBACKDROP;
      this.modal.style.display = 'block';
      document.body.appendChild(this.modal);
    }
  };

  Sidebar.prototype.getPersistData = function () {
    return this.addOnPersist(['type', 'position', 'isOpen']);
  };
  /**
   * Returns the current module name.
   *
   * @returns {string} - returns module name.
   * @private
   *
   */


  Sidebar.prototype.getModuleName = function () {
    return 'sidebar';
  };
  /**
   * Shows or hides the Sidebar based on the current state.
   *
   * @returns {void}
   */


  Sidebar.prototype.toggle = function () {
    if (this.element.classList.contains(OPEN)) {
      this.hide();
    } else {
      this.show();
    }
  };

  Sidebar.prototype.getState = function () {
    return this.element.classList.contains(OPEN) ? true : false;
  };

  Sidebar.prototype.setMediaQuery = function () {
    if (this.mediaQuery) {
      var media = false;

      if (typeof this.mediaQuery === 'string') {
        media = window.matchMedia(this.mediaQuery).matches;
      } else {
        media = this.mediaQuery.matches;
      }

      if (media && this.windowWidth !== window.innerWidth) {
        this.show();
      } else if (this.getState() && this.windowWidth !== window.innerWidth) {
        this.hide();
      }
    }
  };

  Sidebar.prototype.resize = function () {
    if (this.type === 'Auto') {
      if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], OVER);
      } else {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], PUSH);
      }
    }

    this.setMediaQuery();

    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
      this.windowWidth = window.innerWidth;
    }
  };

  Sidebar.prototype.documentclickHandler = function (e) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + CONTROL + '' + '.' + ROOT)) {
      return;
    }

    this.hide(e);
  };

  Sidebar.prototype.enableGestureHandler = function (args) {
    if (!this.isOpen && this.position === 'Left' && args.swipeDirection === 'Right' && args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5) {
      this.show();
    } else if (this.isOpen && this.position === 'Left' && args.swipeDirection === 'Left') {
      this.hide();
    } else if (this.isOpen && this.position === 'Right' && args.swipeDirection === 'Right') {
      this.hide();
    } else if (!this.isOpen && this.position === 'Right' && args.swipeDirection === 'Left' && window.innerWidth - args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5) {
      this.show();
    }
  };

  Sidebar.prototype.setEnableGestures = function () {
    if (this.enableGestures) {
      this.mainContentEle = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](document.body, {
        swipe: this.enableGestureHandler.bind(this)
      });
      this.sidebarEle = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.element, {
        swipe: this.enableGestureHandler.bind(this)
      });
    } else {
      if (this.mainContentEle && this.sidebarEle) {
        this.mainContentEle.destroy();
        this.sidebarEle.destroy();
      }
    }
  };

  Sidebar.prototype.wireEvents = function () {
    this.setEnableGestures();
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(window, 'resize', this.resize, this);
  };

  Sidebar.prototype.unWireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(window, 'resize', this.resize);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mousedown touchstart', this.documentclickHandler);

    if (this.mainContentEle) {
      this.mainContentEle.destroy();
    }

    if (this.sidebarEle) {
      this.sidebarEle.destroy();
    }
  };
  /**
   * Called internally if any of the property value changed.
   *
   * @param {SidebarModel} newProp - specifies newProp value.
   * @param {SidebarModel} oldProp - specifies oldProp value.
   * @returns {void}
   * @private
   *
   */


  Sidebar.prototype.onPropertyChanged = function (newProp, oldProp) {
    var sibling = document.querySelector('.e-main-content') || this.targetEle;
    var isRendered = this.isServerRendered;

    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'isOpen':
          if (this.isOpen) {
            this.show();
          } else {
            this.hide();
          }

          break;

        case 'width':
          this.setWidth();

          if (!this.getState()) {
            this.setDock();
          }

          break;

        case 'animate':
          this.setAnimation();
          break;

        case 'type':
          this.checkType(false);
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], [VISIBILITY]);
          this.addClass();
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], this.type === 'Auto' ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice ? ['e-over'] : ['e-push'] : ['e-' + this.type.toLowerCase()]);
          break;

        case 'position':
          this.element.style.transform = '';
          this.setDock();

          if (sibling) {
            sibling.style[this.position === 'Left' ? 'marginRight' : 'marginLeft'] = '0px';
          }

          if (this.position === 'Right') {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], LEFT);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], RIGHT);
          } else {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], RIGHT);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], LEFT);
          }

          this.setType(this.type);
          break;

        case 'showBackdrop':
          if (this.showBackdrop) {
            this.createBackDrop();
          } else {
            if (this.modal) {
              this.modal.style.display = 'none';
              this.modal.outerHTML = '';
              this.modal = null;
            }
          }

          break;

        case 'target':
          if (typeof this.target === 'string') {
            this.setProperties({
              target: document.querySelector(this.target)
            }, true);
          }

          if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.target)) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], SIDEBARABSOLUTE);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([oldProp.target], CONTEXT);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(sibling, {
              'margin-left': 0,
              'margin-right': 0
            });
            document.body.insertAdjacentElement('afterbegin', this.element);
          }

          this.isServerRendered = false;

          _super.prototype.refresh.call(this);

          this.isServerRendered = isRendered;
          break;

        case 'closeOnDocumentClick':
          this.setCloseOnDocumentClick();
          break;

        case 'enableDock':
          if (!this.getState()) {
            this.setDock();
          }

          break;

        case 'zIndex':
          this.setZindex();
          break;

        case 'mediaQuery':
          this.setMediaQuery();
          break;

        case 'enableGestures':
          this.setEnableGestures();
          break;

        case 'enableRtl':
          this.setEnableRTL();
          break;
      }
    }
  };

  Sidebar.prototype.setType = function (type) {
    var elementWidth = this.element.getBoundingClientRect().width;
    this.setZindex();
    var sibling = document.querySelector('.e-main-content') || this.targetEle;

    if (sibling) {
      sibling.style.transform = 'translateX(' + 0 + 'px)';

      if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && this.type !== 'Auto' && !(this.type === 'Over' && this.enableDock)) {
        sibling.style[this.position === 'Left' ? 'marginLeft' : 'marginRight'] = '0px';
      }
    }

    var margin = this.position === 'Left' ? elementWidth + 'px' : elementWidth + 'px';
    var eleWidth = this.position === 'Left' ? elementWidth : -elementWidth;
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], [PUSH, OVER, SLIDE]);

    switch (type) {
      case 'Push':
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], [PUSH]);

        if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
          sibling.style[this.position === 'Left' ? 'marginLeft' : 'marginRight'] = margin;
        }

        break;

      case 'Slide':
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], [SLIDE]);

        if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
          sibling.style.transform = 'translateX(' + eleWidth + 'px)';
        }

        break;

      case 'Over':
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], [OVER]);

        if (this.enableDock && (this.element.classList.contains(CLOSE) || this.isOpen)) {
          if (sibling) {
            sibling.style[this.position === 'Left' ? 'marginLeft' : 'marginRight'] = this.setDimension(this.dockSize);
          }
        }

        break;

      case 'Auto':
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], [TRASITION]);

        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
          if (sibling && this.enableDock && !this.getState()) {
            sibling.style[this.position === 'Left' ? 'marginLeft' : 'marginRight'] = margin;
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], PUSH);
          } else {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], OVER);
          }
        } else {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], PUSH);

          if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
            sibling.style[this.position === 'Left' ? 'marginLeft' : 'marginRight'] = margin;
          }
        }

        this.createBackDrop();
    }
  };
  /**
   * Removes the control from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.
   *
   * @returns {void}
   *
   */


  Sidebar.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    if (this.target) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.target], CONTEXT);
    }

    this.destroyBackDrop();

    if (this.element) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], [OPEN, CLOSE, PUSH, SLIDE, OVER, LEFT, RIGHT, TRASITION]);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], SIDEBARABSOLUTE);
      this.element.style.width = '';
      this.element.style.zIndex = '';
      this.element.style.transform = '';

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.sidebarEleCopy.getAttribute('tabindex'))) {
        this.element.setAttribute('tabindex', this.tabIndex);
      } else {
        this.element.removeAttribute('tabindex');
      }
    }

    this.windowWidth = null;
    var sibling = document.querySelector('.e-main-content') || this.targetEle;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(sibling)) {
      sibling.style.margin = '';
      sibling.style.transform = '';
    }

    this.unWireEvents();
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Sidebar.prototype, "dockSize", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Sidebar.prototype, "mediaQuery", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Sidebar.prototype, "enableDock", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('en-US')], Sidebar.prototype, "locale", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Sidebar.prototype, "enablePersistence", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Sidebar.prototype, "enableGestures", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Sidebar.prototype, "isOpen", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Sidebar.prototype, "enableRtl", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Sidebar.prototype, "animate", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Sidebar.prototype, "height", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Sidebar.prototype, "closeOnDocumentClick", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Left')], Sidebar.prototype, "position", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Sidebar.prototype, "target", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Sidebar.prototype, "showBackdrop", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Auto')], Sidebar.prototype, "type", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Sidebar.prototype, "width", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(1000)], Sidebar.prototype, "zIndex", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Sidebar.prototype, "created", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Sidebar.prototype, "close", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Sidebar.prototype, "open", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Sidebar.prototype, "change", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Sidebar.prototype, "destroyed", void 0);

  Sidebar = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Sidebar);
  return Sidebar;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/tab/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/tab/index.js ***!
  \*******************************************************************/
/*! exports provided: TabActionSettings, TabAnimationSettings, Header, TabItem, Tab */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _tab__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tab */ "./node_modules/@syncfusion/ej2-navigations/src/tab/tab.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TabActionSettings", function() { return _tab__WEBPACK_IMPORTED_MODULE_0__["TabActionSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TabAnimationSettings", function() { return _tab__WEBPACK_IMPORTED_MODULE_0__["TabAnimationSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Header", function() { return _tab__WEBPACK_IMPORTED_MODULE_0__["Header"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TabItem", function() { return _tab__WEBPACK_IMPORTED_MODULE_0__["TabItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Tab", function() { return _tab__WEBPACK_IMPORTED_MODULE_0__["Tab"]; });

/**
 * Tab modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/tab/tab.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/tab/tab.js ***!
  \*****************************************************************/
/*! exports provided: TabActionSettings, TabAnimationSettings, Header, TabItem, Tab */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabActionSettings", function() { return TabActionSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabAnimationSettings", function() { return TabAnimationSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Header", function() { return Header; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabItem", function() { return TabItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tab", function() { return Tab; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _toolbar_toolbar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../toolbar/toolbar */ "./node_modules/@syncfusion/ej2-navigations/src/toolbar/toolbar.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};








var CLS_TAB = 'e-tab';
var CLS_HEADER = 'e-tab-header';
var CLS_BLA_TEM = 'blazor-template';
var CLS_CONTENT = 'e-content';
var CLS_NEST = 'e-nested';
var CLS_ITEMS = 'e-items';
var CLS_ITEM = 'e-item';
var CLS_TEMPLATE = 'e-template';
var CLS_RTL = 'e-rtl';
var CLS_ACTIVE = 'e-active';
var CLS_DISABLE = 'e-disable';
var CLS_HIDDEN = 'e-hidden';
var CLS_FOCUS = 'e-focused';
var CLS_ICONS = 'e-icons';
var CLS_ICON = 'e-icon';
var CLS_ICON_TAB = 'e-icon-tab';
var CLS_ICON_CLOSE = 'e-close-icon';
var CLS_CLOSE_SHOW = 'e-close-show';
var CLS_TEXT = 'e-tab-text';
var CLS_INDICATOR = 'e-indicator';
var CLS_WRAP = 'e-tab-wrap';
var CLS_TEXT_WRAP = 'e-text-wrap';
var CLS_TAB_ICON = 'e-tab-icon';
var CLS_TB_ITEMS = 'e-toolbar-items';
var CLS_TB_ITEM = 'e-toolbar-item';
var CLS_TB_POP = 'e-toolbar-pop';
var CLS_TB_POPUP = 'e-toolbar-popup';
var CLS_HOR_NAV = 'e-hor-nav';
var CLS_POPUP_OPEN = 'e-popup-open';
var CLS_POPUP_CLOSE = 'e-popup-close';
var CLS_PROGRESS = 'e-progress';
var CLS_IGNORE = 'e-ignore';
var CLS_OVERLAY = 'e-overlay';
var CLS_HSCRCNT = 'e-hscroll-content';
var CLS_VSCRCNT = 'e-vscroll-content';
var CLS_VTAB = 'e-vertical-tab';
var CLS_VERTICAL = 'e-vertical';
var CLS_VLEFT = 'e-vertical-left';
var CLS_VRIGHT = 'e-vertical-right';
var CLS_HBOTTOM = 'e-horizontal-bottom';
var CLS_FILL = 'e-fill-mode';
var TABITEMPREFIX = 'tabitem_';
var CLS_REORDER_ACTIVE_ITEM = 'e-reorder-active-item';
/**
 * Objects used for configuring the Tab selecting item action properties.
 */

var TabActionSettings =
/** @class */
function (_super) {
  __extends(TabActionSettings, _super);

  function TabActionSettings() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('SlideLeftIn')], TabActionSettings.prototype, "effect", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(600)], TabActionSettings.prototype, "duration", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('ease')], TabActionSettings.prototype, "easing", void 0);

  return TabActionSettings;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * Objects used for configuring the Tab animation properties.
 */

var TabAnimationSettings =
/** @class */
function (_super) {
  __extends(TabAnimationSettings, _super);

  function TabAnimationSettings() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
    effect: 'SlideLeftIn',
    duration: 600,
    easing: 'ease'
  }, TabActionSettings)], TabAnimationSettings.prototype, "previous", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
    effect: 'SlideRightIn',
    duration: 600,
    easing: 'ease'
  }, TabActionSettings)], TabAnimationSettings.prototype, "next", void 0);

  return TabAnimationSettings;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * Objects used for configuring the Tab item header properties.
 */

var Header =
/** @class */
function (_super) {
  __extends(Header, _super);

  function Header() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Header.prototype, "text", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Header.prototype, "iconCss", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('left')], Header.prototype, "iconPosition", void 0);

  return Header;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * An array of object that is used to configure the Tab.
 */

var TabItem =
/** @class */
function (_super) {
  __extends(TabItem, _super);

  function TabItem() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, Header)], TabItem.prototype, "header", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], TabItem.prototype, "headerTemplate", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], TabItem.prototype, "content", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], TabItem.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TabItem.prototype, "disabled", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], TabItem.prototype, "visible", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], TabItem.prototype, "id", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(-1)], TabItem.prototype, "tabIndex", void 0);

  return TabItem;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * Tab is a content panel to show multiple contents in a single space, one at a time.
 * Each Tab item has an associated content, that will be displayed based on the active Tab header item.
 * ```html
 * <div id="tab"></div>
 * <script>
 *   var tabObj = new Tab();
 *   tab.appendTo("#tab");
 * </script>
 * ```
 */

var Tab =
/** @class */
function (_super) {
  __extends(Tab, _super);
  /**
   * Initializes a new instance of the Tab class.
   *
   * @param {TabModel} options  - Specifies Tab model properties as options.
   * @param {string | HTMLElement} element  - Specifies the element that is rendered as a Tab.
   */


  function Tab(options, element) {
    var _this = _super.call(this, options, element) || this;

    _this.show = {};
    _this.hide = {};
    _this.maxHeight = 0;
    _this.title = 'Close';
    _this.isInteracted = false;
    _this.lastIndex = 0;
    _this.isAdd = false;
    _this.isIconAlone = false;
    _this.draggableItems = [];
    _this.resizeContext = _this.refreshActiveTabBorder.bind(_this);
    /**
     * Contains the keyboard configuration of the Tab.
     */

    _this.keyConfigs = {
      tab: 'tab',
      home: 'home',
      end: 'end',
      enter: 'enter',
      space: 'space',
      delete: 'delete',
      moveLeft: 'leftarrow',
      moveRight: 'rightarrow',
      moveUp: 'uparrow',
      moveDown: 'downarrow'
    };
    return _this;
  }
  /**
   * Removes the component from the DOM and detaches all its related event handlers, attributes and classes.
   *
   * @returns {void}
   */


  Tab.prototype.destroy = function () {
    if (this.isReact || this.isAngular) {
      this.clearTemplate();
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tbObj)) {
      this.tbObj.destroy();
      this.tbObj = null;
    }

    this.unWireEvents();
    this.element.removeAttribute('aria-disabled');
    this.expTemplateContent();

    if (!this.isTemplate) {
      while (this.element.firstElementChild) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.element.firstElementChild);
      }
    } else {
      var cntEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TAB + ' > .' + CLS_CONTENT, this.element);
      this.element.classList.remove(CLS_TEMPLATE);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cntEle)) {
        cntEle.innerHTML = this.cnt;
      }
    }

    if (this.btnCls) {
      this.btnCls = null;
    }

    this.hdrEle = null;
    this.cntEle = null;
    this.tbItems = null;
    this.tbItem = null;
    this.tbPop = null;
    this.prevItem = null;
    this.popEle = null;
    this.bdrLine = null;
    this.content = null;
    this.dragItem = null;
    this.cloneElement = null;
    this.draggingItems = [];

    if (this.draggableItems && this.draggableItems.length > 0) {
      for (var i = 0; i < this.draggableItems.length; i++) {
        this.draggableItems[i].destroy();
        this.draggableItems[i] = null;
      }

      this.draggableItems = [];
    }

    _super.prototype.destroy.call(this);

    this.trigger('destroyed');
  };
  /**
   * Refresh the tab component
   *
   * @returns {void}
   */


  Tab.prototype.refresh = function () {
    if (this.isReact) {
      this.clearTemplate();
    }

    _super.prototype.refresh.call(this);

    if (this.isReact) {
      this.renderReactTemplates();
    }
  };
  /**
   * Initialize component
   *
   * @private
   * @returns {void}
   */


  Tab.prototype.preRender = function () {
    var nested = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, '.' + CLS_CONTENT);
    this.prevIndex = 0;
    this.isNested = false;
    this.isPopup = false;
    this.initRender = true;
    this.isSwiped = false;
    this.itemIndexArray = [];
    this.templateEle = [];

    if (this.allowDragAndDrop) {
      this.dragArea = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.dragArea) ? this.dragArea : '#' + this.element.id + ' ' + ('.' + CLS_HEADER);
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nested)) {
      nested.parentElement.classList.add(CLS_NEST);
      this.isNested = true;
    }

    var name = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name;
    var css = name === 'msie' ? 'e-ie' : name === 'edge' ? 'e-edge' : name === 'safari' ? 'e-safari' : '';
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
      'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.width),
      'height': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.height)
    });
    this.setCssClass(this.element, this.cssClass, true);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
      'aria-disabled': 'false'
    });
    this.setCssClass(this.element, css, true);
    this.updatePopAnimationConfig();
  };
  /**
   * Initialize the component rendering
   *
   * @private
   * @returns {void}
   */


  Tab.prototype.render = function () {
    var _this = this;

    this.btnCls = this.createElement('span', {
      className: CLS_ICONS + ' ' + CLS_ICON_CLOSE,
      attrs: {
        title: this.title
      }
    });
    this.tabId = this.element.id.length > 0 ? '-' + this.element.id : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getRandomId"])();
    this.renderContainer();
    this.wireEvents();
    this.initRender = false;

    if (this.isReact && this.portals && this.portals.length > 0) {
      this.renderReactTemplates(function () {
        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this.tbObj)) {
          _this.tbObj.refreshOverflow();
        }

        _this.refreshActiveBorder();
      });
    }
  };

  Tab.prototype.renderContainer = function () {
    var ele = this.element;
    this.items.forEach(function (item, index) {
      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.id) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.setProperties)) {
        item.setProperties({
          id: TABITEMPREFIX + index.toString()
        }, true);
      }
    });

    if (this.items.length > 0 && ele.children.length === 0) {
      ele.appendChild(this.createElement('div', {
        className: CLS_CONTENT
      }));
      this.setOrientation(this.headerPlacement, this.createElement('div', {
        className: CLS_HEADER
      }));
      this.isTemplate = false;
    } else if (this.element.children.length > 0) {
      this.isTemplate = true;
      ele.classList.add(CLS_TEMPLATE);
      var header = ele.querySelector('.' + CLS_HEADER);

      if (header && this.headerPlacement === 'Bottom') {
        this.setOrientation(this.headerPlacement, header);
      }
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER, this.element)) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT, this.element))) {
      this.renderHeader();
      this.tbItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER + ' .' + CLS_TB_ITEMS, this.element);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tbItems)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(this.tbItems, {
          selector: '.e-tab-wrap'
        });
      }

      this.renderContent();

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.element).length > 0) {
        this.tbItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER + ' .' + CLS_TB_ITEMS, this.element);
        this.bdrLine = this.createElement('div', {
          className: CLS_INDICATOR + ' ' + CLS_HIDDEN + ' ' + CLS_IGNORE
        });
        var scrCnt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + this.scrCntClass, this.tbItems);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(scrCnt)) {
          scrCnt.insertBefore(this.bdrLine, scrCnt.firstChild);
        } else {
          this.tbItems.insertBefore(this.bdrLine, this.tbItems.firstChild);
        }

        this.setContentHeight(true);
        this.select(this.selectedItem);
      }

      this.setRTL(this.enableRtl);
    }
  };

  Tab.prototype.renderHeader = function () {
    var _this = this;

    var hdrPlace = this.headerPlacement;
    var tabItems = [];
    this.hdrEle = this.getTabHeader();
    this.addVerticalClass();

    if (!this.isTemplate) {
      tabItems = this.parseObject(this.items, 0);
    } else {
      if (this.element.children.length > 1 && this.element.children[1].classList.contains(CLS_HEADER)) {
        this.setProperties({
          headerPlacement: 'Bottom'
        }, true);
      }

      var count = this.hdrEle.children.length;
      var hdrItems = [];

      for (var i = 0; i < count; i++) {
        hdrItems.push(this.hdrEle.children.item(i));
      }

      if (count > 0) {
        var tabItems_1 = this.createElement('div', {
          className: CLS_ITEMS
        });
        this.hdrEle.appendChild(tabItems_1);
        hdrItems.forEach(function (item, index) {
          _this.lastIndex = index;
          var attr = {
            className: CLS_ITEM,
            id: CLS_ITEM + _this.tabId + '_' + index
          };

          var txt = _this.createElement('span', {
            className: CLS_TEXT,
            attrs: {
              'role': 'presentation'
            }
          }).outerHTML;

          var cont = _this.createElement('div', {
            className: CLS_TEXT_WRAP,
            innerHTML: txt + _this.btnCls.outerHTML
          }).outerHTML;

          var wrap = _this.createElement('div', {
            className: CLS_WRAP,
            innerHTML: cont,
            attrs: {
              role: 'tab',
              tabIndex: '-1',
              'aria-selected': 'false',
              'aria-controls': CLS_CONTENT + _this.tabId + '_' + index,
              'aria-disabled': 'false'
            }
          });

          wrap.querySelector('.' + CLS_TEXT).appendChild(item);
          tabItems_1.appendChild(_this.createElement('div', attr));
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM, tabItems_1)[index].appendChild(wrap);
        });
      }
    }

    this.tbObj = new _toolbar_toolbar__WEBPACK_IMPORTED_MODULE_1__["Toolbar"]({
      width: hdrPlace === 'Left' || hdrPlace === 'Right' ? 'auto' : '100%',
      height: hdrPlace === 'Left' || hdrPlace === 'Right' ? '100%' : 'auto',
      overflowMode: this.overflowMode,
      items: tabItems.length !== 0 ? tabItems : [],
      clicked: this.clickHandler.bind(this),
      scrollStep: this.scrollStep,
      enableHtmlSanitizer: this.enableHtmlSanitizer,
      cssClass: this.cssClass
    });
    this.tbObj.isStringTemplate = true;
    this.tbObj.createElement = this.createElement;
    this.tbObj.appendTo(this.hdrEle);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.hdrEle, {
      role: 'tablist'
    });

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.getAttribute('aria-label'))) {
      this.hdrEle.setAttribute('aria-label', this.element.getAttribute('aria-label'));
      this.element.removeAttribute('aria-label');
    } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.getAttribute('aria-labelledby'))) {
      this.hdrEle.setAttribute('aria-labelledby', this.element.getAttribute('aria-labelledby'));
      this.element.removeAttribute('aria-labelledby');
    }

    this.setCloseButton(this.showCloseButton);
    var toolbarHeader = this.tbObj.element.querySelector('.' + CLS_TB_ITEMS);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(toolbarHeader)) {
      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(toolbarHeader.id) || toolbarHeader.id === '') {
        toolbarHeader.id = this.element.id + '_' + 'tab_header_items';
      }
    }
  };

  Tab.prototype.renderContent = function () {
    this.cntEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT, this.element);
    var hdrItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.element);

    if (this.isTemplate) {
      this.cnt = this.cntEle.children.length > 0 ? this.cntEle.innerHTML : '';
      var contents = this.cntEle.children;

      for (var i = 0; i < hdrItem.length; i++) {
        if (contents.length - 1 >= i) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([contents.item(i)], CLS_ITEM);
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(contents.item(i), {
            'role': 'tabpanel',
            'aria-labelledby': CLS_ITEM + this.tabId + '_' + i
          });
          contents.item(i).id = CLS_CONTENT + this.tabId + '_' + i;
        }
      }
    }
  };

  Tab.prototype.reRenderItems = function () {
    this.renderContainer();

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cntEle)) {
      this.touchModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.cntEle, {
        swipe: this.swipeHandler.bind(this)
      });
    }
  };

  Tab.prototype.parseObject = function (items, index) {
    var _this = this;

    var tbItems = Array.prototype.slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.e-tab-header .' + CLS_TB_ITEM, this.element));
    var maxId = this.lastIndex;

    if (!this.isReplace && tbItems.length > 0) {
      var idList_1 = [];
      tbItems.forEach(function (item) {
        idList_1.push(_this.getIndexFromEle(item.id));
      });
      maxId = Math.max.apply(Math, idList_1);
    }

    var tItems = [];
    var txtWrapEle;
    var spliceArray = [];
    var i = 0;
    items.forEach(function (item, i) {
      var pos = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header.iconPosition) ? '' : item.header.iconPosition;
      var css = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header.iconCss) ? '' : item.header.iconCss;

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.headerTemplate) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header.text) || item.header.text.length === 0 && css === '')) {
        spliceArray.push(i);
        return;
      }

      var txt = item.headerTemplate || item.header.text;

      if (typeof txt === 'string' && _this.enableHtmlSanitizer) {
        txt = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(txt);
      }

      var itemIndex;

      if (_this.isReplace && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this.tbId) && _this.tbId !== '') {
        itemIndex = parseInt(_this.tbId.substring(_this.tbId.lastIndexOf('_') + 1), 10);
        _this.tbId = '';
      } else {
        itemIndex = index + i;
      }

      _this.lastIndex = tbItems.length === 0 ? i : _this.isReplace ? itemIndex : maxId + 1 + i;
      var disabled = item.disabled ? ' ' + CLS_DISABLE + ' ' + CLS_OVERLAY : '';
      var hidden = item.visible === false ? ' ' + CLS_HIDDEN : '';
      txtWrapEle = _this.createElement('div', {
        className: CLS_TEXT,
        attrs: {
          'role': 'presentation'
        }
      });
      var tHtml = txt instanceof Object ? txt.outerHTML : txt;
      var txtEmpty = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(tHtml) && tHtml !== '';

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(txt.tagName)) {
        txtWrapEle.appendChild(txt);
      } else {
        _this.headerTextCompile(txtWrapEle, txt, i);
      }

      var tEle;

      var icon = _this.createElement('span', {
        className: CLS_ICONS + ' ' + CLS_TAB_ICON + ' ' + CLS_ICON + '-' + pos + ' ' + css
      });

      var tCont = _this.createElement('div', {
        className: CLS_TEXT_WRAP
      });

      tCont.appendChild(txtWrapEle);

      if (txt !== '' && txt !== undefined && css !== '') {
        if (pos === 'left' || pos === 'top') {
          tCont.insertBefore(icon, tCont.firstElementChild);
        } else {
          tCont.appendChild(icon);
        }

        tEle = txtWrapEle;
        _this.isIconAlone = false;
      } else {
        tEle = css === '' ? txtWrapEle : icon;

        if (tEle === icon) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(txtWrapEle);
          tCont.appendChild(icon);
          _this.isIconAlone = true;
        }
      }

      var tabIndex = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.tabIndex) ? '-1' : item.tabIndex.toString();
      var wrapAttrs = item.disabled ? {} : {
        tabIndex: tabIndex,
        'data-tabindex': tabIndex,
        role: 'tab',
        'aria-selected': 'false',
        'aria-disabled': 'false'
      };
      tCont.appendChild(_this.btnCls.cloneNode(true));

      var wrap = _this.createElement('div', {
        className: CLS_WRAP,
        attrs: wrapAttrs
      });

      wrap.appendChild(tCont);

      if (_this.itemIndexArray instanceof Array) {
        _this.itemIndexArray.splice(index + i, 0, CLS_ITEM + _this.tabId + '_' + _this.lastIndex);
      }

      var attrObj = {
        id: CLS_ITEM + _this.tabId + '_' + _this.lastIndex,
        'data-id': item.id
      };
      var tItem = {
        htmlAttributes: attrObj,
        template: wrap
      };
      tItem.cssClass = (item.cssClass !== undefined ? item.cssClass : ' ') + ' ' + disabled + ' ' + hidden + ' ' + (css !== '' ? 'e-i' + pos : '') + ' ' + (!txtEmpty ? CLS_ICON : '');

      if (pos === 'top' || pos === 'bottom') {
        _this.element.classList.add('e-vertical-icon');
      }

      tItems.push(tItem);
      i++;
    });

    if (!this.isAdd) {
      spliceArray.forEach(function (spliceItemIndex) {
        _this.items.splice(spliceItemIndex, 1);
      });
    }

    if (this.isIconAlone) {
      this.element.classList.add(CLS_ICON_TAB);
    } else {
      this.element.classList.remove(CLS_ICON_TAB);
    }

    return tItems;
  };

  Tab.prototype.removeActiveClass = function () {
    var tabHeader = this.getTabHeader();

    if (tabHeader) {
      var tabItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE, tabHeader);
      [].slice.call(tabItems).forEach(function (node) {
        return node.classList.remove(CLS_ACTIVE);
      });
      [].slice.call(tabItems).forEach(function (node) {
        return node.firstElementChild.setAttribute('aria-selected', 'false');
      });
    }
  };

  Tab.prototype.checkPopupOverflow = function (ele) {
    this.tbPop = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_POP, this.element);
    var popIcon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-hor-nav', this.element);
    var tbrItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_ITEMS, this.element);
    var lastChild = tbrItems.lastChild;
    var isOverflow = false;

    if (!this.isVertical() && (this.enableRtl && popIcon.offsetLeft + popIcon.offsetWidth > tbrItems.offsetLeft || !this.enableRtl && popIcon.offsetLeft < tbrItems.offsetWidth)) {
      isOverflow = true;
    } else if (this.isVertical() && popIcon.offsetTop < lastChild.offsetTop + lastChild.offsetHeight) {
      isOverflow = true;
    }

    if (isOverflow) {
      ele.classList.add(CLS_TB_POPUP);
      this.tbPop.insertBefore(ele, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_POPUP, this.tbPop)[0]);
    }

    return true;
  };

  Tab.prototype.popupHandler = function (target) {
    var ripEle = target.querySelector('.e-ripple-element');

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ripEle)) {
      ripEle.outerHTML = '';
      target.querySelector('.' + CLS_WRAP).classList.remove('e-ripple');
    }

    this.tbItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEMS + ' .' + CLS_TB_ITEM, this.hdrEle);
    var lastChild = this.tbItem[this.tbItem.length - 1];

    if (this.tbItem.length !== 0) {
      target.classList.remove(CLS_TB_POPUP);
      target.removeAttribute('style');
      this.tbItems.appendChild(target);
      this.actEleId = target.id;

      if (this.checkPopupOverflow(lastChild)) {
        var prevEle = this.tbItems.lastChild.previousElementSibling;
        this.checkPopupOverflow(prevEle);
      }

      this.isPopup = true;
    }

    return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.tbItems).length - 1;
  };

  Tab.prototype.setCloseButton = function (val) {
    var trg = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER, this.element);

    if (val === true) {
      trg.classList.add(CLS_CLOSE_SHOW);
    } else {
      trg.classList.remove(CLS_CLOSE_SHOW);
    }

    this.tbObj.refreshOverflow();
    this.refreshActiveTabBorder();
  };

  Tab.prototype.prevCtnAnimation = function (prev, current) {
    var animation;
    var checkRTL = this.enableRtl || this.element.classList.contains(CLS_RTL);

    if (this.isPopup || prev <= current) {
      if (this.animation.previous.effect === 'SlideLeftIn') {
        animation = {
          name: 'SlideLeftOut',
          duration: this.animation.previous.duration,
          timingFunction: this.animation.previous.easing
        };
      } else {
        animation = null;
      }
    } else {
      if (this.animation.next.effect === 'SlideRightIn') {
        animation = {
          name: 'SlideRightOut',
          duration: this.animation.next.duration,
          timingFunction: this.animation.next.easing
        };
      } else {
        animation = null;
      }
    }

    return animation;
  };

  Tab.prototype.triggerPrevAnimation = function (oldCnt, prevIndex) {
    var _this = this;

    var animateObj = this.prevCtnAnimation(prevIndex, this.selectedItem);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(animateObj)) {
      animateObj.begin = function () {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(oldCnt, {
          'position': 'absolute'
        });
        oldCnt.classList.add(CLS_PROGRESS);
        oldCnt.classList.add('e-view');
      };

      animateObj.end = function () {
        oldCnt.style.display = 'none';
        oldCnt.classList.remove(CLS_ACTIVE);
        oldCnt.classList.remove(CLS_PROGRESS);
        oldCnt.classList.remove('e-view');
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(oldCnt, {
          'display': '',
          'position': ''
        });

        if (oldCnt.childNodes.length === 0 && !_this.isTemplate) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(oldCnt);
        }
      };

      new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"](animateObj).animate(oldCnt);
    } else {
      oldCnt.classList.remove(CLS_ACTIVE);
    }
  };

  Tab.prototype.triggerAnimation = function (id, value) {
    var _this = this;

    var prevIndex = this.prevIndex;
    var oldCnt;
    var itemCollection = [].slice.call(this.element.querySelector('.' + CLS_CONTENT).children);
    itemCollection.forEach(function (item) {
      if (item.id === _this.prevActiveEle) {
        oldCnt = item;
      }
    });
    var prevEle = this.tbItem[prevIndex];
    var newCnt = this.getTrgContent(this.cntEle, this.extIndex(id));

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldCnt) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(prevEle)) {
      var idNo = this.extIndex(prevEle.id);
      oldCnt = this.getTrgContent(this.cntEle, idNo);
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newCnt)) {
      this.prevActiveEle = newCnt.id;
    }

    var isPrevent = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.animation) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.animation.next.effect) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.animation.previous.effect) || this.animation.previous.effect === 'None' || this.animation.next.effect === 'None';

    if (this.initRender || value === false || isPrevent) {
      if (oldCnt && oldCnt !== newCnt) {
        oldCnt.classList.remove(CLS_ACTIVE);
      }

      return;
    }

    var cnt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT, this.element);
    var animateObj;

    if (this.prevIndex > this.selectedItem && !this.isPopup) {
      var openEff = this.animation.previous.effect;
      animateObj = {
        name: openEff === 'None' ? '' : openEff !== 'SlideLeftIn' ? openEff : 'SlideLeftIn',
        duration: this.animation.previous.duration === 0 && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["animationMode"] === 'Enable' ? 600 : this.animation.previous.duration,
        timingFunction: this.animation.previous.easing
      };
    } else if (this.isPopup || this.prevIndex < this.selectedItem || this.prevIndex === this.selectedItem) {
      var clsEff = this.animation.next.effect;
      animateObj = {
        name: clsEff === 'None' ? '' : clsEff !== 'SlideRightIn' ? clsEff : 'SlideRightIn',
        duration: this.animation.next.duration === 0 && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["animationMode"] === 'Enable' ? 600 : this.animation.next.duration,
        timingFunction: this.animation.next.easing
      };
    }

    animateObj.progress = function () {
      cnt.classList.add(CLS_PROGRESS);

      _this.setActiveBorder();
    };

    animateObj.end = function () {
      cnt.classList.remove(CLS_PROGRESS);
      newCnt.classList.add(CLS_ACTIVE);
    };

    if (!this.initRender && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldCnt)) {
      this.triggerPrevAnimation(oldCnt, prevIndex);
    }

    this.isPopup = false;

    if (animateObj.name === '') {
      newCnt.classList.add(CLS_ACTIVE);
    } else {
      new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"](animateObj).animate(newCnt);
    }
  };

  Tab.prototype.keyPressed = function (trg) {
    var trgParent = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trg, '.' + CLS_HEADER + ' .' + CLS_TB_ITEM);
    var trgIndex = this.getEleIndex(trgParent);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.popEle) && trg.classList.contains('e-hor-nav')) {
      this.popEle.classList.contains(CLS_POPUP_OPEN) ? this.popObj.hide(this.hide) : this.popObj.show(this.show);
    } else if (trg.classList.contains('e-scroll-nav')) {
      trg.click();
    } else {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(trgParent) && trgParent.classList.contains(CLS_ACTIVE) === false) {
        this.selectTab(trgIndex, null, true);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.popEle)) {
          this.popObj.hide(this.hide);
        }
      }
    }
  };

  Tab.prototype.getTabHeader = function () {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element)) {
      return undefined;
    }

    var headers = [].slice.call(this.element.children).filter(function (e) {
      return e.classList.contains(CLS_HEADER);
    });

    if (headers.length > 0) {
      return headers[0];
    } else {
      var wrap = [].slice.call(this.element.children).filter(function (e) {
        return !e.classList.contains(CLS_BLA_TEM);
      })[0];

      if (!wrap) {
        return undefined;
      }

      return [].slice.call(wrap.children).filter(function (e) {
        return e.classList.contains(CLS_HEADER);
      })[0];
    }
  };

  Tab.prototype.getEleIndex = function (item) {
    return Array.prototype.indexOf.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.getTabHeader()), item);
  };

  Tab.prototype.extIndex = function (id) {
    return id.replace(CLS_ITEM + this.tabId + '_', '');
  };

  Tab.prototype.expTemplateContent = function () {
    var _this = this;

    this.templateEle.forEach(function (eleStr) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this.element.querySelector(eleStr))) {
        document.body.appendChild(_this.element.querySelector(eleStr)).style.display = 'none';
      }
    });
  };

  Tab.prototype.templateCompile = function (ele, cnt, index) {
    var tempEle = this.createElement('div');
    this.compileElement(tempEle, cnt, 'content', index);

    if (tempEle.childNodes.length !== 0) {
      ele.appendChild(tempEle);
    }

    if (this.isReact) {
      this.renderReactTemplates();
    }
  };

  Tab.prototype.compileElement = function (ele, val, prop, index) {
    var templateFn;

    if (typeof val === 'string') {
      val = val.trim();

      if (this.isVue) {
        templateFn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(val));
      } else {
        ele.innerHTML = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(val);
      }
    } else {
      templateFn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(val);
    }

    var templateFUN;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(templateFn)) {
      templateFUN = templateFn({}, this, prop);
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(templateFn) && templateFUN.length > 0) {
      [].slice.call(templateFUN).forEach(function (el) {
        ele.appendChild(el);
      });
    }
  };

  Tab.prototype.headerTextCompile = function (element, text, index) {
    this.compileElement(element, text, 'headerTemplate', index);
  };

  Tab.prototype.getContent = function (ele, cnt, callType, index) {
    var eleStr;
    cnt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cnt) ? '' : cnt;

    if (typeof cnt === 'string' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cnt.innerHTML)) {
      if (typeof cnt === 'string' && this.enableHtmlSanitizer) {
        cnt = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(cnt);
      }

      if (cnt[0] === '.' || cnt[0] === '#') {
        if (document.querySelectorAll(cnt).length) {
          var eleVal = document.querySelector(cnt);
          eleStr = eleVal.outerHTML.trim();

          if (callType === 'clone') {
            ele.appendChild(eleVal.cloneNode(true));
          } else {
            ele.appendChild(eleVal);
            eleVal.style.display = '';
          }
        } else {
          this.templateCompile(ele, cnt, index);
        }
      } else {
        this.templateCompile(ele, cnt, index);
      }
    } else {
      ele.appendChild(cnt);
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(eleStr)) {
      if (this.templateEle.indexOf(cnt.toString()) === -1) {
        this.templateEle.push(cnt.toString());
      }
    }
  };

  Tab.prototype.getTrgContent = function (cntEle, no) {
    var ele;

    if (this.element.classList.contains(CLS_NEST)) {
      ele = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_NEST + '> .' + CLS_CONTENT + ' > #' + CLS_CONTENT + this.tabId + '_' + no, this.element);
    } else {
      ele = this.findEle(cntEle.children, CLS_CONTENT + this.tabId + '_' + no);
    }

    return ele;
  };

  Tab.prototype.findEle = function (items, key) {
    var ele;

    for (var i = 0; i < items.length; i++) {
      if (items[i].id === key) {
        ele = items[i];
        break;
      }
    }

    return ele;
  };

  Tab.prototype.isVertical = function () {
    var isVertical = this.headerPlacement === 'Left' || this.headerPlacement === 'Right' ? true : false;
    this.scrCntClass = isVertical ? CLS_VSCRCNT : CLS_HSCRCNT;
    return isVertical;
  };

  Tab.prototype.addVerticalClass = function () {
    if (this.isVertical()) {
      var tbPos = this.headerPlacement === 'Left' ? CLS_VLEFT : CLS_VRIGHT;
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.hdrEle], [CLS_VERTICAL, tbPos]);

      if (!this.element.classList.contains(CLS_NEST)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], [CLS_VTAB, tbPos]);
      } else {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.hdrEle], [CLS_VTAB, tbPos]);
      }
    }

    if (this.headerPlacement === 'Bottom') {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.hdrEle], [CLS_HBOTTOM]);
    }
  };

  Tab.prototype.updatePopAnimationConfig = function () {
    this.show = {
      name: this.isVertical() ? 'FadeIn' : 'SlideDown',
      duration: 100
    };
    this.hide = {
      name: this.isVertical() ? 'FadeOut' : 'SlideUp',
      duration: 100
    };
  };

  Tab.prototype.changeOrientation = function (place) {
    this.setOrientation(place, this.hdrEle);
    var activeTab = this.hdrEle.querySelector('.' + CLS_ACTIVE);
    var isVertical = this.hdrEle.classList.contains(CLS_VERTICAL) ? true : false;
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], [CLS_VTAB]);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.hdrEle], [CLS_VERTICAL, CLS_VLEFT, CLS_VRIGHT]);

    if (isVertical !== this.isVertical()) {
      this.changeToolbarOrientation();

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(activeTab) && activeTab.classList.contains(CLS_TB_POPUP)) {
        this.popupHandler(activeTab);
      }
    }

    this.addVerticalClass();
    this.setActiveBorder();
    this.focusItem();
  };

  Tab.prototype.focusItem = function () {
    var curActItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])(' #' + CLS_ITEM + this.tabId + '_' + this.selectedItem, this.hdrEle);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(curActItem)) {
      curActItem.firstElementChild.focus();
    }
  };

  Tab.prototype.changeToolbarOrientation = function () {
    this.tbObj.setProperties({
      height: this.isVertical() ? '100%' : 'auto',
      width: this.isVertical() ? 'auto' : '100%'
    }, true);
    this.tbObj.changeOrientation();
    this.updatePopAnimationConfig();
  };

  Tab.prototype.setOrientation = function (place, ele) {
    var headerPos = Array.prototype.indexOf.call(this.element.children, ele);
    var contentPos = Array.prototype.indexOf.call(this.element.children, this.element.querySelector('.' + CLS_CONTENT));

    if (place === 'Bottom' && contentPos > headerPos) {
      this.element.appendChild(ele);
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([ele], [CLS_HBOTTOM]);
      this.element.insertBefore(ele, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT, this.element));
    }
  };

  Tab.prototype.setCssClass = function (ele, cls, val) {
    if (cls === '') {
      return;
    }

    var list = cls.split(' ');

    for (var i = 0; i < list.length; i++) {
      if (val) {
        ele.classList.add(list[i]);
      } else {
        ele.classList.remove(list[i]);
      }
    }
  };

  Tab.prototype.setContentHeight = function (val) {
    if (this.element.classList.contains(CLS_FILL)) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], [CLS_FILL]);
    }

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cntEle)) {
      return;
    }

    var hdrEle = this.getTabHeader();

    if (this.heightAdjustMode === 'None') {
      if (this.height === 'auto') {
        return;
      } else {
        if (!this.isVertical()) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.cntEle, {
            'height': this.element.clientHeight - hdrEle.offsetHeight + 'px'
          });
        }
      }
    } else if (this.heightAdjustMode === 'Fill') {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], [CLS_FILL]);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
        'height': '100%'
      });
      this.cntEle.style.height = 'calc(100% - ' + this.hdrEle.offsetHeight + 'px)';
    } else if (this.heightAdjustMode === 'Auto') {
      if (this.isTemplate === true) {
        var cnt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_CONTENT + ' > .' + CLS_ITEM, this.element);

        for (var i = 0; i < cnt.length; i++) {
          cnt[i].setAttribute('style', 'display:block; visibility: visible');
          this.maxHeight = Math.max(this.maxHeight, this.getHeight(cnt[i]));
          cnt[i].style.removeProperty('display');
          cnt[i].style.removeProperty('visibility');
        }
      } else {
        this.cntEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT, this.element);

        if (val === true) {
          this.cntEle.appendChild(this.createElement('div', {
            id: CLS_CONTENT + this.tabId + '_' + 0,
            className: CLS_ITEM + ' ' + CLS_ACTIVE,
            attrs: {
              'role': 'tabpanel',
              'aria-labelledby': CLS_ITEM + this.tabId + '_' + 0
            }
          }));
        }

        var ele = this.cntEle.children.item(0);

        for (var i = 0; i < this.items.length; i++) {
          this.getContent(ele, this.items[i].content, 'clone', i);
          this.maxHeight = Math.max(this.maxHeight, this.getHeight(ele));

          while (ele.firstChild) {
            ele.removeChild(ele.firstChild);
          }
        }

        if (this.isReact) {
          this.clearTemplate(['content']);
        }

        this.templateEle = [];
        this.getContent(ele, this.items[0].content, 'render', 0);

        if (this.prevIndex !== this.selectedItem) {
          ele.classList.remove(CLS_ACTIVE);
        }
      }

      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.cntEle, {
        'height': this.maxHeight + 'px'
      });
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.cntEle, {
        'height': 'auto'
      });
    }
  };

  Tab.prototype.getHeight = function (ele) {
    var cs = window.getComputedStyle(ele);
    return ele.offsetHeight + parseFloat(cs.getPropertyValue('padding-top')) + parseFloat(cs.getPropertyValue('padding-bottom')) + parseFloat(cs.getPropertyValue('margin-top')) + parseFloat(cs.getPropertyValue('margin-bottom'));
  };

  Tab.prototype.setActiveBorder = function () {
    var trgHdrEle = this.getTabHeader();
    var trg = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE, trgHdrEle);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(trg)) {
      return;
    }

    if (!this.reorderActiveTab) {
      if (trg.classList.contains(CLS_TB_POPUP) && !this.bdrLine.classList.contains(CLS_HIDDEN)) {
        this.bdrLine.classList.add(CLS_HIDDEN);
      }

      if (trgHdrEle && !trgHdrEle.classList.contains(CLS_REORDER_ACTIVE_ITEM)) {
        trgHdrEle.classList.add(CLS_REORDER_ACTIVE_ITEM);
      }
    } else if (trgHdrEle) {
      trgHdrEle.classList.remove(CLS_REORDER_ACTIVE_ITEM);
    }

    var root = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trg, '.' + CLS_TAB);

    if (this.element !== root) {
      return;
    }

    this.tbItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_ITEMS, trgHdrEle);
    var bar = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_INDICATOR, trgHdrEle);
    var scrollCnt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_ITEMS + ' .' + this.scrCntClass, trgHdrEle);

    if (this.isVertical()) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(bar, {
        'left': '',
        'right': ''
      });
      var tbHeight = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(scrollCnt) ? this.tbItems.offsetHeight : scrollCnt.offsetHeight;

      if (tbHeight !== 0) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(bar, {
          'top': trg.offsetTop + 'px',
          'height': trg.offsetHeight + 'px'
        });
      } else {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(bar, {
          'top': 0,
          'height': 0
        });
      }
    } else {
      if (this.overflowMode === 'MultiRow') {
        var top_1 = this.headerPlacement === 'Bottom' ? trg.offsetTop : trg.offsetHeight + trg.offsetTop;
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(bar, {
          'top': top_1 + 'px',
          'height': ''
        });
      } else {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(bar, {
          'top': '',
          'height': ''
        });
      }

      var tbWidth = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(scrollCnt) ? this.tbItems.offsetWidth : scrollCnt.offsetWidth;

      if (tbWidth !== 0) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(bar, {
          'left': trg.offsetLeft + 'px',
          'right': tbWidth - (trg.offsetLeft + trg.offsetWidth) + 'px'
        });
      } else {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(bar, {
          'left': 'auto',
          'right': 'auto'
        });
      }
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.bdrLine) && !trg.classList.contains(CLS_TB_POPUP)) {
      this.bdrLine.classList.remove(CLS_HIDDEN);
    }
  };

  Tab.prototype.setActive = function (value, skipDataBind, isInteracted) {
    if (skipDataBind === void 0) {
      skipDataBind = false;
    }

    if (isInteracted === void 0) {
      isInteracted = false;
    }

    this.tbItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.getTabHeader());
    var trg = this.tbItem[value];

    if (value < 0 || isNaN(value) || this.tbItem.length === 0) {
      return;
    }

    if (value >= 0 && !skipDataBind) {
      this.allowServerDataBinding = false;
      this.setProperties({
        selectedItem: value
      }, true);
      this.allowServerDataBinding = true;

      if (!this.initRender) {
        this.serverDataBind();
      }
    }

    if (trg.classList.contains(CLS_ACTIVE)) {
      this.setActiveBorder();
      return;
    }

    if (!this.isTemplate) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(trg.firstElementChild, {
        'aria-controls': CLS_CONTENT + this.tabId + '_' + value
      });
    }

    var id = trg.id;
    this.removeActiveClass();
    trg.classList.add(CLS_ACTIVE);
    trg.firstElementChild.setAttribute('aria-selected', 'true');
    var no = Number(this.extIndex(id));

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.prevActiveEle)) {
      this.prevActiveEle = CLS_CONTENT + this.tabId + '_' + no;
    }

    if (this.isTemplate) {
      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT, this.element).children.length > 0) {
        var trg_1 = this.findEle(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT, this.element).children, CLS_CONTENT + this.tabId + '_' + no);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(trg_1)) {
          trg_1.classList.add(CLS_ACTIVE);
        }

        this.triggerAnimation(id, this.enableAnimation);
      }
    } else {
      this.cntEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TAB + ' > .' + CLS_CONTENT, this.element);
      var item = this.getTrgContent(this.cntEle, this.extIndex(id));

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item)) {
        this.cntEle.appendChild(this.createElement('div', {
          id: CLS_CONTENT + this.tabId + '_' + this.extIndex(id),
          className: CLS_ITEM + ' ' + CLS_ACTIVE,
          attrs: {
            role: 'tabpanel',
            'aria-labelledby': CLS_ITEM + this.tabId + '_' + this.extIndex(id)
          }
        }));
        var eleTrg = this.getTrgContent(this.cntEle, this.extIndex(id));
        var itemIndex = Array.prototype.indexOf.call(this.itemIndexArray, id);
        this.getContent(eleTrg, this.items[itemIndex].content, 'render', itemIndex);
      } else {
        item.classList.add(CLS_ACTIVE);
      }

      this.triggerAnimation(id, this.enableAnimation);
    }

    this.setActiveBorder();
    this.refreshItemVisibility(trg);

    if (!this.initRender && !skipDataBind) {
      var eventArg = {
        previousItem: this.prevItem,
        previousIndex: this.prevIndex,
        selectedItem: trg,
        selectedIndex: value,
        selectedContent: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + CLS_CONTENT + this.tabId + '_' + this.selectingID, this.content),
        isSwiped: this.isSwiped,
        isInteracted: isInteracted,
        preventFocus: false
      };
      this.trigger('selected', eventArg, function (selectEventArgs) {
        if (!selectEventArgs.preventFocus) {
          trg.firstElementChild.focus();
        }
      });
    }
  };

  Tab.prototype.setItems = function (items) {
    this.isReplace = true;
    this.tbItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_ITEMS, this.getTabHeader());
    this.tbObj.items = this.parseObject(items, 0);
    this.tbObj.dataBind();
    this.isReplace = false;
  };

  Tab.prototype.setRTL = function (value) {
    this.tbObj.enableRtl = value;
    this.tbObj.dataBind();
    this.setCssClass(this.element, CLS_RTL, value);
    this.refreshActiveBorder();
  };

  Tab.prototype.refreshActiveBorder = function () {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.bdrLine)) {
      this.bdrLine.classList.add(CLS_HIDDEN);
    }

    this.setActiveBorder();
  };

  Tab.prototype.showPopup = function (config) {
    var tbPop = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-popup.e-toolbar-pop', this.hdrEle);

    if (tbPop && tbPop.classList.contains('e-popup-close')) {
      var tbPopObj = tbPop && tbPop.ej2_instances[0];
      tbPopObj.position.X = this.headerPlacement === 'Left' ? 'left' : 'right';
      tbPopObj.dataBind();
      tbPopObj.show(config);
    }
  };

  Tab.prototype.bindDraggable = function () {
    var _this = this;

    if (this.allowDragAndDrop) {
      var tabHeader = this.element.querySelector('.' + CLS_HEADER);

      if (tabHeader) {
        var items = Array.prototype.slice.call(tabHeader.querySelectorAll('.' + CLS_TB_ITEM));
        items.forEach(function (element) {
          _this.initializeDrag(element);
        });
      }
    }
  };

  Tab.prototype.wireEvents = function () {
    this.bindDraggable();
    window.addEventListener('resize', this.resizeContext);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'mouseover', this.hoverHandler, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keydown', this.spaceKeyDown, this);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cntEle)) {
      this.touchModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.cntEle, {
        swipe: this.swipeHandler.bind(this)
      });
    }

    this.keyModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.element, {
      keyAction: this.keyHandler.bind(this),
      keyConfigs: this.keyConfigs
    });
    this.tabKeyModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.element, {
      keyAction: this.keyHandler.bind(this),
      keyConfigs: {
        openPopup: 'shift+f10',
        tab: 'tab',
        shiftTab: 'shift+tab'
      },
      eventName: 'keydown'
    });
  };

  Tab.prototype.unWireEvents = function () {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.keyModule)) {
      this.keyModule.destroy();
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tabKeyModule)) {
      this.tabKeyModule.destroy();
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cntEle) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.touchModule)) {
      this.touchModule.destroy();
      this.touchModule = null;
    }

    window.removeEventListener('resize', this.resizeContext);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseover', this.hoverHandler);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keydown', this.spaceKeyDown);
    this.element.classList.remove(CLS_RTL);
    this.element.classList.remove(CLS_FOCUS);
  };

  Tab.prototype.clickHandler = function (args) {
    this.element.classList.remove(CLS_FOCUS);
    var trg = args.originalEvent.target;
    var trgParent = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trg, '.' + CLS_TB_ITEM);
    var trgIndex = this.getEleIndex(trgParent);

    if (trg.classList.contains(CLS_ICON_CLOSE)) {
      this.removeTab(trgIndex);
    } else if (this.isVertical() && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trg, '.' + CLS_HOR_NAV)) {
      this.showPopup(this.show);
    } else {
      this.isPopup = false;

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(trgParent) && trgIndex !== this.selectedItem) {
        this.selectTab(trgIndex, args.originalEvent, true);
      }
    }
  };

  Tab.prototype.swipeHandler = function (e) {
    if (e.velocity < 3 && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e.originalEvent.changedTouches)) {
      return;
    }

    if (this.isNested) {
      this.element.setAttribute('data-swipe', 'true');
    }

    var nestedTab = this.element.querySelector('[data-swipe="true"]');

    if (nestedTab) {
      nestedTab.removeAttribute('data-swipe');
      return;
    }

    this.isSwiped = true;

    if (e.swipeDirection === 'Right' && this.selectedItem !== 0) {
      for (var k = this.selectedItem - 1; k >= 0; k--) {
        if (!this.tbItem[k].classList.contains(CLS_HIDDEN)) {
          this.selectTab(k, null, true);
          break;
        }
      }
    } else if (e.swipeDirection === 'Left' && this.selectedItem !== Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.element).length - 1) {
      for (var i = this.selectedItem + 1; i < this.tbItem.length; i++) {
        if (!this.tbItem[i].classList.contains(CLS_HIDDEN)) {
          this.selectTab(i, null, true);
          break;
        }
      }
    }

    this.isSwiped = false;
  };

  Tab.prototype.spaceKeyDown = function (e) {
    if (e.keyCode === 32 && e.which === 32 || e.keyCode === 35 && e.which === 35) {
      var clstHead = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + CLS_HEADER);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(clstHead)) {
        e.preventDefault();
      }
    }
  };

  Tab.prototype.keyHandler = function (e) {
    if (this.element.classList.contains(CLS_DISABLE)) {
      return;
    }

    this.element.classList.add(CLS_FOCUS);
    var trg = e.target;
    var tabHeader = this.getTabHeader();
    var actEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_ACTIVE, tabHeader);
    this.popEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_POP, tabHeader);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.popEle)) {
      this.popObj = this.popEle.ej2_instances[0];
    }

    var item = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(document.activeElement, '.' + CLS_TB_ITEM);
    var trgParent = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trg, '.' + CLS_TB_ITEM);

    switch (e.action) {
      case 'space':
      case 'enter':
        if (trg.parentElement.classList.contains(CLS_DISABLE)) {
          return;
        }

        if (e.action === 'enter' && trg.classList.contains('e-hor-nav')) {
          this.showPopup(this.show);
          break;
        }

        this.keyPressed(trg);
        break;

      case 'tab':
      case 'shiftTab':
        if (trg.classList.contains(CLS_WRAP) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trg, '.' + CLS_TB_ITEM).classList.contains(CLS_ACTIVE) === false) {
          trg.setAttribute('tabindex', trg.getAttribute('data-tabindex'));
        }

        if (this.popObj && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(this.popObj.element)) {
          this.popObj.hide(this.hide);
        }

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(actEle) && actEle.children.item(0).getAttribute('tabindex') === '-1') {
          actEle.children.item(0).setAttribute('tabindex', '0');
        }

        break;

      case 'moveLeft':
      case 'moveRight':
        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item)) {
          this.refreshItemVisibility(item);
        }

        break;

      case 'openPopup':
        e.preventDefault();

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.popEle) && this.popEle.classList.contains(CLS_POPUP_CLOSE)) {
          this.popObj.show(this.show);
        }

        break;

      case 'delete':
        if (this.showCloseButton === true && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(trgParent)) {
          var nxtSib = trgParent.nextSibling;

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nxtSib) && nxtSib.classList.contains(CLS_TB_ITEM)) {
            nxtSib.firstElementChild.focus();
          }

          this.removeTab(this.getEleIndex(trgParent));
        }

        this.setActiveBorder();
        break;
    }
  };

  Tab.prototype.refreshItemVisibility = function (target) {
    var scrCnt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + this.scrCntClass, this.tbItems);

    if (!this.isVertical() && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(scrCnt)) {
      var scrBar = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-hscroll-bar', this.tbItems);
      scrBar.removeAttribute('tabindex');
      var scrStart = scrBar.scrollLeft;
      var scrEnd = scrStart + scrBar.offsetWidth;
      var eleStart = target.offsetLeft;
      var eleWidth = target.offsetWidth;
      var eleEnd = target.offsetLeft + target.offsetWidth;

      if (scrStart < eleStart && scrEnd < eleEnd) {
        var eleViewRange = scrEnd - eleStart;
        scrBar.scrollLeft = scrStart + (eleWidth - eleViewRange);
      } else {
        if (scrStart > eleStart && scrEnd > eleEnd) {
          var eleViewRange = eleEnd - scrStart;
          scrBar.scrollLeft = scrStart - (eleWidth - eleViewRange);
        }
      }
    } else {
      return;
    }
  };

  Tab.prototype.getIndexFromEle = function (id) {
    return parseInt(id.substring(id.lastIndexOf('_') + 1), 10);
  };

  Tab.prototype.hoverHandler = function (e) {
    var trg = e.target;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(trg.classList) && trg.classList.contains(CLS_ICON_CLOSE)) {
      trg.setAttribute('title', new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"]('tab', {
        closeButtonTitle: this.title
      }, this.locale).getConstant('closeButtonTitle'));
    }
  };

  Tab.prototype.evalOnPropertyChangeItems = function (newProp, oldProp) {
    if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {
      var changedProp = Object.keys(newProp.items);

      for (var i = 0; i < changedProp.length; i++) {
        var index = parseInt(Object.keys(newProp.items)[i], 10);
        var properties = Object.keys(newProp.items[index]);

        for (var j = 0; j < properties.length; j++) {
          var oldVal = Object(oldProp.items[index])[properties[j]];
          var newVal = Object(newProp.items[index])[properties[j]];
          var hdr = this.element.querySelectorAll('.' + CLS_TB_ITEM)[index];
          var itemIndex = void 0;

          if (hdr && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(hdr.id) && hdr.id !== '') {
            itemIndex = this.getIndexFromEle(hdr.id);
          } else {
            itemIndex = index;
          }

          var hdrItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_ITEMS + ' #' + CLS_ITEM + this.tabId + '_' + itemIndex, this.element);
          var cntItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT + ' #' + CLS_CONTENT + this.tabId + '_' + itemIndex, this.element);

          if (properties[j] === 'header' || properties[j] === 'headerTemplate') {
            var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.items[index].header) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.items[index].header.iconCss) ? '' : this.items[index].header.iconCss;
            var textVal = this.items[index].headerTemplate || this.items[index].header.text;

            if (properties[j] === 'headerTemplate') {
              this.clearTabTemplate(hdrItem, properties[j], CLS_TB_ITEM);
            }

            if (textVal === '' && icon === '') {
              this.removeTab(index);
            } else {
              this.tbId = hdr.id;
              var arr = [];
              arr.push(this.items[index]);
              this.items.splice(index, 1);
              this.itemIndexArray.splice(index, 1);
              this.tbObj.items.splice(index, 1);
              var isHiddenEle = hdrItem.classList.contains(CLS_HIDDEN);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(hdrItem);
              this.isReplace = true;
              this.addTab(arr, index);

              if (isHiddenEle) {
                this.hideTab(index);
              }

              this.isReplace = false;
            }
          }

          if (properties[j] === 'content' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cntItem)) {
            var strVal = typeof newVal === 'string' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newVal.innerHTML);

            if (strVal && (newVal[0] === '.' || newVal[0] === '#') && newVal.length) {
              var eleVal = document.querySelector(newVal);
              cntItem.appendChild(eleVal);
              eleVal.style.display = '';
            } else if (newVal === '' && oldVal[0] === '#') {
              document.body.appendChild(this.element.querySelector(oldVal)).style.display = 'none';
              cntItem.innerHTML = newVal;
            } else if (this.isAngular || this.isReact) {
              this.clearTabTemplate(cntItem, properties[j], CLS_ITEM);
              cntItem.innerHTML = '';
              this.templateCompile(cntItem, newVal, index);
            } else if (typeof newVal !== 'function') {
              cntItem.innerHTML = newVal;
            }
          }

          if (properties[j] === 'cssClass') {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(hdrItem)) {
              hdrItem.classList.remove(oldVal);
              hdrItem.classList.add(newVal);
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cntItem)) {
              cntItem.classList.remove(oldVal);
              cntItem.classList.add(newVal);
            }
          }

          if (properties[j] === 'disabled') {
            this.enableTab(index, newVal === true ? false : true);
          }

          if (properties[j] === 'visible') {
            this.hideTab(index, newVal === true ? false : true);
          }
        }
      }
    } else {
      this.lastIndex = 0;

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tbObj)) {
        this.reRenderItems();
      } else {
        if (this.isReact || this.isAngular) {
          this.clearTemplate();
        }

        this.setItems(newProp.items);

        if (this.templateEle.length > 0) {
          this.expTemplateContent();
        }

        this.templateEle = [];
        var selectElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TAB + ' > .' + CLS_CONTENT, this.element);

        while (selectElement.firstElementChild) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(selectElement.firstElementChild);
        }

        this.select(this.selectedItem);
        this.draggableItems = [];
        this.bindDraggable();
      }
    }
  };

  Tab.prototype.clearTabTemplate = function (templateEle, templateName, className) {
    if (!this.clearTemplates) {
      return;
    }

    if (this.registeredTemplate && this.registeredTemplate[templateName]) {
      var registeredTemplates = this.registeredTemplate;

      for (var index = 0; index < registeredTemplates[templateName].length; index++) {
        var registeredItem = registeredTemplates[templateName][index].rootNodes[0];
        var closestItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(registeredItem, '.' + className);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(closestItem) && closestItem === templateEle) {
          this.clearTemplate([templateName], [registeredTemplates[templateName][index]]);
          break;
        }
      }
    } else if (this.portals && this.portals.length > 0) {
      var portals = this.portals;

      for (var index = 0; index < portals.length; index++) {
        var portalItem = portals[index];
        var closestItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(portalItem.containerInfo, '.' + className);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(closestItem) && closestItem === templateEle) {
          this.clearTemplate([templateName], index);
          break;
        }
      }
    }
  };

  Tab.prototype.initializeDrag = function (target) {
    var _this = this;

    var dragObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Draggable"](target, {
      dragArea: this.dragArea,
      dragTarget: '.' + CLS_TB_ITEM,
      clone: true,
      helper: this.helper.bind(this),
      dragStart: this.itemDragStart.bind(this),
      drag: function (e) {
        var dragIndex = _this.getEleIndex(_this.dragItem);

        var dropIndex;
        var dropItem;
        var dragArgs = {
          draggedItem: _this.dragItem,
          event: e.event,
          target: e.target,
          droppedItem: e.target.closest('.' + CLS_TB_ITEM),
          clonedElement: _this.cloneElement,
          index: dragIndex
        };

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e.target.closest('.' + CLS_TAB)) && !e.target.closest('.' + CLS_TAB).isEqualNode(_this.element) && _this.dragArea !== '.' + CLS_HEADER) {
          _this.trigger('dragging', dragArgs);
        } else {
          if (!e.target.closest(_this.dragArea) && _this.overflowMode !== 'Popup') {
            document.body.style.cursor = 'not-allowed';
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this.cloneElement], CLS_HIDDEN);

            if (_this.dragItem.classList.contains(CLS_HIDDEN)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_this.dragItem], CLS_HIDDEN);
            }

            _this.dragItem.querySelector('.' + CLS_WRAP).style.visibility = 'visible';
          } else {
            document.body.style.cursor = '';
            _this.dragItem.querySelector('.' + CLS_WRAP).style.visibility = 'hidden';

            if (_this.cloneElement.classList.contains(CLS_HIDDEN)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_this.cloneElement], CLS_HIDDEN);
            }
          }

          if (_this.overflowMode === 'Scrollable' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this.element.querySelector('.e-hscroll'))) {
            var scrollRightNavEle = _this.element.querySelector('.e-scroll-right-nav');

            var scrollLeftNavEle = _this.element.querySelector('.e-scroll-left-nav');

            var hscrollBar = _this.element.querySelector('.e-hscroll-bar');

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(scrollRightNavEle) && Math.abs(scrollRightNavEle.offsetWidth / 2 + scrollRightNavEle.offsetLeft) > _this.cloneElement.offsetLeft + _this.cloneElement.offsetWidth) {
              hscrollBar.scrollLeft -= 10;
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(scrollLeftNavEle) && Math.abs(scrollLeftNavEle.offsetLeft + scrollLeftNavEle.offsetWidth - _this.cloneElement.offsetLeft) > scrollLeftNavEle.offsetWidth / 2) {
              hscrollBar.scrollLeft += 10;
            }
          }

          _this.cloneElement.style.pointerEvents = 'none';
          dropItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + CLS_TB_ITEM + '.e-draggable');
          var scrollContentWidth = 0;

          if (_this.overflowMode === 'Scrollable' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this.element.querySelector('.e-hscroll'))) {
            scrollContentWidth = _this.element.querySelector('.e-hscroll-content').offsetWidth;
          }

          if (dropItem != null && !dropItem.isSameNode(_this.dragItem) && dropItem.closest('.' + CLS_TAB).isSameNode(_this.dragItem.closest('.' + CLS_TAB))) {
            dropIndex = _this.getEleIndex(dropItem);

            if (dropIndex < dragIndex && Math.abs(dropItem.offsetLeft + dropItem.offsetWidth - _this.cloneElement.offsetLeft) > dropItem.offsetWidth / 2) {
              _this.dragAction(dropItem, dragIndex, dropIndex);
            }

            if (dropIndex > dragIndex && Math.abs(dropItem.offsetWidth / 2) + dropItem.offsetLeft - scrollContentWidth < _this.cloneElement.offsetLeft + _this.cloneElement.offsetWidth) {
              _this.dragAction(dropItem, dragIndex, dropIndex);
            }
          }

          _this.droppedIndex = _this.getEleIndex(_this.dragItem);

          _this.trigger('dragging', dragArgs);
        }
      },
      dragStop: this.itemDragStop.bind(this)
    });
    this.draggableItems.push(dragObj);
  };

  Tab.prototype.helper = function (e) {
    this.cloneElement = this.createElement('div');

    if (e.element) {
      this.cloneElement = e.element.cloneNode(true);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.cloneElement], 'e-tab-clone-element');

      if (this.element.querySelector('.' + CLS_HEADER).classList.contains(CLS_CLOSE_SHOW)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.cloneElement], CLS_CLOSE_SHOW);
      }

      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.cloneElement.querySelector('.' + CLS_WRAP)], 'e-ripple');

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cloneElement.querySelector('.e-ripple-element'))) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.cloneElement.querySelector('.e-ripple-element'));
      }

      document.body.appendChild(this.cloneElement);
    }

    return this.cloneElement;
  };

  Tab.prototype.itemDragStart = function (e) {
    var _this = this;

    this.draggingItems = this.items.map(function (x) {
      return x;
    });
    this.dragItem = e.element;
    var dragArgs = {
      draggedItem: e.element,
      event: e.event,
      target: e.target,
      droppedItem: null,
      index: this.getEleIndex(this.dragItem),
      clonedElement: this.cloneElement,
      cancel: false
    };
    this.trigger('onDragStart', dragArgs, function (tabItemDragArgs) {
      if (tabItemDragArgs.cancel) {
        var dragObj = e.element.ej2_instances[0];

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dragObj)) {
          dragObj.intDestroy(e.event);
        }

        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(_this.cloneElement);
      } else {
        _this.removeActiveClass();

        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this.tbItems.querySelector('.' + CLS_INDICATOR)], CLS_HIDDEN);
        _this.dragItem.querySelector('.' + CLS_WRAP).style.visibility = 'hidden';
      }
    });
  };

  Tab.prototype.dragAction = function (dropItem, dragsIndex, dropIndex) {
    if (this.items.length > 0) {
      var item = this.draggingItems[dragsIndex];
      this.draggingItems.splice(dragsIndex, 1);
      this.draggingItems.splice(dropIndex, 0, item);
    }

    if (this.overflowMode === 'MultiRow') {
      dropItem.parentNode.insertBefore(this.dragItem, dropItem.nextElementSibling);
    }

    if (dragsIndex > dropIndex) {
      if (!this.dragItem.parentElement.isSameNode(dropItem.parentElement)) {
        if (this.overflowMode === 'Extended') {
          if (dropItem.isSameNode(dropItem.parentElement.lastChild)) {
            var popupContainer = this.dragItem.parentNode;
            dropItem.parentNode.insertBefore(this.dragItem, dropItem);
            popupContainer.insertBefore(dropItem.parentElement.lastChild, popupContainer.childNodes[0]);
          } else {
            this.dragItem.parentNode.insertBefore(dropItem.parentElement.lastChild, this.dragItem.parentElement.childNodes[0]);
            dropItem.parentNode.insertBefore(this.dragItem, dropItem);
          }
        } else {
          var lastEle = dropItem.parentElement.lastChild;

          if (dropItem.isSameNode(lastEle)) {
            var popupContainer = this.dragItem.parentNode;
            dropItem.parentNode.insertBefore(this.dragItem, dropItem);
            popupContainer.insertBefore(lastEle, popupContainer.childNodes[0]);
          } else {
            this.dragItem.parentNode.insertBefore(dropItem.parentElement.lastChild, this.dragItem.parentElement.childNodes[0]);
            dropItem.parentNode.insertBefore(this.dragItem, dropItem);
          }
        }
      } else {
        this.dragItem.parentNode.insertBefore(this.dragItem, dropItem);
      }
    }

    if (dragsIndex < dropIndex) {
      if (!this.dragItem.parentElement.isSameNode(dropItem.parentElement)) {
        if (this.overflowMode === 'Extended') {
          this.dragItem.parentElement.appendChild(dropItem.parentElement.firstElementChild);
          dropItem.parentNode.insertBefore(this.dragItem, dropItem.nextSibling);
        } else {
          this.dragItem.parentNode.insertBefore(dropItem.parentElement.lastChild, this.dragItem.parentElement.childNodes[0]);
          dropItem.parentNode.insertBefore(this.dragItem, dropItem);
        }
      } else {
        this.dragItem.parentNode.insertBefore(this.dragItem, dropItem.nextElementSibling);
      }
    }
  };

  Tab.prototype.itemDragStop = function (e) {
    var _this = this;

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.cloneElement);
    this.cloneElement = null;
    this.dragItem.querySelector('.' + CLS_WRAP).style.visibility = 'visible';
    document.body.style.cursor = '';
    var dragStopArgs = {
      draggedItem: this.dragItem,
      event: e.event,
      target: e.target,
      droppedItem: this.tbItem[this.droppedIndex],
      clonedElement: null,
      index: this.droppedIndex,
      cancel: false
    };
    this.trigger('dragged', dragStopArgs, function (tabItemDropArgs) {
      if (tabItemDropArgs.cancel) {
        _this.refresh();
      } else {
        if (_this.items.length > 0 && _this.draggingItems.length > 0) {
          _this.items = _this.draggingItems;
          _this.selectedItem = _this.droppedIndex;

          _this.refresh();
        } else {
          _this.dragItem.querySelector('.' + CLS_WRAP).style.visibility = '';
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_this.tbItems.querySelector('.' + CLS_INDICATOR)], CLS_HIDDEN);

          _this.selectTab(_this.droppedIndex, null, true);
        }
      }
    });
    this.dragItem = null;
  };
  /**
   * Enables or disables the specified Tab item. On passing value as `false`, the item will be disabled.
   *
   * @param {number} index - Index value of target Tab item.
   * @param {boolean} value - Boolean value that determines whether the command should be enabled or disabled.
   * By default, isEnable is true.
   * @returns {void}.
   */


  Tab.prototype.enableTab = function (index, value) {
    var tbItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.element)[index];

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(tbItems)) {
      return;
    }

    if (value === true) {
      tbItems.classList.remove(CLS_DISABLE, CLS_OVERLAY);
      tbItems.firstElementChild.setAttribute('tabindex', tbItems.firstElementChild.getAttribute('data-tabindex'));
    } else {
      tbItems.classList.add(CLS_DISABLE, CLS_OVERLAY);
      tbItems.firstElementChild.removeAttribute('tabindex');

      if (tbItems.classList.contains(CLS_ACTIVE)) {
        this.select(index + 1);
      }
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.items[index])) {
      this.items[index].disabled = !value;
      this.dataBind();
    }

    tbItems.firstElementChild.setAttribute('aria-disabled', value === true ? 'false' : 'true');
  };
  /**
   * Adds new items to the Tab that accepts an array as Tab items.
   *
   * @param {TabItemModel[]} items - An array of item that is added to the Tab.
   * @param {number} index - Number value that determines where the items to be added. By default, index is 0.
   * @returns {void}.
   */


  Tab.prototype.addTab = function (items, index) {
    var _this = this;

    var addArgs = {
      addedItems: items,
      cancel: false
    };

    if (!this.isReplace) {
      this.trigger('adding', addArgs, function (tabAddingArgs) {
        if (!tabAddingArgs.cancel) {
          _this.addingTabContent(items, index);
        }
      });
    } else {
      this.addingTabContent(items, index);
    }

    if (this.isReact) {
      this.renderReactTemplates();
    }
  };

  Tab.prototype.addingTabContent = function (items, index) {
    var _this = this;

    var lastEleIndex = 0;
    this.hdrEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER, this.element);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.hdrEle)) {
      this.items = items;
      this.reRenderItems();
      this.bindDraggable();
    } else {
      var itemsCount = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.e-tab-header .' + CLS_TB_ITEM, this.element).length;

      if (itemsCount !== 0) {
        lastEleIndex = this.lastIndex + 1;
      }

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index)) {
        index = itemsCount - 1;
      }

      if (itemsCount < index || index < 0 || isNaN(index)) {
        return;
      }

      if (itemsCount === 0 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.hdrEle)) {
        this.hdrEle.style.display = '';
      }

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.bdrLine)) {
        this.bdrLine.classList.add(CLS_HIDDEN);
      }

      this.tbItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_ITEMS, this.getTabHeader());
      this.isAdd = true;
      var tabItems_2 = this.parseObject(items, index);
      this.isAdd = false;
      var i_1 = 0;
      var textValue_1;
      items.forEach(function (item, place) {
        textValue_1 = item.headerTemplate || item.header.text;

        if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.headerTemplate || item.header) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(textValue_1) || textValue_1.length === 0 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header.iconCss))) {
          if (tabItems_2[place]) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.id)) {
              item.id = CLS_ITEM + _this.tabId + '_' + TABITEMPREFIX + (lastEleIndex + place).toString();
            }

            tabItems_2[place].htmlAttributes['data-id'] = item.id;
          }

          _this.items.splice(index + i_1, 0, item);

          i_1++;
        }

        if (_this.isTemplate && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header.text)) {
          var no = lastEleIndex + place;

          var ele = _this.createElement('div', {
            id: CLS_CONTENT + _this.tabId + '_' + no,
            className: CLS_ITEM,
            attrs: {
              role: 'tabpanel',
              'aria-labelledby': CLS_ITEM + '_' + no
            }
          });

          _this.cntEle.insertBefore(ele, _this.cntEle.children[index + place]);

          var eleTrg = _this.getTrgContent(_this.cntEle, no.toString());

          _this.getContent(eleTrg, item.content, 'render', index);
        }
      });
      this.tbObj.addItems(tabItems_2, index);

      if (!this.isReplace) {
        this.trigger('added', {
          addedItems: items
        });
      }

      if (this.selectedItem === index) {
        this.select(index);
      } else {
        this.setActiveBorder();
        this.tbItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.getTabHeader());
      }

      this.bindDraggable();
    }
  };
  /**
   * Removes the items in the Tab from the specified index.
   *
   * @param {number} index - Index of target item that is going to be removed.
   * @returns {void}.
   */


  Tab.prototype.removeTab = function (index) {
    var _this = this;

    var trg = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.element)[index];

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(trg)) {
      return;
    }

    var removeArgs = {
      removedItem: trg,
      removedIndex: index,
      cancel: false
    };
    this.trigger('removing', removeArgs, function (tabRemovingArgs) {
      if (!tabRemovingArgs.cancel) {
        var header = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + CLS_ITEM + _this.tabId + '_' + _this.extIndex(trg.id), Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_ITEMS, _this.element));

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(header)) {
          _this.clearTabTemplate(header, 'headerTemplate', CLS_TB_ITEM);
        }

        _this.tbObj.removeItems(index);

        if (_this.allowDragAndDrop && index !== Array.prototype.indexOf.call(_this.itemIndexArray, trg.id)) {
          index = Array.prototype.indexOf.call(_this.itemIndexArray, trg.id);
        }

        var targetEleIndex = _this.itemIndexArray.indexOf(trg.id);

        _this.items.splice(targetEleIndex, 1);

        _this.itemIndexArray.splice(targetEleIndex, 1);

        _this.refreshActiveBorder();

        var cntTrg = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + CLS_CONTENT + _this.tabId + '_' + _this.extIndex(trg.id), Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT, _this.element));

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cntTrg)) {
          _this.clearTabTemplate(cntTrg, 'content', CLS_ITEM);

          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(cntTrg);
        }

        _this.trigger('removed', tabRemovingArgs);

        if (_this.draggableItems && _this.draggableItems.length > 0) {
          _this.draggableItems[index].destroy();

          _this.draggableItems[index] = null;

          _this.draggableItems.splice(index, 1);
        }

        if (trg.classList.contains(CLS_ACTIVE)) {
          index = index > Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM + ':not(.' + CLS_TB_POPUP + ')', _this.element).length - 1 ? index - 1 : index;
          _this.enableAnimation = false;
          _this.selectedItem = index;

          _this.select(index);
        } else if (index !== _this.selectedItem) {
          if (index < _this.selectedItem) {
            index = _this.itemIndexArray.indexOf(_this.tbItem[_this.selectedItem].id);

            _this.setProperties({
              selectedItem: index > -1 ? index : _this.selectedItem
            }, true);

            _this.prevIndex = _this.selectedItem;
          }

          _this.tbItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, _this.getTabHeader());
        }

        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, _this.element).length === 0) {
          _this.hdrEle.style.display = 'none';
        }

        _this.enableAnimation = true;
      }
    });
  };
  /**
   * Shows or hides the Tab that is in the specified index.
   *
   * @param {number} index - Index value of target item.
   * @param {boolean} value - Based on this Boolean value, item will be hide (false) or show (true). By default, value is true.
   * @returns {void}.
   */


  Tab.prototype.hideTab = function (index, value) {
    var items;
    var item = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.element)[index];

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item)) {
      return;
    }

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(value)) {
      value = true;
    }

    this.bdrLine.classList.add(CLS_HIDDEN);

    if (value === true) {
      item.classList.add(CLS_HIDDEN);
      items = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM + ':not(.' + CLS_HIDDEN + ')', this.tbItems);

      if (items.length !== 0 && item.classList.contains(CLS_ACTIVE)) {
        if (index !== 0) {
          for (var i = index - 1; i >= 0; i--) {
            if (!this.tbItem[i].classList.contains(CLS_HIDDEN)) {
              this.select(i);
              break;
            } else if (i === 0) {
              for (var k = index + 1; k < this.tbItem.length; k++) {
                if (!this.tbItem[k].classList.contains(CLS_HIDDEN)) {
                  this.select(k);
                  break;
                }
              }
            }
          }
        } else {
          for (var k = index + 1; k < this.tbItem.length; k++) {
            if (!this.tbItem[k].classList.contains(CLS_HIDDEN)) {
              this.select(k);
              break;
            }
          }
        }
      } else if (items.length === 0) {
        this.element.classList.add(CLS_HIDDEN);
      }
    } else {
      this.element.classList.remove(CLS_HIDDEN);
      items = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM + ':not(.' + CLS_HIDDEN + ')', this.tbItems);
      item.classList.remove(CLS_HIDDEN);

      if (items.length === 0) {
        this.select(index);
      }
    }

    this.setActiveBorder();

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.firstElementChild)) {
      item.firstElementChild.setAttribute('aria-hidden', '' + value);
    }

    if (this.overflowMode === 'Popup' && this.tbObj) {
      this.tbObj.refreshOverflow();
    }
  };

  Tab.prototype.selectTab = function (args, event, isInteracted) {
    if (event === void 0) {
      event = null;
    }

    if (isInteracted === void 0) {
      isInteracted = false;
    }

    this.isInteracted = isInteracted;
    this.select(args, event);
  };
  /**
   * Specifies the index or HTMLElement to select an item from the Tab.
   *
   * @param {number | HTMLElement} args - Index or DOM element is used for selecting an item from the Tab.
   * @param {Event} event - An event which takes place in DOM.
   * @returns {void}
   */


  Tab.prototype.select = function (args, event) {
    var _this = this;

    var tabHeader = this.getTabHeader();
    this.tbItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_ITEMS, tabHeader);
    this.tbItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, tabHeader);
    this.content = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT, this.element);
    this.prevItem = this.tbItem[this.prevIndex];

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.selectedItem) || this.selectedItem < 0 || this.tbItem.length <= this.selectedItem || isNaN(this.selectedItem)) {
      this.selectedItem = 0;
    } else {
      this.selectedID = this.extIndex(this.tbItem[this.selectedItem].id);
    }

    var trg = this.tbItem[args];

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(trg)) {
      this.selectedID = '0';
    } else {
      this.selectingID = this.extIndex(trg.id);
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.prevItem) && !this.prevItem.classList.contains(CLS_DISABLE)) {
      this.prevItem.children.item(0).setAttribute('tabindex', this.prevItem.firstElementChild.getAttribute('tabindex'));
    }

    var eventArg = {
      event: event,
      previousItem: this.prevItem,
      previousIndex: this.prevIndex,
      selectedItem: this.tbItem[this.selectedItem],
      selectedIndex: this.selectedItem,
      selectedContent: !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.content) ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + CLS_CONTENT + this.tabId + '_' + this.selectedID, this.content) : null,
      selectingItem: trg,
      selectingIndex: args,
      selectingContent: !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.content) ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + CLS_CONTENT + this.tabId + '_' + this.selectingID, this.content) : null,
      isSwiped: this.isSwiped,
      isInteracted: this.isInteracted,
      cancel: false
    };

    if (!this.initRender) {
      this.trigger('selecting', eventArg, function (selectArgs) {
        if (!selectArgs.cancel) {
          _this.selectingContent(args, _this.isInteracted);
        }
      });
    } else {
      this.selectingContent(args, this.isInteracted);
    }

    this.isInteracted = false;
  };

  Tab.prototype.selectingContent = function (args, isInteracted) {
    if (typeof args === 'number') {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tbItem[args]) && (this.tbItem[args].classList.contains(CLS_DISABLE) || this.tbItem[args].classList.contains(CLS_HIDDEN))) {
        for (var i = args + 1; i < this.items.length; i++) {
          if (this.items[i].disabled === false && this.items[i].visible === true) {
            args = i;
            break;
          } else {
            args = 0;
          }
        }
      }

      if (this.tbItem.length > args && args >= 0 && !isNaN(args)) {
        this.prevIndex = this.selectedItem;
        this.prevItem = this.tbItem[this.prevIndex];

        if (this.tbItem[args].classList.contains(CLS_TB_POPUP) && this.reorderActiveTab) {
          this.setActive(this.popupHandler(this.tbItem[args]), null, isInteracted);

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.items) && this.items.length > 0 && this.allowDragAndDrop) {
            this.tbItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEMS + ' .' + CLS_TB_ITEM, this.hdrEle);
            var item = this.items[args];
            this.items.splice(args, 1);
            this.items.splice(this.tbItem.length - 1, 0, item);
            var itemId = this.itemIndexArray[args];
            this.itemIndexArray.splice(args, 1);
            this.itemIndexArray.splice(this.tbItem.length - 1, 0, itemId);
          }
        } else {
          this.setActive(args, null, isInteracted);
        }
      } else {
        this.setActive(0, null, isInteracted);
      }
    } else if (args instanceof HTMLElement) {
      this.setActive(this.getEleIndex(args), null, isInteracted);
    }
  };
  /**
   * Gets the item index from the Tab.
   *
   * @param  {string} tabItemId - Item ID is used for getting index from the Tab.
   * @returns {number} - It returns item index.
   */


  Tab.prototype.getItemIndex = function (tabItemId) {
    var tabIndex;

    for (var i = 0; i < this.tbItem.length; i++) {
      var value = this.tbItem[i].getAttribute('data-id');

      if (tabItemId === value) {
        tabIndex = i;
        break;
      }
    }

    return tabIndex;
  };
  /**
   * Specifies the value to disable/enable the Tab component.
   * When set to `true`, the component will be disabled.
   *
   * @param  {boolean} value - Based on this Boolean value, Tab will be enabled (false) or disabled (true).
   * @returns {void}.
   */


  Tab.prototype.disable = function (value) {
    this.setCssClass(this.element, CLS_DISABLE, value);
    this.element.setAttribute('aria-disabled', '' + value);
  };
  /**
   * Get the properties to be maintained in the persisted state.
   *
   * @returns {string} - It returns the persisted state.
   */


  Tab.prototype.getPersistData = function () {
    return this.addOnPersist(['selectedItem', 'actEleId']);
  };
  /**
   * Returns the current module name.
   *
   * @returns {string} - It returns the current module name.
   * @private
   */


  Tab.prototype.getModuleName = function () {
    return 'tab';
  };
  /**
   * Gets called when the model property changes.The data that describes the old and new values of the property that changed.
   *
   * @param  {TabModel} newProp - It contains the new value of data.
   * @param  {TabModel} oldProp - It contains the old value of data.
   * @returns {void}
   * @private
   */


  Tab.prototype.onPropertyChanged = function (newProp, oldProp) {
    var _this = this;

    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'width':
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
            width: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.width)
          });
          break;

        case 'height':
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
            height: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.height)
          });
          this.setContentHeight(false);
          break;

        case 'cssClass':
          var headerEle = this.element.querySelector('.' + CLS_HEADER);

          if (oldProp.cssClass !== '' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldProp.cssClass)) {
            this.setCssClass(this.element, oldProp.cssClass, false);
            this.setCssClass(this.element, newProp.cssClass, true);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(headerEle)) {
              this.setCssClass(headerEle, oldProp.cssClass, false);
              this.setCssClass(headerEle, newProp.cssClass, true);
            }
          } else {
            this.setCssClass(this.element, newProp.cssClass, true);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(headerEle)) {
              this.setCssClass(headerEle, newProp.cssClass, true);
            }
          }

          break;

        case 'items':
          this.evalOnPropertyChangeItems(newProp, oldProp);
          break;

        case 'showCloseButton':
          this.setCloseButton(newProp.showCloseButton);
          break;

        case 'reorderActiveTab':
          this.refreshActiveTabBorder();
          break;

        case 'selectedItem':
          this.selectedItem = oldProp.selectedItem;
          this.select(newProp.selectedItem);
          break;

        case 'headerPlacement':
          this.changeOrientation(newProp.headerPlacement);
          break;

        case 'enableRtl':
          this.setRTL(newProp.enableRtl);
          break;

        case 'overflowMode':
          this.tbObj.overflowMode = newProp.overflowMode;
          this.tbObj.dataBind();
          this.refreshActiveTabBorder();
          break;

        case 'heightAdjustMode':
          this.setContentHeight(false);
          this.select(this.selectedItem);
          break;

        case 'scrollStep':
          if (this.tbObj) {
            this.tbObj.scrollStep = this.scrollStep;
          }

          break;

        case 'allowDragAndDrop':
          this.bindDraggable();
          break;

        case 'dragArea':
          if (this.allowDragAndDrop) {
            this.draggableItems.forEach(function (item) {
              item.dragArea = _this.dragArea;
            });
            this.refresh();
          }

          break;
      }
    }
  };
  /**
   * To refresh the active tab contents.
   *
   * @returns {void}
   */


  Tab.prototype.refreshActiveTab = function () {
    if (this.isReact && this.isTemplate) {
      this.clearTemplate();
    }

    if (!this.isTemplate) {
      if (this.element.querySelector('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.element.querySelector('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE).children[0]);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.element.querySelector('.' + CLS_CONTENT).querySelector('.' + CLS_ACTIVE).children[0]);
        var item = this.items[this.selectedItem];
        var pos = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header.iconPosition) ? '' : item.header.iconPosition;
        var css = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header.iconCss) ? '' : item.header.iconCss;
        var text = item.headerTemplate || item.header.text;
        var txtWrap = this.createElement('div', {
          className: CLS_TEXT,
          attrs: {
            'role': 'presentation'
          }
        });

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(text.tagName)) {
          txtWrap.appendChild(text);
        } else {
          this.headerTextCompile(txtWrap, text, this.selectedItem);
        }

        var tEle = void 0;
        var icon = this.createElement('span', {
          className: CLS_ICONS + ' ' + CLS_TAB_ICON + ' ' + CLS_ICON + '-' + pos + ' ' + css
        });
        var tConts = this.createElement('div', {
          className: CLS_TEXT_WRAP
        });
        tConts.appendChild(txtWrap);

        if (text !== '' && text !== undefined && css !== '') {
          if (pos === 'left' || pos === 'top') {
            tConts.insertBefore(icon, tConts.firstElementChild);
          } else {
            tConts.appendChild(icon);
          }

          tEle = txtWrap;
          this.isIconAlone = false;
        } else {
          tEle = css === '' ? txtWrap : icon;

          if (tEle === icon) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(txtWrap);
            tConts.appendChild(icon);
            this.isIconAlone = true;
          }
        }

        var tabIndex = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.tabIndex) ? '-1' : item.tabIndex.toString();
        var wrapAtt = item.disabled ? {} : {
          tabIndex: tabIndex,
          'data-tabindex': tabIndex,
          role: 'tab',
          'aria-selected': 'true',
          'aria-disabled': 'false'
        };
        tConts.appendChild(this.btnCls.cloneNode(true));
        var wraper = this.createElement('div', {
          className: CLS_WRAP,
          attrs: wrapAtt
        });
        wraper.appendChild(tConts);

        if (pos === 'top' || pos === 'bottom') {
          this.element.classList.add('e-vertical-icon');
        }

        this.element.querySelector('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE).appendChild(wraper);
        var crElem = this.createElement('div');
        var cnt = item.content;
        var eleStr = void 0;

        if (typeof cnt === 'string' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cnt.innerHTML)) {
          if (typeof cnt === 'string' && this.enableHtmlSanitizer) {
            cnt = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(cnt);
          }

          if (cnt[0] === '.' || cnt[0] === '#') {
            if (document.querySelectorAll(cnt).length) {
              var eleVal = document.querySelector(cnt);
              eleStr = eleVal.outerHTML.trim();
              crElem.appendChild(eleVal);
              eleVal.style.display = '';
            } else {
              this.compileElement(crElem, cnt, 'content', this.selectedItem);
            }
          } else {
            this.compileElement(crElem, cnt, 'content', this.selectedItem);
          }
        } else {
          crElem.appendChild(cnt);
        }

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(eleStr)) {
          if (this.templateEle.indexOf(cnt.toString()) === -1) {
            this.templateEle.push(cnt.toString());
          }
        }

        this.element.querySelector('.' + CLS_ITEM + '.' + CLS_ACTIVE).appendChild(crElem);
      }
    } else {
      var tabItems = this.element.querySelector('.' + CLS_TB_ITEMS);
      var element = this.element.querySelector('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE);
      var index = this.getIndexFromEle(element.id);
      var header = element.innerText;
      var detachContent = this.element.querySelector('.' + CLS_CONTENT).querySelector('.' + CLS_ACTIVE).children[0];
      var mainContents = detachContent.innerHTML;
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(element);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(detachContent);
      var attr = {
        className: CLS_TB_ITEM + ' ' + CLS_TEMPLATE + ' ' + CLS_ACTIVE,
        id: CLS_ITEM + this.tabId + '_' + index
      };
      var txtString = this.createElement('span', {
        className: CLS_TEXT,
        innerHTML: header,
        attrs: {
          'role': 'presentation'
        }
      }).outerHTML;
      var conte = this.createElement('div', {
        className: CLS_TEXT_WRAP,
        innerHTML: txtString + this.btnCls.outerHTML
      }).outerHTML;
      var tabIndex = element.firstElementChild.getAttribute('data-tabindex');
      var wrap = this.createElement('div', {
        className: CLS_WRAP,
        innerHTML: conte,
        attrs: {
          tabIndex: tabIndex,
          'data-tabindex': tabIndex,
          role: 'tab',
          'aria-controls': CLS_CONTENT + this.tabId + '_' + index,
          'aria-selected': 'true',
          'aria-disabled': 'false'
        }
      });
      tabItems.insertBefore(this.createElement('div', attr), tabItems.children[index + 1]);
      this.element.querySelector('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE).appendChild(wrap);
      var crElem = this.createElement('div', {
        innerHTML: mainContents
      });
      this.element.querySelector('.' + CLS_CONTENT).querySelector('.' + CLS_ACTIVE).appendChild(crElem);
    }

    if (this.isReact) {
      this.renderReactTemplates();
    }
  };
  /**
   * To refresh the active tab indicator.
   *
   * @returns {void}
   */


  Tab.prototype.refreshActiveTabBorder = function () {
    var activeEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_ITEM + '.' + CLS_TB_POPUP + '.' + CLS_ACTIVE, this.element);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(activeEle) && this.reorderActiveTab) {
      this.select(this.getEleIndex(activeEle));
    }

    this.refreshActiveBorder();
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([], TabItem)], Tab.prototype, "items", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('100%')], Tab.prototype, "width", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Tab.prototype, "height", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Tab.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], Tab.prototype, "selectedItem", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Top')], Tab.prototype, "headerPlacement", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Content')], Tab.prototype, "heightAdjustMode", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Scrollable')], Tab.prototype, "overflowMode", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Dynamic')], Tab.prototype, "loadOn", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Tab.prototype, "enablePersistence", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Tab.prototype, "enableHtmlSanitizer", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Tab.prototype, "showCloseButton", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Tab.prototype, "reorderActiveTab", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Tab.prototype, "scrollStep", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Tab.prototype, "dragArea", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Tab.prototype, "allowDragAndDrop", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Tab.prototype, "clearTemplates", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, TabAnimationSettings)], Tab.prototype, "animation", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tab.prototype, "created", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tab.prototype, "adding", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tab.prototype, "added", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tab.prototype, "selecting", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tab.prototype, "selected", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tab.prototype, "removing", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tab.prototype, "removed", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tab.prototype, "onDragStart", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tab.prototype, "dragging", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tab.prototype, "dragged", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tab.prototype, "destroyed", void 0);

  Tab = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Tab);
  return Tab;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/toolbar/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/toolbar/index.js ***!
  \***********************************************************************/
/*! exports provided: Item, Toolbar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _toolbar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toolbar */ "./node_modules/@syncfusion/ej2-navigations/src/toolbar/toolbar.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Item", function() { return _toolbar__WEBPACK_IMPORTED_MODULE_0__["Item"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Toolbar", function() { return _toolbar__WEBPACK_IMPORTED_MODULE_0__["Toolbar"]; });

/**
 * Toolbar modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/toolbar/toolbar.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/toolbar/toolbar.js ***!
  \*************************************************************************/
/*! exports provided: Item, Toolbar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Item", function() { return Item; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Toolbar", function() { return Toolbar; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-popups */ "./node_modules/@syncfusion/ej2-popups/index.js");
/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ "./node_modules/@syncfusion/ej2-buttons/index.js");
/* harmony import */ var _common_h_scroll__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/h-scroll */ "./node_modules/@syncfusion/ej2-navigations/src/common/h-scroll.js");
/* harmony import */ var _common_v_scroll__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/v-scroll */ "./node_modules/@syncfusion/ej2-navigations/src/common/v-scroll.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/* eslint-disable @typescript-eslint/no-explicit-any */












var CLS_VERTICAL = 'e-vertical';
var CLS_ITEMS = 'e-toolbar-items';
var CLS_ITEM = 'e-toolbar-item';
var CLS_RTL = 'e-rtl';
var CLS_SEPARATOR = 'e-separator';
var CLS_POPUPICON = 'e-popup-up-icon';
var CLS_POPUPDOWN = 'e-popup-down-icon';
var CLS_POPUPOPEN = 'e-popup-open';
var CLS_TEMPLATE = 'e-template';
var CLS_DISABLE = 'e-overlay';
var CLS_POPUPTEXT = 'e-toolbar-text';
var CLS_TBARTEXT = 'e-popup-text';
var CLS_TBAROVERFLOW = 'e-overflow-show';
var CLS_POPOVERFLOW = 'e-overflow-hide';
var CLS_TBARBTN = 'e-tbar-btn';
var CLS_TBARNAV = 'e-hor-nav';
var CLS_TBARSCRLNAV = 'e-scroll-nav';
var CLS_TBARRIGHT = 'e-toolbar-right';
var CLS_TBARLEFT = 'e-toolbar-left';
var CLS_TBARCENTER = 'e-toolbar-center';
var CLS_TBARPOS = 'e-tbar-pos';
var CLS_HSCROLLCNT = 'e-hscroll-content';
var CLS_VSCROLLCNT = 'e-vscroll-content';
var CLS_HSCROLLBAR = 'e-hscroll-bar';
var CLS_POPUPNAV = 'e-hor-nav';
var CLS_POPUPCLASS = 'e-toolbar-pop';
var CLS_POPUP = 'e-toolbar-popup';
var CLS_TBARBTNTEXT = 'e-tbar-btn-text';
var CLS_TBARNAVACT = 'e-nav-active';
var CLS_TBARIGNORE = 'e-ignore';
var CLS_POPPRI = 'e-popup-alone';
var CLS_HIDDEN = 'e-hidden';
var CLS_MULTIROW = 'e-toolbar-multirow';
var CLS_MULTIROWPOS = 'e-multirow-pos';
var CLS_MULTIROW_SEPARATOR = 'e-multirow-separator';
var CLS_EXTENDABLE_SEPARATOR = 'e-extended-separator';
var CLS_EXTEANDABLE_TOOLBAR = 'e-extended-toolbar';
var CLS_EXTENDABLECLASS = 'e-toolbar-extended';
var CLS_EXTENDPOPUP = 'e-expended-nav';
var CLS_EXTENDEDPOPOPEN = 'e-tbar-extended';
/**
 * An item object that is used to configure Toolbar commands.
 */

var Item =
/** @class */
function (_super) {
  __extends(Item, _super);

  function Item() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "id", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "text", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Item.prototype, "width", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Item.prototype, "showAlwaysInPopup", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Item.prototype, "disabled", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "prefixIcon", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "suffixIcon", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Item.prototype, "visible", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('None')], Item.prototype, "overflow", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "template", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Button')], Item.prototype, "type", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Both')], Item.prototype, "showTextOn", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Item.prototype, "htmlAttributes", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "tooltipText", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Left')], Item.prototype, "align", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Item.prototype, "click", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(-1)], Item.prototype, "tabIndex", void 0);

  return Item;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * The Toolbar control contains a group of commands that are aligned horizontally.
 * ```html
 * <div id="toolbar"/>
 * <script>
 *   var toolbarObj = new Toolbar();
 *   toolbarObj.appendTo("#toolbar");
 * </script>
 * ```
 */

var Toolbar =
/** @class */
function (_super) {
  __extends(Toolbar, _super);
  /**
   * Initializes a new instance of the Toolbar class.
   *
   * @param {ToolbarModel} options  - Specifies Toolbar model properties as options.
   * @param { string | HTMLElement} element  - Specifies the element that is rendered as a Toolbar.
   */


  function Toolbar(options, element) {
    var _this = _super.call(this, options, element) || this;

    _this.resizeContext = _this.resize.bind(_this);
    _this.orientationChangeContext = _this.orientationChange.bind(_this);
    /**
     * Contains the keyboard configuration of the Toolbar.
     */

    _this.keyConfigs = {
      moveLeft: 'leftarrow',
      moveRight: 'rightarrow',
      moveUp: 'uparrow',
      moveDown: 'downarrow',
      popupOpen: 'enter',
      popupClose: 'escape',
      tab: 'tab',
      home: 'home',
      end: 'end'
    };
    return _this;
  }
  /**
   * Removes the control from the DOM and also removes all its related events.
   *
   * @returns {void}.
   */


  Toolbar.prototype.destroy = function () {
    var _this = this;

    if (this.isReact || this.isAngular) {
      this.clearTemplate();
    }

    var btnItems = this.element.querySelectorAll('.e-control.e-btn');
    [].slice.call(btnItems).forEach(function (el) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(el) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(el.ej2_instances) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(el.ej2_instances[0]) && !el.ej2_instances[0].isDestroyed) {
        el.ej2_instances[0].destroy();
      }
    });
    this.unwireEvents();
    this.tempId.forEach(function (ele) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this.element.querySelector(ele))) {
        document.body.appendChild(_this.element.querySelector(ele)).style.display = 'none';
      }
    });
    this.destroyItems();

    while (this.element.lastElementChild) {
      this.element.removeChild(this.element.lastElementChild);
    }

    if (this.trgtEle) {
      this.element.appendChild(this.ctrlTem);
      this.trgtEle = null;
      this.ctrlTem = null;
    }

    if (this.popObj) {
      this.popObj.destroy();
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.popObj.element);
    }

    if (this.activeEle) {
      this.activeEle = null;
    }

    this.popObj = null;
    this.tbarAlign = null;
    this.tbarItemsCol = [];
    this.remove(this.element, 'e-toolpop');

    if (this.cssClass) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], this.cssClass.split(' '));
    }

    this.element.removeAttribute('style');
    ['aria-disabled', 'aria-orientation', 'role'].forEach(function (attrb) {
      return _this.element.removeAttribute(attrb);
    });

    _super.prototype.destroy.call(this);
  };
  /**
   * Initialize the event handler
   *
   * @private
   * @returns {void}
   */


  Toolbar.prototype.preRender = function () {
    var eventArgs = {
      enableCollision: this.enableCollision,
      scrollStep: this.scrollStep
    };
    this.trigger('beforeCreate', eventArgs);
    this.enableCollision = eventArgs.enableCollision;
    this.scrollStep = eventArgs.scrollStep;
    this.scrollModule = null;
    this.popObj = null;
    this.tempId = [];
    this.tbarItemsCol = this.items;
    this.isVertical = this.element.classList.contains(CLS_VERTICAL) ? true : false;
    this.isExtendedOpen = false;
    this.popupPriCount = 0;

    if (this.enableRtl) {
      this.add(this.element, CLS_RTL);
    }
  };

  Toolbar.prototype.wireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'click', this.clickHandler, this);
    window.addEventListener('resize', this.resizeContext);
    window.addEventListener('orientationchange', this.orientationChangeContext);

    if (this.allowKeyboard) {
      this.wireKeyboardEvent();
    }
  };

  Toolbar.prototype.wireKeyboardEvent = function () {
    this.keyModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.element, {
      keyAction: this.keyActionHandler.bind(this),
      keyConfigs: this.keyConfigs
    });
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keydown', this.docKeyDown, this);
    this.updateTabIndex('0');
  };

  Toolbar.prototype.updateTabIndex = function (tabIndex) {
    var ele = this.element.querySelector('.' + CLS_ITEM + ':not(.' + CLS_DISABLE + ' ):not(.' + CLS_SEPARATOR + ' ):not(.' + CLS_HIDDEN + ' )');

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele.firstElementChild)) {
      var dataTabIndex = ele.firstElementChild.getAttribute('data-tabindex');

      if (dataTabIndex && dataTabIndex === '-1' && ele.firstElementChild.tagName !== 'INPUT') {
        ele.firstElementChild.setAttribute('tabindex', tabIndex);
      }
    }
  };

  Toolbar.prototype.unwireKeyboardEvent = function () {
    if (this.keyModule) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keydown', this.docKeyDown);
      this.keyModule.destroy();
      this.keyModule = null;
    }
  };

  Toolbar.prototype.docKeyDown = function (e) {
    if (e.target.tagName === 'INPUT') {
      return;
    }

    var popCheck = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.popObj) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(this.popObj.element) && this.overflowMode !== 'Extended';

    if (e.keyCode === 9 && e.target.classList.contains('e-hor-nav') === true && popCheck) {
      this.popObj.hide({
        name: 'FadeOut',
        duration: 100
      });
    }

    var keyCheck = e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 35 || e.keyCode === 36;

    if (keyCheck) {
      e.preventDefault();
    }
  };

  Toolbar.prototype.unwireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'click', this.clickHandler);
    this.destroyScroll();
    this.unwireKeyboardEvent();
    window.removeEventListener('resize', this.resizeContext);
    window.removeEventListener('orientationchange', this.orientationChangeContext);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'scroll', this.docEvent);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'click', this.docEvent);
  };

  Toolbar.prototype.clearProperty = function () {
    this.tbarEle = [];
    this.tbarAlgEle = {
      lefts: [],
      centers: [],
      rights: []
    };
  };

  Toolbar.prototype.docEvent = function (e) {
    var popEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.e-popup');

    if (this.popObj && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(this.popObj.element) && !popEle && this.overflowMode === 'Popup') {
      this.popObj.hide({
        name: 'FadeOut',
        duration: 100
      });
    }
  };

  Toolbar.prototype.destroyScroll = function () {
    if (this.scrollModule) {
      if (this.tbarAlign) {
        this.add(this.scrollModule.element, CLS_TBARPOS);
      }

      this.scrollModule.destroy();
      this.scrollModule = null;
    }
  };

  Toolbar.prototype.destroyItems = function () {
    if (this.element) {
      [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM)).forEach(function (el) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(el);
      });
    }

    if (this.tbarAlign) {
      var tbarItems = this.element.querySelector('.' + CLS_ITEMS);
      [].slice.call(tbarItems.children).forEach(function (el) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(el);
      });
      this.tbarAlign = false;
      this.remove(tbarItems, CLS_TBARPOS);
    }

    this.clearProperty();
  };

  Toolbar.prototype.destroyMode = function () {
    if (this.scrollModule) {
      this.remove(this.scrollModule.element, CLS_RTL);
      this.destroyScroll();
    }

    this.remove(this.element, CLS_EXTENDEDPOPOPEN);
    this.remove(this.element, CLS_EXTEANDABLE_TOOLBAR);
    var tempEle = this.element.querySelector('.e-toolbar-multirow');

    if (tempEle) {
      this.remove(tempEle, CLS_MULTIROW);
    }

    if (this.popObj) {
      this.popupRefresh(this.popObj.element, true);
    }
  };

  Toolbar.prototype.add = function (ele, val) {
    ele.classList.add(val);
  };

  Toolbar.prototype.remove = function (ele, val) {
    ele.classList.remove(val);
  };

  Toolbar.prototype.elementFocus = function (ele) {
    var fChild = ele.firstElementChild;

    if (fChild) {
      fChild.focus();
      this.activeEleSwitch(ele);
    } else {
      ele.focus();
    }
  };

  Toolbar.prototype.clstElement = function (tbrNavChk, trgt) {
    var clst;

    if (tbrNavChk && this.popObj && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(this.popObj.element)) {
      clst = this.popObj.element.querySelector('.' + CLS_ITEM);
    } else if (this.element === trgt || tbrNavChk) {
      clst = this.element.querySelector('.' + CLS_ITEM + ':not(.' + CLS_DISABLE + ' ):not(.' + CLS_SEPARATOR + ' ):not(.' + CLS_HIDDEN + ' )');
    } else {
      clst = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_ITEM);
    }

    return clst;
  };

  Toolbar.prototype.keyHandling = function (clst, e, trgt, navChk, scrollChk) {
    var popObj = this.popObj;
    var rootEle = this.element;
    var popAnimate = {
      name: 'FadeOut',
      duration: 100
    };
    var value = e.action === 'moveUp' ? 'previous' : 'next';
    var ele;
    var nodes;

    switch (e.action) {
      case 'moveRight':
        if (this.isVertical) {
          return;
        }

        if (rootEle === trgt) {
          this.elementFocus(clst);
        } else if (!navChk) {
          this.eleFocus(clst, 'next');
        }

        break;

      case 'moveLeft':
        if (this.isVertical) {
          return;
        }

        if (!navChk) {
          this.eleFocus(clst, 'previous');
        }

        break;

      case 'home':
      case 'end':
        if (clst) {
          var popupCheck = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(clst, '.e-popup');
          var extendedPopup = this.element.querySelector('.' + CLS_EXTENDABLECLASS);

          if (this.overflowMode === 'Extended' && extendedPopup && extendedPopup.classList.contains('e-popup-open')) {
            popupCheck = e.action === 'end' ? extendedPopup : null;
          }

          if (popupCheck) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(this.popObj.element)) {
              nodes = [].slice.call(popupCheck.children);

              if (e.action === 'home') {
                ele = this.focusFirstVisibleEle(nodes);
              } else {
                ele = this.focusLastVisibleEle(nodes);
              }
            }
          } else {
            nodes = this.element.querySelectorAll('.' + CLS_ITEMS + ' .' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + ')');

            if (e.action === 'home') {
              ele = this.focusFirstVisibleEle(nodes);
            } else {
              ele = this.focusLastVisibleEle(nodes);
            }
          }

          if (ele) {
            this.elementFocus(ele);
          }
        }

        break;

      case 'moveUp':
      case 'moveDown':
        if (!this.isVertical) {
          if (popObj && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.e-popup')) {
            var popEle = popObj.element;
            var popFrstEle = popEle.firstElementChild;

            if (value === 'previous' && popFrstEle === clst) {
              popEle.lastElementChild.firstChild.focus();
            } else if (value === 'next' && popEle.lastElementChild === clst) {
              popFrstEle.firstChild.focus();
            } else {
              this.eleFocus(clst, value);
            }
          } else if (e.action === 'moveDown' && popObj && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(popObj.element)) {
            this.elementFocus(clst);
          }
        } else {
          if (e.action === 'moveUp') {
            this.eleFocus(clst, 'previous');
          } else {
            this.eleFocus(clst, 'next');
          }
        }

        break;

      case 'tab':
        if (!scrollChk && !navChk) {
          var ele_1 = clst.firstElementChild;

          if (rootEle === trgt) {
            if (this.activeEle) {
              this.activeEle.focus();
            } else {
              this.activeEleRemove(ele_1);
              ele_1.focus();
            }
          }
        }

        break;

      case 'popupClose':
        if (popObj && this.overflowMode !== 'Extended') {
          popObj.hide(popAnimate);
        }

        break;

      case 'popupOpen':
        if (!navChk) {
          return;
        }

        if (popObj && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(popObj.element)) {
          popObj.element.style.top = rootEle.offsetHeight + 'px';
          popObj.show({
            name: 'FadeIn',
            duration: 100
          });
        } else {
          popObj.hide(popAnimate);
        }

        break;
    }
  };

  Toolbar.prototype.keyActionHandler = function (e) {
    var trgt = e.target;

    if (trgt.tagName === 'INPUT' || trgt.tagName === 'TEXTAREA' || this.element.classList.contains(CLS_DISABLE)) {
      return;
    }

    e.preventDefault();
    var tbrNavChk = trgt.classList.contains(CLS_TBARNAV);
    var tbarScrollChk = trgt.classList.contains(CLS_TBARSCRLNAV);
    var clst = this.clstElement(tbrNavChk, trgt);

    if (clst || tbarScrollChk) {
      this.keyHandling(clst, e, trgt, tbrNavChk, tbarScrollChk);
    }
  };
  /**
   * Specifies the value to disable/enable the Toolbar component.
   * When set to `true`, the component will be disabled.
   *
   * @param  {boolean} value - Based on this Boolean value, Toolbar will be enabled (false) or disabled (true).
   * @returns {void}.
   */


  Toolbar.prototype.disable = function (value) {
    var rootEle = this.element;

    if (value) {
      rootEle.classList.add(CLS_DISABLE);
    } else {
      rootEle.classList.remove(CLS_DISABLE);
    }

    if (this.activeEle) {
      this.activeEle.setAttribute('tabindex', this.activeEle.getAttribute('data-tabindex'));
    }

    if (this.scrollModule) {
      this.scrollModule.disable(value);
    }

    if (this.popObj) {
      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(this.popObj.element) && this.overflowMode !== 'Extended') {
        this.popObj.hide();
      }

      rootEle.querySelector('#' + rootEle.id + '_nav').setAttribute('tabindex', !value ? '0' : '-1');
    }
  };

  Toolbar.prototype.eleContains = function (el) {
    return el.classList.contains(CLS_SEPARATOR) || el.classList.contains(CLS_DISABLE) || el.getAttribute('disabled') || el.classList.contains(CLS_HIDDEN) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(el) || !el.classList.contains(CLS_ITEM);
  };

  Toolbar.prototype.focusFirstVisibleEle = function (nodes) {
    var element;
    var index = 0;

    while (index < nodes.length) {
      var ele = nodes[parseInt(index.toString(), 10)];

      if (!ele.classList.contains(CLS_HIDDEN) && !ele.classList.contains(CLS_DISABLE)) {
        return ele;
      }

      index++;
    }

    return element;
  };

  Toolbar.prototype.focusLastVisibleEle = function (nodes) {
    var element;
    var index = nodes.length - 1;

    while (index >= 0) {
      var ele = nodes[parseInt(index.toString(), 10)];

      if (!ele.classList.contains(CLS_HIDDEN) && !ele.classList.contains(CLS_DISABLE)) {
        return ele;
      }

      index--;
    }

    return element;
  };

  Toolbar.prototype.eleFocus = function (closest, pos) {
    var sib = Object(closest)[pos + 'ElementSibling'];

    if (sib) {
      var skipEle = this.eleContains(sib);

      if (skipEle) {
        this.eleFocus(sib, pos);
        return;
      }

      this.elementFocus(sib);
    } else if (this.tbarAlign) {
      var elem = Object(closest.parentElement)[pos + 'ElementSibling'];

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(elem) && elem.children.length === 0) {
        elem = Object(elem)[pos + 'ElementSibling'];
      }

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(elem) && elem.children.length > 0) {
        if (pos === 'next') {
          var el = elem.querySelector('.' + CLS_ITEM);

          if (this.eleContains(el)) {
            this.eleFocus(el, pos);
          } else {
            el.firstElementChild.focus();
            this.activeEleSwitch(el);
          }
        } else {
          var el = elem.lastElementChild;

          if (this.eleContains(el)) {
            this.eleFocus(el, pos);
          } else {
            this.elementFocus(el);
          }
        }
      }
    } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(closest)) {
      var tbrItems = this.element.querySelectorAll('.' + CLS_ITEMS + ' .' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + ')' + ':not(.' + CLS_DISABLE + ')' + ':not(.' + CLS_HIDDEN + ')');

      if (pos === 'next' && tbrItems) {
        this.elementFocus(tbrItems[0]);
      } else if (pos === 'previous' && tbrItems) {
        this.elementFocus(tbrItems[tbrItems.length - 1]);
      }
    }
  };

  Toolbar.prototype.clickHandler = function (e) {
    var _this = this;

    var trgt = e.target;
    var ele = this.element;
    var isPopupElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_POPUPCLASS));
    var clsList = trgt.classList;
    var popupNav = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_TBARNAV);

    if (!popupNav) {
      popupNav = trgt;
    }

    if (!ele.children[0].classList.contains('e-hscroll') && !ele.children[0].classList.contains('e-vscroll') && clsList.contains(CLS_TBARNAV)) {
      clsList = trgt.querySelector('.e-icons').classList;
    }

    if (clsList.contains(CLS_POPUPICON) || clsList.contains(CLS_POPUPDOWN)) {
      this.popupClickHandler(ele, popupNav, CLS_RTL);
    }

    var itemObj;
    var clst = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + CLS_ITEM);

    if ((Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(clst) || clst.classList.contains(CLS_DISABLE)) && !popupNav.classList.contains(CLS_TBARNAV)) {
      return;
    }

    if (clst) {
      var tempItem = this.items[this.tbarEle.indexOf(clst)];
      itemObj = tempItem;
    }

    var eventArgs = {
      originalEvent: e,
      item: itemObj
    };

    if (itemObj && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(itemObj.click)) {
      this.trigger('items[' + this.tbarEle.indexOf(clst) + '].click', eventArgs);
    }

    if (!eventArgs.cancel) {
      this.trigger('clicked', eventArgs, function (clickedArgs) {
        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this.popObj) && isPopupElement && !clickedArgs.cancel && _this.overflowMode === 'Popup' && clickedArgs.item && clickedArgs.item.type !== 'Input') {
          _this.popObj.hide({
            name: 'FadeOut',
            duration: 100
          });
        }
      });
    }
  };

  Toolbar.prototype.popupClickHandler = function (ele, popupNav, CLS_RTL) {
    var popObj = this.popObj;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(popObj.element)) {
      popupNav.classList.remove(CLS_TBARNAVACT);
      popObj.hide({
        name: 'FadeOut',
        duration: 100
      });
    } else {
      if (ele.classList.contains(CLS_RTL)) {
        popObj.enableRtl = true;
        popObj.position = {
          X: 'left',
          Y: 'top'
        };
      }

      if (popObj.offsetX === 0 && !ele.classList.contains(CLS_RTL)) {
        popObj.enableRtl = false;
        popObj.position = {
          X: 'right',
          Y: 'top'
        };
      }

      popObj.dataBind();
      popObj.refreshPosition();
      popObj.element.style.top = this.getElementOffsetY() + 'px';

      if (this.overflowMode === 'Extended') {
        popObj.element.style.minHeight = '0px';
      }

      popupNav.classList.add(CLS_TBARNAVACT);
      popObj.show({
        name: 'FadeIn',
        duration: 100
      });
    }
  };
  /**
   * To Initialize the control rendering
   *
   * @private
   * @returns {void}
   */


  Toolbar.prototype.render = function () {
    var _this = this;

    this.initialize();
    this.renderControl();
    this.wireEvents();
    this.renderComplete();

    if (this.isReact && this.portals && this.portals.length > 0) {
      this.renderReactTemplates(function () {
        _this.refreshOverflow();
      });
    }
  };

  Toolbar.prototype.initialize = function () {
    var width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.width);
    var height = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.height);

    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name !== 'msie' || this.height !== 'auto' || this.overflowMode === 'MultiRow') {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
        'height': height
      });
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
      'width': width
    });
    var ariaAttr = {
      'role': 'toolbar',
      'aria-disabled': 'false',
      'aria-orientation': !this.isVertical ? 'horizontal' : 'vertical'
    };
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, ariaAttr);

    if (this.cssClass) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], this.cssClass.split(' '));
    }
  };

  Toolbar.prototype.renderControl = function () {
    var ele = this.element;
    this.trgtEle = ele.children.length > 0 ? ele.querySelector('div') : null;
    this.tbarAlgEle = {
      lefts: [],
      centers: [],
      rights: []
    };
    this.renderItems();
    this.renderLayout();
  };

  Toolbar.prototype.renderLayout = function () {
    this.renderOverflowMode();

    if (this.tbarAlign) {
      this.itemPositioning();
    }

    if (this.popObj && this.popObj.element.childElementCount > 1 && this.checkPopupRefresh(this.element, this.popObj.element)) {
      this.popupRefresh(this.popObj.element, false);
    }

    this.separator();
  };

  Toolbar.prototype.itemsAlign = function (items, itemEleDom) {
    var innerItem;
    var innerPos;

    if (!this.tbarEle) {
      this.tbarEle = [];
    }

    for (var i = 0; i < items.length; i++) {
      innerItem = this.renderSubComponent(items[parseInt(i.toString(), 10)], i);

      if (this.tbarEle.indexOf(innerItem) === -1) {
        this.tbarEle.push(innerItem);
      }

      if (!this.tbarAlign) {
        this.tbarItemAlign(items[parseInt(i.toString(), 10)], itemEleDom, i);
      }

      innerPos = itemEleDom.querySelector('.e-toolbar-' + items[parseInt(i.toString(), 10)].align.toLowerCase());

      if (innerPos) {
        if (!(items[parseInt(i.toString(), 10)].showAlwaysInPopup && items[parseInt(i.toString(), 10)].overflow !== 'Show')) {
          this.tbarAlgEle[(items[parseInt(i.toString(), 10)].align + 's').toLowerCase()].push(innerItem);
        }

        innerPos.appendChild(innerItem);
      } else {
        itemEleDom.appendChild(innerItem);
      }
    }

    if (this.isReact) {
      var portals = 'portals';
      this.notify('render-react-toolbar-template', this["" + portals]);
      this.renderReactTemplates();
    }
  };
  /**
   * @hidden
   * @returns {void}
   */


  Toolbar.prototype.changeOrientation = function () {
    var ele = this.element;

    if (this.isVertical) {
      ele.classList.remove(CLS_VERTICAL);
      this.isVertical = false;

      if (this.height === 'auto' || this.height === '100%') {
        ele.style.height = this.height;
      }

      ele.setAttribute('aria-orientation', 'horizontal');
    } else {
      ele.classList.add(CLS_VERTICAL);
      this.isVertical = true;
      ele.setAttribute('aria-orientation', 'vertical');
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
        'height': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.height),
        'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.width)
      });
    }

    this.destroyMode();
    this.refreshOverflow();
  };

  Toolbar.prototype.initScroll = function (element, innerItems) {
    if (!this.scrollModule && this.checkOverflow(element, innerItems[0])) {
      if (this.tbarAlign) {
        this.element.querySelector('.' + CLS_ITEMS + ' .' + CLS_TBARCENTER).removeAttribute('style');
      }

      if (this.isVertical) {
        this.scrollModule = new _common_v_scroll__WEBPACK_IMPORTED_MODULE_4__["VScroll"]({
          scrollStep: this.scrollStep,
          enableRtl: this.enableRtl
        }, innerItems[0]);
      } else {
        this.scrollModule = new _common_h_scroll__WEBPACK_IMPORTED_MODULE_3__["HScroll"]({
          scrollStep: this.scrollStep,
          enableRtl: this.enableRtl
        }, innerItems[0]);
      }

      if (this.cssClass) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([innerItems[0]], this.cssClass.split(' '));
      }

      this.remove(this.scrollModule.element, CLS_TBARPOS);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
        overflow: 'hidden'
      });
    }
  };

  Toolbar.prototype.itemWidthCal = function (items) {
    var _this = this;

    var width = 0;
    var style;
    [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM, items)).forEach(function (el) {
      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(el)) {
        style = window.getComputedStyle(el);
        width += _this.isVertical ? el.offsetHeight : el.offsetWidth;
        width += parseFloat(_this.isVertical ? style.marginTop : style.marginRight);
        width += parseFloat(_this.isVertical ? style.marginBottom : style.marginLeft);
      }
    });
    return width;
  };

  Toolbar.prototype.getScrollCntEle = function (innerItem) {
    var trgClass = this.isVertical ? '.e-vscroll-content' : '.e-hscroll-content';
    return innerItem.querySelector(trgClass);
  };

  Toolbar.prototype.checkOverflow = function (element, innerItem) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(innerItem) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(element)) {
      return false;
    }

    var eleWidth = this.isVertical ? element.offsetHeight : element.offsetWidth;
    var itemWidth = this.isVertical ? innerItem.offsetHeight : innerItem.offsetWidth;

    if (this.tbarAlign || this.scrollModule || eleWidth === itemWidth) {
      itemWidth = this.itemWidthCal(this.scrollModule ? this.getScrollCntEle(innerItem) : innerItem);
    }

    var popNav = element.querySelector('.' + CLS_TBARNAV);
    var scrollNav = element.querySelector('.' + CLS_TBARSCRLNAV);
    var navEleWidth = 0;

    if (popNav) {
      navEleWidth = this.isVertical ? popNav.offsetHeight : popNav.offsetWidth;
    } else if (scrollNav) {
      navEleWidth = this.isVertical ? scrollNav.offsetHeight * 2 : scrollNav.offsetWidth * 2;
    }

    if (itemWidth > eleWidth - navEleWidth) {
      return true;
    } else {
      return false;
    }
  };
  /**
   * Refresh the whole Toolbar component without re-rendering.
   * - It is used to manually refresh the Toolbar overflow modes such as scrollable, popup, multi row, and extended.
   * - It will refresh the Toolbar component after loading items dynamically.
   *
   * @returns {void}.
   */


  Toolbar.prototype.refreshOverflow = function () {
    this.resize();
  };

  Toolbar.prototype.toolbarAlign = function (innerItems) {
    if (this.tbarAlign) {
      this.add(innerItems, CLS_TBARPOS);
      this.itemPositioning();
    }
  };

  Toolbar.prototype.renderOverflowMode = function () {
    var ele = this.element;
    var innerItems = ele.querySelector('.' + CLS_ITEMS);
    var priorityCheck = this.popupPriCount > 0;

    if (ele && ele.children.length > 0) {
      this.offsetWid = ele.offsetWidth;
      this.remove(this.element, 'e-toolpop');

      if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'msie' && this.height === 'auto') {
        ele.style.height = '';
      }

      switch (this.overflowMode) {
        case 'Scrollable':
          if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.scrollModule)) {
            this.initScroll(ele, [].slice.call(ele.getElementsByClassName(CLS_ITEMS)));
          }

          break;

        case 'Popup':
          this.add(this.element, 'e-toolpop');

          if (this.tbarAlign) {
            this.removePositioning();
          }

          if (this.checkOverflow(ele, innerItems) || priorityCheck) {
            this.setOverflowAttributes(ele);
          }

          this.toolbarAlign(innerItems);
          break;

        case 'MultiRow':
          this.add(innerItems, CLS_MULTIROW);

          if (this.checkOverflow(ele, innerItems) && this.tbarAlign) {
            this.removePositioning();
            this.add(innerItems, CLS_MULTIROWPOS);
          }

          if (ele.style.overflow === 'hidden') {
            ele.style.overflow = '';
          }

          if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'msie' || ele.style.height !== 'auto') {
            ele.style.height = 'auto';
          }

          break;

        case 'Extended':
          this.add(this.element, CLS_EXTEANDABLE_TOOLBAR);

          if (this.checkOverflow(ele, innerItems) || priorityCheck) {
            if (this.tbarAlign) {
              this.removePositioning();
            }

            this.setOverflowAttributes(ele);
          }

          this.toolbarAlign(innerItems);
      }
    }
  };

  Toolbar.prototype.setOverflowAttributes = function (ele) {
    this.createPopupEle(ele, [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEMS + ' .' + CLS_ITEM, ele)));
    var ariaAttr = {
      'tabindex': '0',
      'role': 'button',
      'aria-haspopup': 'true',
      'aria-label': 'overflow'
    };
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element.querySelector('.' + CLS_TBARNAV), ariaAttr);
  };

  Toolbar.prototype.separator = function () {
    var element = this.element;
    var eleItem = [].slice.call(element.querySelectorAll('.' + CLS_SEPARATOR));
    var multiVar = element.querySelector('.' + CLS_MULTIROW_SEPARATOR);
    var extendVar = element.querySelector('.' + CLS_EXTENDABLE_SEPARATOR);
    var eleInlineItem = this.overflowMode === 'MultiRow' ? multiVar : extendVar;

    if (eleInlineItem !== null) {
      if (this.overflowMode === 'MultiRow') {
        eleInlineItem.classList.remove(CLS_MULTIROW_SEPARATOR);
      } else if (this.overflowMode === 'Extended') {
        eleInlineItem.classList.remove(CLS_EXTENDABLE_SEPARATOR);
      }
    }

    for (var i = 0; i <= eleItem.length - 1; i++) {
      if (eleItem[parseInt(i.toString(), 10)].offsetLeft < 30 && eleItem[parseInt(i.toString(), 10)].offsetLeft !== 0) {
        if (this.overflowMode === 'MultiRow') {
          eleItem[parseInt(i.toString(), 10)].classList.add(CLS_MULTIROW_SEPARATOR);
        } else if (this.overflowMode === 'Extended') {
          eleItem[parseInt(i.toString(), 10)].classList.add(CLS_EXTENDABLE_SEPARATOR);
        }
      }
    }
  };

  Toolbar.prototype.createPopupEle = function (ele, innerEle) {
    var innerNav = ele.querySelector('.' + CLS_TBARNAV);
    var vertical = this.isVertical;

    if (!innerNav) {
      this.createPopupIcon(ele);
    }

    innerNav = ele.querySelector('.' + CLS_TBARNAV);
    var innerNavDom = vertical ? innerNav.offsetHeight : innerNav.offsetWidth;
    var eleWidth = (vertical ? ele.offsetHeight : ele.offsetWidth) - innerNavDom;
    this.element.classList.remove('e-rtl');
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
      direction: 'initial'
    });
    this.checkPriority(ele, innerEle, eleWidth, true);

    if (this.enableRtl) {
      this.element.classList.add('e-rtl');
    }

    this.element.style.removeProperty('direction');
    this.createPopup();
  };

  Toolbar.prototype.pushingPoppedEle = function (tbarObj, popupPri, ele, eleHeight, sepHeight) {
    var element = tbarObj.element;
    var poppedEle = [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_POPUP, element.querySelector('.' + CLS_ITEMS)));
    var nodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TBAROVERFLOW, ele);
    var nodeIndex = 0;
    var nodePri = 0;
    poppedEle.forEach(function (el, index) {
      nodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TBAROVERFLOW, ele);

      if (el.classList.contains(CLS_TBAROVERFLOW) && nodes.length > 0) {
        if (tbarObj.tbResize && nodes.length > index) {
          ele.insertBefore(el, nodes[parseInt(index.toString(), 10)]);
          ++nodePri;
        } else {
          ele.insertBefore(el, ele.children[nodes.length]);
          ++nodePri;
        }
      } else if (el.classList.contains(CLS_TBAROVERFLOW)) {
        ele.insertBefore(el, ele.firstChild);
        ++nodePri;
      } else if (tbarObj.tbResize && el.classList.contains(CLS_POPOVERFLOW) && ele.children.length > 0 && nodes.length === 0) {
        ele.insertBefore(el, ele.firstChild);
        ++nodePri;
      } else if (el.classList.contains(CLS_POPOVERFLOW)) {
        popupPri.push(el);
      } else if (tbarObj.tbResize) {
        ele.insertBefore(el, ele.childNodes[nodeIndex + nodePri]);
        ++nodeIndex;
      } else {
        ele.appendChild(el);
      }

      if (el.classList.contains(CLS_SEPARATOR)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(el, {
          display: '',
          height: sepHeight + 'px'
        });
      } else {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(el, {
          display: '',
          height: eleHeight + 'px'
        });
      }
    });
    popupPri.forEach(function (el) {
      ele.appendChild(el);
    });
    var tbarEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM, element.querySelector('.' + CLS_ITEMS));

    for (var i = tbarEle.length - 1; i >= 0; i--) {
      var tbarElement = tbarEle[parseInt(i.toString(), 10)];

      if (tbarElement.classList.contains(CLS_SEPARATOR) && this.overflowMode !== 'Extended') {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(tbarElement, {
          display: 'none'
        });
      } else {
        break;
      }
    }
  };

  Toolbar.prototype.createPopup = function () {
    var element = this.element;
    var sepHeight;
    var sepItem;

    if (this.overflowMode === 'Extended') {
      sepItem = element.querySelector('.' + CLS_SEPARATOR);
      sepHeight = element.style.height === 'auto' || element.style.height === '' ? null : sepItem && sepItem.offsetHeight;
    }

    var eleItem = element.querySelector('.' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + '):not(.' + CLS_POPUP + ')');
    var eleHeight = element.style.height === 'auto' || element.style.height === '' ? null : eleItem && eleItem.offsetHeight;
    var ele;
    var popupPri = [];

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + element.id + '_popup.' + CLS_POPUPCLASS, element)) {
      ele = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + element.id + '_popup.' + CLS_POPUPCLASS, element);
    } else {
      var extendEle = this.createElement('div', {
        id: element.id + '_popup',
        className: CLS_POPUPCLASS + ' ' + CLS_EXTENDABLECLASS
      });
      var popupEle = this.createElement('div', {
        id: element.id + '_popup',
        className: CLS_POPUPCLASS
      });
      ele = this.overflowMode === 'Extended' ? extendEle : popupEle;
    }

    this.pushingPoppedEle(this, popupPri, ele, eleHeight, sepHeight);
    this.popupInit(element, ele);
  };

  Toolbar.prototype.getElementOffsetY = function () {
    return this.overflowMode === 'Extended' && window.getComputedStyle(this.element).getPropertyValue('box-sizing') === 'border-box' ? this.element.clientHeight : this.element.offsetHeight;
  };

  Toolbar.prototype.popupInit = function (element, ele) {
    if (!this.popObj) {
      element.appendChild(ele);

      if (this.cssClass) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([ele], this.cssClass.split(' '));
      }

      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
        overflow: ''
      });
      var eleStyles = window.getComputedStyle(this.element);
      var popup = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["Popup"](null, {
        relateTo: this.element,
        offsetY: this.isVertical ? 0 : this.getElementOffsetY(),
        enableRtl: this.enableRtl,
        open: this.popupOpen.bind(this),
        close: this.popupClose.bind(this),
        collision: {
          Y: this.enableCollision ? 'flip' : 'none'
        },
        position: this.enableRtl ? {
          X: 'left',
          Y: 'top'
        } : {
          X: 'right',
          Y: 'top'
        }
      });

      if (this.overflowMode === 'Extended') {
        popup.width = parseFloat(eleStyles.width) + parseFloat(eleStyles.borderRightWidth) * 2;
        popup.offsetX = 0;
      }

      popup.appendTo(ele);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'scroll', this.docEvent.bind(this));
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'click ', this.docEvent.bind(this));
      popup.element.style.maxHeight = popup.element.offsetHeight + 'px';

      if (this.isVertical) {
        popup.element.style.visibility = 'hidden';
      }

      if (this.isExtendedOpen) {
        var popupNav = this.element.querySelector('.' + CLS_TBARNAV);
        popupNav.classList.add(CLS_TBARNAVACT);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(popupNav.firstElementChild, [CLS_POPUPICON], [CLS_POPUPDOWN]);
        this.element.querySelector('.' + CLS_EXTENDABLECLASS).classList.add(CLS_POPUPOPEN);
      } else {
        popup.hide();
      }

      this.popObj = popup;
    } else {
      var popupEle = this.popObj.element;
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(popupEle, {
        maxHeight: '',
        display: 'block'
      });
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(popupEle, {
        maxHeight: popupEle.offsetHeight + 'px',
        display: ''
      });
    }
  };

  Toolbar.prototype.tbarPopupHandler = function (isOpen) {
    if (this.overflowMode === 'Extended') {
      if (isOpen) {
        this.add(this.element, CLS_EXTENDEDPOPOPEN);
      } else {
        this.remove(this.element, CLS_EXTENDEDPOPOPEN);
      }
    }
  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars


  Toolbar.prototype.popupOpen = function (e) {
    var popObj = this.popObj;

    if (!this.isVertical) {
      popObj.offsetY = this.getElementOffsetY();
      popObj.dataBind();
    }

    var popupEle = this.popObj.element;
    var toolEle = this.popObj.element.parentElement;
    var popupNav = toolEle.querySelector('.' + CLS_TBARNAV);
    popupNav.setAttribute('aria-expanded', 'true');
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(popObj.element, {
      height: 'auto',
      maxHeight: ''
    });
    popObj.element.style.maxHeight = popObj.element.offsetHeight + 'px';

    if (this.overflowMode === 'Extended') {
      popObj.element.style.minHeight = '';
    }

    var popupElePos = popupEle.offsetTop + popupEle.offsetHeight + Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["calculatePosition"])(toolEle).top;
    var popIcon = popupNav.firstElementChild;
    popupNav.classList.add(CLS_TBARNAVACT);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(popIcon, [CLS_POPUPICON], [CLS_POPUPDOWN]);
    this.tbarPopupHandler(true);
    var scrollVal = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(window.scrollY) ? 0 : window.scrollY;

    if (!this.isVertical && window.innerHeight + scrollVal < popupElePos && this.element.offsetTop < popupEle.offsetHeight) {
      var overflowHeight = popupEle.offsetHeight - (popupElePos - window.innerHeight - scrollVal + 5);
      popObj.height = overflowHeight + 'px';

      for (var i = 0; i <= popupEle.childElementCount; i++) {
        var ele = popupEle.children[parseInt(i.toString(), 10)];

        if (ele.offsetTop + ele.offsetHeight > overflowHeight) {
          overflowHeight = ele.offsetTop;
          break;
        }
      }

      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(popObj.element, {
        maxHeight: overflowHeight + 'px'
      });
    } else if (this.isVertical) {
      var tbEleData = this.element.getBoundingClientRect();
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(popObj.element, {
        maxHeight: tbEleData.top + this.element.offsetHeight + 'px',
        bottom: 0,
        visibility: ''
      });
    }

    if (popObj) {
      var popupOffset = popupEle.getBoundingClientRect();

      if (popupOffset.right > document.documentElement.clientWidth && popupOffset.width > toolEle.getBoundingClientRect().width) {
        popObj.collision = {
          Y: 'none'
        };
        popObj.dataBind();
      }

      popObj.refreshPosition();
    }
  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars


  Toolbar.prototype.popupClose = function (e) {
    var element = this.element;
    var popupNav = element.querySelector('.' + CLS_TBARNAV);
    popupNav.setAttribute('aria-expanded', 'false');
    var popIcon = popupNav.firstElementChild;
    popupNav.classList.remove(CLS_TBARNAVACT);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(popIcon, [CLS_POPUPDOWN], [CLS_POPUPICON]);
    this.tbarPopupHandler(false);
  };

  Toolbar.prototype.checkPriority = function (ele, inEle, eleWidth, pre) {
    var popPriority = this.popupPriCount > 0;
    var len = inEle.length;
    var eleWid = eleWidth;
    var eleOffset;
    var checkoffset;
    var sepCheck = 0;
    var itemCount = 0;
    var itemPopCount = 0;

    var checkClass = function (ele, val) {
      var rVal = false;
      val.forEach(function (cls) {
        if (ele.classList.contains(cls)) {
          rVal = true;
        }
      });
      return rVal;
    };

    for (var i = len - 1; i >= 0; i--) {
      var mrgn = void 0;
      var compuStyle = window.getComputedStyle(inEle[parseInt(i.toString(), 10)]);

      if (this.isVertical) {
        mrgn = parseFloat(compuStyle.marginTop);
        mrgn += parseFloat(compuStyle.marginBottom);
      } else {
        mrgn = parseFloat(compuStyle.marginRight);
        mrgn += parseFloat(compuStyle.marginLeft);
      }

      var fstEleCheck = inEle[parseInt(i.toString(), 10)] === this.tbarEle[0];

      if (fstEleCheck) {
        this.tbarEleMrgn = mrgn;
      }

      eleOffset = this.isVertical ? inEle[parseInt(i.toString(), 10)].offsetHeight : inEle[parseInt(i.toString(), 10)].offsetWidth;
      var eleWid_1 = fstEleCheck ? eleOffset + mrgn : eleOffset;

      if (checkClass(inEle[parseInt(i.toString(), 10)], [CLS_POPPRI]) && popPriority) {
        inEle[parseInt(i.toString(), 10)].classList.add(CLS_POPUP);

        if (this.isVertical) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(inEle[parseInt(i.toString(), 10)], {
            display: 'none',
            minHeight: eleWid_1 + 'px'
          });
        } else {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(inEle[parseInt(i.toString(), 10)], {
            display: 'none',
            minWidth: eleWid_1 + 'px'
          });
        }

        itemPopCount++;
      }

      if (this.isVertical) {
        checkoffset = inEle[parseInt(i.toString(), 10)].offsetTop + inEle[parseInt(i.toString(), 10)].offsetHeight + mrgn > eleWidth;
      } else {
        checkoffset = inEle[parseInt(i.toString(), 10)].offsetLeft + inEle[parseInt(i.toString(), 10)].offsetWidth + mrgn > eleWidth;
      }

      if (checkoffset) {
        if (inEle[parseInt(i.toString(), 10)].classList.contains(CLS_SEPARATOR)) {
          if (this.overflowMode === 'Extended') {
            var sepEle = inEle[parseInt(i.toString(), 10)];

            if (checkClass(sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {
              inEle[parseInt(i.toString(), 10)].classList.add(CLS_POPUP);
              itemPopCount++;
            }

            itemCount++;
          } else if (this.overflowMode === 'Popup') {
            if (sepCheck > 0 && itemCount === itemPopCount) {
              var sepEle = inEle[i + itemCount + (sepCheck - 1)];

              if (checkClass(sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(sepEle, {
                  display: 'none'
                });
              }
            }

            sepCheck++;
            itemCount = 0;
            itemPopCount = 0;
          }
        } else {
          itemCount++;
        }

        if (inEle[parseInt(i.toString(), 10)].classList.contains(CLS_TBAROVERFLOW) && pre) {
          eleWidth -= (this.isVertical ? inEle[parseInt(i.toString(), 10)].offsetHeight : inEle[parseInt(i.toString(), 10)].offsetWidth) + mrgn;
        } else if (!checkClass(inEle[parseInt(i.toString(), 10)], [CLS_SEPARATOR, CLS_TBARIGNORE])) {
          inEle[parseInt(i.toString(), 10)].classList.add(CLS_POPUP);

          if (this.isVertical) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(inEle[parseInt(i.toString(), 10)], {
              display: 'none',
              minHeight: eleWid_1 + 'px'
            });
          } else {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(inEle[parseInt(i.toString(), 10)], {
              display: 'none',
              minWidth: eleWid_1 + 'px'
            });
          }

          itemPopCount++;
        } else {
          eleWidth -= (this.isVertical ? inEle[parseInt(i.toString(), 10)].offsetHeight : inEle[parseInt(i.toString(), 10)].offsetWidth) + mrgn;
        }
      }
    }

    if (pre) {
      var popedEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM + ':not(.' + CLS_POPUP + ')', this.element);
      this.checkPriority(ele, popedEle, eleWid, false);
    }
  };

  Toolbar.prototype.createPopupIcon = function (element) {
    var id = element.id.concat('_nav');
    var className = 'e-' + element.id.concat('_nav ' + CLS_POPUPNAV);
    className = this.overflowMode === 'Extended' ? className + ' ' + CLS_EXTENDPOPUP : className;
    var nav = this.createElement('div', {
      id: id,
      className: className
    });

    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'msie' || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'edge') {
      nav.classList.add('e-ie-align');
    }

    var navItem = this.createElement('div', {
      className: CLS_POPUPDOWN + ' e-icons'
    });
    nav.appendChild(navItem);
    nav.setAttribute('tabindex', '0');
    nav.setAttribute('role', 'button');
    element.appendChild(nav);
  };

  Toolbar.prototype.tbarPriRef = function (inEle, indx, sepPri, el, des, elWid, wid, ig, eleStyles) {
    var ignoreCount = ig;
    var popEle = this.popObj.element;
    var query = '.' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + '):not(.' + CLS_TBAROVERFLOW + ')';
    var priEleCnt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_POPUP + ':not(.' + CLS_TBAROVERFLOW + ')', popEle).length;

    var checkClass = function (ele, val) {
      return ele.classList.contains(val);
    };

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])(query, inEle).length === 0) {
      var eleSep = inEle.children[indx - (indx - sepPri) - 1];
      var ignoreCheck = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(eleSep) && checkClass(eleSep, CLS_TBARIGNORE);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(eleSep) && checkClass(eleSep, CLS_SEPARATOR) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(eleSep) || ignoreCheck) {
        eleSep.style.display = 'unset';
        var eleSepWidth = eleSep.offsetWidth + parseFloat(window.getComputedStyle(eleSep).marginRight) * 2;
        var prevSep = eleSep.previousElementSibling;

        if (elWid + eleSepWidth < wid || des) {
          inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(prevSep)) {
            prevSep.style.display = '';
          }
        } else {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(el, eleStyles);

          if (prevSep.classList.contains(CLS_SEPARATOR)) {
            prevSep.style.display = 'none';
          }
        }

        eleSep.style.display = '';
      } else {
        inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);
      }
    } else {
      inEle.insertBefore(el, inEle.children[indx + ignoreCount - priEleCnt]);
    }
  };

  Toolbar.prototype.popupRefresh = function (popupEle, destroy) {
    var _this = this;

    var ele = this.element;
    var isVer = this.isVertical;
    var innerEle = ele.querySelector('.' + CLS_ITEMS);
    var popNav = ele.querySelector('.' + CLS_TBARNAV);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(popNav)) {
      return;
    }

    innerEle.removeAttribute('style');
    popupEle.style.display = 'block';
    var dimension;

    if (isVer) {
      dimension = ele.offsetHeight - (popNav.offsetHeight + innerEle.offsetHeight);
    } else {
      dimension = ele.offsetWidth - (popNav.offsetWidth + innerEle.offsetWidth);
    }

    var popupEleWidth = 0;
    [].slice.call(popupEle.children).forEach(function (el) {
      popupEleWidth += _this.popupEleWidth(el);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(el, {
        'position': ''
      });
    });

    if (dimension + (isVer ? popNav.offsetHeight : popNav.offsetWidth) > popupEleWidth && this.popupPriCount === 0) {
      destroy = true;
    }

    this.popupEleRefresh(dimension, popupEle, destroy);
    popupEle.style.display = '';

    if (popupEle.children.length === 0 && popNav && this.popObj) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(popNav);
      popNav = null;
      this.popObj.destroy();
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.popObj.element);
      this.popObj = null;
    }
  };

  Toolbar.prototype.ignoreEleFetch = function (index, innerEle) {
    var ignoreEle = [].slice.call(innerEle.querySelectorAll('.' + CLS_TBARIGNORE));
    var ignoreInx = [];
    var count = 0;

    if (ignoreEle.length > 0) {
      ignoreEle.forEach(function (ele) {
        ignoreInx.push([].slice.call(innerEle.children).indexOf(ele));
      });
    } else {
      return 0;
    }

    ignoreInx.forEach(function (val) {
      if (val <= index) {
        count++;
      }
    });
    return count;
  };

  Toolbar.prototype.checkPopupRefresh = function (root, popEle) {
    popEle.style.display = 'block';
    var elWid = this.popupEleWidth(popEle.firstElementChild);
    popEle.firstElementChild.style.removeProperty('Position');
    var tbarWidth = root.offsetWidth - root.querySelector('.' + CLS_TBARNAV).offsetWidth;
    var tbarItemsWid = root.querySelector('.' + CLS_ITEMS).offsetWidth;
    popEle.style.removeProperty('display');

    if (tbarWidth > elWid + tbarItemsWid) {
      return true;
    }

    return false;
  };

  Toolbar.prototype.popupEleWidth = function (el) {
    el.style.position = 'absolute';
    var elWidth = this.isVertical ? el.offsetHeight : el.offsetWidth;
    var btnText = el.querySelector('.' + CLS_TBARBTNTEXT);

    if (el.classList.contains('e-tbtn-align') || el.classList.contains(CLS_TBARTEXT)) {
      var btn = el.children[0];

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(btnText) && el.classList.contains(CLS_TBARTEXT)) {
        btnText.style.display = 'none';
      } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(btnText) && el.classList.contains(CLS_POPUPTEXT)) {
        btnText.style.display = 'block';
      }

      btn.style.minWidth = '0%';
      elWidth = parseFloat(!this.isVertical ? el.style.minWidth : el.style.minHeight);
      btn.style.minWidth = '';
      btn.style.minHeight = '';

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(btnText)) {
        btnText.style.display = '';
      }
    }

    return elWidth;
  };

  Toolbar.prototype.popupEleRefresh = function (width, popupEle, destroy) {
    var popPriority = this.popupPriCount > 0;
    var eleSplice = this.tbarEle;
    var priEleCnt;
    var index;
    var innerEle = this.element.querySelector('.' + CLS_ITEMS);
    var ignoreCount = 0;

    var _loop_1 = function (el) {
      if (el.classList.contains(CLS_POPPRI) && popPriority && !destroy) {
        return "continue";
      }

      var elWidth = this_1.popupEleWidth(el);

      if (el === this_1.tbarEle[0]) {
        elWidth += this_1.tbarEleMrgn;
      }

      el.style.position = '';

      if (elWidth < width || destroy) {
        var inlineStyles = {
          minWidth: el.style.minWidth,
          height: el.style.height,
          minHeight: el.style.minHeight
        };
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(el, {
          minWidth: '',
          height: '',
          minHeight: ''
        });

        if (!el.classList.contains(CLS_POPOVERFLOW)) {
          el.classList.remove(CLS_POPUP);
        }

        index = this_1.tbarEle.indexOf(el);

        if (this_1.tbarAlign) {
          var pos = this_1.items[parseInt(index.toString(), 10)].align;
          index = this_1.tbarAlgEle[(pos + 's').toLowerCase()].indexOf(el);
          eleSplice = this_1.tbarAlgEle[(pos + 's').toLowerCase()];
          innerEle = this_1.element.querySelector('.' + CLS_ITEMS + ' .' + 'e-toolbar-' + pos.toLowerCase());
        }

        var sepBeforePri_1 = 0;

        if (this_1.overflowMode !== 'Extended') {
          eleSplice.slice(0, index).forEach(function (el) {
            if (el.classList.contains(CLS_TBAROVERFLOW) || el.classList.contains(CLS_SEPARATOR)) {
              if (el.classList.contains(CLS_SEPARATOR)) {
                el.style.display = '';
                width -= el.offsetWidth;
              }

              sepBeforePri_1++;
            }
          });
        }

        ignoreCount = this_1.ignoreEleFetch(index, innerEle);

        if (el.classList.contains(CLS_TBAROVERFLOW)) {
          this_1.tbarPriRef(innerEle, index, sepBeforePri_1, el, destroy, elWidth, width, ignoreCount, inlineStyles);
          width -= el.offsetWidth;
        } else if (index === 0) {
          innerEle.insertBefore(el, innerEle.firstChild);
          width -= el.offsetWidth;
        } else {
          priEleCnt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TBAROVERFLOW, this_1.popObj.element).length;
          innerEle.insertBefore(el, innerEle.children[index + ignoreCount - priEleCnt]);
          width -= el.offsetWidth;
        }

        el.style.height = '';
      } else {
        return "break";
      }
    };

    var this_1 = this;

    for (var _i = 0, _a = [].slice.call(popupEle.children); _i < _a.length; _i++) {
      var el = _a[_i];

      var state_1 = _loop_1(el);

      if (state_1 === "break") break;
    }

    var checkOverflow = this.checkOverflow(this.element, this.element.getElementsByClassName(CLS_ITEMS)[0]);

    if (checkOverflow && !destroy) {
      this.renderOverflowMode();
    }
  };

  Toolbar.prototype.removePositioning = function () {
    var item = this.element.querySelector('.' + CLS_ITEMS);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item) || !item.classList.contains(CLS_TBARPOS)) {
      return;
    }

    this.remove(item, CLS_TBARPOS);
    var innerItem = [].slice.call(item.childNodes);
    innerItem[1].removeAttribute('style');
    innerItem[2].removeAttribute('style');
  };

  Toolbar.prototype.refreshPositioning = function () {
    var item = this.element.querySelector('.' + CLS_ITEMS);
    this.add(item, CLS_TBARPOS);
    this.itemPositioning();
  };

  Toolbar.prototype.itemPositioning = function () {
    var item = this.element.querySelector('.' + CLS_ITEMS);
    var margin;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item) || !item.classList.contains(CLS_TBARPOS)) {
      return;
    }

    var popupNav = this.element.querySelector('.' + CLS_TBARNAV);
    var innerItem;

    if (this.scrollModule) {
      var trgClass = this.isVertical ? CLS_VSCROLLCNT : CLS_HSCROLLCNT;
      innerItem = [].slice.call(item.querySelector('.' + trgClass).children);
    } else {
      innerItem = [].slice.call(item.childNodes);
    }

    if (this.isVertical) {
      margin = innerItem[0].offsetHeight + innerItem[2].offsetHeight;
    } else {
      margin = innerItem[0].offsetWidth + innerItem[2].offsetWidth;
    }

    var tbarWid = this.isVertical ? this.element.offsetHeight : this.element.offsetWidth;

    if (popupNav) {
      tbarWid -= this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth;
      var popWid = (this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth) + 'px';
      innerItem[2].removeAttribute('style');

      if (this.isVertical) {
        if (this.enableRtl) {
          innerItem[2].style.top = popWid;
        } else {
          innerItem[2].style.bottom = popWid;
        }
      } else {
        if (this.enableRtl) {
          innerItem[2].style.left = popWid;
        } else {
          innerItem[2].style.right = popWid;
        }
      }
    }

    if (tbarWid <= margin) {
      return;
    }

    var value = (tbarWid - margin - (!this.isVertical ? innerItem[1].offsetWidth : innerItem[1].offsetHeight)) / 2;
    innerItem[1].removeAttribute('style');
    var mrgn = (!this.isVertical ? innerItem[0].offsetWidth : innerItem[0].offsetHeight) + value + 'px';

    if (this.isVertical) {
      if (this.enableRtl) {
        innerItem[1].style.marginBottom = mrgn;
      } else {
        innerItem[1].style.marginTop = mrgn;
      }
    } else {
      if (this.enableRtl) {
        innerItem[1].style.marginRight = mrgn;
      } else {
        innerItem[1].style.marginLeft = mrgn;
      }
    }
  };

  Toolbar.prototype.tbarItemAlign = function (item, itemEle, pos) {
    var _this = this;

    if (item.showAlwaysInPopup && item.overflow !== 'Show') {
      return;
    }

    var alignDiv = [];
    alignDiv.push(this.createElement('div', {
      className: CLS_TBARLEFT
    }));
    alignDiv.push(this.createElement('div', {
      className: CLS_TBARCENTER
    }));
    alignDiv.push(this.createElement('div', {
      className: CLS_TBARRIGHT
    }));

    if (pos === 0 && item.align !== 'Left') {
      alignDiv.forEach(function (ele) {
        itemEle.appendChild(ele);
      });
      this.tbarAlign = true;
      this.add(itemEle, CLS_TBARPOS);
    } else if (item.align !== 'Left') {
      var alignEle = itemEle.childNodes;
      var leftAlign_1 = alignDiv[0];
      [].slice.call(alignEle).forEach(function (el) {
        _this.tbarAlgEle.lefts.push(el);

        leftAlign_1.appendChild(el);
      });
      itemEle.appendChild(leftAlign_1);
      itemEle.appendChild(alignDiv[1]);
      itemEle.appendChild(alignDiv[2]);
      this.tbarAlign = true;
      this.add(itemEle, CLS_TBARPOS);
    }
  };

  Toolbar.prototype.ctrlTemplate = function () {
    var _this = this;

    this.ctrlTem = this.trgtEle.cloneNode(true);
    this.add(this.trgtEle, CLS_ITEMS);
    this.tbarEle = [];
    var innerEle = [].slice.call(this.trgtEle.children);
    innerEle.forEach(function (ele) {
      if (ele.tagName === 'DIV') {
        _this.tbarEle.push(ele);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele.firstElementChild)) {
          ele.firstElementChild.setAttribute('aria-disabled', 'false');
        }

        _this.add(ele, CLS_ITEM);
      }
    });
  };

  Toolbar.prototype.renderItems = function () {
    var ele = this.element;
    var items = this.items;

    if (this.trgtEle != null) {
      this.ctrlTemplate();
    } else if (ele && items.length > 0) {
      var itemEleDom = void 0;

      if (ele && ele.children.length > 0) {
        itemEleDom = ele.querySelector('.' + CLS_ITEMS);
      }

      if (!itemEleDom) {
        itemEleDom = this.createElement('div', {
          className: CLS_ITEMS
        });
      }

      this.itemsAlign(items, itemEleDom);
      ele.appendChild(itemEleDom);
    }
  };

  Toolbar.prototype.setAttr = function (attr, element) {
    var key = Object.keys(attr);
    var keyVal;

    for (var i = 0; i < key.length; i++) {
      keyVal = key[parseInt(i.toString(), 10)];

      if (keyVal === 'class') {
        this.add(element, attr["" + keyVal]);
      } else {
        element.setAttribute(keyVal, attr["" + keyVal]);
      }
    }
  };
  /**
   * Enables or disables the specified Toolbar item.
   *
   * @param  {number|HTMLElement|NodeList} items - DOM element or an array of items to be enabled or disabled.
   * @param  {boolean} isEnable  - Boolean value that determines whether the command should be enabled or disabled.
   * By default, `isEnable` is set to true.
   * @returns {void}.
   */


  Toolbar.prototype.enableItems = function (items, isEnable) {
    var elements = items;
    var len = elements.length;
    var ele;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(isEnable)) {
      isEnable = true;
    }

    var enable = function (isEnable, ele) {
      if (isEnable) {
        ele.classList.remove(CLS_DISABLE);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele.firstElementChild)) {
          ele.firstElementChild.setAttribute('aria-disabled', 'false');
        }
      } else {
        ele.classList.add(CLS_DISABLE);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele.firstElementChild)) {
          ele.firstElementChild.setAttribute('aria-disabled', 'true');
        }
      }
    };

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(len) && len >= 1) {
      for (var a = 0, element = [].slice.call(elements); a < len; a++) {
        var itemElement = element[parseInt(a.toString(), 10)];

        if (typeof itemElement === 'number') {
          ele = this.getElementByIndex(itemElement);

          if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele)) {
            return;
          } else {
            elements[parseInt(a.toString(), 10)] = ele;
          }
        } else {
          ele = itemElement;
        }

        enable(isEnable, ele);
      }

      if (isEnable) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(elements, CLS_DISABLE);
      } else {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])(elements, CLS_DISABLE);
      }
    } else {
      if (typeof elements === 'number') {
        ele = this.getElementByIndex(elements);

        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele)) {
          return;
        }
      } else {
        ele = items;
      }

      enable(isEnable, ele);
    }
  };

  Toolbar.prototype.getElementByIndex = function (index) {
    if (this.tbarEle[parseInt(index.toString(), 10)]) {
      return this.tbarEle[parseInt(index.toString(), 10)];
    }

    return null;
  };
  /**
   * Adds new items to the Toolbar that accepts an array as Toolbar items.
   *
   * @param  {ItemModel[]} items - DOM element or an array of items to be added to the Toolbar.
   * @param  {number} index - Number value that determines where the command is to be added. By default, index is 0.
   * @returns {void}.
   */


  Toolbar.prototype.addItems = function (items, index) {
    var innerItems;
    this.extendedOpen();
    var itemsDiv = this.element.querySelector('.' + CLS_ITEMS);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(itemsDiv)) {
      this.itemsRerender(items);
      return;
    }

    var innerEle;
    var itemAgn = 'Left';

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index)) {
      index = 0;
    }

    items.forEach(function (e) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e.align) && e.align !== 'Left' && itemAgn === 'Left') {
        itemAgn = e.align;
      }
    });

    for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
      var item = items_1[_i];

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.type)) {
        item.type = 'Button';
      }

      innerItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM, this.element);
      item.align = itemAgn;
      innerEle = this.renderSubComponent(item, index);

      if (this.tbarEle.length >= index && innerItems.length >= 0) {
        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.scrollModule)) {
          this.destroyMode();
        }

        var algIndex = item.align[0] === 'L' ? 0 : item.align[0] === 'C' ? 1 : 2;
        var ele = void 0;

        if (!this.tbarAlign && itemAgn !== 'Left') {
          this.tbarItemAlign(item, itemsDiv, 1);
          this.tbarAlign = true;
          ele = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(innerItems[0], '.' + CLS_ITEMS).children[parseInt(algIndex.toString(), 10)];
          ele.appendChild(innerEle);
          this.tbarAlgEle[(item.align + 's').toLowerCase()].push(innerEle);
          this.refreshPositioning();
        } else if (this.tbarAlign) {
          ele = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(innerItems[0], '.' + CLS_ITEMS).children[parseInt(algIndex.toString(), 10)];
          ele.insertBefore(innerEle, ele.children[parseInt(index.toString(), 10)]);
          this.tbarAlgEle[(item.align + 's').toLowerCase()].splice(index, 0, innerEle);
          this.refreshPositioning();
        } else if (innerItems.length === 0) {
          innerItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEMS, this.element);
          innerItems[0].appendChild(innerEle);
        } else {
          innerItems[0].parentNode.insertBefore(innerEle, innerItems[parseInt(index.toString(), 10)]);
        }

        this.items.splice(index, 0, item);

        if (item.template) {
          this.tbarEle.splice(this.tbarEle.length - 1, 1);
        }

        this.tbarEle.splice(index, 0, innerEle);
        index++;
        this.offsetWid = itemsDiv.offsetWidth;
      }
    }

    itemsDiv.style.width = '';
    this.renderOverflowMode();

    if (this.isReact) {
      this.renderReactTemplates();
    }
  };
  /**
   * Removes the items from the Toolbar. Acceptable arguments are index of item/HTMLElement/node list.
   *
   * @param  {number|HTMLElement|NodeList|HTMLElement[]} args
   * Index or DOM element or an Array of item which is to be removed from the Toolbar.
   * @returns {void}.
   */


  Toolbar.prototype.removeItems = function (args) {
    var elements = args;
    var index;
    var innerItems = [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM, this.element));

    if (typeof elements === 'number') {
      index = parseInt(args.toString(), 10);
      this.removeItemByIndex(index, innerItems);
    } else {
      if (elements && elements.length > 1) {
        for (var _i = 0, _a = [].slice.call(elements); _i < _a.length; _i++) {
          var ele = _a[_i];
          index = this.tbarEle.indexOf(ele);
          this.removeItemByIndex(index, innerItems);
          innerItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM, this.element);
        }
      } else {
        var ele = elements && elements.length && elements.length === 1 ? elements[0] : args;
        index = innerItems.indexOf(ele);
        this.removeItemByIndex(index, innerItems);
      }
    }

    this.resize();
  };

  Toolbar.prototype.removeItemByIndex = function (index, innerItems) {
    if (this.tbarEle[parseInt(index.toString(), 10)] && innerItems[parseInt(index.toString(), 10)]) {
      var eleIdx = this.tbarEle.indexOf(innerItems[parseInt(index.toString(), 10)]);

      if (this.tbarAlign) {
        var indexAgn = this.tbarAlgEle[(this.items[parseInt(eleIdx.toString(), 10)].align + 's').toLowerCase()].indexOf(this.tbarEle[parseInt(eleIdx.toString(), 10)]);
        this.tbarAlgEle[(this.items[parseInt(eleIdx.toString(), 10)].align + 's').toLowerCase()].splice(parseInt(indexAgn.toString(), 10), 1);
      }

      if (this.isReact) {
        this.clearToolbarTemplate(innerItems[parseInt(index.toString(), 10)]);
      }

      var btnItem = innerItems[parseInt(index.toString(), 10)].querySelector('.e-control.e-btn');

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(btnItem) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(btnItem.ej2_instances[0]) && !btnItem.ej2_instances[0].isDestroyed) {
        btnItem.ej2_instances[0].destroy();
      }

      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(innerItems[parseInt(index.toString(), 10)]);
      this.items.splice(eleIdx, 1);
      this.tbarEle.splice(eleIdx, 1);
    }
  };

  Toolbar.prototype.templateRender = function (templateProp, innerEle, item, index) {
    var itemType = item.type;
    var eleObj = templateProp;
    var isComponent;

    if (typeof templateProp === 'object') {
      isComponent = typeof eleObj.appendTo === 'function';
    }

    if (typeof templateProp === 'string' || !isComponent) {
      var templateFn = void 0;
      var val = templateProp;
      var regEx = new RegExp(/<(?=.*? .*?\/ ?>|br|hr|input|!--|wbr)[a-z]+.*?>|<([a-z]+).*?<\/\1>/i);
      val = typeof templateProp === 'string' ? templateProp.trim() : templateProp;

      try {
        if (typeof templateProp === 'object' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(templateProp.tagName)) {
          innerEle.appendChild(templateProp);
        } else if (typeof templateProp === 'string' && regEx.test(val)) {
          innerEle.innerHTML = val;
        } else if (document.querySelectorAll(val).length) {
          var ele = document.querySelector(val);
          var tempStr = ele.outerHTML.trim();
          innerEle.appendChild(ele);
          ele.style.display = '';

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(tempStr)) {
            this.tempId.push(val);
          }
        } else {
          templateFn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(val);
        }
      } catch (e) {
        templateFn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(val);
      }

      var tempArray = void 0;

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(templateFn)) {
        var toolbarTemplateID = this.element.id + index + '_template';
        tempArray = templateFn({}, this, 'template', toolbarTemplateID, this.isStringTemplate, undefined, undefined, this.root);
      }

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(tempArray) && tempArray.length > 0) {
        [].slice.call(tempArray).forEach(function (ele) {
          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele.tagName)) {
            ele.style.display = '';
          }

          innerEle.appendChild(ele);
        });
      }
    } else if (itemType === 'Input') {
      var ele = this.createElement('input');

      if (item.id) {
        ele.id = item.id;
      } else {
        ele.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('tbr-ipt');
      }

      innerEle.appendChild(ele);
      eleObj.appendTo(ele);
    }

    this.add(innerEle, CLS_TEMPLATE);
    this.tbarEle.push(innerEle);
  };

  Toolbar.prototype.buttonRendering = function (item, innerEle) {
    var dom = this.createElement('button', {
      className: CLS_TBARBTN
    });
    dom.setAttribute('type', 'button');
    var textStr = item.text;
    var iconCss;
    var iconPos;

    if (item.id) {
      dom.id = item.id;
    } else {
      dom.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('e-tbr-btn');
    }

    var btnTxt = this.createElement('span', {
      className: 'e-tbar-btn-text'
    });

    if (textStr) {
      btnTxt.innerHTML = this.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(textStr) : textStr;
      dom.appendChild(btnTxt);
      dom.classList.add('e-tbtn-txt');
    } else {
      this.add(innerEle, 'e-tbtn-align');
    }

    if (item.prefixIcon || item.suffixIcon) {
      if (item.prefixIcon && item.suffixIcon || item.prefixIcon) {
        iconCss = item.prefixIcon + ' e-icons';
        iconPos = 'Left';
      } else {
        iconCss = item.suffixIcon + ' e-icons';
        iconPos = 'Right';
      }
    }

    var btnObj = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_2__["Button"]({
      iconCss: iconCss,
      iconPosition: iconPos
    });
    btnObj.createElement = this.createElement;
    btnObj.appendTo(dom);

    if (item.width) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(dom, {
        'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(item.width)
      });
    }

    return dom;
  };

  Toolbar.prototype.renderSubComponent = function (item, index) {
    var dom;
    var innerEle = this.createElement('div', {
      className: CLS_ITEM
    });
    var tempDom = this.createElement('div', {
      innerHTML: this.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(item.tooltipText) : item.tooltipText
    });

    if (!this.tbarEle) {
      this.tbarEle = [];
    }

    if (item.htmlAttributes) {
      this.setAttr(item.htmlAttributes, innerEle);
    }

    if (item.tooltipText) {
      innerEle.setAttribute('title', tempDom.textContent);
    }

    if (item.cssClass) {
      innerEle.className = innerEle.className + ' ' + item.cssClass;
    }

    if (item.template) {
      this.templateRender(item.template, innerEle, item, index);
    } else {
      switch (item.type) {
        case 'Button':
          dom = this.buttonRendering(item, innerEle);
          dom.setAttribute('tabindex', Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.tabIndex) ? '-1' : item.tabIndex.toString());
          dom.setAttribute('data-tabindex', Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.tabIndex) ? '-1' : item.tabIndex.toString());
          dom.setAttribute('aria-label', item.text || item.tooltipText);
          dom.setAttribute('aria-disabled', 'false');
          innerEle.appendChild(dom);
          innerEle.addEventListener('click', this.itemClick.bind(this));
          break;

        case 'Separator':
          this.add(innerEle, CLS_SEPARATOR);
          break;
      }
    }

    if (item.showTextOn) {
      var sTxt = item.showTextOn;

      if (sTxt === 'Toolbar') {
        this.add(innerEle, CLS_POPUPTEXT);
        this.add(innerEle, 'e-tbtn-align');
      } else if (sTxt === 'Overflow') {
        this.add(innerEle, CLS_TBARTEXT);
      }
    }

    if (item.overflow) {
      var overflow = item.overflow;

      if (overflow === 'Show') {
        this.add(innerEle, CLS_TBAROVERFLOW);
      } else if (overflow === 'Hide') {
        if (!innerEle.classList.contains(CLS_SEPARATOR)) {
          this.add(innerEle, CLS_POPOVERFLOW);
        }
      }
    }

    if (item.overflow !== 'Show' && item.showAlwaysInPopup && !innerEle.classList.contains(CLS_SEPARATOR)) {
      this.add(innerEle, CLS_POPPRI);
      this.popupPriCount++;
    }

    if (item.disabled) {
      this.add(innerEle, CLS_DISABLE);
    }

    if (item.visible === false) {
      this.add(innerEle, CLS_HIDDEN);
    }

    return innerEle;
  };

  Toolbar.prototype.getDataTabindex = function (ele) {
    return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele.getAttribute('data-tabindex')) ? '-1' : ele.getAttribute('data-tabindex');
  };

  Toolbar.prototype.itemClick = function (e) {
    this.activeEleSwitch(e.currentTarget);
  };

  Toolbar.prototype.activeEleSwitch = function (ele) {
    this.activeEleRemove(ele.firstElementChild);
    this.activeEle.focus();
  };

  Toolbar.prototype.activeEleRemove = function (curEle) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.activeEle)) {
      this.activeEle.setAttribute('tabindex', this.getDataTabindex(this.activeEle));
    }

    this.activeEle = curEle;

    if (this.getDataTabindex(this.activeEle) === '-1') {
      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.trgtEle) && !curEle.parentElement.classList.contains(CLS_TEMPLATE)) {
        this.updateTabIndex('-1');
        curEle.removeAttribute('tabindex');
      } else {
        this.activeEle.setAttribute('tabindex', this.getDataTabindex(this.activeEle));
      }
    }
  };

  Toolbar.prototype.getPersistData = function () {
    return this.addOnPersist([]);
  };
  /**
   * Returns the current module name.
   *
   * @returns {string} - Returns the module name as string.
   * @private
   */


  Toolbar.prototype.getModuleName = function () {
    return 'toolbar';
  };

  Toolbar.prototype.itemsRerender = function (newProp) {
    this.items = this.tbarItemsCol;

    if (this.isReact || this.isAngular) {
      this.clearTemplate();
    }

    this.destroyMode();
    this.destroyItems();
    this.items = newProp;
    this.tbarItemsCol = this.items;
    this.renderItems();
    this.renderOverflowMode();

    if (this.isReact) {
      this.renderReactTemplates();
    }
  };

  Toolbar.prototype.resize = function () {
    var ele = this.element;
    this.tbResize = true;

    if (this.tbarAlign) {
      this.itemPositioning();
    }

    if (this.popObj && this.overflowMode === 'Popup') {
      this.popObj.hide();
    }

    var checkOverflow = this.checkOverflow(ele, ele.getElementsByClassName(CLS_ITEMS)[0]);

    if (!checkOverflow) {
      this.destroyScroll();
      var multirowele = ele.querySelector('.' + CLS_ITEMS);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(multirowele)) {
        this.remove(multirowele, CLS_MULTIROWPOS);

        if (this.tbarAlign) {
          this.add(multirowele, CLS_TBARPOS);
        }
      }
    }

    if (checkOverflow && this.scrollModule && this.offsetWid === ele.offsetWidth) {
      return;
    }

    if (this.offsetWid > ele.offsetWidth || checkOverflow) {
      this.renderOverflowMode();
    }

    if (this.popObj) {
      if (this.overflowMode === 'Extended') {
        var eleStyles = window.getComputedStyle(this.element);
        this.popObj.width = parseFloat(eleStyles.width) + parseFloat(eleStyles.borderRightWidth) * 2;
      }

      if (this.tbarAlign) {
        this.removePositioning();
      }

      this.popupRefresh(this.popObj.element, false);

      if (this.tbarAlign) {
        this.refreshPositioning();
      }
    }

    if (this.element.querySelector('.' + CLS_HSCROLLBAR)) {
      this.scrollStep = this.element.querySelector('.' + CLS_HSCROLLBAR).offsetWidth;
    }

    this.offsetWid = ele.offsetWidth;
    this.tbResize = false;
    this.separator();
  };

  Toolbar.prototype.orientationChange = function () {
    var _this = this;

    setTimeout(function () {
      _this.resize();
    }, 500);
  };

  Toolbar.prototype.extendedOpen = function () {
    var sib = this.element.querySelector('.' + CLS_EXTENDABLECLASS);

    if (this.overflowMode === 'Extended' && sib) {
      this.isExtendedOpen = sib.classList.contains(CLS_POPUPOPEN);
    }
  };

  Toolbar.prototype.updateHideEleTabIndex = function (ele, isHidden, isElement, eleIndex, innerItems) {
    if (isElement) {
      eleIndex = innerItems.indexOf(ele);
    }

    var nextEle = innerItems[++eleIndex];

    while (nextEle) {
      var skipEle = this.eleContains(nextEle);

      if (!skipEle) {
        var dataTabIndex = nextEle.firstElementChild.getAttribute('data-tabindex');

        if (isHidden && dataTabIndex === '-1') {
          nextEle.firstElementChild.setAttribute('tabindex', '0');
        } else if (dataTabIndex !== nextEle.firstElementChild.getAttribute('tabindex')) {
          nextEle.firstElementChild.setAttribute('tabindex', dataTabIndex);
        }

        break;
      }

      nextEle = innerItems[++eleIndex];
    }
  };

  Toolbar.prototype.clearToolbarTemplate = function (templateEle) {
    if (this.registeredTemplate && this.registeredTemplate["" + 'template']) {
      var registeredTemplates = this.registeredTemplate;

      for (var index = 0; index < registeredTemplates["" + 'template'].length; index++) {
        var registeredItem = registeredTemplates["" + 'template'][parseInt(index.toString(), 10)].rootNodes[0];
        var closestItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(registeredItem, '.' + CLS_ITEM);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(closestItem) && closestItem === templateEle) {
          this.clearTemplate(['template'], [registeredTemplates["" + 'template'][parseInt(index.toString(), 10)]]);
          break;
        }
      }
    } else if (this.portals && this.portals.length > 0) {
      var portals = this.portals;

      for (var index = 0; index < portals.length; index++) {
        var portalItem = portals[parseInt(index.toString(), 10)];
        var closestItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(portalItem.containerInfo, '.' + CLS_ITEM);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(closestItem) && closestItem === templateEle) {
          this.clearTemplate(['template'], index);
          break;
        }
      }
    }
  };
  /**
   * Gets called when the model property changes.The data that describes the old and new values of the property that changed.
   *
   * @param  {ToolbarModel} newProp - It contains new value of the data.
   * @param  {ToolbarModel} oldProp - It contains old value of the data.
   * @returns {void}
   * @private
   */


  Toolbar.prototype.onPropertyChanged = function (newProp, oldProp) {
    var tEle = this.element;
    var wid = tEle.offsetWidth;
    this.extendedOpen();

    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'items':
          if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {
            var changedProb = Object.keys(newProp.items);

            for (var i = 0; i < changedProb.length; i++) {
              var index = parseInt(Object.keys(newProp.items)[parseInt(i.toString(), 10)], 10);
              var property = Object.keys(newProp.items[parseInt(index.toString(), 10)])[0];
              var newProperty = Object(newProp.items[parseInt(index.toString(), 10)])["" + property];

              if (this.tbarAlign || property === 'align') {
                this.refresh();
                this.trigger('created');
                break;
              }

              var popupPriCheck = property === 'showAlwaysInPopup' && !newProperty;
              var booleanCheck = property === 'overflow' && this.popupPriCount !== 0;

              if (popupPriCheck || this.items[parseInt(index.toString(), 10)].showAlwaysInPopup && booleanCheck) {
                --this.popupPriCount;
              }

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.scrollModule)) {
                this.destroyMode();
              }

              var itemCol = [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEMS + ' .' + CLS_ITEM, tEle));

              if (this.isReact && this.items[parseInt(index.toString(), 10)].template) {
                this.clearToolbarTemplate(itemCol[parseInt(index.toString(), 10)]);
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(itemCol[parseInt(index.toString(), 10)]);
              this.tbarEle.splice(index, 1);
              this.addItems([this.items[parseInt(index.toString(), 10)]], index);
              this.items.splice(index, 1);

              if (this.items[parseInt(index.toString(), 10)].template) {
                this.tbarEle.splice(this.items.length, 1);
              }
            }
          } else {
            this.itemsRerender(newProp.items);
          }

          break;

        case 'width':
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(tEle, {
            'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.width)
          });
          this.refreshOverflow();
          break;

        case 'height':
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
            'height': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.height)
          });
          break;

        case 'overflowMode':
          this.destroyMode();
          this.renderOverflowMode();

          if (this.enableRtl) {
            this.add(tEle, CLS_RTL);
          }

          this.refreshOverflow();
          break;

        case 'enableRtl':
          if (newProp.enableRtl) {
            this.add(tEle, CLS_RTL);
          } else {
            this.remove(tEle, CLS_RTL);
          }

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.scrollModule)) {
            if (newProp.enableRtl) {
              this.add(this.scrollModule.element, CLS_RTL);
            } else {
              this.remove(this.scrollModule.element, CLS_RTL);
            }
          }

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.popObj)) {
            if (newProp.enableRtl) {
              this.add(this.popObj.element, CLS_RTL);
            } else {
              this.remove(this.popObj.element, CLS_RTL);
            }
          }

          if (this.tbarAlign) {
            this.itemPositioning();
          }

          break;

        case 'scrollStep':
          if (this.scrollModule) {
            this.scrollModule.scrollStep = this.scrollStep;
          }

          break;

        case 'enableCollision':
          if (this.popObj) {
            this.popObj.collision = {
              Y: this.enableCollision ? 'flip' : 'none'
            };
          }

          break;

        case 'cssClass':
          if (oldProp.cssClass) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], oldProp.cssClass.split(' '));
          }

          if (newProp.cssClass) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], newProp.cssClass.split(' '));
          }

          break;

        case 'allowKeyboard':
          this.unwireKeyboardEvent();

          if (newProp.allowKeyboard) {
            this.wireKeyboardEvent();
          }

          break;
      }
    }
  };
  /**
   * Shows or hides the Toolbar item that is in the specified index.
   *
   * @param  {number | HTMLElement} index - Index value of target item or DOM element  of items to be hidden or shown.
   * @param  {boolean} value - Based on this Boolean value, item will be hide (true) or show (false). By default, value is false.
   * @returns {void}.
   */


  Toolbar.prototype.hideItem = function (index, value) {
    var isElement = typeof index === 'object' ? true : false;
    var eleIndex = index;
    var ele;

    if (!isElement && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(eleIndex)) {
      return;
    }

    var innerItems = [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM, this.element));

    if (isElement) {
      ele = index;
    } else if (this.tbarEle[parseInt(eleIndex.toString(), 10)]) {
      var innerItems_1 = [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM, this.element));
      ele = innerItems_1[parseInt(eleIndex.toString(), 10)];
    }

    if (ele) {
      if (value) {
        ele.classList.add(CLS_HIDDEN);

        if (!ele.classList.contains(CLS_SEPARATOR)) {
          if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele.firstElementChild.getAttribute('tabindex')) || ele.firstElementChild.getAttribute('tabindex') !== '-1') {
            this.updateHideEleTabIndex(ele, value, isElement, eleIndex, innerItems);
          }
        }
      } else {
        ele.classList.remove(CLS_HIDDEN);

        if (!ele.classList.contains(CLS_SEPARATOR)) {
          this.updateHideEleTabIndex(ele, value, isElement, eleIndex, innerItems);
        }
      }

      this.refreshOverflow();
    }
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([], Item)], Toolbar.prototype, "items", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Toolbar.prototype, "width", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Toolbar.prototype, "height", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Toolbar.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Scrollable')], Toolbar.prototype, "overflowMode", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Toolbar.prototype, "scrollStep", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Toolbar.prototype, "enableCollision", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Toolbar.prototype, "enableHtmlSanitizer", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Toolbar.prototype, "allowKeyboard", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Toolbar.prototype, "clicked", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Toolbar.prototype, "created", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Toolbar.prototype, "destroyed", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Toolbar.prototype, "beforeCreate", void 0);

  Toolbar = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Toolbar);
  return Toolbar;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/treeview/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/treeview/index.js ***!
  \************************************************************************/
/*! exports provided: FieldsSettings, ActionSettings, NodeAnimationSettings, TreeView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _treeview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./treeview */ "./node_modules/@syncfusion/ej2-navigations/src/treeview/treeview.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FieldsSettings", function() { return _treeview__WEBPACK_IMPORTED_MODULE_0__["FieldsSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ActionSettings", function() { return _treeview__WEBPACK_IMPORTED_MODULE_0__["ActionSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NodeAnimationSettings", function() { return _treeview__WEBPACK_IMPORTED_MODULE_0__["NodeAnimationSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TreeView", function() { return _treeview__WEBPACK_IMPORTED_MODULE_0__["TreeView"]; });

/**
 * TreeView modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-navigations/src/treeview/treeview.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/treeview/treeview.js ***!
  \***************************************************************************/
/*! exports provided: FieldsSettings, ActionSettings, NodeAnimationSettings, TreeView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FieldsSettings", function() { return FieldsSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActionSettings", function() { return ActionSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NodeAnimationSettings", function() { return NodeAnimationSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeView", function() { return TreeView; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-data */ "./node_modules/@syncfusion/ej2-data/index.js");
/* harmony import */ var _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-lists */ "./node_modules/@syncfusion/ej2-lists/index.js");
/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ "./node_modules/@syncfusion/ej2-buttons/index.js");
/* harmony import */ var _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @syncfusion/ej2-inputs */ "./node_modules/@syncfusion/ej2-inputs/index.js");
/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @syncfusion/ej2-popups */ "./node_modules/@syncfusion/ej2-popups/index.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};














var ROOT = 'e-treeview';
var CONTROL = 'e-control';
var COLLAPSIBLE = 'e-icon-collapsible';
var EXPANDABLE = 'e-icon-expandable';
var LISTITEM = 'e-list-item';
var LISTTEXT = 'e-list-text';
var LISTWRAP = 'e-text-wrap';
var IELISTWRAP = 'e-ie-wrap';
var PARENTITEM = 'e-list-parent';
var HOVER = 'e-hover';
var ACTIVE = 'e-active';
var LOAD = 'e-icons-spinner';
var PROCESS = 'e-process';
var ICON = 'e-icons';
var TEXTWRAP = 'e-text-content';
var INPUT = 'e-input';
var INPUTGROUP = 'e-input-group';
var TREEINPUT = 'e-tree-input';
var EDITING = 'e-editing';
var RTL = 'e-rtl';
var INTERACTION = 'e-interaction';
var DRAGITEM = 'e-drag-item';
var DROPPABLE = 'e-droppable';
var DRAGGING = 'e-dragging';
var SIBLING = 'e-sibling';
var DROPIN = 'e-drop-in';
var DROPNEXT = 'e-drop-next';
var DROPOUT = 'e-drop-out';
var NODROP = 'e-no-drop';
var FULLROWWRAP = 'e-fullrow-wrap';
var FULLROW = 'e-fullrow';
var SELECTED = 'e-selected';
var EXPANDED = 'e-expanded';
var NODECOLLAPSED = 'e-node-collapsed';
var DISABLE = 'e-disable';
var DROPCOUNT = 'e-drop-count';
var CHECK = 'e-check';
var INDETERMINATE = 'e-stop';
var CHECKBOXWRAP = 'e-checkbox-wrapper';
var CHECKBOXFRAME = 'e-frame';
var CHECKBOXRIPPLE = 'e-ripple-container';
var RIPPLE = 'e-ripple';
var RIPPLEELMENT = 'e-ripple-element';
var FOCUS = 'e-node-focus';
var IMAGE = 'e-list-img';
var BIGGER = 'e-bigger';
var SMALL = 'e-small';
var CHILD = 'e-has-child';
var ITEM_ANIMATION_ACTIVE = 'e-animation-active';
var DISABLED = 'e-disabled';
var PREVENTSELECT = 'e-prevent';
var treeAriaAttr = {
  treeRole: 'group',
  itemRole: 'treeitem',
  listRole: 'group',
  itemText: '',
  wrapperRole: ''
};
/**
 * Configures the fields to bind to the properties of node in the TreeView component.
 */

var FieldsSettings =
/** @class */
function (_super) {
  __extends(FieldsSettings, _super);

  function FieldsSettings() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('child')], FieldsSettings.prototype, "child", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])([])], FieldsSettings.prototype, "dataSource", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('expanded')], FieldsSettings.prototype, "expanded", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('hasChildren')], FieldsSettings.prototype, "hasChildren", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('htmlAttributes')], FieldsSettings.prototype, "htmlAttributes", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('iconCss')], FieldsSettings.prototype, "iconCss", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('id')], FieldsSettings.prototype, "id", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('imageUrl')], FieldsSettings.prototype, "imageUrl", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('isChecked')], FieldsSettings.prototype, "isChecked", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('parentID')], FieldsSettings.prototype, "parentID", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], FieldsSettings.prototype, "query", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('selectable')], FieldsSettings.prototype, "selectable", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('selected')], FieldsSettings.prototype, "selected", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], FieldsSettings.prototype, "tableName", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('text')], FieldsSettings.prototype, "text", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('tooltip')], FieldsSettings.prototype, "tooltip", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('navigateUrl')], FieldsSettings.prototype, "navigateUrl", void 0);

  return FieldsSettings;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * Configures animation settings for the TreeView component.
 */

var ActionSettings =
/** @class */
function (_super) {
  __extends(ActionSettings, _super);

  function ActionSettings() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('SlideDown')], ActionSettings.prototype, "effect", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(400)], ActionSettings.prototype, "duration", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('linear')], ActionSettings.prototype, "easing", void 0);

  return ActionSettings;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * Configures the animation settings for expanding and collapsing nodes in TreeView.
 */

var NodeAnimationSettings =
/** @class */
function (_super) {
  __extends(NodeAnimationSettings, _super);

  function NodeAnimationSettings() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
    effect: 'SlideUp',
    duration: 400,
    easing: 'linear'
  }, ActionSettings)], NodeAnimationSettings.prototype, "collapse", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
    effect: 'SlideDown',
    duration: 400,
    easing: 'linear'
  }, ActionSettings)], NodeAnimationSettings.prototype, "expand", void 0);

  return NodeAnimationSettings;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * The TreeView component is used to represent hierarchical data in a tree like structure with advanced
 * functions to perform edit, drag and drop, selection with check-box, and more.
 * ```html
 * <div id="tree"></div>
 * ```
 * ```typescript
 * let treeObj: TreeView = new TreeView();
 * treeObj.appendTo('#tree');
 * ```
 */

var TreeView =
/** @class */
function (_super) {
  __extends(TreeView, _super);

  function TreeView(options, element) {
    var _this = _super.call(this, options, element) || this;

    _this.isRefreshed = false;
    _this.preventExpand = false;
    _this.checkedElement = [];
    _this.disableNode = []; // eslint-disable-next-line

    _this.validArr = [];
    _this.validNodes = [];
    _this.expandChildren = [];
    _this.isFieldChange = false;
    _this.changeDataSource = false;
    _this.hasTemplate = false;
    _this.isFirstRender = false; // Specifies whether the node is dropped or not

    _this.isNodeDropped = false;
    _this.isInteracted = false;
    _this.isRightClick = false;
    _this.mouseDownStatus = false;
    return _this;
  }

  TreeView_1 = TreeView;
  /**
   * Get component name.
   *
   * @returns {string} - returns module name.
   * @private
   */

  TreeView.prototype.getModuleName = function () {
    return 'treeview';
  };
  /**
   * Initialize the event handler
   *
   * @returns {void}
   */


  TreeView.prototype.preRender = function () {
    var _this = this;

    this.checkActionNodes = [];
    this.parentNodeCheck = [];
    this.dragStartAction = false;
    this.isAnimate = false;
    this.keyConfigs = {
      escape: 'escape',
      end: 'end',
      enter: 'enter',
      f2: 'f2',
      home: 'home',
      moveDown: 'downarrow',
      moveLeft: 'leftarrow',
      moveRight: 'rightarrow',
      moveUp: 'uparrow',
      ctrlDown: 'ctrl+downarrow',
      ctrlUp: 'ctrl+uparrow',
      ctrlEnter: 'ctrl+enter',
      ctrlHome: 'ctrl+home',
      ctrlEnd: 'ctrl+end',
      ctrlA: 'ctrl+A',
      shiftDown: 'shift+downarrow',
      shiftUp: 'shift+uparrow',
      shiftEnter: 'shift+enter',
      shiftHome: 'shift+home',
      shiftEnd: 'shift+end',
      csDown: 'ctrl+shift+downarrow',
      csUp: 'ctrl+shift+uparrow',
      csEnter: 'ctrl+shift+enter',
      csHome: 'ctrl+shift+home',
      csEnd: 'ctrl+shift+end',
      space: 'space',
      shiftSpace: 'shift+space',
      ctrlSpace: 'ctrl+space'
    };
    this.listBaseOption = {
      expandCollapse: true,
      showIcon: true,
      expandIconClass: EXPANDABLE,
      ariaAttributes: treeAriaAttr,
      expandIconPosition: 'Left',
      itemCreated: function (e) {
        _this.beforeNodeCreate(e);
      },
      enableHtmlSanitizer: this.enableHtmlSanitizer,
      itemNavigable: this.fullRowNavigable
    };
    this.updateListProp(this.fields);
    this.aniObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"]({});
    this.treeList = [];
    this.isLoaded = false;
    this.isInitalExpand = false;
    this.expandChildren = [];
    this.index = 0;
    this.setTouchClass();

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.selectedNodes)) {
      this.setProperties({
        selectedNodes: []
      }, true);
    }

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.checkedNodes)) {
      this.setProperties({
        checkedNodes: []
      }, true);
    }

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.expandedNodes)) {
      this.setProperties({
        expandedNodes: []
      }, true);
    } else {
      this.isInitalExpand = true;
    }
  };
  /**
   * Get the properties to be maintained in the persisted state.
   *
   * @returns {string} - returns the persisted data
   * @hidden
   */


  TreeView.prototype.getPersistData = function () {
    var keyEntity = ['selectedNodes', 'checkedNodes', 'expandedNodes'];
    return this.addOnPersist(keyEntity);
  };
  /**
   * To Initialize the control rendering
   *
   * @private
   * @returns {void}
   */


  TreeView.prototype.render = function () {
    this.initialRender = true;
    this.initialize();
    this.setDataBinding(false);
    this.setDisabledMode();
    this.setExpandOnType();

    if (!this.disabled) {
      this.setRipple();
    }

    this.wireEditingEvents(this.allowEditing);
    this.setDragAndDrop(this.allowDragAndDrop);

    if (!this.disabled) {
      this.wireEvents();
    }

    this.initialRender = false;
    this.renderComplete();
  };

  TreeView.prototype.initialize = function () {
    this.element.setAttribute('role', 'tree');
    this.element.setAttribute('aria-activedescendant', this.element.id + '_active');
    this.setCssClass(null, this.cssClass);
    this.setEnableRtl();
    this.setFullRow(this.fullRowSelect);
    this.setTextWrap();
    this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);
  };

  TreeView.prototype.setDisabledMode = function () {
    if (this.disabled) {
      this.element.classList.add(DISABLED);
    } else {
      this.element.classList.remove(DISABLED);
    }
  };

  TreeView.prototype.setEnableRtl = function () {
    (this.enableRtl ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"] : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], RTL);
  };

  TreeView.prototype.setRipple = function () {
    var tempStr = '.' + FULLROW + ',.' + TEXTWRAP;
    var rippleModel = {
      selector: tempStr,
      ignore: '.' + TEXTWRAP + ' > .' + ICON + ',.' + INPUTGROUP + ',.' + INPUT + ', .' + CHECKBOXWRAP
    };
    this.rippleFn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(this.element, rippleModel);
    var iconModel = {
      selector: '.' + TEXTWRAP + ' > .' + ICON,
      isCenterRipple: true
    };
    this.rippleIconFn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(this.element, iconModel);
  };

  TreeView.prototype.setFullRow = function (isEnabled) {
    (isEnabled ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"] : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], FULLROWWRAP);
  };

  TreeView.prototype.setMultiSelect = function (isEnabled) {
    var firstUl = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, this.element);

    if (isEnabled) {
      firstUl.setAttribute('aria-multiselectable', 'true');
    } else {
      firstUl.removeAttribute('aria-multiselectable');
    }
  }; // eslint-disable-next-line


  TreeView.prototype.templateComplier = function (template) {
    if (template) {
      this.hasTemplate = true; // eslint-disable-next-line

      var e = void 0;
      this.element.classList.add(INTERACTION);

      try {
        if (typeof template !== 'function' && document.querySelectorAll(template).length) {
          return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(document.querySelector(template).innerHTML.trim());
        } else {
          return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(template);
        }
      } catch (e) {
        return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(template);
      }
    }

    this.element.classList.remove(INTERACTION);
    return undefined;
  };

  TreeView.prototype.setDataBinding = function (changeDataSource) {
    var _this = this;

    this.treeList.push('false');

    if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) {
      /* eslint-disable */
      this.isOffline = this.fields.dataSource.dataSource.offline;

      if (this.fields.dataSource.ready) {
        this.fields.dataSource.ready.then(function (e) {
          /* eslint-disable */
          _this.isOffline = _this.fields.dataSource.dataSource.offline;

          if (_this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] && _this.isOffline) {
            _this.treeList.pop();

            _this.treeData = e.result;
            _this.isNumberTypeId = _this.getType();

            _this.setRootData();

            _this.renderItems(true);

            if (_this.treeList.length === 0 && !_this.isLoaded) {
              _this.finalize();
            }
          }
        }).catch(function (e) {
          _this.trigger('actionFailure', {
            error: e
          });
        });
      } else {
        this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(function (e) {
          _this.treeList.pop();

          _this.treeData = e.result;
          _this.isNumberTypeId = _this.getType();

          _this.setRootData();

          if (changeDataSource) {
            _this.changeDataSource = true;
          }

          _this.renderItems(true);

          _this.changeDataSource = false;

          if (_this.treeList.length === 0 && !_this.isLoaded) {
            _this.finalize();
          }
        }).catch(function (e) {
          _this.trigger('actionFailure', {
            error: e
          });
        });
      }
    } else {
      this.treeList.pop();

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fields.dataSource)) {
        this.rootData = this.treeData = [];
      } else {
        this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource));
        this.setRootData();
      }

      this.isNumberTypeId = this.getType();
      this.renderItems(false);
    }

    if (this.treeList.length === 0 && !this.isLoaded) {
      this.finalize();
    }
  };

  TreeView.prototype.getQuery = function (mapper, value) {
    if (value === void 0) {
      value = null;
    }

    var columns = [];
    var query;

    if (!mapper.query) {
      query = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]();
      var prop = this.getActualProperties(mapper);

      for (var _i = 0, _a = Object.keys(prop); _i < _a.length; _i++) {
        var col = _a[_i];

        if (col !== 'dataSource' && col !== 'tableName' && col !== 'child' && !!mapper[col] && col !== 'url' && columns.indexOf(mapper[col]) === -1) {
          columns.push(mapper[col]);
        }
      }

      query.select(columns);

      if (prop.hasOwnProperty('tableName')) {
        query.from(mapper.tableName);
      }
    } else {
      query = mapper.query.clone();
    }

    _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].addSorting(this.sortOrder, mapper.text, query);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(value) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(mapper.parentID)) {
      query.where(mapper.parentID, 'equal', this.isNumberTypeId ? parseFloat(value) : value);
    }

    return query;
  };

  TreeView.prototype.getType = function () {
    return this.treeData[0] ? typeof Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.id, this.treeData[0]) === 'number' ? true : false : false;
  };

  TreeView.prototype.setRootData = function () {
    this.dataType = this.getDataType(this.treeData, this.fields);

    if (this.dataType === 1) {
      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
      var rootItems = this.getChildNodes(this.treeData, undefined, true);

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(rootItems)) {
        this.rootData = [];
      } else {
        this.rootData = rootItems;
      }
    } else {
      this.rootData = this.treeData;
    }
  };

  TreeView.prototype.renderItems = function (isSorted) {
    /* eslint-disable */
    this.listBaseOption.ariaAttributes.level = 1;
    var sortedData = this.getSortedData(this.rootData);
    this.ulElement = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].createList(this.createElement, isSorted ? this.rootData : sortedData, this.listBaseOption);
    this.element.appendChild(this.ulElement);
    var rootNodes = this.ulElement.querySelectorAll('.e-list-item');

    if (this.loadOnDemand === false) {
      var i = 0;

      while (i < rootNodes.length) {
        this.renderChildNodes(rootNodes[i], true, null, true);
        i++;
      }
    }

    var parentEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + PARENTITEM, this.element);

    if (parentEle.length === 1 && rootNodes && rootNodes.length !== 0 || this.loadOnDemand) {
      this.finalizeNode(this.element);
    }

    this.parentNodeCheck = [];
    this.parentCheckData = [];
    this.updateCheckedStateFromDS();

    if (this.autoCheck && this.showCheckBox && !this.isLoaded) {
      this.updateParentCheckState();
    }
  };
  /**
   * Update the checkedNodes from datasource at initial rendering
   */


  TreeView.prototype.updateCheckedStateFromDS = function (id) {
    this.validNodes = [];

    if (this.treeData && this.showCheckBox) {
      if (this.dataType === 1) {
        var mapper = this.fields;
        var resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]().where(mapper.isChecked, 'equal', true, false));

        for (var i = 0; i < resultData.length; i++) {
          var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;
          var resultPId = resultData[i][this.fields.parentID] ? resultData[i][this.fields.parentID].toString() : null;

          if (this.checkedNodes.indexOf(resultId) === -1 && !this.isLoaded) {
            this.checkedNodes.push(resultId);
          }

          if (resultData[i][this.fields.hasChildren]) {
            var id_1 = resultData[i][this.fields.id];
            var childData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]().where(mapper.parentID, 'equal', id_1, false));

            for (var child = 0; child < childData.length; child++) {
              var childId = childData[child][this.fields.id] ? childData[child][this.fields.id].toString() : null;

              if (this.checkedNodes.indexOf(childId) === -1 && this.autoCheck) {
                this.checkedNodes.push(childId);
              }
            }
          }
        }

        for (var i = 0; i < this.checkedNodes.length; i++) {
          var mapper_1 = this.fields;
          var checkState = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]().where(mapper_1.id, 'equal', this.checkedNodes[i], true));

          if (checkState[0] && this.autoCheck) {
            this.getCheckedNodeDetails(mapper_1, checkState);
            this.checkIndeterminateState(checkState[0]);
          }

          if (checkState.length > 0) {
            var checkedId = checkState[0][this.fields.id] ? checkState[0][this.fields.id].toString() : null;

            if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {
              this.validNodes.push(checkedId);
            }
          }

          var checkedData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]().where(mapper_1.parentID, 'equal', this.checkedNodes[i], true));

          for (var index = 0; index < checkedData.length; index++) {
            var checkedId = checkedData[index][this.fields.id] ? checkedData[index][this.fields.id].toString() : null;

            if (this.checkedNodes.indexOf(checkedId) === -1 && this.autoCheck) {
              this.checkedNodes.push(checkedId);
            }

            if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {
              this.validNodes.push(checkedId);
            }
          }
        }
      } else if (this.dataType === 2 || this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] && this.isOffline) {
        for (var index = 0; index < this.treeData.length; index++) {
          var fieldId = this.treeData[index][this.fields.id] ? this.treeData[index][this.fields.id].toString() : '';

          if (this.treeData[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(fieldId) === -1) {
            this.checkedNodes.push(fieldId);
          }

          if (this.checkedNodes.indexOf(fieldId) > -1 && this.validNodes.indexOf(fieldId) === -1) {
            this.validNodes.push(fieldId);
          }

          var childItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), this.treeData[index]);

          if (childItems) {
            this.updateChildCheckState(childItems, this.treeData[index]);
          }
        }

        this.validNodes = this.enablePersistence ? this.checkedNodes : this.validNodes;
      }

      this.setProperties({
        checkedNodes: this.validNodes
      }, true);
    }
  };
  /**
   * To check whether the list data has sub child and to change the parent check state accordingly
   */


  TreeView.prototype.getCheckedNodeDetails = function (mapper, checkNodes) {
    var id = checkNodes[0][this.fields.parentID] ? checkNodes[0][this.fields.parentID].toString() : null;
    var count = 0;
    var element = this.element.querySelector('[data-uid="' + checkNodes[0][this.fields.id] + '"]');
    var parentEle = this.element.querySelector('[data-uid="' + checkNodes[0][this.fields.parentID] + '"]');

    if (!element && !parentEle) {
      var len = this.parentNodeCheck.length;

      if (this.parentNodeCheck.indexOf(id) === -1) {
        this.parentNodeCheck.push(id);
      }

      var childNodes = this.getChildNodes(this.treeData, id);

      for (var i = 0; i < childNodes.length; i++) {
        var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;

        if (this.checkedNodes.indexOf(childId) !== -1) {
          count++;
        }

        if (count === childNodes.length && this.checkedNodes.indexOf(id) === -1) {
          this.checkedNodes.push(id);
        }
      }

      var preElement = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]().where(mapper.id, 'equal', id, true));
      this.getCheckedNodeDetails(mapper, preElement);
    } else if (parentEle) {
      var check = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECK, parentEle);

      if (!check) {
        this.changeState(parentEle, 'indeterminate', null, true, true);
      }
    }
  };
  /**
   * Update the checkedNodes and parent state when all the child Nodes are in checkedstate at initial rendering
   */


  TreeView.prototype.updateParentCheckState = function () {
    var indeterminate = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + INDETERMINATE, this.element);
    var childCheckedElement;

    for (var i = 0; i < indeterminate.length; i++) {
      var node = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(indeterminate[i], '.' + LISTITEM);
      var nodeId = node.getAttribute('data-uid').toString();

      if (this.dataType === 1) {
        childCheckedElement = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]().where(this.fields.parentID, 'equal', nodeId, true));
      } else {
        childCheckedElement = this.getChildNodes(this.treeData, nodeId);
      }

      var count = 0;

      if (childCheckedElement) {
        for (var j = 0; j < childCheckedElement.length; j++) {
          var childId = childCheckedElement[j][this.fields.id].toString();

          if (this.checkedNodes.indexOf(childId) !== -1) {
            count++;
          }
        }

        if (count === childCheckedElement.length) {
          var nodeCheck = node.getAttribute('data-uid');

          if (this.checkedNodes.indexOf(nodeCheck) === -1) {
            this.checkedNodes.push(nodeCheck);
          }

          this.changeState(node, 'check', null, true, true);
        } else if (count === 0 && this.checkedNodes.length === 0) {
          this.changeState(node, 'uncheck', null, true, true);
        }
      }
    }
  };
  /**
   * Change the parent to indeterminate state whenever the child is in checked state which is not rendered in DOM
   */


  TreeView.prototype.checkIndeterminateState = function (data) {
    var element;

    if (this.dataType === 1) {
      element = this.element.querySelector('[data-uid="' + data[this.fields.parentID] + '"]');
    } else {
      element = this.element.querySelector('[data-uid="' + data[this.fields.id] + '"]');
    }

    if (element) {
      var ariaChecked = element.querySelector('.' + CHECKBOXWRAP).getAttribute('aria-checked');

      if (ariaChecked !== 'true') {
        this.changeState(element, 'indeterminate', null, true, true);
      }
    } else if (this.dataType === 2) {
      var len = this.parentNodeCheck.length;

      if (this.parentNodeCheck.indexOf(data[this.fields.id].toString()) === -1) {
        this.parentNodeCheck.push(data[this.fields.id].toString());
      }
    }
  };
  /**
   * Update the checkedNodes for child and subchild from datasource (hierarchical datasource) at initial rendering
   */


  TreeView.prototype.updateChildCheckState = function (childItems, treeData) {
    var count = 0;
    var checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';

    for (var index = 0; index < childItems.length; index++) {
      var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';

      if (childItems[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(checkedChild) === -1) {
        this.checkedNodes.push(checkedChild);
      }

      if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && this.autoCheck) {
        this.checkedNodes.push(checkedChild);
      }

      if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {
        count++;
      }

      if (this.checkedNodes.indexOf(checkedChild) > -1 && this.validNodes.indexOf(checkedChild) === -1) {
        this.validNodes.push(checkedChild);
      }

      var subChildItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), childItems[index]);

      if (subChildItems && subChildItems.length) {
        if (this.parentCheckData.indexOf(treeData) === -1) this.parentCheckData.push(treeData);
        this.updateChildCheckState(subChildItems, childItems[index]);
      }

      if (count === childItems.length && this.autoCheck && this.checkedNodes.indexOf(checkedParent) === -1) {
        this.checkedNodes.push(checkedParent);
      }
    }

    if (count !== 0 && this.autoCheck) {
      this.checkIndeterminateState(treeData);

      for (var len = 0; len < this.parentCheckData.length; len++) {
        if (treeData !== this.parentCheckData[len] && this.parentCheckData[len]) {
          this.checkIndeterminateState(this.parentCheckData[len]);
        }
      }
    }

    this.parentCheckData = [];
  };

  TreeView.prototype.beforeNodeCreate = function (e) {
    if (this.showCheckBox) {
      var checkboxEle = Object(_syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_3__["createCheckBox"])(this.createElement, true, {
        cssClass: this.touchClass
      });
      checkboxEle.setAttribute('role', 'checkbox');
      checkboxEle.setAttribute('aria-label', 'checkbox');
      var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, e.item);
      var id = e.item.getAttribute('data-uid');
      e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(icon) ? 0 : 1]);
      var checkValue = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(e.fields.isChecked, e.curData);

      if (this.checkedNodes.indexOf(id) > -1) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);
        checkboxEle.setAttribute('aria-checked', 'true');
        this.addCheck(e.item);
      } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(checkValue) && checkValue.toString() === 'true') {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);
        checkboxEle.setAttribute('aria-checked', 'true');
        this.addCheck(e.item);
      } else {
        checkboxEle.setAttribute('aria-checked', 'false');
      }

      var frame = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECKBOXFRAME, checkboxEle);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(frame, 'mousedown', this.frameMouseHandler, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(frame, 'mouseup', this.frameMouseHandler, this);
    }

    if (this.fullRowSelect) {
      this.createFullRow(e.item);
    }

    if (this.allowMultiSelection && !e.item.classList.contains(SELECTED)) {
      e.item.setAttribute('aria-selected', 'false');
    }

    var fields = e.fields;
    this.addActionClass(e, fields.selected, SELECTED);
    this.addActionClass(e, fields.expanded, EXPANDED);
    e.item.setAttribute("tabindex", "-1");
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(e.item, 'focus', this.focusIn, this);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.nodeTemplateFn)) {
      var textEle = e.item.querySelector('.' + LISTTEXT);
      var dataId = e.item.getAttribute('data-uid');
      textEle.innerHTML = '';
      this.renderNodeTemplate(e.curData, textEle, dataId);
    }

    var eventArgs = {
      node: e.item,
      nodeData: e.curData,
      text: e.text
    };

    if (!this.isRefreshed) {
      this.trigger('drawNode', eventArgs);

      if (e.curData[this.fields.selectable] === false && !this.showCheckBox) {
        e.item.classList.add(PREVENTSELECT);
        e.item.firstElementChild.setAttribute('style', 'cursor: not-allowed');
      }
    }
  };

  TreeView.prototype.frameMouseHandler = function (e) {
    var rippleSpan = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECKBOXRIPPLE, e.target.parentElement);
    Object(_syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_3__["rippleMouseHandler"])(e, rippleSpan);
  };

  TreeView.prototype.addActionClass = function (e, action, cssClass) {
    var data = e.curData;
    var actionValue = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(action, data);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(actionValue) && actionValue.toString() !== 'false') {
      e.item.classList.add(cssClass);
    }
  };

  TreeView.prototype.getDataType = function (ds, mapper) {
    if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) {
      for (var i = 0; i < ds.length; i++) {
        if (this.isOffline) {
          if (typeof mapper.child === 'string' && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, ds[i])) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.parentID, ds[i]))) {
            return 1;
          }
        } else if (typeof mapper.child === 'string' && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, ds[i]))) {
          return 1;
        }
      }

      return 2;
    }

    for (var i = 0, len = ds.length; i < len; i++) {
      if (typeof mapper.child === 'string' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, ds[i]))) {
        return 2;
      }

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.parentID, ds[i])) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.hasChildren, ds[i]))) {
        return 1;
      }
    }

    return 1;
  };

  TreeView.prototype.getGroupedData = function (dataSource, groupBy) {
    var cusQuery = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]().group(groupBy);
    var ds = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].getDataSource(dataSource, cusQuery);
    var grpItem = [];

    for (var j = 0; j < ds.length; j++) {
      var itemObj = ds[j].items;
      grpItem.push(itemObj);
    }

    return grpItem;
  };

  TreeView.prototype.getSortedData = function (list) {
    if (list && this.sortOrder !== 'None') {
      list = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].getDataSource(list, _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].addSorting(this.sortOrder, this.fields.text));
    }

    return list;
  };

  TreeView.prototype.finalizeNode = function (element) {
    var _this = this;

    var iNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + IMAGE, element);

    for (var k = 0; k < iNodes.length; k++) {
      iNodes[k].setAttribute('alt', IMAGE);
    }

    if (this.isLoaded) {
      var sNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + SELECTED, element);

      for (var i = 0; i < sNodes.length; i++) {
        this.selectNode(sNodes[i], null);
        break;
      }

      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(sNodes, SELECTED);
    }

    var cNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + LISTITEM + ':not(.' + EXPANDED + ')', element);

    for (var j = 0; j < cNodes.length; j++) {
      var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, cNodes[j]);

      if (icon && icon.classList.contains(EXPANDABLE)) {
        this.disableExpandAttr(cNodes[j]);
      }
    }

    var eNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + EXPANDED, element);

    if (!this.loadOnDemand && this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) {
      this.isInitalExpand = this.treeData.filter(function (e) {
        return e[_this.fields.expanded] == true;
      }).length > 0 ? true : this.isInitalExpand;
    }

    if (!this.isInitalExpand) {
      for (var i = 0; i < eNodes.length; i++) {
        this.renderChildNodes(eNodes[i]);
      }
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(eNodes, EXPANDED);
    this.updateList();

    if (this.isLoaded) {
      this.updateCheckedProp();
    }
  };

  TreeView.prototype.updateCheckedProp = function () {
    if (this.showCheckBox) {
      var nodes = [].concat([], this.checkedNodes);
      this.setProperties({
        checkedNodes: nodes
      }, true);
    }
  };

  TreeView.prototype.ensureIndeterminate = function () {
    if (this.autoCheck) {
      var liElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('li', this.element);
      var ulElement = void 0;

      for (var i = 0; i < liElement.length; i++) {
        if (liElement[i].classList.contains(LISTITEM)) {
          ulElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, liElement[i]);

          if (ulElement) {
            this.ensureParentCheckState(liElement[i]);
          } else {
            this.ensureChildCheckState(liElement[i]);
          }
        }
      }
    } else {
      var indeterminate = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + INDETERMINATE, this.element);

      for (var i = 0; i < indeterminate.length; i++) {
        indeterminate[i].classList.remove(INDETERMINATE);
      }
    }
  };

  TreeView.prototype.ensureParentCheckState = function (element) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element)) {
      if (element.classList.contains(ROOT)) {
        return;
      }

      var ulElement = element;

      if (element.classList.contains(LISTITEM)) {
        ulElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, element);
      }

      var checkedNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CHECK, ulElement);
      var indeterminateNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + INDETERMINATE, ulElement);
      var nodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + LISTITEM, ulElement);
      var checkBoxEle = element.getElementsByClassName(CHECKBOXWRAP)[0];

      if (nodes.length === checkedNodes.length) {
        this.changeState(checkBoxEle, 'check', null, true, true);
      } else if (checkedNodes.length > 0 || indeterminateNodes.length > 0) {
        this.changeState(checkBoxEle, 'indeterminate', null, true, true);
      } else if (checkedNodes.length === 0) {
        this.changeState(checkBoxEle, 'uncheck', null, true, true);
      }

      var parentUL = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(element, '.' + PARENTITEM);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(parentUL)) {
        var currentParent = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(parentUL, '.' + LISTITEM);
        this.ensureParentCheckState(currentParent);
      }
    }
  };

  TreeView.prototype.ensureChildCheckState = function (element, e) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element)) {
      var childElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, element);
      var checkBoxes = void 0;

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(childElement)) {
        checkBoxes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CHECKBOXWRAP, childElement);
        var isChecked = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);
        var parentCheck = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(INDETERMINATE);
        var childCheck = childElement.querySelectorAll('li');
        var expandState = childElement.parentElement.getAttribute('aria-expanded');
        var checkedState = void 0;

        for (var index = 0; index < checkBoxes.length; index++) {
          var childId = childCheck[index].getAttribute('data-uid');

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.currentLoadData) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.isChecked, this.currentLoadData[index]))) {
            checkedState = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.isChecked, this.currentLoadData[index]) ? 'check' : 'uncheck';

            if (this.ele !== -1) {
              checkedState = isChecked ? 'check' : 'uncheck';
            }

            if (checkedState === 'uncheck' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(this.parentNodeCheck) && this.autoCheck && this.parentNodeCheck.indexOf(childId) !== -1) {
              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);
              checkedState = 'indeterminate';
            }
          } else {
            var isNodeChecked = checkBoxes[index].getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);

            if (isChecked) {
              checkedState = 'check';
            } else if (isNodeChecked && !this.isLoaded) {
              checkedState = 'check';
            } else if (this.checkedNodes.indexOf(childId) !== -1 && this.isLoaded && (parentCheck || isChecked)) {
              checkedState = 'check';
            } else if (childCheck[index].classList.contains(CHILD) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {
              checkedState = 'indeterminate';
              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);
            } else if (this.dataType === 1 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {
              checkedState = 'indeterminate';
              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);
            } else {
              checkedState = 'uncheck';
            }
          }

          this.changeState(checkBoxes[index], checkedState, e, true, true);
        }
      }

      if (this.autoCheck && this.isLoaded) {
        this.updateParentCheckState();
      }
    }
  };

  TreeView.prototype.doCheckBoxAction = function (nodes, doCheck) {
    var li = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + LISTITEM, this.element);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nodes)) {
      for (var len = nodes.length; len >= 0; len--) {
        var liEle = void 0;

        if (nodes.length === 1) {
          liEle = this.getElement(nodes[len - 1]);
        } else {
          liEle = this.getElement(nodes[len]);
        }

        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liEle)) {
          var node = void 0;
          node = nodes[len - nodes.length] ? nodes[len - nodes.length].toString() : nodes[len] ? nodes[len].toString() : null;

          if (node !== '' && doCheck && node) {
            this.setValidCheckedNode(node);
            this.dynamicCheckState(node, doCheck);
          } else if (this.checkedNodes.indexOf(node) !== -1 && node !== '' && !doCheck) {
            this.checkedNodes.splice(this.checkedNodes.indexOf(node), 1);
            var childItems = this.getChildNodes(this.treeData, node);

            if (childItems) {
              for (var i = 0; i < childItems.length; i++) {
                var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;

                if (this.checkedNodes.indexOf(id) !== -1) {
                  this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);
                  var ele = this.element.querySelector('[data-uid="' + id + '"]');

                  if (ele) {
                    this.changeState(ele, 'uncheck', null);
                  }
                }
              }

              if (this.parentNodeCheck.indexOf(node) !== -1) {
                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(node), 1);
              }
            }

            if (node) {
              this.dynamicCheckState(node, doCheck);
            }

            this.updateField(this.treeData, this.fields, node, 'isChecked', null);
          }

          continue;
        }

        var checkBox = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM + ' .' + CHECKBOXWRAP, liEle);
        this.validateCheckNode(checkBox, !doCheck, liEle, null);
      }
    } else {
      var checkBoxes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CHECKBOXWRAP, this.element);

      if (this.loadOnDemand) {
        for (var index = 0; index < checkBoxes.length; index++) {
          this.updateFieldChecked(checkBoxes[index], doCheck);
          this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck', null, null, null, doCheck);
        }
      } else {
        for (var index = 0; index < checkBoxes.length; index++) {
          this.updateFieldChecked(checkBoxes[index], doCheck);
          this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck');
        }
      }
    }

    if (nodes) {
      for (var j = 0; j < nodes.length; j++) {
        var node = nodes[j] ? nodes[j].toString() : '';

        if (!doCheck) {
          this.updateField(this.treeData, this.fields, node, 'isChecked', null);
        }
      }
    }

    if (this.autoCheck) {
      this.updateParentCheckState();
    }
  };

  TreeView.prototype.updateFieldChecked = function (checkbox, doCheck) {
    var currLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(checkbox, '.' + LISTITEM);
    var id = currLi.getAttribute('data-uid');
    var nodeDetails = this.getNodeData(currLi);

    if (nodeDetails.isChecked === 'true' && !doCheck) {
      this.updateField(this.treeData, this.fields, id, 'isChecked', null);
    }
  };
  /**
   * Changes the parent and child  check state while changing the checkedNodes via setmodel
   */


  TreeView.prototype.dynamicCheckState = function (node, doCheck) {
    if (this.dataType === 1) {
      var count = 0;
      var resultId = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]().where(this.fields.id, 'equal', node, true));

      if (resultId[0]) {
        var id = resultId[0][this.fields.id] ? resultId[0][this.fields.id].toString() : null;
        var parent_1 = resultId[0][this.fields.parentID] ? resultId[0][this.fields.parentID].toString() : null;
        var parentElement = this.element.querySelector('[data-uid="' + parent_1 + '"]');
        var indeterminate = parentElement ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + INDETERMINATE, parentElement) : null;
        var check = parentElement ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECK, parentElement) : null;
        var element = this.element.querySelector('[data-uid="' + id + '"]');
        var childNodes = this.getChildNodes(this.treeData, parent_1);

        if (childNodes) {
          for (var i = 0; i < childNodes.length; i++) {
            var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;

            if (this.checkedNodes.indexOf(childId) !== -1) {
              count++;
            }
          }
        }

        if (this.checkedNodes.indexOf(node) !== -1 && parentElement && id === node && this.autoCheck) {
          this.changeState(parentElement, 'indeterminate', null);
        } else if (this.checkedNodes.indexOf(node) === -1 && element && id === node && !doCheck) {
          this.changeState(element, 'uncheck', null);
        } else if (this.checkedNodes.indexOf(node) !== -1 && element && id === node && doCheck) {
          this.changeState(element, 'check', null);
        } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count !== 0) {
          this.changeState(parentElement, 'indeterminate', null);
        } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count === 0) {
          this.changeState(parentElement, 'uncheck', null);
        } else if (!element && !parentElement && id === node && this.autoCheck) {
          this.updateIndeterminate(node, doCheck);
        }
      }
    } else if (this.dataType === 2 || this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] && this.isOffline) {
      var id = void 0;
      var parentElement = void 0;
      var check = void 0;

      for (var i = 0; i < this.treeData.length; i++) {
        id = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : '';
        parentElement = this.element.querySelector('[data-uid="' + id + '"]');
        check = parentElement ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECK, parentElement) : null;

        if (this.checkedNodes.indexOf(id) === -1 && parentElement && check && !doCheck) {
          this.changeState(parentElement, 'uncheck', null);
        }

        var subChild = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), this.treeData[i]);

        if (subChild) {
          this.updateChildIndeterminate(subChild, id, node, doCheck, id);
        }
      }
    }
  };
  /**
   * updates the parent and child  check state while changing the checkedNodes via setmodel for listData
   */


  TreeView.prototype.updateIndeterminate = function (node, doCheck) {
    var indeterminateData = this.getTreeData(node);
    var count = 0;
    var parent;

    if (this.dataType === 1) {
      parent = indeterminateData[0][this.fields.parentID] ? indeterminateData[0][this.fields.parentID].toString() : null;
    }

    var childNodes = this.getChildNodes(this.treeData, parent);

    if (childNodes) {
      for (var i = 0; i < childNodes.length; i++) {
        var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;

        if (this.checkedNodes.indexOf(childId) !== -1) {
          count++;
        }
      }
    }

    var parentElement = this.element.querySelector('[data-uid="' + parent + '"]');

    if (parentElement && doCheck) {
      this.changeState(parentElement, 'indeterminate', null);
    } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {
      this.changeState(parentElement, 'indeterminate', null);
    } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count === 0) {
      this.changeState(parentElement, 'uncheck', null);
    } else if (!parentElement) {
      if (!doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) !== -1) {
        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent), 1);
      } else if (doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) === -1) {
        this.parentNodeCheck.push(parent);
      } else if (!doCheck && this.checkedNodes.indexOf(parent) !== -1 && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {
        this.parentNodeCheck.push(parent);
      }

      this.updateIndeterminate(parent, doCheck);

      if (this.checkedNodes.indexOf(parent) !== -1 && !doCheck) {
        this.checkedNodes.splice(this.checkedNodes.indexOf(parent), 1);
      }
    }
  };
  /**
   * updates the parent and child  check state while changing the checkedNodes via setmodel for hierarchical data
   */


  TreeView.prototype.updateChildIndeterminate = function (subChild, parent, node, doCheck, child) {
    var count = 0;

    for (var j = 0; j < subChild.length; j++) {
      var subId = subChild[j][this.fields.id] ? subChild[j][this.fields.id].toString() : '';

      if (this.checkedNodes.indexOf(subId) !== -1) {
        count++;
      }

      var parentElement = this.element.querySelector('[data-uid="' + parent + '"]');
      var indeterminate = parentElement ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + INDETERMINATE, parentElement) : null;
      var check = parentElement ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECK, parentElement) : null;
      var element = this.element.querySelector('[data-uid="' + subId + '"]');
      var childElementCheck = element ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECK, element) : null;

      if (this.checkedNodes.indexOf(node) !== -1 && parentElement && subId === node && this.autoCheck) {
        this.changeState(parentElement, 'indeterminate', null);
      } else if (this.checkedNodes.indexOf(node) === -1 && parentElement && !element && subId === node && !doCheck) {
        if (this.autoCheck) {
          this.changeState(parentElement, 'uncheck', null);
        } else {
          if (count !== 0) {
            this.changeState(parentElement, 'indeterminate', null);
          } else {
            this.changeState(parentElement, 'uncheck', null);
          }
        }
      } else if (this.checkedNodes.indexOf(node) === -1 && element && subId === node && !doCheck) {
        this.changeState(element, 'uncheck', null);
      } else if (this.checkedNodes.indexOf(node) === -1 && indeterminate && subId === node && this.autoCheck && count === 0 && !doCheck) {
        indeterminate.classList.remove(INDETERMINATE);
      } else if (this.checkedNodes.indexOf(node) === -1 && !element && check && subId === node && count === 0) {
        this.changeState(parentElement, 'uncheck', null);
      } else if (this.checkedNodes.indexOf(subId) === -1 && element && childElementCheck && count === 0) {
        this.changeState(element, 'uncheck', null);
      } else if (!element && !parentElement && subId === node || this.parentNodeCheck.indexOf(parent) !== -1 && this.autoCheck) {
        var childElement = this.element.querySelector('[data-uid="' + child + '"]');

        if (doCheck && count !== 0) {
          this.changeState(childElement, 'indeterminate', null);
        } else if (doCheck && count === subChild.length && this.checkedNodes.indexOf(parent) === -1) {
          this.checkedNodes.push(parent);
        } else if (!doCheck && count === 0 && this.parentNodeCheck.indexOf(parent) !== -1) {
          this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent));
        }

        if (this.parentNodeCheck.indexOf(parent) === -1) {
          this.parentNodeCheck.push(parent);
        }
      }

      var innerChild = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), subChild[j]);

      if (innerChild) {
        this.updateChildIndeterminate(innerChild, subId, node, doCheck, child);
      }
    }
  };

  TreeView.prototype.changeState = function (wrapper, state, e, isPrevent, isAdd, doCheck) {
    var _this = this;

    var eventArgs;
    var currLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(wrapper, '.' + LISTITEM);

    if (wrapper === currLi) {
      wrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECKBOXWRAP, currLi);
    }

    if (!isPrevent) {
      this.checkActionNodes = [];
      eventArgs = this.getCheckEvent(currLi, state, e);
      this.trigger('nodeChecking', eventArgs, function (observedArgs) {
        if (!observedArgs.cancel) {
          _this.nodeCheckAction(wrapper, state, currLi, observedArgs, e, isPrevent, isAdd, doCheck);
        }
      });
    } else {
      this.nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck);
    }
  };

  TreeView.prototype.nodeCheckAction = function (wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck) {
    var ariaState;
    var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];

    if (state === 'check' && !frameSpan.classList.contains(CHECK)) {
      frameSpan.classList.remove(INDETERMINATE);
      frameSpan.classList.add(CHECK);
      this.addCheck(currLi);
      ariaState = 'true';
    } else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([frameSpan], [CHECK, INDETERMINATE]);
      this.removeCheck(currLi);
      ariaState = 'false';
    } else if (state === 'indeterminate' && this.autoCheck) {
      frameSpan.classList.remove(CHECK);
      frameSpan.classList.add(INDETERMINATE);
      this.removeCheck(currLi);
      ariaState = 'mixed';
    }

    ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ariaState)) {
      wrapper.setAttribute('aria-checked', ariaState);
    }

    if (isAdd) {
      var data = [].concat([], this.checkActionNodes);
      eventArgs = this.getCheckEvent(currLi, state, e);

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(isPrevent)) {
        eventArgs.data = data;
      }
    }

    if (doCheck !== undefined) {
      this.ensureStateChange(currLi, doCheck);
    }

    if (!isPrevent) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ariaState)) {
        wrapper.setAttribute('aria-checked', ariaState);
        eventArgs.data[0].checked = ariaState;
        this.trigger('nodeChecked', eventArgs);
        this.checkActionNodes = [];
      }
    }
  };

  TreeView.prototype.addCheck = function (liEle) {
    var id = liEle.getAttribute('data-uid');

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(id) && this.checkedNodes.indexOf(id) === -1) {
      this.checkedNodes.push(id);
    }
  };

  TreeView.prototype.removeCheck = function (liEle) {
    var index = this.checkedNodes.indexOf(liEle.getAttribute('data-uid'));

    if (index > -1) {
      this.checkedNodes.splice(index, 1);
    }
  };

  TreeView.prototype.getCheckEvent = function (currLi, action, e) {
    this.checkActionNodes.push(this.getNodeData(currLi));
    var nodeData = this.checkActionNodes;
    return {
      action: action,
      cancel: false,
      isInteracted: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e) ? false : true,
      node: currLi,
      data: nodeData
    };
  };

  TreeView.prototype.finalize = function () {
    var firstUl = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, this.element);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(firstUl)) {
      firstUl.setAttribute('role', treeAriaAttr.treeRole);
      this.setMultiSelect(this.allowMultiSelection);
      var firstNode = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + LISTITEM, this.element);

      if (firstNode) {
        firstNode.setAttribute('tabindex', '0');
        this.updateIdAttr(null, firstNode);
      }

      if (this.allowTextWrap) {
        this.updateWrap();
      }

      this.renderReactTemplates();
      this.hasPid = this.rootData[0] ? this.rootData[0].hasOwnProperty(this.fields.parentID) : false;
      this.doExpandAction();
    }
  };

  TreeView.prototype.setTextWrap = function () {
    (this.allowTextWrap ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"] : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], LISTWRAP);

    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIE) {
      (this.allowTextWrap ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"] : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], IELISTWRAP);
    }
  };

  TreeView.prototype.updateWrap = function (ulEle) {
    if (!this.fullRowSelect) {
      return;
    }

    var liEle = ulEle ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + LISTITEM, ulEle) : this.liList;
    var length = liEle.length;

    for (var i = 0; i < length; i++) {
      this.calculateWrap(liEle[i]);
    }
  };

  TreeView.prototype.calculateWrap = function (liEle) {
    var element = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + FULLROW, liEle);

    if (element && element.nextElementSibling) {
      element.style.height = this.allowTextWrap ? element.nextElementSibling.offsetHeight + 'px' : '';
    }
  };

  TreeView.prototype.doExpandAction = function () {
    var _this = this;

    var eUids = this.expandedNodes;

    if (!this.loadOnDemand && this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) {
      this.isInitalExpand = this.treeData.filter(function (e) {
        return e[_this.fields.expanded] == true;
      }).length > 0 ? true : this.isInitalExpand;
    }

    if (this.isInitalExpand && eUids.length > 0) {
      this.setProperties({
        expandedNodes: []
      }, true);
      /* eslint-disable */

      if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) {
        this.expandGivenNodes(eUids);
      } else {
        for (var i = 0; i < eUids.length; i++) {
          var eNode = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('[data-uid="' + eUids[i] + '"]', this.element);

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(eNode)) {
            var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + EXPANDABLE, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TEXTWRAP, eNode));

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(icon)) {
              this.expandAction(eNode, icon, null);
            }
          } else {
            if (eUids[i] && this.expandChildren.indexOf(eUids[i]) === -1) {
              this.expandChildren.push(eUids[i].toString());
            }

            continue;
          }
        }

        this.afterFinalized();
      }
    } else {
      this.afterFinalized();
    }
  };

  TreeView.prototype.expandGivenNodes = function (arr) {
    var proxy = this;
    this.expandCallback(arr[this.index], function () {
      proxy.index++;

      if (proxy.index < arr.length) {
        proxy.expandGivenNodes(arr);
      } else {
        proxy.afterFinalized();
      }
    });
  };

  TreeView.prototype.expandCallback = function (eUid, callback) {
    var eNode = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('[data-uid="' + eUid + '"]', this.element);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(eNode)) {
      var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + EXPANDABLE, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TEXTWRAP, eNode));

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(icon)) {
        this.expandAction(eNode, icon, null, false, callback);
      } else {
        callback();
      }
    } else {
      callback();
    }
  };

  TreeView.prototype.afterFinalized = function () {
    this.doSelectionAction();
    this.updateCheckedProp();
    this.isAnimate = true;
    this.isInitalExpand = false;

    if ((!this.isLoaded || this.isFieldChange) && !this.isNodeDropped) {
      var eventArgs = {
        data: this.treeData
      };
      this.trigger('dataBound', eventArgs);
    }

    this.isLoaded = true;
    this.isNodeDropped = false;
  };

  TreeView.prototype.doSelectionAction = function () {
    var sNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + SELECTED, this.element);
    var sUids = this.selectedNodes;

    if (sUids.length > 0) {
      this.setProperties({
        selectedNodes: []
      }, true);

      for (var i = 0; i < sUids.length; i++) {
        var sNode = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('[data-uid="' + sUids[i] + '"]', this.element);

        if (sNode && !sNode.classList.contains('e-active')) {
          this.selectNode(sNode, null, true);
        } else {
          this.selectedNodes.push(sUids[i]);
        }

        if (!this.allowMultiSelection) {
          break;
        }
      }
    } else {
      this.selectGivenNodes(sNodes);
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(sNodes, SELECTED);
  };

  TreeView.prototype.selectGivenNodes = function (sNodes) {
    for (var i = 0; i < sNodes.length; i++) {
      if (!sNodes[i].classList.contains('e-disable')) {
        this.selectNode(sNodes[i], null, true);
      }

      if (!this.allowMultiSelection) {
        break;
      }
    }
  };

  TreeView.prototype.clickHandler = function (event) {
    var target = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIos ? document.elementFromPoint(event.originalEvent.changedTouches[0].clientX, event.originalEvent.changedTouches[0].clientY) : event.originalEvent.target;
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'contextmenu', this.preventContextMenu);

    if (!target || this.dragStartAction) {
      return;
    } else {
      var classList = target.classList;
      var li = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + LISTITEM);

      if (!li || li.classList.contains(PREVENTSELECT) && !(classList.contains(EXPANDABLE) || classList.contains(COLLAPSIBLE))) {
        return;
      } else if (event.originalEvent.which !== 3) {
        var rippleElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + RIPPLEELMENT, li);
        var rippleIcons = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + ICON, li);
        this.removeHover();
        this.setFocusElement(li);

        if (this.showCheckBox && !li.classList.contains('e-disable')) {
          var checkWrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + CHECKBOXWRAP);

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(checkWrapper)) {
            var checkElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECKBOXFRAME, checkWrapper);
            this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK), li, event.originalEvent);
            this.triggerClickEvent(event.originalEvent, li);
            return;
          }
        }

        if (classList.contains(EXPANDABLE)) {
          this.expandAction(li, target, event);
        } else if (classList.contains(COLLAPSIBLE)) {
          this.collapseNode(li, target, event);
        } else if (rippleElement && rippleIcons) {
          if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(EXPANDABLE)) {
            this.expandAction(li, rippleIcons, event);
          } else if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(COLLAPSIBLE)) {
            this.collapseNode(li, rippleIcons, event);
          } else if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {
            this.toggleSelect(li, event.originalEvent, false);
          }
        } else {
          if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {
            this.toggleSelect(li, event.originalEvent, false);
          }
        }
      }

      if (event.originalEvent.which === 3) {
        this.isRightClick = true;
      }

      this.triggerClickEvent(event.originalEvent, li);
    }
  };

  TreeView.prototype.nodeCheckedEvent = function (wrapper, isCheck, e) {
    var currLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(wrapper, '.' + LISTITEM);
    var eventArgs = this.getCheckEvent(wrapper, isCheck ? 'uncheck' : 'check', e);
    eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);
    this.trigger('nodeChecked', eventArgs);
  };

  TreeView.prototype.triggerClickEvent = function (e, li) {
    var eventArgs = {
      event: e,
      node: li
    };
    this.trigger('nodeClicked', eventArgs);
  };

  TreeView.prototype.expandNode = function (currLi, icon, loaded) {
    var _this = this;

    this.renderReactTemplates();

    if (icon.classList.contains(LOAD)) {
      this.hideSpinner(icon);
    }

    if (!this.initialRender) {
      icon.classList.add('interaction');
    }

    if (loaded !== true || loaded === true && currLi.classList.contains('e-expanded')) {
      if (this.preventExpand !== true) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([icon], EXPANDABLE);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], COLLAPSIBLE);
        var start_1 = 0;
        var end_1 = 0;
        var proxy_1 = this;
        var ul_1 = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, currLi);
        var liEle_1 = currLi;
        this.setHeight(liEle_1, ul_1);
        var activeElement_1 = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + LISTITEM + '.' + ACTIVE, currLi);

        if (this.isAnimate && !this.isRefreshed) {
          this.aniObj.animate(ul_1, {
            name: this.animation.expand.effect,
            duration: this.animation.expand.duration === 0 && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["animationMode"] === 'Enable' ? 400 : this.animation.expand.duration,
            timingFunction: this.animation.expand.easing,
            begin: function (args) {
              liEle_1.style.overflow = 'hidden';

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(activeElement_1) && activeElement_1 instanceof HTMLElement) {
                activeElement_1.classList.add(ITEM_ANIMATION_ACTIVE);
              }

              start_1 = liEle_1.offsetHeight;
              end_1 = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TEXTWRAP, currLi).offsetHeight;
            },
            progress: function (args) {
              args.element.style.display = 'block';
              proxy_1.animateHeight(args, start_1, end_1);
            },
            end: function (args) {
              args.element.style.display = 'block';

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(activeElement_1) && activeElement_1 instanceof HTMLElement) {
                activeElement_1.classList.remove(ITEM_ANIMATION_ACTIVE);
              }

              _this.expandedNode(liEle_1, ul_1, icon);
            }
          });
        } else {
          this.expandedNode(liEle_1, ul_1, icon);
        }
      }
    } else {
      var ul = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, currLi);
      ul.style.display = 'none';

      if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] === true) {
        this.preventExpand = false;
      }
    }

    if (this.initialRender) {
      icon.classList.add('interaction');
    }
  };

  TreeView.prototype.expandedNode = function (currLi, ul, icon) {
    ul.style.display = 'block';
    currLi.style.display = 'block';
    currLi.style.overflow = '';
    currLi.style.height = '';
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([icon], PROCESS);
    this.addExpand(currLi);

    if (this.allowTextWrap && this.isLoaded && this.isFirstRender) {
      this.updateWrap(currLi);
      this.isFirstRender = false;
    }

    if (this.isLoaded && this.expandArgs && !this.isRefreshed) {
      this.expandArgs = this.getExpandEvent(currLi, null);
      this.expandArgs.isInteracted = this.isInteracted;
      this.trigger('nodeExpanded', this.expandArgs);
    }
  };

  TreeView.prototype.addExpand = function (liEle) {
    liEle.setAttribute('aria-expanded', 'true');
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([liEle], NODECOLLAPSED);
    var id = liEle.getAttribute('data-uid');

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(id) && this.expandedNodes.indexOf(id) === -1) {
      this.expandedNodes.push(id);
    }
  };

  TreeView.prototype.collapseNode = function (currLi, icon, e) {
    var _this = this;

    if (icon.classList.contains(PROCESS)) {
      return;
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], PROCESS);
    }

    var colArgs;

    if (this.isLoaded) {
      colArgs = this.getExpandEvent(currLi, e);
      this.isInteracted = colArgs.isInteracted;
      this.trigger('nodeCollapsing', colArgs, function (observedArgs) {
        if (observedArgs.cancel) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([icon], PROCESS);
        } else {
          _this.nodeCollapseAction(currLi, icon, observedArgs);
        }
      });
    } else {
      this.nodeCollapseAction(currLi, icon, colArgs);
    }
  };

  TreeView.prototype.nodeCollapseAction = function (currLi, icon, colArgs) {
    var _this = this;

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([icon], COLLAPSIBLE);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], EXPANDABLE);
    var start = 0;
    var end = 0;
    var proxy = this;
    var ul = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, currLi);
    var liEle = currLi;
    var activeElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + LISTITEM + '.' + ACTIVE, currLi);

    if (this.isAnimate) {
      this.aniObj.animate(ul, {
        name: this.animation.collapse.effect,
        duration: this.animation.collapse.duration === 0 && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["animationMode"] === 'Enable' ? 400 : this.animation.collapse.duration,
        timingFunction: this.animation.collapse.easing,
        begin: function (args) {
          liEle.style.overflow = 'hidden';

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(activeElement) && activeElement instanceof HTMLElement) {
            activeElement.classList.add(ITEM_ANIMATION_ACTIVE);
          }

          start = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TEXTWRAP, currLi).offsetHeight;
          end = liEle.offsetHeight;
        },
        progress: function (args) {
          proxy.animateHeight(args, start, end);
        },
        end: function (args) {
          args.element.style.display = 'none';

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(activeElement) && activeElement instanceof HTMLElement) {
            activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);
          }

          _this.collapsedNode(liEle, ul, icon, colArgs);
        }
      });
    } else {
      this.collapsedNode(liEle, ul, icon, colArgs);
    }
  };

  TreeView.prototype.collapsedNode = function (liEle, ul, icon, colArgs) {
    ul.style.display = 'none';
    liEle.style.overflow = '';
    liEle.style.height = '';
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([icon], PROCESS);
    this.removeExpand(liEle);

    if (this.isLoaded) {
      colArgs = this.getExpandEvent(liEle, null);
      colArgs.isInteracted = this.isInteracted;
      this.trigger('nodeCollapsed', colArgs);
    }
  };

  TreeView.prototype.removeExpand = function (liEle, toRemove) {
    if (toRemove) {
      liEle.removeAttribute('aria-expanded');
    } else {
      this.disableExpandAttr(liEle);
    }

    var index = this.expandedNodes.indexOf(liEle.getAttribute('data-uid'));

    if (index > -1) {
      this.expandedNodes.splice(index, 1);
    }
  };

  TreeView.prototype.disableExpandAttr = function (liEle) {
    liEle.setAttribute('aria-expanded', 'false');
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([liEle], NODECOLLAPSED);
  };

  TreeView.prototype.setHeight = function (currLi, ul) {
    ul.style.display = 'block';
    ul.style.visibility = 'hidden';
    currLi.style.height = currLi.offsetHeight + 'px';
    ul.style.display = 'none';
    ul.style.visibility = '';
  };

  TreeView.prototype.animateHeight = function (args, start, end) {
    var remaining = (args.duration - args.timeStamp) / args.duration;
    var currentHeight = (end - start) * remaining + start;
    args.element.parentElement.style.height = currentHeight + 'px';
  };

  TreeView.prototype.renderChildNodes = function (parentLi, expandChild, callback, loaded) {
    var _this = this;

    var eicon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, parentLi);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(eicon)) {
      return;
    }

    this.showSpinner(eicon);
    var childItems;
    /* eslint-disable */

    if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) {
      var level = this.parents(parentLi, '.' + PARENTITEM).length;
      var mapper_2 = this.getChildFields(this.fields, level, 1);

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(mapper_2) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(mapper_2.dataSource)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(eicon);
        this.removeExpand(parentLi, true);
        return;
      }

      this.treeList.push('false');

      if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] && this.isOffline) {
        this.treeList.pop();
        childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));
        this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);
      } else {
        mapper_2.dataSource.executeQuery(this.getQuery(mapper_2, parentLi.getAttribute('data-uid'))).then(function (e) {
          _this.treeList.pop();

          childItems = e.result;

          if (_this.dataType === 1) {
            _this.dataType = 2;
          }

          _this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);
        }).catch(function (e) {
          _this.trigger('actionFailure', {
            error: e
          });
        });
      }
    } else {
      childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));
      this.currentLoadData = this.getSortedData(childItems);

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(childItems) || childItems.length === 0) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(eicon);
        this.removeExpand(parentLi, true);
        return;
      } else {
        this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;
        parentLi.appendChild(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].createList(this.createElement, this.currentLoadData, this.listBaseOption));
        this.expandNode(parentLi, eicon, loaded);
        this.setSelectionForChildNodes(childItems);
        this.ensureCheckNode(parentLi);
        this.finalizeNode(parentLi);
        this.disableTreeNodes(childItems);
        this.renderSubChild(parentLi, expandChild, loaded);
      }
    }
  };

  TreeView.prototype.loadChild = function (childItems, mapper, eicon, parentLi, expandChild, callback, loaded) {
    this.currentLoadData = childItems;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(childItems) || childItems.length === 0) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(eicon);
      this.removeExpand(parentLi, true);
    } else {
      this.updateListProp(mapper);

      if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] && !this.isOffline) {
        var id = parentLi.getAttribute('data-uid');
        var nodeData = this.getNodeObject(id);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('child', childItems, nodeData);
      }

      this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;
      parentLi.appendChild(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].createList(this.createElement, childItems, this.listBaseOption));
      this.expandNode(parentLi, eicon, loaded);
      this.setSelectionForChildNodes(childItems);
      this.ensureCheckNode(parentLi);
      this.finalizeNode(parentLi);
      this.disableTreeNodes(childItems);
      this.renderSubChild(parentLi, expandChild, loaded);
    }

    if (callback) {
      callback();
    }

    if (expandChild) {
      this.expandedNodes.push(parentLi.getAttribute('data-uid'));
    }

    if (this.treeList.length === 0 && !this.isLoaded) {
      this.finalize();
    }
  };

  TreeView.prototype.disableTreeNodes = function (childItems) {
    var i = 0;

    while (i < childItems.length) {
      var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;

      if (this.disableNode !== undefined && this.disableNode.indexOf(id) !== -1) {
        this.doDisableAction([id]);
      }

      i++;
    }
  };
  /**
   * Sets the child Item in selectedState while rendering the child node
   */


  TreeView.prototype.setSelectionForChildNodes = function (nodes) {
    var i;

    for (i = 0; i < nodes.length; i++) {
      var id = nodes[i][this.fields.id] ? nodes[i][this.fields.id].toString() : null;

      if (this.selectedNodes !== undefined && this.selectedNodes.indexOf(id) !== -1) {
        this.doSelectionAction();
      }
    }
  };

  TreeView.prototype.ensureCheckNode = function (element) {
    if (this.showCheckBox) {
      this.ele = this.checkedElement ? this.checkedElement.indexOf(element.getAttribute('data-uid')) : null;

      if (this.autoCheck) {
        this.ensureChildCheckState(element);
        this.ensureParentCheckState(element);
      }
    }

    this.currentLoadData = null;
  };

  TreeView.prototype.getFields = function (mapper, nodeLevel, dataLevel) {
    if (nodeLevel === dataLevel) {
      return mapper;
    } else {
      return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);
    }
  };

  TreeView.prototype.getChildFields = function (mapper, nodeLevel, dataLevel) {
    var childData;

    if (nodeLevel === dataLevel) {
      return this.getChildMapper(mapper);
    } else {
      return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);
    }
  };

  TreeView.prototype.getChildMapper = function (mapper) {
    return typeof mapper.child === 'string' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(mapper.child) ? mapper : mapper.child;
  };

  TreeView.prototype.getChildNodes = function (obj, parentId, isRoot) {
    var _this = this;

    if (isRoot === void 0) {
      isRoot = false;
    }

    var childNodes;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(obj)) {
      return childNodes;
    } else if (this.dataType === 1) {
      return this.getChildGroup(this.groupedData, parentId, isRoot);
    } else {
      if (typeof this.fields.child === 'string') {
        var index = obj.findIndex(function (data) {
          return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(_this.fields.id, data) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(_this.fields.id, data).toString() === parentId;
        });

        if (index !== -1) {
          return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child, obj[index]);
        }

        if (index === -1) {
          for (var i = 0, objlen = obj.length; i < objlen; i++) {
            var tempArray = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child, obj[i]);
            var childIndex = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(tempArray) ? tempArray.findIndex(function (data) {
              return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(_this.fields.id, data) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(_this.fields.id, data).toString() === parentId;
            }) : -1;

            if (childIndex !== -1) {
              return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child, tempArray[childIndex]);
            } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(tempArray)) {
              childNodes = this.getChildNodes(tempArray, parentId);

              if (childNodes !== undefined) {
                break;
              }
            }
          }
        }
      }
    }

    return childNodes;
  };

  TreeView.prototype.getChildGroup = function (data, parentId, isRoot) {
    var childNodes;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data)) {
      return childNodes;
    }

    for (var i = 0, objlen = data.length; i < objlen; i++) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data[i][0]) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.parentID, data[i][0]))) {
        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.parentID, data[i][0]).toString() === parentId) {
          return data[i];
        }
      } else if (isRoot) {
        return data[i];
      } else {
        return [];
      }
    }

    return childNodes;
  };

  TreeView.prototype.renderSubChild = function (element, expandChild, loaded) {
    if (expandChild) {
      var cIcons = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + EXPANDABLE, element);

      for (var i = 0, len = cIcons.length; i < len; i++) {
        var icon = cIcons[i];

        if (element.querySelector('.e-icons') !== cIcons[i]) {
          var curLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(icon, '.' + LISTITEM);
          this.expandArgs = this.getExpandEvent(curLi, null);

          if (loaded !== true) {
            this.trigger('nodeExpanding', this.expandArgs);
          }

          this.renderChildNodes(curLi, expandChild, null, loaded);
        }
      }
    }
  };

  TreeView.prototype.toggleSelect = function (li, e, multiSelect) {
    if (!li.classList.contains('e-disable')) {
      if (this.allowMultiSelection && (e && e.ctrlKey || multiSelect) && this.isActive(li)) {
        this.unselectNode(li, e);
      } else {
        this.selectNode(li, e, multiSelect);
      }
    }
  };

  TreeView.prototype.isActive = function (li) {
    return li.classList.contains(ACTIVE) ? true : false;
  };

  TreeView.prototype.selectNode = function (li, e, multiSelect) {
    var _this = this;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li) || !this.allowMultiSelection && this.isActive(li) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e)) {
      this.setFocusElement(li);
      return;
    }

    var eventArgs;

    if (this.isLoaded) {
      eventArgs = this.getSelectEvent(li, 'select', e);
      this.trigger('nodeSelecting', eventArgs, function (observedArgs) {
        if (!observedArgs.cancel && !observedArgs.node.classList.contains(PREVENTSELECT)) {
          _this.nodeSelectAction(li, e, observedArgs, multiSelect);
        }
      });
    } else {
      this.nodeSelectAction(li, e, eventArgs, multiSelect);
    }
  };

  TreeView.prototype.nodeSelectAction = function (li, e, eventArgs, multiSelect) {
    if (!this.allowMultiSelection || !multiSelect && (!e || e && !e.ctrlKey)) {
      this.removeSelectAll();
    }

    if (this.allowMultiSelection && e && e.shiftKey) {
      if (!this.startNode) {
        this.startNode = li;
      }

      var startIndex = this.liList.indexOf(this.startNode);
      var endIndex = this.liList.indexOf(li);

      if (startIndex > endIndex) {
        var temp = startIndex;
        startIndex = endIndex;
        endIndex = temp;
      }

      for (var i = startIndex; i <= endIndex; i++) {
        var currNode = this.liList[i];

        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(currNode) && !currNode.classList.contains('e-disable')) {
          this.addSelect(currNode);
        }
      }
    } else {
      this.startNode = li;
      this.addSelect(li);
    }

    if (this.isLoaded) {
      eventArgs.nodeData = this.getNodeData(li);
      this.trigger('nodeSelected', eventArgs);
      this.isRightClick = false;
    }

    this.isRightClick = false;
  };

  TreeView.prototype.unselectNode = function (li, e) {
    var _this = this;

    var eventArgs;

    if (this.isLoaded) {
      eventArgs = this.getSelectEvent(li, 'un-select', e);
      this.trigger('nodeSelecting', eventArgs, function (observedArgs) {
        if (!observedArgs.cancel) {
          _this.nodeUnselectAction(li, observedArgs);
        }
      });
    } else {
      this.nodeUnselectAction(li, eventArgs);
    }
  };

  TreeView.prototype.nodeUnselectAction = function (li, eventArgs) {
    this.removeSelect(li);
    this.setFocusElement(li);

    if (this.isLoaded) {
      eventArgs.nodeData = this.getNodeData(li);
      this.trigger('nodeSelected', eventArgs);
    }
  };

  TreeView.prototype.setFocusElement = function (li) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li)) {
      var focusedNode = this.getFocusedNode();

      if (focusedNode) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([focusedNode], FOCUS);
        focusedNode.setAttribute("tabindex", "-1");
      }

      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([li], FOCUS);
      li.setAttribute('tabindex', '0');
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(li, 'blur', this.focusOut, this);
      this.updateIdAttr(focusedNode, li);
    }
  };

  TreeView.prototype.addSelect = function (liEle) {
    liEle.setAttribute('aria-selected', 'true');
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([liEle], ACTIVE);
    var id = liEle.getAttribute('data-uid');

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(id) && this.selectedNodes.indexOf(id) === -1) {
      this.selectedNodes.push(id);
    }
  };

  TreeView.prototype.removeSelect = function (liEle) {
    if (this.allowMultiSelection) {
      liEle.setAttribute('aria-selected', 'false');
    } else {
      liEle.removeAttribute('aria-selected');
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([liEle], ACTIVE);
    var index = this.selectedNodes.indexOf(liEle.getAttribute('data-uid'));

    if (index > -1) {
      this.selectedNodes.splice(index, 1);
    }
  };

  TreeView.prototype.removeSelectAll = function () {
    var selectedLI = this.element.querySelectorAll('.' + ACTIVE);

    for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {
      var ele = selectedLI_1[_i];

      if (this.allowMultiSelection) {
        ele.setAttribute('aria-selected', 'false');
      } else {
        ele.removeAttribute('aria-selected');
      }
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(selectedLI, ACTIVE);
    this.setProperties({
      selectedNodes: []
    }, true);
  };

  TreeView.prototype.getSelectEvent = function (currLi, action, e) {
    var nodeData = this.getNodeData(currLi);
    return {
      action: action,
      cancel: false,
      isInteracted: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e) ? false : true,
      node: currLi,
      nodeData: nodeData
    };
  };

  TreeView.prototype.setExpandOnType = function () {
    this.expandOnType = this.expandOn === 'Auto' ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice ? 'Click' : 'DblClick' : this.expandOn;
  };

  TreeView.prototype.expandHandler = function (e) {
    var target = e.originalEvent.target;

    if (!target || target.classList.contains(INPUT) || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || this.showCheckBox && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + CHECKBOXWRAP)) {
      return;
    } else {
      this.expandCollapseAction(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + LISTITEM), e);
    }
  };

  TreeView.prototype.expandCollapseAction = function (currLi, e) {
    var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, currLi);

    if (!icon || icon.classList.contains(PROCESS)) {
      return;
    } else {
      var classList = icon.classList;

      if (classList.contains(EXPANDABLE)) {
        this.expandAction(currLi, icon, e);
      } else if (classList.contains(COLLAPSIBLE)) {
        this.collapseNode(currLi, icon, e);
      }
    }
  };

  TreeView.prototype.expandAction = function (currLi, icon, e, expandChild, callback) {
    var _this = this;

    if (icon.classList.contains(PROCESS)) {
      return;
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], PROCESS);
    }

    if (this.isLoaded && !this.isRefreshed) {
      this.expandArgs = this.getExpandEvent(currLi, e);
      this.isInteracted = this.expandArgs.isInteracted;
      this.trigger('nodeExpanding', this.expandArgs, function (observedArgs) {
        if (observedArgs.cancel) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([icon], PROCESS);
        } else {
          _this.nodeExpandAction(currLi, icon, expandChild, callback);
        }
      });
    } else {
      this.nodeExpandAction(currLi, icon, expandChild, callback);
    }
  };

  TreeView.prototype.nodeExpandAction = function (currLi, icon, expandChild, callback) {
    var ul = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, currLi);

    if (ul && ul.nodeName === 'UL') {
      this.expandNode(currLi, icon);
    } else {
      this.isFirstRender = true;
      this.renderChildNodes(currLi, expandChild, callback);
      var liEles = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + LISTITEM, currLi);

      for (var i = 0; i < liEles.length; i++) {
        var id = this.getId(liEles[i]);

        if (this.expandChildren.indexOf(id) !== -1 && this.expandChildren !== undefined) {
          var icon_1 = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + EXPANDABLE, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TEXTWRAP, liEles[i]));

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(icon_1)) {
            this.expandAction(liEles[i], icon_1, null);
          }

          this.expandChildren.splice(this.expandChildren.indexOf(id), 1);
        }
      }
    }
  };

  TreeView.prototype.keyActionHandler = function (e) {
    var _this = this;

    var target = e.target;
    var focusedNode = this.getFocusedNode();

    if (target && target.classList.contains(INPUT)) {
      var inpEle = target;

      if (e.action === 'enter') {
        inpEle.blur();
      } else if (e.action === 'escape') {
        inpEle.value = this.oldText;
        inpEle.blur();
      }

      return;
    }

    e.preventDefault();
    var eventArgs = {
      cancel: false,
      event: e,
      node: focusedNode
    };
    this.trigger('keyPress', eventArgs, function (observedArgs) {
      if (!observedArgs.cancel) {
        switch (e.action) {
          case 'space':
            if (_this.showCheckBox) {
              _this.checkNode(e);
            } else {
              _this.toggleSelect(focusedNode, e);
            }

            break;

          case 'moveRight':
            _this.openNode(_this.enableRtl ? false : true, e);

            break;

          case 'moveLeft':
            _this.openNode(_this.enableRtl ? true : false, e);

            break;

          case 'shiftDown':
            _this.shiftKeySelect(true, e);

            break;

          case 'moveDown':
          case 'ctrlDown':
          case 'csDown':
            _this.navigateNode(true);

            break;

          case 'shiftUp':
            _this.shiftKeySelect(false, e);

            break;

          case 'moveUp':
          case 'ctrlUp':
          case 'csUp':
            _this.navigateNode(false);

            break;

          case 'home':
          case 'shiftHome':
          case 'ctrlHome':
          case 'csHome':
            _this.navigateRootNode(true);

            break;

          case 'end':
          case 'shiftEnd':
          case 'ctrlEnd':
          case 'csEnd':
            _this.navigateRootNode(false);

            break;

          case 'enter':
          case 'ctrlEnter':
          case 'shiftEnter':
          case 'csEnter':
          case 'shiftSpace':
          case 'ctrlSpace':
            _this.toggleSelect(focusedNode, e);

            break;

          case 'f2':
            if (_this.allowEditing && !focusedNode.classList.contains('e-disable')) {
              _this.createTextbox(focusedNode, e);
            }

            break;

          case 'ctrlA':
            if (_this.allowMultiSelection) {
              var sNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + LISTITEM + ':not(.' + ACTIVE + ')', _this.element);

              _this.selectGivenNodes(sNodes);
            }

            break;
        }
      }
    });
  };

  TreeView.prototype.navigateToFocus = function (isUp) {
    var focusNode = this.getFocusedNode().querySelector('.' + TEXTWRAP);
    var pos = focusNode.getBoundingClientRect();
    var parent = this.getScrollParent(this.element);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(parent)) {
      var parentPos = parent.getBoundingClientRect();

      if (pos.bottom > parentPos.bottom) {
        parent.scrollTop += pos.bottom - parentPos.bottom;
      } else if (pos.top < parentPos.top) {
        parent.scrollTop -= parentPos.top - pos.top;
      }
    }

    var isVisible = this.isVisibleInViewport(focusNode);

    if (!isVisible) {
      focusNode.scrollIntoView(isUp);
    }
  };

  TreeView.prototype.isVisibleInViewport = function (txtWrap) {
    var pos = txtWrap.getBoundingClientRect();
    return pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) && pos.right <= (window.innerWidth || document.documentElement.clientWidth);
  };

  TreeView.prototype.getScrollParent = function (node) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(node)) {
      return null;
    }

    return node.scrollHeight > node.clientHeight ? node : this.getScrollParent(node.parentElement);
  };

  TreeView.prototype.shiftKeySelect = function (isTowards, e) {
    if (this.allowMultiSelection) {
      var focusedNode = this.getFocusedNode();
      var nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);
      this.removeHover();
      this.setFocusElement(nextNode);
      this.toggleSelect(nextNode, e, false);
      this.navigateToFocus(!isTowards);
    } else {
      this.navigateNode(isTowards);
    }
  };

  TreeView.prototype.checkNode = function (e) {
    var focusedNode = this.getFocusedNode();
    var checkWrap = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECKBOXWRAP, focusedNode);
    var isChecked = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])(' .' + CHECKBOXFRAME, checkWrap).classList.contains(CHECK);

    if (!focusedNode.classList.contains('e-disable')) {
      if (focusedNode.getElementsByClassName("e-checkbox-disabled").length == 0) {
        this.validateCheckNode(checkWrap, isChecked, focusedNode, e);
      }
    }
  };

  TreeView.prototype.validateCheckNode = function (checkWrap, isCheck, li, e) {
    var _this = this;

    var currLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(checkWrap, '.' + LISTITEM);
    this.checkActionNodes = [];
    var ariaState = !isCheck ? 'true' : 'false';

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ariaState)) {
      checkWrap.setAttribute('aria-checked', ariaState);
    }

    var eventArgs = this.getCheckEvent(currLi, isCheck ? 'uncheck' : 'check', e);
    this.trigger('nodeChecking', eventArgs, function (observedArgs) {
      if (!observedArgs.cancel) {
        _this.nodeCheckingAction(checkWrap, isCheck, li, observedArgs, e);
      }
    });
  };

  TreeView.prototype.nodeCheckingAction = function (checkWrap, isCheck, li, eventArgs, e) {
    if (this.checkedElement.indexOf(li.getAttribute('data-uid')) === -1) {
      this.checkedElement.push(li.getAttribute('data-uid'));

      if (this.autoCheck) {
        var child = this.getChildNodes(this.treeData, li.getAttribute('data-uid'));
        child !== null ? this.allCheckNode(child, this.checkedElement, null, null, false) : child = null;
      }
    }

    this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true);

    if (this.autoCheck) {
      this.ensureChildCheckState(li);
      this.ensureParentCheckState(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(li, '.' + PARENTITEM), '.' + LISTITEM));
      var doCheck = void 0;

      if (eventArgs.action === 'check') {
        doCheck = true;
      } else if (eventArgs.action === 'uncheck') {
        doCheck = false;
      }

      this.ensureStateChange(li, doCheck);
    }

    this.nodeCheckedEvent(checkWrap, isCheck, e);
  };
  /**
   * Update checkedNodes when UI interaction happens before the child node renders in DOM
   */


  TreeView.prototype.ensureStateChange = function (li, doCheck) {
    var childElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, li);
    var parentIndex = li.getAttribute('data-uid');
    var mapper = this.fields;

    if (this.dataType === 1 && this.autoCheck) {
      var resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]().where(mapper.parentID, 'equal', parentIndex, true));

      for (var i = 0; i < resultData.length; i++) {
        var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;
        var isCheck = resultData[i][this.fields.isChecked] ? resultData[i][this.fields.isChecked].toString() : null;

        if (this.checkedNodes.indexOf(parentIndex) !== -1 && this.checkedNodes.indexOf(resultId) === -1) {
          this.checkedNodes.push(resultId);
          var childItems = this.getChildNodes(this.treeData, resultId);
          this.getChildItems(childItems, doCheck);

          if (this.parentNodeCheck.indexOf(resultId) !== -1) {
            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);
          }
        } else if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null && this.checkedNodes.indexOf(resultId) !== -1) {
          this.checkedNodes.splice(this.checkedNodes.indexOf(resultId), 1);

          if (isCheck === 'true') {
            this.updateField(this.treeData, this.fields, resultId, 'isChecked', null);
          }

          if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null || this.parentNodeCheck.indexOf(resultId) !== -1) {
            var childNodes = this.getChildNodes(this.treeData, resultId);
            this.getChildItems(childNodes, doCheck);

            if (this.parentNodeCheck.indexOf(resultId) !== -1) {
              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);
            }
          }
        } else {
          var childItems = this.getChildNodes(this.treeData, resultId);
          this.getChildItems(childItems, doCheck);
        }
      }
    } else if (this.dataType === 1 && !this.autoCheck) {
      if (!doCheck) {
        var checkedData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]().where(mapper.isChecked, 'equal', true, false));

        for (var i = 0; i < checkedData.length; i++) {
          var id = checkedData[i][this.fields.id] ? checkedData[i][this.fields.id].toString() : null;

          if (this.checkedNodes.indexOf(id) !== -1) {
            this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);
          }

          this.updateField(this.treeData, this.fields, id, 'isChecked', null);
        }

        this.checkedNodes = [];
      } else {
        for (var i = 0; i < this.treeData.length; i++) {
          var checkedId = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : null;

          if (this.checkedNodes.indexOf(checkedId) === -1) {
            this.checkedNodes.push(checkedId);
          }
        }
      }
    } else {
      var childItems = this.getChildNodes(this.treeData, parentIndex);

      if (childItems) {
        this.childStateChange(childItems, parentIndex, childElement, doCheck);
      }
    }
  };

  TreeView.prototype.getChildItems = function (childItems, doCheck) {
    for (var i = 0; i < childItems.length; i++) {
      var childId = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;
      var childIsCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;

      if (this.checkedNodes.indexOf(childId) !== -1 && !doCheck) {
        this.checkedNodes.splice(this.checkedNodes.indexOf(childId), 1);
      }

      if (this.checkedNodes.indexOf(childId) === -1 && doCheck) {
        this.checkedNodes.push(childId);
      }

      if (childIsCheck === 'true' && !doCheck) {
        this.updateField(this.treeData, this.fields, childId, 'isChecked', null);
      }

      var subChildItems = this.getChildNodes(this.treeData, childId);

      if (subChildItems.length > 0) {
        this.getChildItems(subChildItems, doCheck);
      }
    }
  };
  /**
   * Update checkedNodes when UI interaction happens before the child node renders in DOM for hierarchical DS
   */


  TreeView.prototype.childStateChange = function (childItems, parent, childElement, doCheck) {
    for (var i = 0; i < childItems.length; i++) {
      var checkedChild = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : '';
      var isCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;

      if (this.autoCheck) {
        if (this.checkedNodes.indexOf(parent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {
          this.checkedNodes.push(checkedChild);

          if (this.parentNodeCheck.indexOf(checkedChild) !== -1) {
            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(checkedChild), 1);
          }
        } else if (this.checkedNodes.indexOf(parent) === -1 && this.checkedNodes.indexOf(checkedChild) !== -1 && !doCheck) {
          this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);

          if (isCheck === 'true') {
            this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);
          }
        }
      } else if (!this.autoCheck) {
        if (!doCheck) {
          if (this.checkedNodes.indexOf(checkedChild) !== -1) {
            this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);
          }

          this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);
          this.checkedNodes = [];
        } else {
          if (this.checkedNodes.indexOf(checkedChild) === -1) {
            this.checkedNodes.push(checkedChild);
          }
        }
      }

      var subChild = this.getChildNodes([childItems[i]], checkedChild);

      if (subChild) {
        this.childStateChange(subChild, parent, childElement, doCheck);
      }
    }
  }; //This method can be used to get all child nodes of a parent by passing the children of a parent along with 'validateCheck' set to false


  TreeView.prototype.allCheckNode = function (child, newCheck, checked, childCheck, validateCheck) {
    if (child) {
      for (var length_1 = 0; length_1 < child.length; length_1++) {
        var childId = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.id, child[length_1]);
        var check = this.element.querySelector('[data-uid="' + childId + '"]'); //Validates isChecked case while no UI interaction has been performed on the node or it's parent

        if (validateCheck !== false && this.checkedElement.indexOf(childId.toString()) === -1) {
          if (check === null && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(child[length_1][this.fields.isChecked]) && newCheck.indexOf(childId.toString()) === -1 || childCheck === 0 || checked === 2) {
            child[length_1][this.fields.isChecked] !== false || checked === 2 ? newCheck.push(childId.toString()) : childCheck = null;
            childCheck = child[length_1][this.fields.isChecked] !== false || checked === 2 ? 0 : null;
          }
        } //Pushes child checked node done thro' UI interaction


        if (newCheck.indexOf(childId.toString()) === -1 && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(checked)) {
          newCheck.push(childId.toString());
        }

        var hierChildId = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), child[length_1]); //Gets if any next level children are available for child nodes

        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.hasChildren, child[length_1]) === true || hierChildId) {
          var id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.id, child[length_1]);
          var childId_1 = void 0;

          if (this.dataType === 1) {
            childId_1 = this.getChildNodes(this.treeData, id.toString());
          } else {
            childId_1 = hierChildId;
          }

          if (childId_1) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(validateCheck) ? this.allCheckNode(childId_1, newCheck, checked, childCheck) : this.allCheckNode(childId_1, newCheck, checked, childCheck, validateCheck);
            childCheck = null;
          }
        }

        childCheck = null;
      }
    }
  };

  TreeView.prototype.openNode = function (toBeOpened, e) {
    var focusedNode = this.getFocusedNode();
    var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, focusedNode);

    if (toBeOpened) {
      if (!icon) {
        return;
      } else if (icon.classList.contains(EXPANDABLE)) {
        this.expandAction(focusedNode, icon, e);
      } else {
        this.focusNextNode(focusedNode, true);
      }
    } else {
      if (icon && icon.classList.contains(COLLAPSIBLE)) {
        this.collapseNode(focusedNode, icon, e);
      } else {
        var parentLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(focusedNode, '.' + PARENTITEM), '.' + LISTITEM);

        if (!parentLi) {
          return;
        } else {
          if (!parentLi.classList.contains('e-disable')) {
            this.setFocus(focusedNode, parentLi);
            this.navigateToFocus(true);
          }
        }
      }
    }
  };

  TreeView.prototype.navigateNode = function (isTowards) {
    var focusedNode = this.getFocusedNode();
    this.focusNextNode(focusedNode, isTowards);
  };

  TreeView.prototype.navigateRootNode = function (isBackwards) {
    var focusedNode = this.getFocusedNode();
    var rootNode = isBackwards ? this.getRootNode() : this.getEndNode();

    if (!rootNode.classList.contains('e-disable')) {
      this.setFocus(focusedNode, rootNode);
      this.navigateToFocus(isBackwards);
    }
  };

  TreeView.prototype.getFocusedNode = function () {
    var selectedItem;
    var fNode = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + LISTITEM + '[tabindex="0"]', this.element);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fNode)) {
      selectedItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + LISTITEM, this.element);
    }

    return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fNode) ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(selectedItem) ? this.element.firstElementChild : selectedItem : fNode;
  };

  TreeView.prototype.focusNextNode = function (li, isTowards) {
    var nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);
    this.setFocus(li, nextNode);
    this.navigateToFocus(!isTowards);

    if (nextNode.classList.contains('e-disable')) {
      var lastChild = nextNode.lastChild;

      if (nextNode.previousSibling == null && nextNode.classList.contains('e-level-1')) {
        this.focusNextNode(nextNode, true);
      } else if (nextNode.nextSibling == null && nextNode.classList.contains('e-node-collapsed')) {
        this.focusNextNode(nextNode, false);
      } else if (nextNode.nextSibling == null && lastChild.classList.contains(TEXTWRAP)) {
        this.focusNextNode(nextNode, false);
      } else {
        this.focusNextNode(nextNode, isTowards);
      }
    }
  };

  TreeView.prototype.getNextNode = function (li) {
    var index = this.liList.indexOf(li);
    var nextNode;

    do {
      index++;
      nextNode = this.liList[index];

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nextNode)) {
        return li;
      }
    } while (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(nextNode));

    return nextNode;
  };

  TreeView.prototype.getPrevNode = function (li) {
    var index = this.liList.indexOf(li);
    var prevNode;

    do {
      index--;
      prevNode = this.liList[index];

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(prevNode)) {
        return li;
      }
    } while (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(prevNode));

    return prevNode;
  };

  TreeView.prototype.getRootNode = function () {
    var index = 0;
    var rootNode;

    do {
      rootNode = this.liList[index];
      index++;
    } while (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(rootNode));

    return rootNode;
  };

  TreeView.prototype.getEndNode = function () {
    var index = this.liList.length - 1;
    var endNode;

    do {
      endNode = this.liList[index];
      index--;
    } while (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(endNode));

    return endNode;
  };

  TreeView.prototype.setFocus = function (preNode, nextNode) {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([preNode], FOCUS);
    preNode.setAttribute("tabindex", "-1");

    if (!nextNode.classList.contains('e-disable') && !nextNode.classList.contains(PREVENTSELECT)) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([nextNode], FOCUS);
      nextNode.setAttribute('tabindex', '0');
      nextNode.focus();
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(nextNode, 'blur', this.focusOut, this);
      this.updateIdAttr(preNode, nextNode);
    }
  };

  TreeView.prototype.updateIdAttr = function (preNode, nextNode) {
    this.element.removeAttribute('aria-activedescendant');

    if (preNode) {
      preNode.removeAttribute('id');
    }

    nextNode.setAttribute('id', this.element.id + '_active');
    this.element.setAttribute('aria-activedescendant', this.element.id + '_active');
  };

  TreeView.prototype.focusIn = function () {
    if (!this.mouseDownStatus) {
      var focusedElement = this.getFocusedNode();
      focusedElement.setAttribute("tabindex", "0");
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([focusedElement], FOCUS);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(focusedElement, 'blur', this.focusOut, this);
    }

    this.mouseDownStatus = false;
  };

  TreeView.prototype.focusOut = function (event) {
    var focusedElement = this.getFocusedNode();

    if (event.target == focusedElement) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([focusedElement], FOCUS);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(focusedElement, 'blur', this.focusOut);
    }
  };

  TreeView.prototype.onMouseOver = function (e) {
    var target = e.target;
    var classList = target.classList;
    var currentLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + LISTITEM);

    if (!currentLi || classList.contains(PARENTITEM) || classList.contains(LISTITEM)) {
      this.removeHover();
      return;
    } else {
      if (currentLi && !currentLi.classList.contains('e-disable')) {
        this.setHover(currentLi);
      }
    }
  };

  TreeView.prototype.setHover = function (li) {
    if (!li.classList.contains(HOVER) && !li.classList.contains(PREVENTSELECT)) {
      this.removeHover();
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([li], HOVER);
    }
  };

  ;

  TreeView.prototype.onMouseLeave = function (e) {
    this.removeHover();
  };

  TreeView.prototype.removeHover = function () {
    var hoveredNode = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + HOVER, this.element);

    if (hoveredNode && hoveredNode.length) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(hoveredNode, HOVER);
    }
  };

  ;

  TreeView.prototype.getNodeData = function (currLi, fromDS) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(currLi) && currLi.classList.contains(LISTITEM) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(currLi, '.' + CONTROL)) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(currLi, '.' + CONTROL).classList.contains(ROOT)) {
      var id = currLi.getAttribute('data-uid');
      var text = this.getText(currLi, fromDS);
      var pNode = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(currLi.parentNode, '.' + LISTITEM);
      var pid = pNode ? pNode.getAttribute('data-uid') : null;
      var selected = currLi.classList.contains(ACTIVE);
      var selectable = currLi.classList.contains(PREVENTSELECT) ? false : true;
      var expanded = currLi.getAttribute('aria-expanded') === 'true' ? true : false;
      var hasChildren = currLi.getAttribute('aria-expanded') !== null ? true : (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + EXPANDABLE, currLi) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + COLLAPSIBLE, currLi)) != null ? true : false;
      var checked = null;
      var checkboxElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECKBOXWRAP, currLi);

      if (this.showCheckBox && checkboxElement) {
        checked = checkboxElement.getAttribute('aria-checked');
      }

      return {
        id: id,
        text: text,
        parentID: pid,
        selected: selected,
        selectable: selectable,
        expanded: expanded,
        isChecked: checked,
        hasChildren: hasChildren
      };
    }

    return {
      id: '',
      text: '',
      parentID: '',
      selected: false,
      expanded: false,
      isChecked: '',
      hasChildren: false
    };
  };

  TreeView.prototype.getText = function (currLi, fromDS) {
    if (fromDS) {
      var nodeData = this.getNodeObject(currLi.getAttribute('data-uid'));
      var level = parseFloat(currLi.getAttribute('aria-level'));
      var nodeFields = this.getFields(this.fields, level, 1);
      return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(nodeFields.text, nodeData);
    }

    return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + LISTTEXT, currLi).textContent;
  };

  TreeView.prototype.getExpandEvent = function (currLi, e) {
    var nodeData = this.getNodeData(currLi);
    return {
      cancel: false,
      isInteracted: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e) ? false : true,
      node: currLi,
      nodeData: nodeData,
      event: e
    };
  };

  TreeView.prototype.renderNodeTemplate = function (data, textEle, dataId) {
    var tempArr = this.nodeTemplateFn(data, this, 'nodeTemplate' + dataId, this.element.id + 'nodeTemplate', this.isStringTemplate, undefined, textEle, this.root);

    if (tempArr) {
      tempArr = Array.prototype.slice.call(tempArr);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(tempArr, textEle);
    }
  };

  TreeView.prototype.destroyTemplate = function (liEle) {
    this.clearTemplate(['nodeTemplate' + liEle.getAttribute('data-uid')]);
  };

  TreeView.prototype.reRenderNodes = function () {
    this.updateListProp(this.fields);

    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIE) {
      this.ulElement = this.element.querySelector('.e-list-parent.e-ul');
      this.ulElement.parentElement.removeChild(this.ulElement);
    } else {
      this.element.innerHTML = '';
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.nodeTemplateFn)) {
      this.clearTemplate();
    }

    this.setTouchClass();
    this.setProperties({
      selectedNodes: [],
      checkedNodes: [],
      expandedNodes: []
    }, true);
    this.checkedElement = [];
    this.isLoaded = false;
    this.setDataBinding(true);
  };

  TreeView.prototype.setCssClass = function (oldClass, newClass) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldClass) && oldClass !== '') {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], oldClass.split(' '));
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newClass) && newClass !== '') {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], newClass.split(' '));
    }
  };

  TreeView.prototype.editingHandler = function (e) {
    var target = e.target;

    if (!target || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || target.classList.contains(INPUT) || target.classList.contains(INPUTGROUP)) {
      return;
    } else {
      var liEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + LISTITEM);
      this.createTextbox(liEle, e);
    }
  };

  TreeView.prototype.createTextbox = function (liEle, e) {
    var _this = this;

    var oldInpEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TREEINPUT, this.element);

    if (oldInpEle) {
      oldInpEle.blur();
    }

    var textEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + LISTTEXT, liEle);
    this.updateOldText(liEle);
    var innerEle = this.createElement('input', {
      className: TREEINPUT,
      attrs: {
        value: this.oldText
      }
    });
    var eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);
    this.trigger('nodeEditing', eventArgs, function (observedArgs) {
      if (!observedArgs.cancel) {
        var inpWidth = textEle.offsetWidth + 5;
        var style_1 = 'width:' + inpWidth + 'px';
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([liEle], EDITING);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this.nodeTemplateFn)) {
          _this.destroyTemplate(liEle);
        }

        if (_this.isReact) {
          setTimeout(function () {
            _this.renderTextBox(eventArgs, textEle, style_1);
          }, 5);
        } else {
          _this.renderTextBox(eventArgs, textEle, style_1);
        }
      }
    });
  };

  TreeView.prototype.renderTextBox = function (eventArgs, textEle, style) {
    textEle.innerHTML = eventArgs.innerHtml;
    var inpEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TREEINPUT, textEle);
    this.inputObj = _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].createInput({
      element: inpEle,
      properties: {
        enableRtl: this.enableRtl
      }
    }, this.createElement);
    this.inputObj.container.setAttribute('style', style);
    inpEle.focus();
    var inputEle = inpEle;
    inputEle.setSelectionRange(0, inputEle.value.length);
    this.wireInputEvents(inpEle);
  };

  TreeView.prototype.updateOldText = function (liEle) {
    var id = liEle.getAttribute('data-uid');
    this.editData = this.getNodeObject(id);
    var level = parseFloat(liEle.getAttribute('aria-level'));
    this.editFields = this.getFields(this.fields, level, 1);
    this.oldText = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.editFields.text, this.editData);
  };

  TreeView.prototype.inputFocusOut = function (e) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TREEINPUT, this.element)) {
      return;
    }

    var target = e.target;
    var newText = target.value;
    var txtEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + LISTTEXT);
    var liEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + LISTITEM);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.inputObj.container);

    if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] && !this.isOffline) {
      this.crudOperation('update', null, liEle, newText, null, null, true);
    } else {
      this.appendNewText(liEle, txtEle, newText, true);
    }
  };

  TreeView.prototype.appendNewText = function (liEle, txtEle, newText, isInput) {
    var _this = this;

    var eventArgs = this.getEditEvent(liEle, newText, null);
    this.trigger('nodeEdited', eventArgs, function (observedArgs) {
      newText = observedArgs.cancel ? observedArgs.oldText : observedArgs.newText;

      _this.updateText(liEle, txtEle, newText, isInput);

      if (observedArgs.oldText !== newText) {
        _this.triggerEvent('nodeEdited', [_this.getNode(liEle)]);
      }
    });
  };

  TreeView.prototype.updateText = function (liEle, txtEle, newText, isInput) {
    var newData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(this.editFields.text, newText, this.editData);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.nodeTemplateFn)) {
      txtEle.innerText = '';
      var dataId = liEle.getAttribute('data-uid');
      this.renderNodeTemplate(newData, txtEle, dataId);
      this.renderReactTemplates();
    } else {
      this.enableHtmlSanitizer ? txtEle.innerText = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(newText) : txtEle.innerHTML = newText;
    }

    if (isInput) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([liEle], EDITING);
      liEle.focus();
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(liEle, 'blur', this.focusOut, this);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([liEle], FOCUS);
    }

    if (this.allowTextWrap) {
      this.calculateWrap(liEle);
    }
  };

  TreeView.prototype.getElement = function (ele) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele)) {
      return null;
    } else if (typeof ele === 'string') {
      return this.element.querySelector('[data-uid="' + ele + '"]');
    } else if (typeof ele === 'object') {
      return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getElement"])(ele);
    } else {
      return null;
    }
  };

  TreeView.prototype.getId = function (ele) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele)) {
      return null;
    } else if (typeof ele === 'string') {
      return ele;
    } else if (typeof ele === 'object') {
      return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getElement"])(ele).getAttribute('data-uid');
    } else {
      return null;
    }
  };

  TreeView.prototype.getEditEvent = function (liEle, newText, inpEle) {
    var data = this.getNodeData(liEle);
    return {
      cancel: false,
      newText: newText,
      node: liEle,
      nodeData: data,
      oldText: this.oldText,
      innerHtml: inpEle
    };
  };

  TreeView.prototype.getNodeObject = function (id) {
    var childNodes;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(id)) {
      return childNodes;
    } else if (this.dataType === 1) {
      for (var i = 0, objlen = this.treeData.length; i < objlen; i++) {
        var dataId = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.id, this.treeData[i]);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.treeData[i]) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataId) && dataId.toString() === id) {
          return this.treeData[i];
        }
      }
    } else {
      return this.getChildNodeObject(this.treeData, this.fields, id);
    }

    return childNodes;
  };

  TreeView.prototype.getChildNodeObject = function (obj, mapper, id) {
    var newList;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(obj)) {
      return newList;
    }

    for (var i = 0, objlen = obj.length; i < objlen; i++) {
      var dataId = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.id, obj[i]);

      if (obj[i] && dataId && dataId.toString() === id) {
        return obj[i];
      } else if (typeof mapper.child === 'string' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, obj[i]))) {
        var childData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, obj[i]);
        newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);

        if (newList !== undefined) {
          break;
        }
      } else if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', obj[i]))) {
        var child = 'child';
        newList = this.getChildNodeObject(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(child, obj[i]), this.getChildMapper(mapper), id);

        if (newList !== undefined) {
          break;
        }
      }
    }

    return newList;
  };

  TreeView.prototype.setDragAndDrop = function (toBind) {
    if (toBind && !this.disabled) {
      this.initializeDrag();
    } else {
      this.destroyDrag();
    }
  };

  TreeView.prototype.initializeDrag = function () {
    var _this = this;

    var virtualEle;
    var proxy = this;
    this.dragObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Draggable"](this.element, {
      enableTailMode: true,
      enableAutoScroll: true,
      dragArea: this.dragArea,
      dragTarget: '.' + TEXTWRAP,
      enableTapHold: true,
      tapHoldThreshold: 100,
      helper: function (e) {
        _this.dragTarget = e.sender.target;
        var dragRoot = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(_this.dragTarget, '.' + ROOT);
        var dragWrap = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(_this.dragTarget, '.' + TEXTWRAP);
        _this.dragLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(_this.dragTarget, '.' + LISTITEM);

        if (_this.fullRowSelect && !dragWrap && _this.dragTarget.classList.contains(FULLROW)) {
          dragWrap = _this.dragTarget.nextElementSibling;
        }

        if (!_this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap || _this.dragTarget.classList.contains(ROOT) || _this.dragTarget.classList.contains(PARENTITEM) || _this.dragTarget.classList.contains(LISTITEM) || _this.dragLi.classList.contains('e-disable')) {
          return false;
        }

        var cloneEle = dragWrap.cloneNode(true);

        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, cloneEle))) {
          var icon = proxy.createElement('div', {
            className: ICON + ' ' + EXPANDABLE
          });
          cloneEle.insertBefore(icon, cloneEle.children[0]);
        }

        var cssClass = DRAGITEM + ' ' + ROOT + ' ' + _this.cssClass + ' ' + (_this.enableRtl ? RTL : '');
        virtualEle = proxy.createElement('div', {
          className: cssClass
        });
        virtualEle.appendChild(cloneEle);
        var nLen = _this.selectedNodes.length;

        if (nLen > 1 && _this.allowMultiSelection && _this.dragLi.classList.contains(ACTIVE)) {
          var cNode = proxy.createElement('span', {
            className: DROPCOUNT,
            innerHTML: '' + nLen
          });
          virtualEle.appendChild(cNode);
        }

        document.body.appendChild(virtualEle);
        document.body.style.cursor = '';
        _this.dragData = _this.getNodeData(_this.dragLi);
        return virtualEle;
      },
      dragStart: function (e) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this.element], DRAGGING);
        var listItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.e-list-item');
        var level;

        if (listItem) {
          level = parseInt(listItem.getAttribute('aria-level'), 10);
        }

        var eventArgs = _this.getDragEvent(e.event, _this, null, e.target, null, virtualEle, level);

        if (eventArgs.draggedNode.classList.contains(EDITING)) {
          _this.dragObj.intDestroy(e.event);

          _this.dragCancelAction(virtualEle);
        } else {
          _this.trigger('nodeDragStart', eventArgs, function (observedArgs) {
            if (observedArgs.cancel) {
              _this.dragObj.intDestroy(e.event);

              _this.dragCancelAction(virtualEle);
            } else {
              _this.dragStartAction = true;
            }
          });
        }
      },
      drag: function (e) {
        _this.dragObj.setProperties({
          cursorAt: {
            top: !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e.event.targetTouches) || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice ? 60 : -20
          }
        });

        _this.dragAction(e, virtualEle);
      },
      dragStop: function (e) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_this.element], DRAGGING);

        _this.removeVirtualEle();

        var dropTarget = e.target;
        var preventTargetExpand = false;
        var dropRoot = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dropTarget, '.' + DROPPABLE);
        var isHelperElement = true;

        if (!dropTarget || !dropRoot) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(e.helper);
          document.body.style.cursor = '';
          isHelperElement = false;
        }

        var listItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dropTarget, '.e-list-item');
        var level;

        if (listItem) {
          level = parseInt(listItem.getAttribute('aria-level'), 10);
        }

        var eventArgs = _this.getDragEvent(e.event, _this, dropTarget, dropTarget, null, e.helper, level);

        eventArgs.preventTargetExpand = preventTargetExpand;

        _this.trigger('nodeDragStop', eventArgs, function (observedArgs) {
          _this.dragParent = observedArgs.draggedParentNode;
          _this.preventExpand = observedArgs.preventTargetExpand;

          if (observedArgs.cancel) {
            if (e.helper.parentNode) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(e.helper);
            }

            document.body.style.cursor = '';
            isHelperElement = false;
          }

          _this.dragStartAction = false;
        });
      }
    });
    this.dropObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Droppable"](this.element, {
      out: function (e) {
        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e) && !e.target.classList.contains(SIBLING) && _this.dropObj.dragData.default && _this.dropObj.dragData.default.helper.classList.contains(ROOT)) {
          document.body.style.cursor = 'not-allowed';
        }
      },
      over: function (e) {
        document.body.style.cursor = '';
      },
      drop: function (e) {
        _this.dropAction(e);
      }
    });
  };

  TreeView.prototype.dragCancelAction = function (virtualEle) {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(virtualEle);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], DRAGGING);
    this.dragStartAction = false;
  };

  TreeView.prototype.dragAction = function (e, virtualEle) {
    var dropRoot = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + DROPPABLE);
    var dropWrap = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + TEXTWRAP);
    var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, virtualEle);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);
    this.removeVirtualEle();
    document.body.style.cursor = '';
    var classList = e.target.classList;

    if (this.fullRowSelect && !dropWrap && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(classList) && classList.contains(FULLROW)) {
      dropWrap = e.target.nextElementSibling;
    }

    if (dropRoot) {
      var dropLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + LISTITEM);
      var checkWrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + CHECKBOXWRAP);
      var collapse = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + COLLAPSIBLE);
      var expand = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + EXPANDABLE);

      if (!dropRoot.classList.contains(ROOT) || dropWrap && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {
        if (this.hasTemplate && dropLi) {
          var templateTarget = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])(this.fullRowSelect ? '.' + FULLROW : '.' + TEXTWRAP, dropLi);

          if (e && !expand && !collapse && e.event.offsetY < 7 && !checkWrapper || expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3) {
            var index = this.fullRowSelect ? 1 : 0;
            this.appendIndicator(dropLi, icon, index);
          } else if (e && !expand && !collapse && !checkWrapper && templateTarget && e.event.offsetY > templateTarget.offsetHeight - 10 || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19) {
            var index = this.fullRowSelect ? 2 : 1;
            this.appendIndicator(dropLi, icon, index);
          } else {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], DROPIN);
          }
        } else {
          if (dropLi && e && !expand && !collapse && e.event.offsetY < 7 && !checkWrapper || expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3) {
            var index = this.fullRowSelect ? 1 : 0;
            this.appendIndicator(dropLi, icon, index);
          } else if (dropLi && e && !expand && !collapse && e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 10 && !checkWrapper || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19) {
            var index = this.fullRowSelect ? 2 : 1;
            this.appendIndicator(dropLi, icon, index);
          } else {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], DROPIN);
          }
        }
      } else if (e.target.nodeName === 'LI' && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], DROPNEXT);
        this.renderVirtualEle(e);
      } else if (e.target.classList.contains(SIBLING)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], DROPNEXT);
      } else {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], DROPOUT);
      }
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], NODROP);
      document.body.style.cursor = 'not-allowed';
    }

    var listItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.e-list-item');
    var level;

    if (listItem) {
      level = parseInt(listItem.getAttribute('aria-level'), 10);
    }

    var eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);

    if (eventArgs.dropIndicator) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([icon], eventArgs.dropIndicator);
    }

    this.trigger('nodeDragging', eventArgs);

    if (eventArgs.dropIndicator) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], eventArgs.dropIndicator);
    }
  };

  TreeView.prototype.appendIndicator = function (dropLi, icon, index) {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], DROPNEXT);
    var virEle = this.createElement('div', {
      className: SIBLING
    });
    dropLi.insertBefore(virEle, dropLi.children[index]);
  };
  /* eslint-disable */


  TreeView.prototype.dropAction = function (e) {
    var offsetY = e.event.offsetY;
    var dropTarget = e.target;
    var dragObj;
    var level;
    var drop = false;
    var dragInstance;
    var nodeData = [];
    var liArray = [];
    dragInstance = e.dragData.draggable;

    for (var i_1 = 0; i_1 < dragInstance.ej2_instances.length; i_1++) {
      if (dragInstance.ej2_instances[i_1] instanceof TreeView_1) {
        dragObj = dragInstance.ej2_instances[i_1];
        break;
      }
    }

    if (dragObj && dragObj.dragTarget) {
      var dragTarget = dragObj.dragTarget;
      var dragLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dragTarget, '.' + LISTITEM);
      var dropLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dropTarget, '.' + LISTITEM);
      liArray.push(dragLi);

      if (dropLi == null && dropTarget.classList.contains(ROOT)) {
        dropLi = dropTarget.firstElementChild;
      }

      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(e.droppedElement);
      document.body.style.cursor = '';

      if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {
        if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] === false) {
          this.preventExpand = false;
        }

        return;
      }

      if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE)) {
        var sNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + ACTIVE, dragObj.element);
        liArray = sNodes;

        if (e.target.offsetHeight <= 33 && offsetY > e.target.offsetHeight - 10 && offsetY > 6) {
          for (var i_2 = sNodes.length - 1; i_2 >= 0; i_2--) {
            if (dropLi.isSameNode(sNodes[i_2]) || this.isDescendant(sNodes[i_2], dropLi)) {
              continue;
            }

            this.appendNode(dropTarget, sNodes[i_2], dropLi, e, dragObj, offsetY);
          }
        } else {
          for (var i_3 = 0; i_3 < sNodes.length; i_3++) {
            if (dropLi.isSameNode(sNodes[i_3]) || this.isDescendant(sNodes[i_3], dropLi)) {
              continue;
            }

            this.appendNode(dropTarget, sNodes[i_3], dropLi, e, dragObj, offsetY);
          }
        }
      } else {
        this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);
      }

      level = parseInt(dragLi.getAttribute('aria-level'), 10);
      drop = true;
    }

    if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] === false) {
      this.preventExpand = false;
    }

    for (var i = 0; i < liArray.length; i++) {
      nodeData.push(this.getNode(liArray[i]));
    }

    this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop));

    if (dragObj.element.id !== this.element.id) {
      dragObj.triggerEvent('nodeDropped', nodeData);
      this.isNodeDropped = true;
      this.fields.dataSource = this.treeData;
    }

    this.triggerEvent('nodeDropped', nodeData);
  };

  TreeView.prototype.appendNode = function (dropTarget, dragLi, dropLi, e, dragObj, offsetY) {
    var checkWrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dropTarget, '.' + CHECKBOXWRAP);
    var collapse = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + COLLAPSIBLE);
    var expand = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + EXPANDABLE);

    if (!dragLi.classList.contains('e-disable') && !checkWrapper && (expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3 || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19 || !expand && !collapse)) {
      if (dropTarget.nodeName === 'LI') {
        this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
      } else if (dropTarget.firstElementChild && dropTarget.classList.contains(ROOT)) {
        if (dropTarget.firstElementChild.nodeName === 'UL') {
          this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
        }
      } else if (dropTarget.classList.contains('e-icon-collapsible') || dropTarget.classList.contains('e-icon-expandable')) {
        this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
      } else {
        this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY);
      }
    } else {
      this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, true);
    }
  };

  TreeView.prototype.dropAsSiblingNode = function (dragLi, dropLi, e, dragObj) {
    var dropUl = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dropLi, '.' + PARENTITEM);
    var dragParentUl = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dragLi, '.' + PARENTITEM);
    var dragParentLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dragParentUl, '.' + LISTITEM);
    var pre;

    if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {
      pre = false;
    } else if (e.event.offsetY < 2) {
      pre = true;
    } else if (e.target.classList.contains('e-icon-expandable') || e.target.classList.contains('e-icon-collapsible')) {
      if (e.event.offsetY < 5 || e.event.offsetX < 3) {
        pre = true;
      } else if (e.event.offsetY > 15 || e.event.offsetX > 17) {
        pre = false;
      }
    }

    if (e.target.classList.contains('e-icon-expandable') || e.target.classList.contains('e-icon-collapsible')) {
      var target = e.target.closest('li');
      dropUl.insertBefore(dragLi, pre ? target : target.nextElementSibling);
    } else {
      dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);
    }

    this.moveData(dragLi, dropLi, dropUl, pre, dragObj);
    this.updateElement(dragParentUl, dragParentLi);
    this.updateAriaLevel(dragLi);

    if (dragObj.element.id === this.element.id) {
      this.updateList();
    } else {
      dragObj.updateInstance();
      this.updateInstance();
    }
  };

  TreeView.prototype.dropAsChildNode = function (dragLi, dropLi, dragObj, index, e, pos, isCheck) {
    var dragParentUl = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dragLi, '.' + PARENTITEM);
    var dragParentLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dragParentUl, '.' + LISTITEM);
    var dropParentUl = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dropLi, '.' + PARENTITEM);
    var templateTarget;

    if (e && e.target) {
      templateTarget = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])(this.fullRowSelect ? '.' + FULLROW : '.' + TEXTWRAP, dropLi);
    }

    if (e && pos < 7 && !isCheck) {
      dropParentUl.insertBefore(dragLi, dropLi);
      this.moveData(dragLi, dropLi, dropParentUl, true, dragObj);
    } else if (e && e.target.offsetHeight > 0 && pos > e.target.offsetHeight - 10 && !isCheck && !this.hasTemplate) {
      dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);
      this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);
    } else if (this.hasTemplate && templateTarget && pos > templateTarget.offsetHeight - 10 && !isCheck) {
      dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);
      this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);
    } else {
      var dropUl = this.expandParent(dropLi);
      var childLi = dropUl.childNodes[index];
      dropUl.insertBefore(dragLi, childLi);
      this.moveData(dragLi, childLi, dropUl, true, dragObj);
    }

    this.updateElement(dragParentUl, dragParentLi);
    this.updateAriaLevel(dragLi);

    if (dragObj.element.id === this.element.id) {
      this.updateList();
    } else {
      dragObj.updateInstance();
      this.updateInstance();
    }
  };

  TreeView.prototype.moveData = function (dragLi, dropLi, dropUl, pre, dragObj) {
    var dropParentLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dropUl, '.' + LISTITEM);
    var id = this.getId(dragLi);
    var removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, true);
    var refId = this.getId(dropLi);
    var index = this.getDataPos(this.treeData, this.fields, refId);
    var parentId = this.getId(dropParentLi);

    if (this.dataType === 1) {
      this.updateField(this.treeData, this.fields, parentId, 'hasChildren', true);
      var pos = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index) ? this.treeData.length : pre ? index : index + 1;

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(parentId) && !this.hasPid) {
        delete removedData[0][this.fields.parentID];
      } else {
        var currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(this.fields.parentID, currPid, removedData[0]);
      }

      this.treeData.splice(pos, 0, removedData[0]);

      if (dragObj.element.id !== this.element.id) {
        var childData = dragObj.removeChildNodes(id);
        pos++;

        for (var i = 0, len = childData.length; i < len; i++) {
          this.treeData.splice(pos, 0, childData[i]);
          pos++;
        }

        dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);
      }

      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
    } else {
      this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);
    }
  };

  TreeView.prototype.expandParent = function (dropLi) {
    var dropIcon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, dropLi);

    if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && this.preventExpand !== true) {
      this.expandAction(dropLi, dropIcon, null);
    }

    var dropUl = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, dropLi);

    if (this.preventExpand === true && !dropUl && dropIcon) {
      this.renderChildNodes(dropLi);
    }

    dropUl = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, dropLi);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dropUl) && this.preventExpand === true) {
      dropUl.style.display = 'none';
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dropUl) && this.preventExpand === false) {
      dropUl.style.display = 'block';
    }

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dropUl) && this.preventExpand === true) {
      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dropIcon)) {
        _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);
      }

      var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, dropLi);

      if (icon) {
        icon.classList.add('e-icon-expandable');
      }

      dropUl = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].generateUL(this.createElement, [], null, this.listBaseOption);
      dropLi.appendChild(dropUl);

      if (icon) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([icon], COLLAPSIBLE);
      } else {
        _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);
      }

      dropLi.setAttribute('aria-expanded', 'false');
      dropUl.style.display = 'none';
    }

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dropUl)) {
      var args = this.expandArgs;

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args) || args.name != 'nodeExpanding') {
        this.trigger('nodeExpanding', this.getExpandEvent(dropLi, null));
      }

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dropIcon)) {
        _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);
      }

      var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, dropLi);

      if (icon) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([icon], EXPANDABLE);
      } else {
        _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);
        icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, dropLi);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([icon], EXPANDABLE);
      }

      dropUl = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].generateUL(this.createElement, [], null, this.listBaseOption);
      dropLi.appendChild(dropUl);
      this.addExpand(dropLi);
      this.trigger('nodeExpanded', this.getExpandEvent(dropLi, null));
    }

    return dropUl;
  };

  TreeView.prototype.updateElement = function (dragParentUl, dragParentLi) {
    if (dragParentLi && dragParentUl.childElementCount === 0) {
      var dragIcon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, dragParentLi);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(dragParentUl);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(dragIcon);
      var parentId = this.getId(dragParentLi);
      this.updateField(this.treeData, this.fields, parentId, 'hasChildren', false);
      this.removeExpand(dragParentLi, true);
    }
  };

  TreeView.prototype.updateAriaLevel = function (dragLi) {
    var level = this.parents(dragLi, '.' + PARENTITEM).length;
    dragLi.setAttribute('aria-level', '' + level);
    this.updateChildAriaLevel(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, dragLi), level + 1);
  };

  TreeView.prototype.updateChildAriaLevel = function (element, level) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element)) {
      var cNodes = element.childNodes;

      for (var i = 0, len = cNodes.length; i < len; i++) {
        var liEle = cNodes[i];
        liEle.setAttribute('aria-level', '' + level);
        this.updateChildAriaLevel(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, liEle), level + 1);
      }
    }
  };

  TreeView.prototype.renderVirtualEle = function (e) {
    var pre;

    if (e.event.offsetY > e.target.offsetHeight - 2) {
      pre = false;
    } else if (e.event.offsetY < 2) {
      pre = true;
    }

    var virEle = this.createElement('div', {
      className: SIBLING
    });
    var index = this.fullRowSelect ? pre ? 1 : 2 : pre ? 0 : 1;
    e.target.insertBefore(virEle, e.target.children[index]);
  };

  TreeView.prototype.removeVirtualEle = function () {
    var sibEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + SIBLING);

    if (sibEle) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(sibEle);
    }
  };

  TreeView.prototype.destroyDrag = function () {
    if (this.dragObj && this.dropObj) {
      this.dragObj.destroy();
      this.dropObj.destroy();
    }
  };

  TreeView.prototype.getDragEvent = function (event, obj, dropTarget, target, dragNode, cloneEle, level, drop) {
    var dropLi = dropTarget ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dropTarget, '.' + LISTITEM) : null;
    var dropData = dropLi ? this.getNodeData(dropLi) : null;
    var draggedNode = obj ? obj.dragLi : dragNode;
    var draggedNodeData = obj ? obj.dragData : null;
    var newParent = dropTarget ? this.parents(dropTarget, '.' + LISTITEM) : null;
    var dragLiParent = obj.dragLi.parentElement;
    var dragParent = obj.dragLi ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dragLiParent, '.' + LISTITEM) : null;
    var targetParent = null;
    var indexValue = null;
    var iconCss = [DROPNEXT, DROPIN, DROPOUT, NODROP];
    var iconClass = null;
    var node = drop === true ? draggedNode : dropLi;
    var index = node ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(node, '.e-list-parent') : null;
    var i = 0;
    var position = null;
    dragParent = obj.dragLi && dragParent === null ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dragLiParent, '.' + ROOT) : dragParent;
    dragParent = drop === true ? this.dragParent : dragParent;

    if (cloneEle) {
      while (i < 4) {
        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + ICON, cloneEle).classList.contains(iconCss[i])) {
          iconClass = iconCss[i];
          break;
        }

        i++;
      }
    }

    if (index) {
      var dropTar = 0;

      for (i = 0; i < index.childElementCount; i++) {
        dropTar = drop !== true && index.children[i] === draggedNode && dropLi !== draggedNode ? ++dropTar : dropTar;

        if (drop !== true && index.children[i].classList.contains('e-hover')) {
          indexValue = event.offsetY >= 23 ? i + 1 : i;
          break;
        } else if (index.children[i] === node) {
          indexValue = event.offsetY >= 23 ? i : i;
          break;
        }
      }

      indexValue = dropTar !== 0 ? --indexValue : indexValue;
      position = iconClass == "e-drop-in" ? "Inside" : event.offsetY < 7 ? "Before" : "After";
    }

    if (dropTarget) {
      if (newParent.length === 0) {
        targetParent = null;
      } else if (dropTarget.classList.contains(LISTITEM)) {
        targetParent = newParent[0];
      } else {
        targetParent = newParent[1];
      }
    }

    if (dropLi === draggedNode) {
      targetParent = dropLi;
    }

    if (dropTarget && target.offsetHeight <= 33 && event.offsetY < target.offsetHeight - 10 && event.offsetY > 6) {
      targetParent = dropLi;

      if (drop !== true) {
        level = ++level;
        var parent_2 = targetParent ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-list-parent', targetParent) : null;
        indexValue = parent_2 ? parent_2.children.length : 0;

        if (!(this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) && parent_2 === null && targetParent) {
          var parent_3 = targetParent.hasAttribute('data-uid') ? this.getChildNodes(this.fields.dataSource, targetParent.getAttribute('data-uid').toString()) : null;
          indexValue = parent_3 ? parent_3.length : 0;
        }
      }
    }

    return {
      cancel: false,
      clonedNode: cloneEle,
      event: event,
      draggedNode: draggedNode,
      draggedNodeData: draggedNodeData,
      droppedNode: dropLi,
      droppedNodeData: dropData,
      dropIndex: indexValue,
      dropLevel: level,
      draggedParentNode: dragParent,
      dropTarget: targetParent,
      dropIndicator: iconClass,
      target: target,
      position: position
    };
  };

  TreeView.prototype.addFullRow = function (toAdd) {
    var len = this.liList.length;

    if (toAdd) {
      for (var i = 0; i < len; i++) {
        this.createFullRow(this.liList[i]);
      }
    } else {
      for (var i = 0; i < len; i++) {
        var rowDiv = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + FULLROW, this.liList[i]);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(rowDiv);
      }
    }
  };

  TreeView.prototype.createFullRow = function (item) {
    var rowDiv = this.createElement('div', {
      className: FULLROW
    });
    item.insertBefore(rowDiv, item.childNodes[0]);
  };

  TreeView.prototype.addMultiSelect = function (toAdd) {
    if (toAdd) {
      var liEles = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + LISTITEM + ':not([aria-selected="true"])', this.element);

      for (var _i = 0, liEles_1 = liEles; _i < liEles_1.length; _i++) {
        var ele = liEles_1[_i];
        ele.setAttribute('aria-selected', 'false');
      }
    } else {
      var liEles = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + LISTITEM + '[aria-selected="false"]', this.element);

      for (var _a = 0, liEles_2 = liEles; _a < liEles_2.length; _a++) {
        var ele = liEles_2[_a];
        ele.removeAttribute('aria-selected');
      }
    }
  };

  TreeView.prototype.collapseByLevel = function (element, level, excludeHiddenNodes) {
    if (level > 0 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element)) {
      var cNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);

      for (var i = 0, len = cNodes.length; i < len; i++) {
        var liEle = cNodes[i];
        var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + COLLAPSIBLE, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TEXTWRAP, liEle));

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(icon)) {
          this.collapseNode(liEle, icon, null);
        }

        this.collapseByLevel(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);
      }
    }
  };

  TreeView.prototype.collapseAllNodes = function (excludeHiddenNodes) {
    var cIcons = this.getVisibleNodes(excludeHiddenNodes, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + COLLAPSIBLE, this.element));

    for (var i = 0, len = cIcons.length; i < len; i++) {
      var icon = cIcons[i];
      var liEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(icon, '.' + LISTITEM);
      this.collapseNode(liEle, icon, null);
    }
  };

  TreeView.prototype.expandByLevel = function (element, level, excludeHiddenNodes) {
    if (level > 0 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element)) {
      var eNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);

      for (var i = 0, len = eNodes.length; i < len; i++) {
        var liEle = eNodes[i];
        var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + EXPANDABLE, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TEXTWRAP, liEle));

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(icon)) {
          this.expandAction(liEle, icon, null);
        }

        this.expandByLevel(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);
      }
    }
  };

  TreeView.prototype.expandAllNodes = function (excludeHiddenNodes) {
    var eIcons = this.getVisibleNodes(excludeHiddenNodes, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + EXPANDABLE, this.element));

    for (var i = 0, len = eIcons.length; i < len; i++) {
      var icon = eIcons[i];
      var liEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(icon, '.' + LISTITEM);
      this.expandAction(liEle, icon, null, true);
    }
  };

  TreeView.prototype.getVisibleNodes = function (excludeHiddenNodes, nodes) {
    var vNodes = Array.prototype.slice.call(nodes);

    if (excludeHiddenNodes) {
      for (var i = 0; i < vNodes.length; i++) {
        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(vNodes[i])) {
          vNodes.splice(i, 1);
          i--;
        }
      }
    }

    return vNodes;
  };

  TreeView.prototype.removeNode = function (node) {
    var dragParentUl = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(node, '.' + PARENTITEM);
    var dragParentLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dragParentUl, '.' + LISTITEM);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.nodeTemplateFn)) {
      this.destroyTemplate(node);
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(node);
    this.updateElement(dragParentUl, dragParentLi);
    this.removeData(node);
  };

  TreeView.prototype.updateInstance = function () {
    this.updateList();
    this.updateSelectedNodes();
    this.updateExpandedNodes();
  };

  TreeView.prototype.updateList = function () {
    this.liList = Array.prototype.slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + LISTITEM, this.element));
  };

  TreeView.prototype.updateSelectedNodes = function () {
    this.setProperties({
      selectedNodes: []
    }, true);
    var sNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + ACTIVE, this.element);
    this.selectGivenNodes(sNodes);
  };

  TreeView.prototype.updateExpandedNodes = function () {
    this.setProperties({
      expandedNodes: []
    }, true);
    var eNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('[aria-expanded="true"]', this.element);

    for (var i = 0, len = eNodes.length; i < len; i++) {
      this.addExpand(eNodes[i]);
    }
  };

  TreeView.prototype.removeData = function (node) {
    if (this.dataType === 1) {
      var dm = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"](this.treeData);
      var id = this.getId(node);
      var data = {};
      var newId = this.isNumberTypeId ? parseFloat(id) : id;
      data[this.fields.id] = newId;
      dm.remove(this.fields.id, data);
      this.removeChildNodes(id);
    } else {
      var id = this.getId(node);
      this.updateChildField(this.treeData, this.fields, id, null, null, true);
    }
  };

  TreeView.prototype.removeChildNodes = function (parentId) {
    var cNodes = this.getChildGroup(this.groupedData, parentId, false);
    var childData = [];

    if (cNodes) {
      for (var i = 0, len = cNodes.length; i < len; i++) {
        var dm = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"](this.treeData);
        var id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.id, cNodes[i]).toString();
        var data = {};
        var currId = this.isNumberTypeId ? parseFloat(id) : id;
        data[this.fields.id] = currId;
        var nodeData = dm.remove(this.fields.id, data);
        childData.push(nodeData[0]);
        this.removeChildNodes(id);
      }
    }

    return childData;
  };

  TreeView.prototype.doGivenAction = function (nodes, selector, toExpand) {
    for (var i = 0, len = nodes.length; i < len; i++) {
      var liEle = this.getElement(nodes[i]);

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liEle)) {
        continue;
      }

      var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + selector, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TEXTWRAP, liEle));

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(icon)) {
        toExpand ? this.expandAction(liEle, icon, null) : this.collapseNode(liEle, icon, null);
      }
    }
  };

  TreeView.prototype.addGivenNodes = function (nodes, dropLi, index, isRemote, dropEle) {
    if (nodes.length === 0) {
      return;
    }

    var sNodes = this.getSortedData(nodes);
    var level = dropLi ? parseFloat(dropLi.getAttribute('aria-level')) + 1 : 1;

    if (isRemote) {
      this.updateMapper(level);
    }

    var li = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level);
    var id = this.getId(dropLi);
    var refNode;
    var dropIcon1;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dropLi)) {
      dropIcon1 = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, dropLi);
    }

    if (this.dataType === 1 && dropIcon1 && dropIcon1.classList.contains(EXPANDABLE) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.offsetParent) && !this.element.offsetParent.parentElement.classList.contains('e-filemanager')) {
      this.preventExpand = true;
    }

    if (this.dataType !== 1) {
      this.addChildData(this.treeData, this.fields, id, nodes, index);
      this.isFirstRender = false;
    }

    var dropUl;

    if (!dropEle) {
      dropUl = dropLi ? this.expandParent(dropLi) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, this.element);
    } else {
      dropUl = dropEle;
    }

    refNode = dropUl.childNodes[index];

    if (!this.isFirstRender || this.dataType === 1) {
      var args = this.expandArgs;

      if (refNode || this.sortOrder === 'None') {
        for (var i = 0; i < li.length; i++) {
          dropUl.insertBefore(li[i], refNode);
        }

        if (this.dataType === 1 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dropLi) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.offsetParent) && !this.element.offsetParent.parentElement.classList.contains('e-filemanager')) {
          this.preventExpand = false;
          var dropIcon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, dropLi);

          if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args) || args.name != 'nodeExpanding')) {
            this.expandAction(dropLi, dropIcon, null);
          }
        }
      }

      if (!refNode && (this.sortOrder === 'Ascending' || this.sortOrder === 'Descending')) {
        if (dropUl.childNodes.length === 0) {
          for (var i = 0; i < li.length; i++) {
            dropUl.insertBefore(li[i], refNode);
          }

          if (this.dataType === 1 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dropLi) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.offsetParent) && !this.element.offsetParent.parentElement.classList.contains('e-filemanager')) {
            this.preventExpand = false;
            var dropIcon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, dropLi);

            if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args) || args.name != 'nodeExpanding')) {
              this.expandAction(dropLi, dropIcon, null);
            }
          }
        } else {
          var cNodes = dropUl.childNodes;

          for (var i = 0; i < li.length; i++) {
            for (var j = 0; j < cNodes.length; j++) {
              var returnValue = this.sortOrder === 'Ascending' ? cNodes[j].textContent.toUpperCase() > li[i].innerText.toUpperCase() : cNodes[j].textContent.toUpperCase() < li[i].innerText.toUpperCase();

              if (returnValue) {
                dropUl.insertBefore(li[i], cNodes[j]);
                break;
              }

              dropUl.insertBefore(li[i], cNodes[cNodes.length]);
            }
          }
        }
      }
    }

    if (this.dataType === 1) {
      this.updateField(this.treeData, this.fields, id, 'hasChildren', true);
      var refId = this.getId(refNode);
      var pos = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId);

      for (var j = 0; j < nodes.length; j++) {
        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(id)) {
          var currId = this.isNumberTypeId ? parseFloat(id) : id;
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(this.fields.parentID, currId, nodes[j]);
        }

        this.treeData.splice(pos, 0, nodes[j]);
        pos++;
      }
    }

    this.finalizeNode(dropUl);
  };

  TreeView.prototype.updateMapper = function (level) {
    var mapper = level === 1 ? this.fields : this.getChildFields(this.fields, level - 1, 1);
    this.updateListProp(mapper);
  };

  TreeView.prototype.updateListProp = function (mapper) {
    var prop = this.getActualProperties(mapper);
    this.listBaseOption.fields = prop;
    this.listBaseOption.fields.url = prop.hasOwnProperty('navigateUrl') ? prop.navigateUrl : 'navigateUrl';
  };

  TreeView.prototype.getDataPos = function (obj, mapper, id) {
    var pos = null;

    for (var i = 0, objlen = obj.length; i < objlen; i++) {
      var nodeId = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.id, obj[i]);

      if (obj[i] && nodeId && nodeId.toString() === id) {
        return i;
      } else if (typeof mapper.child === 'string' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, obj[i]))) {
        var data = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, obj[i]);
        pos = this.getDataPos(data, this.getChildMapper(mapper), id);

        if (pos !== null) {
          break;
        }
      } else if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', obj[i]))) {
        var items = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', obj[i]);
        pos = this.getDataPos(items, this.getChildMapper(mapper), id);

        if (pos !== null) {
          break;
        }
      }
    }

    return pos;
  };

  TreeView.prototype.addChildData = function (obj, mapper, id, data, index) {
    var updated;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(id)) {
      index = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index) ? obj.length : index;

      for (var k = 0, len = data.length; k < len; k++) {
        obj.splice(index, 0, data[k]);
        index++;
      }

      return updated;
    }

    for (var i = 0, objlen = obj.length; i < objlen; i++) {
      var nodeId = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.id, obj[i]);

      if (obj[i] && nodeId && nodeId.toString() === id) {
        if (typeof mapper.child === 'string' && obj[i].hasOwnProperty(mapper.child) && obj[i][mapper.child] !== null || this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] && obj[i].hasOwnProperty('child')) {
          var key = typeof mapper.child === 'string' ? mapper.child : 'child';
          var childData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(key, obj[i]);

          if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(childData)) {
            childData = [];
          }

          index = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index) ? childData.length : index;

          for (var k = 0, len = data.length; k < len; k++) {
            childData.splice(index, 0, data[k]);
            index++;
          }
        } else {
          var key = typeof mapper.child === 'string' ? mapper.child : 'child';
          obj[i][key] = data;
        }

        return true;
      } else if (typeof mapper.child === 'string' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, obj[i]))) {
        var childObj = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, obj[i]);
        updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index);

        if (updated !== undefined) {
          break;
        }
      } else if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', obj[i]))) {
        var childData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', obj[i]);
        updated = this.addChildData(childData, this.getChildMapper(mapper), id, data, index);

        if (updated !== undefined) {
          break;
        }
      }
    }

    return updated;
  };

  TreeView.prototype.doDisableAction = function (nodes) {
    var validNodes = this.nodeType(nodes);
    var validID = this.checkValidId(validNodes);
    this.validArr = [];

    for (var i = 0, len = validID.length; i < len; i++) {
      var id = validID[i][this.fields.id].toString();

      if (id && this.disableNode.indexOf(id) === -1) {
        this.disableNode.push(id);
      }

      var liEle = this.getElement(id);

      if (liEle) {
        liEle.setAttribute('aria-disabled', 'true');
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([liEle], DISABLE);
      }
    }
  };

  TreeView.prototype.doEnableAction = function (nodes) {
    var strNodes = this.nodeType(nodes);

    for (var i = 0, len = strNodes.length; i < len; i++) {
      var liEle = this.getElement(strNodes[i]);
      var id = strNodes[i];

      if (id && this.disableNode.indexOf(id) !== -1) {
        this.disableNode.splice(this.disableNode.indexOf(id), 1);
      }

      if (liEle) {
        liEle.removeAttribute('aria-disabled');
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([liEle], DISABLE);
      }
    }
  };

  TreeView.prototype.nodeType = function (nodes) {
    var validID = [];

    for (var i = 0, len = nodes.length; i < len; i++) {
      var id = void 0;

      if (typeof nodes[i] == "string") {
        id = nodes[i] ? nodes[i].toString() : null;
      } else if (typeof nodes[i] === "object") {
        id = nodes[i] ? nodes[i].getAttribute("data-uid").toString() : null;
      }

      if (validID.indexOf(id) == -1) {
        validID.push(id);
      }
    }

    return validID;
  };

  TreeView.prototype.checkValidId = function (node) {
    var _this = this;

    if (this.dataType === 1) {
      this.validArr = this.treeData.filter(function (data) {
        return node.indexOf(data[_this.fields.id] ? data[_this.fields.id].toString() : null) !== -1;
      });
    } else if (this.dataType === 2) {
      for (var k = 0; k < this.treeData.length; k++) {
        var id = this.treeData[k][this.fields.id] ? this.treeData[k][this.fields.id].toString() : null;

        if (node.indexOf(id) !== -1) {
          this.validArr.push(this.treeData[k]);
        }

        var childItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), this.treeData[k]);

        if (childItems) {
          this.filterNestedChild(childItems, node);
        }
      }
    }

    return this.validArr;
  };

  TreeView.prototype.filterNestedChild = function (treeData, nodes) {
    for (var k = 0; k < treeData.length; k++) {
      var id = treeData[k][this.fields.id] ? treeData[k][this.fields.id].toString() : null;

      if (nodes.indexOf(id) !== -1) {
        this.validArr.push(treeData[k]);
      }

      var childItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), treeData[k]);

      if (childItems) {
        this.filterNestedChild(childItems, nodes);
      }
    }
  };

  TreeView.prototype.setTouchClass = function () {
    var ele = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, '.' + BIGGER);
    this.touchClass = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele) ? '' : SMALL;
  };

  TreeView.prototype.updatePersistProp = function () {
    this.removeField(this.treeData, this.fields, ['selected', 'expanded']);
    var sleNodes = this.selectedNodes;

    for (var l = 0, slelen = sleNodes.length; l < slelen; l++) {
      this.updateField(this.treeData, this.fields, sleNodes[l], 'selected', true);
    }

    var enodes = this.expandedNodes;

    for (var k = 0, nodelen = enodes.length; k < nodelen; k++) {
      this.updateField(this.treeData, this.fields, enodes[k], 'expanded', true);
    }

    if (this.showCheckBox) {
      this.removeField(this.treeData, this.fields, ['isChecked']);
      var cnodes = this.checkedNodes;

      for (var m = 0, nodelen = cnodes.length; m < nodelen; m++) {
        this.updateField(this.treeData, this.fields, cnodes[m], 'isChecked', true);
      }
    }
  };

  TreeView.prototype.removeField = function (obj, mapper, names) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(obj) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(mapper)) {
      return;
    }

    for (var i = 0, objlen = obj.length; i < objlen; i++) {
      for (var j = 0; j < names.length; j++) {
        var field = this.getMapperProp(mapper, names[j]);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(obj[i][field])) {
          delete obj[i][field];
        }
      }

      if (typeof mapper.child === 'string' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, obj[i]))) {
        this.removeField(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, obj[i]), this.getChildMapper(mapper), names);
      } else if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', obj[i]))) {
        this.removeField(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', obj[i]), this.getChildMapper(mapper), names);
      }
    }
  };

  TreeView.prototype.getMapperProp = function (mapper, fieldName) {
    switch (fieldName) {
      case 'selected':
        return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(mapper.selected) ? mapper.selected : 'selected';

      case 'expanded':
        return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(mapper.expanded) ? mapper.expanded : 'expanded';

      case 'isChecked':
        return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(mapper.isChecked) ? mapper.isChecked : 'isChecked';

      case 'hasChildren':
        return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(mapper.hasChildren) ? mapper.hasChildren : 'hasChildren';

      default:
        return fieldName;
    }
  };

  TreeView.prototype.updateField = function (obj, mapper, id, key, value) {
    var childNodes;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(id)) {
      return;
    } else if (this.dataType === 1) {
      var newId = this.isNumberTypeId ? parseFloat(id) : id;
      var resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]().where(mapper.id, 'equal', newId, false));
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(this.getMapperProp(mapper, key), value, resultData[0]);
    } else {
      this.updateChildField(obj, mapper, id, key, value);
    }
  };

  TreeView.prototype.updateChildField = function (obj, mapper, id, key, value, remove) {
    var removedData;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(obj)) {
      return removedData;
    }

    for (var i = 0, objlen = obj.length; i < objlen; i++) {
      var nodeId = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.id, obj[i]);

      if (obj[i] && nodeId && nodeId.toString() === id) {
        if (remove) {
          removedData = obj.splice(i, 1);
        } else {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(this.getMapperProp(mapper, key), value, obj[i]);
          removedData = [];
        }

        return removedData;
      } else if (typeof mapper.child === 'string' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, obj[i]))) {
        var childData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, obj[i]);
        removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove);

        if (removedData !== undefined) {
          break;
        }
      } else if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', obj[i]))) {
        var childItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', obj[i]);
        removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove);

        if (removedData !== undefined) {
          break;
        }
      }
    }

    return removedData;
  };

  TreeView.prototype.triggerEvent = function (action, node) {
    this.renderReactTemplates();

    if (action === 'addNodes') {
      var nodeData = [];

      for (var i = 0; i < node.length; i++) {
        nodeData.push(this.getNode(this.getElement(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(node[i][this.fields.id]) ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.id, node[i]).toString() : null)));
      }

      node = nodeData;
    }

    var eventArgs = {
      data: this.treeData,
      action: action,
      nodeData: node
    };
    this.trigger('dataSourceChanged', eventArgs);
  };

  TreeView.prototype.wireInputEvents = function (inpEle) {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(inpEle, 'blur', this.inputFocusOut, this);
  };

  TreeView.prototype.wireEditingEvents = function (toBind) {
    var _this = this;

    if (toBind && !this.disabled) {
      var proxy_2 = this;
      this.touchEditObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.element, {
        tap: function (e) {
          if (_this.isDoubleTapped(e) && e.tapCount === 2) {
            e.originalEvent.preventDefault();
            proxy_2.editingHandler(e.originalEvent);
          }
        }
      });
    } else {
      if (this.touchEditObj) {
        this.touchEditObj.destroy();
      }
    }
  };

  TreeView.prototype.wireClickEvent = function (toBind) {
    if (toBind) {
      var proxy_3 = this;
      this.touchClickObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.element, {
        tap: function (e) {
          proxy_3.clickHandler(e);
        }
      });
    } else {
      if (this.touchClickObj) {
        this.touchClickObj.destroy();
      }
    }
  };

  TreeView.prototype.wireExpandOnEvent = function (toBind) {
    var _this = this;

    if (toBind) {
      var proxy_4 = this;
      this.touchExpandObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.element, {
        tap: function (e) {
          if ((_this.expandOnType === 'Click' || _this.expandOnType === 'DblClick' && _this.isDoubleTapped(e) && e.tapCount === 2) && e.originalEvent.which !== 3) {
            proxy_4.expandHandler(e);
          }
        }
      });
    } else {
      if (this.touchExpandObj) {
        this.touchExpandObj.destroy();
      }
    }
  };

  TreeView.prototype.mouseDownHandler = function (e) {
    this.mouseDownStatus = true;

    if (e.shiftKey || e.ctrlKey) {
      e.preventDefault();
    }

    if (e.ctrlKey && this.allowMultiSelection) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'contextmenu', this.preventContextMenu, this);
    }
  };

  ;

  TreeView.prototype.preventContextMenu = function (e) {
    e.preventDefault();
  };

  TreeView.prototype.wireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'mousedown', this.mouseDownHandler, this);
    this.wireClickEvent(true);

    if (this.expandOnType !== 'None') {
      this.wireExpandOnEvent(true);
    }

    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'mouseover', this.onMouseOver, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'mouseout', this.onMouseLeave, this);
    this.keyboardModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.element, {
      keyAction: this.keyActionHandler.bind(this),
      keyConfigs: this.keyConfigs,
      eventName: 'keydown'
    });
  };

  TreeView.prototype.unWireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mousedown', this.mouseDownHandler);
    this.wireClickEvent(false);
    this.wireExpandOnEvent(false);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseover', this.onMouseOver);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseout', this.onMouseLeave);

    if (!this.disabled) {
      this.keyboardModule.destroy();
    }
  };

  TreeView.prototype.parents = function (element, selector) {
    var matched = [];
    var el = element.parentNode;

    while (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(el)) {
      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["matches"])(el, selector)) {
        matched.push(el);
      }

      el = el.parentNode;
    }

    return matched;
  };

  TreeView.prototype.isDoubleTapped = function (e) {
    var target = e.originalEvent.target;
    var secondTap;

    if (target && e.tapCount) {
      if (e.tapCount === 1) {
        this.firstTap = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + LISTITEM);
      } else if (e.tapCount === 2) {
        secondTap = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + LISTITEM);
      }
    }

    return this.firstTap === secondTap;
  };

  TreeView.prototype.isDescendant = function (parent, child) {
    var node = child.parentNode;

    while (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(node)) {
      if (node === parent) {
        return true;
      }

      node = node.parentNode;
    }

    return false;
  };

  TreeView.prototype.showSpinner = function (element) {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([element], LOAD);
    Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_5__["createSpinner"])({
      target: element,
      width: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice ? 16 : 14
    }, this.createElement);
    Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_5__["showSpinner"])(element);
  };

  TreeView.prototype.hideSpinner = function (element) {
    Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_5__["hideSpinner"])(element);
    element.innerHTML = '';
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([element], LOAD);
  };

  TreeView.prototype.setCheckedNodes = function (nodes) {
    nodes = JSON.parse(JSON.stringify(nodes));
    this.uncheckAll(this.checkedNodes);
    this.setIndeterminate(nodes);

    if (nodes.length > 0) {
      this.checkAll(nodes);
    }
  };
  /**
   * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel
   */


  TreeView.prototype.setValidCheckedNode = function (node) {
    if (this.dataType === 1) {
      var mapper = this.fields;
      var resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]().where(mapper.id, 'equal', node, true));

      if (resultData[0]) {
        this.setChildCheckState(resultData, node, resultData[0]);

        if (this.autoCheck) {
          var parent_4 = resultData[0][this.fields.parentID] ? resultData[0][this.fields.parentID].toString() : null;
          var childNodes = this.getChildNodes(this.treeData, parent_4);
          var count = 0;

          for (var len = 0; len < childNodes.length; len++) {
            var childId = childNodes[len][this.fields.id].toString();

            if (this.checkedNodes.indexOf(childId) !== -1) {
              count++;
            }
          }

          if (count === childNodes.length && this.checkedNodes.indexOf(parent_4) === -1 && parent_4) {
            this.checkedNodes.push(parent_4);
          }
        }
      }
    } else if (this.dataType === 2) {
      for (var a = 0; a < this.treeData.length; a++) {
        var index = this.treeData[a][this.fields.id] ? this.treeData[a][this.fields.id].toString() : '';

        if (index === node && this.checkedNodes.indexOf(node) === -1) {
          this.checkedNodes.push(node);
          break;
        }

        var childItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), this.treeData[a]);

        if (childItems) {
          this.setChildCheckState(childItems, node, this.treeData[a]);
        }
      }
    }
  };
  /**
   * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel(for hierarchical DS)
   */


  TreeView.prototype.setChildCheckState = function (childItems, node, treeData) {
    var checkedParent;
    var count = 0;

    if (this.dataType === 1) {
      if (treeData) {
        checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : null;
      }

      for (var index = 0; index < childItems.length; index++) {
        var checkNode = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : null;

        if (treeData && checkedParent && this.autoCheck) {
          if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkNode) === -1) {
            this.checkedNodes.push(checkNode);
          }
        }

        if (checkNode === node && this.checkedNodes.indexOf(node) === -1) {
          this.checkedNodes.push(node);
        }

        var subChildItems = this.getChildNodes(this.treeData, checkNode);

        if (subChildItems) {
          this.setChildCheckState(subChildItems, node, treeData);
        }
      }
    } else {
      if (treeData) {
        checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';
      }

      for (var index = 0; index < childItems.length; index++) {
        var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';

        if (treeData && checkedParent && this.autoCheck) {
          if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {
            this.checkedNodes.push(checkedChild);
          }
        }

        if (checkedChild === node && this.checkedNodes.indexOf(node) === -1) {
          this.checkedNodes.push(node);
        }

        var subChildItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), childItems[index]);

        if (subChildItems) {
          this.setChildCheckState(subChildItems, node, childItems[index]);
        }

        if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {
          count++;
        }

        if (count === childItems.length && this.checkedNodes.indexOf(checkedParent) === -1 && this.autoCheck) {
          this.checkedNodes.push(checkedParent);
        }
      }
    }
  };

  TreeView.prototype.setIndeterminate = function (nodes) {
    for (var i = 0; i < nodes.length; i++) {
      this.setValidCheckedNode(nodes[i]);
    }
  };

  TreeView.prototype.updatePosition = function (id, newData, isRefreshChild, childValue) {
    if (this.dataType === 1) {
      var pos = this.getDataPos(this.treeData, this.fields, id);
      this.treeData.splice(pos, 1, newData);

      if (isRefreshChild) {
        this.removeChildNodes(id);

        for (var j = 0; j < childValue.length; j++) {
          this.treeData.splice(pos, 0, childValue[j]);
          pos++;
        }
      }

      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
    } else {
      this.updateChildPosition(this.treeData, this.fields, id, [newData], undefined);
    }
  };

  TreeView.prototype.updateChildPosition = function (treeData, mapper, currID, newData, index) {
    var found;

    for (var i = 0, objlen = treeData.length; i < objlen; i++) {
      var nodeId = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.id, treeData[i]);

      if (treeData[i] && nodeId && nodeId.toString() === currID) {
        treeData[i] = newData[0];
        return true;
      } else if (typeof mapper.child === 'string' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, treeData[i]))) {
        var childObj = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, treeData[i]);
        found = this.updateChildPosition(childObj, this.getChildMapper(mapper), currID, newData, index);

        if (found !== undefined) {
          break;
        }
      } else if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', treeData[i]))) {
        var childData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', treeData[i]);
        found = this.updateChildPosition(childData, this.getChildMapper(mapper), currID, newData, index);

        if (found !== undefined) {
          break;
        }
      }
    }

    return found;
  };

  TreeView.prototype.dynamicState = function () {
    this.setDragAndDrop(this.allowDragAndDrop);
    this.wireEditingEvents(this.allowEditing);

    if (!this.disabled) {
      this.wireEvents();
      this.setRipple();
    } else {
      this.unWireEvents();
      this.rippleFn();
      this.rippleIconFn();
    }
  };

  TreeView.prototype.crudOperation = function (operation, nodes, target, newText, newNode, index, prevent) {
    var _this = this;

    var data = this.fields.dataSource;
    var matchedArr = [];
    var query = this.getQuery(this.fields);
    var key = this.fields.id;
    var crud;
    var changes = {
      addedRecords: [],
      deletedRecords: [],
      changedRecords: []
    };
    var nodesID = [];

    if (nodes) {
      nodesID = this.nodeType(nodes);
    } else if (target) {
      if (typeof target == "string") {
        nodesID[0] = target.toString();
      } else if (typeof target === "object") {
        nodesID[0] = target.getAttribute("data-uid").toString();
      }
    }

    for (var i = 0, len = nodesID.length; i < len; i++) {
      var liEle = this.getElement(nodesID[i]);

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liEle)) {
        continue;
      }

      var removedData = this.getNodeObject(nodesID[i]);
      matchedArr.push(removedData);
    }

    switch (operation) {
      case 'delete':
        if (nodes.length == 1) {
          crud = data.remove(key, matchedArr[0], query.fromTable, query);
        } else {
          changes.deletedRecords = matchedArr;
          crud = data.saveChanges(changes, key, query.fromTable, query);
        }

        crud.then(function (e) {
          return _this.deleteSuccess(nodesID);
        }).catch(function (e) {
          return _this.dmFailure(e);
        });
        break;

      case 'update':
        matchedArr[0][this.fields.text] = newText;
        crud = data.update(key, matchedArr[0], query.fromTable, query);
        crud.then(function (e) {
          return _this.editSucess(target, newText, prevent);
        }).catch(function (e) {
          return _this.dmFailure(e, target, prevent);
        });
        break;

      case 'insert':
        if (newNode.length == 1) {
          crud = data.insert(newNode[0], query.fromTable, query);
        } else {
          var arr = [];

          for (var i = 0, len = newNode.length; i < len; i++) {
            arr.push(newNode[i]);
          }

          changes.addedRecords = arr;
          crud = data.saveChanges(changes, key, query.fromTable, query);
        }

        crud.then(function (e) {
          var dropLi = _this.getElement(target);

          _this.addSuccess(newNode, dropLi, index);

          _this.preventExpand = false;
        }).catch(function (e) {
          return _this.dmFailure(e);
        });
        break;
    }
  };

  TreeView.prototype.deleteSuccess = function (nodes) {
    var nodeData = [];

    for (var i = 0, len = nodes.length; i < len; i++) {
      var liEle = this.getElement(nodes[i]);
      nodeData.push(this.getNode(liEle));

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liEle)) {
        continue;
      }

      this.removeNode(liEle);
    }

    this.updateInstance();

    if (this.dataType === 1) {
      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
    }

    this.triggerEvent('removeNode', nodeData);
  };

  TreeView.prototype.editSucess = function (target, newText, prevent) {
    var liEle = this.getElement(target);
    var txtEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + LISTTEXT, liEle);
    this.appendNewText(liEle, txtEle, newText, prevent);
  };

  TreeView.prototype.addSuccess = function (nodes, dropLi, index) {
    var dropUl;
    var icon = dropLi ? dropLi.querySelector('.' + ICON) : null;
    var proxy = this;

    if (dropLi && icon && icon.classList.contains(EXPANDABLE) && dropLi.querySelector('.' + PARENTITEM) === null) {
      proxy.renderChildNodes(dropLi, null, function () {
        dropUl = dropLi.querySelector('.' + PARENTITEM);
        proxy.addGivenNodes(nodes, dropLi, index, true, dropUl);
        proxy.triggerEvent('addNodes', nodes);
      });
    } else {
      this.addGivenNodes(nodes, dropLi, index, true);
      this.triggerEvent('addNodes', nodes);
    }
  };

  TreeView.prototype.dmFailure = function (e, target, prevent) {
    if (target) {
      this.updatePreviousText(target, prevent);
    }

    this.trigger('actionFailure', {
      error: e
    });
  };

  TreeView.prototype.updatePreviousText = function (target, prevent) {
    var liEle = this.getElement(target);
    var txtEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + LISTTEXT, liEle);
    this.updateText(liEle, txtEle, this.oldText, prevent);
  };

  TreeView.prototype.getHierarchicalParentId = function (node, data, parentsID) {
    var _this = this;

    var index = data.findIndex(function (data) {
      return data[_this.fields.id] && data[_this.fields.id].toString() === node;
    });

    if (index == -1) {
      for (var i = 0; i < data.length; i++) {
        var childItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), data[i]);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(childItems)) {
          index = childItems.findIndex(function (data) {
            return data[_this.fields.id] && data[_this.fields.id].toString() === node;
          });

          if (index == -1) {
            this.getHierarchicalParentId(node, childItems, parentsID);
          } else {
            parentsID.push(data[i][this.fields.id].toString());
            this.getHierarchicalParentId(data[i][this.fields.id].toString(), this.treeData, parentsID);
            break;
          }
        }
      }
    }

    return parentsID;
  };
  /**
   * Called internally if any of the property value changed.
   * @param  {TreeView} newProp
   * @param  {TreeView} oldProp
   * @returns void
   * @private
   */


  TreeView.prototype.onPropertyChanged = function (newProp, oldProp) {
    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'allowDragAndDrop':
          this.setDragAndDrop(this.allowDragAndDrop);
          break;

        case 'dragArea':
          if (this.allowDragAndDrop) {
            this.dragObj.dragArea = this.dragArea;
          }

          break;

        case 'allowEditing':
          this.wireEditingEvents(this.allowEditing);
          break;

        case 'allowMultiSelection':
          if (this.selectedNodes.length > 1) {
            var sNode = this.getElement(this.selectedNodes[0]);
            this.isLoaded = false;
            this.removeSelectAll();
            this.selectNode(sNode, null);
            this.isLoaded = true;
          }

          this.setMultiSelect(this.allowMultiSelection);
          this.addMultiSelect(this.allowMultiSelection);
          break;

        case 'allowTextWrap':
          this.setTextWrap();
          this.updateWrap();
          break;

        case 'checkedNodes':
          if (this.showCheckBox) {
            this.checkedNodes = oldProp.checkedNodes;
            this.setCheckedNodes(newProp.checkedNodes);
          }

          break;

        case 'autoCheck':
          if (this.showCheckBox) {
            this.autoCheck = newProp.autoCheck;
            this.ensureIndeterminate();
          }

          break;

        case 'cssClass':
          this.setCssClass(oldProp.cssClass, newProp.cssClass);
          break;

        case 'enableRtl':
          this.setEnableRtl();
          break;

        case 'expandedNodes':
          this.isAnimate = false;
          this.setProperties({
            expandedNodes: []
          }, true);
          this.collapseAll();
          this.isInitalExpand = true;
          this.setProperties({
            expandedNodes: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newProp.expandedNodes) ? [] : newProp.expandedNodes
          }, true);
          this.doExpandAction();
          this.isInitalExpand = false;
          this.isAnimate = true;
          break;

        case 'expandOn':
          this.wireExpandOnEvent(false);
          this.setExpandOnType();

          if (this.expandOnType !== 'None' && !this.disabled) {
            this.wireExpandOnEvent(true);
          }

          break;

        case 'disabled':
          this.setDisabledMode();
          this.dynamicState();
          break;

        case 'fields':
          this.isAnimate = false;
          this.isFieldChange = true;
          this.initialRender = true;
          this.reRenderNodes();
          this.initialRender = false;
          this.isAnimate = true;
          this.isFieldChange = false;
          break;

        case 'fullRowSelect':
          this.setFullRow(this.fullRowSelect);
          this.addFullRow(this.fullRowSelect);

          if (this.allowTextWrap) {
            this.setTextWrap();
            this.updateWrap();
          }

          break;

        case 'loadOnDemand':
          if (this.loadOnDemand === false && !this.onLoaded) {
            var nodes = this.element.querySelectorAll('li');
            var i = 0;

            while (i < nodes.length) {
              if (nodes[i].getAttribute('aria-expanded') !== 'true') {
                this.renderChildNodes(nodes[i], true, null, true);
              }

              i++;
            }

            this.onLoaded = true;
          }

          break;

        case 'nodeTemplate':
          this.hasTemplate = false;
          this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);
          this.reRenderNodes();
          break;

        case 'selectedNodes':
          this.removeSelectAll();
          this.setProperties({
            selectedNodes: newProp.selectedNodes
          }, true);
          this.doSelectionAction();
          break;

        case 'showCheckBox':
          this.reRenderNodes();
          break;

        case 'sortOrder':
          this.reRenderNodes();
          break;

        case 'fullRowNavigable':
          this.setProperties({
            fullRowNavigable: newProp.fullRowNavigable
          }, true);
          this.listBaseOption.itemNavigable = newProp.fullRowNavigable;
          this.reRenderNodes();
          break;
      }
    }
  };
  /**
   * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.
   */


  TreeView.prototype.destroy = function () {
    this.clearTemplate();
    this.element.removeAttribute('aria-activedescendant');
    this.unWireEvents();
    this.wireEditingEvents(false);

    if (!this.disabled) {
      this.rippleFn();
      this.rippleIconFn();
    }

    this.setCssClass(this.cssClass, null);
    this.setDragAndDrop(false);
    this.setFullRow(false);

    if (this.ulElement && this.ulElement.parentElement) {
      this.ulElement.parentElement.removeChild(this.ulElement);
    }

    this.ulElement = null;
    this.liList = null;
    this.startNode = null;
    this.firstTap = null;
    this.expandArgs = null;
    this.dragLi = null;
    this.dragTarget = null;
    this.dragParent = null;
    this.dragObj = null;
    this.dropObj = null;
    this.inputObj = null;
    this.touchEditObj = null;
    this.touchExpandObj = null;
    this.touchClickObj = null;

    _super.prototype.destroy.call(this);
  };
  /**
   * Adds the collection of TreeView nodes based on target and index position. If target node is not specified,
   * then the nodes are added as children of the given parentID or in the root level of TreeView.
   * @param  { { [key: string]: Object }[] } nodes - Specifies the array of JSON data that has to be added.
   * @param  { string | Element } target - Specifies ID of TreeView node/TreeView node as target element.
   * @param  { number } index - Specifies the index to place the newly added nodes in the target element.
   * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.
   */


  TreeView.prototype.addNodes = function (nodes, target, index, preventTargetExpand) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nodes)) {
      return;
    }

    nodes = JSON.parse(JSON.stringify(nodes));
    var dropLi = this.getElement(target);
    this.preventExpand = preventTargetExpand;

    if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) {
      if (!this.isOffline) {
        this.crudOperation('insert', null, target, null, nodes, index, this.preventExpand);
      } else {
        this.addSuccess(nodes, dropLi, index);
      }
    } else if (this.dataType === 2) {
      this.addGivenNodes(nodes, dropLi, index);
    } else {
      if (dropLi) {
        this.addGivenNodes(nodes, dropLi, index);
      } else {
        nodes = this.getSortedData(nodes);

        for (var i = 0; i < nodes.length; i++) {
          var pid = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.parentID, nodes[i]);
          dropLi = pid ? this.getElement(pid.toString()) : pid;
          this.addGivenNodes([nodes[i]], dropLi, index);
        }
      }

      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
    }

    this.updateCheckedStateFromDS();

    if (this.showCheckBox && dropLi) {
      this.ensureParentCheckState(dropLi);
    }

    if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] === false) {
      this.preventExpand = false;
      this.triggerEvent('addNodes', nodes);
    }
  };
  /**
   * Editing can also be enabled by using the `beginEdit` property, instead of clicking on the
   * TreeView node. On passing the node ID or element through this property, the edit textBox
   * will be created for the particular node thus allowing us to edit it.
   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.
   */


  TreeView.prototype.beginEdit = function (node) {
    var ele = this.getElement(node);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele) || this.disabled) {
      return;
    }

    this.createTextbox(ele, null);
  };
  /**
   * Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes
   * as argument to this method.
   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.
   */


  TreeView.prototype.checkAll = function (nodes) {
    if (this.showCheckBox) {
      this.doCheckBoxAction(nodes, true);
    }
  };
  /**
   * Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.
   * You can also collapse all the nodes excluding the hidden nodes by setting **excludeHiddenNodes** to true. If you want to collapse
   * a specific level of nodes, set **level** as argument to collapseAll method.
   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/ array of TreeView node.
   * @param  {number} level - TreeView nodes will collapse up to the given level.
   * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes of TreeView when collapsing all nodes.
   */


  TreeView.prototype.collapseAll = function (nodes, level, excludeHiddenNodes) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nodes)) {
      this.doGivenAction(nodes, COLLAPSIBLE, false);
    } else {
      if (level > 0) {
        this.collapseByLevel(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, this.element), level, excludeHiddenNodes);
      } else {
        this.collapseAllNodes(excludeHiddenNodes);
      }
    }
  };
  /**
   * Disables the collection of nodes by passing the ID of nodes or node elements in the array.
   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.
   */


  TreeView.prototype.disableNodes = function (nodes) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nodes)) {
      this.doDisableAction(nodes);
    }
  };
  /**
   * Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.
   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.
   */


  TreeView.prototype.enableNodes = function (nodes) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nodes)) {
      this.doEnableAction(nodes);
    }
  };
  /**
   * Ensures visibility of the TreeView node by using node ID or node element.
   * When many TreeView nodes are present and we need to find a particular node, `ensureVisible` property
   * helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.
   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView nodes.
   */


  TreeView.prototype.ensureVisible = function (node) {
    var parentsId = [];

    if (this.dataType == 1) {
      var nodeData = this.getTreeData(node);

      while (nodeData.length != 0 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nodeData[0][this.fields.parentID])) {
        parentsId.push(nodeData[0][this.fields.parentID].toString());
        nodeData = this.getTreeData(nodeData[0][this.fields.parentID].toString());
      }
    } else if (this.dataType == 2) {
      parentsId = this.getHierarchicalParentId(node, this.treeData, parentsId).reverse();
    }

    this.expandAll(parentsId);
    var liEle = this.getElement(node);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liEle)) {
      if (typeof node == 'object') {
        var parents = this.parents(liEle, '.' + LISTITEM);
        this.expandAll(parents);
      }

      setTimeout(function () {
        liEle.scrollIntoView({
          behavior: "smooth"
        });
      }, 450);
    }
  };
  /**
   * Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes
   * as argument to this method. You can also expand all the collapsed nodes by excluding the hidden nodes by setting
   * **excludeHiddenNodes** to true to this method. To expand a specific level of nodes, set **level** as argument to expandAll method.
   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.
   * @param  {number} level - TreeView nodes will expand up to the given level.
   * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes when expanding all nodes.
   */


  TreeView.prototype.expandAll = function (nodes, level, excludeHiddenNodes) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nodes)) {
      this.doGivenAction(nodes, EXPANDABLE, true);
    } else {
      if (level > 0) {
        this.expandByLevel(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, this.element), level, excludeHiddenNodes);
      } else {
        this.expandAllNodes(excludeHiddenNodes);
      }
    }
  };
  /**
   * Gets all the checked nodes including child, whether it is loaded or not.
   */


  TreeView.prototype.getAllCheckedNodes = function () {
    var checkNodes = this.checkedNodes;
    return checkNodes;
  };
  /**
  * Gets all the disabled nodes including child, whether it is loaded or not.
  */


  TreeView.prototype.getDisabledNodes = function () {
    var disabledNodes = this.disableNode;
    return disabledNodes;
  };
  /**
   * Gets the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.
   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.
   */


  TreeView.prototype.getNode = function (node) {
    var ele = this.getElement(node);
    return this.getNodeData(ele, true);
  };
  /**
   * To get the updated data source of TreeView after performing some operation like drag and drop, node editing,
   * node selecting/unSelecting, node expanding/collapsing, node checking/unChecking, adding and removing node.
   * * If you pass the ID of TreeView node as arguments for this method then it will return the updated data source
   * of the corresponding node otherwise it will return the entire updated data source of TreeView.
   * * The updated data source also contains custom attributes if you specified in data source.
   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.
   * @isGenericType true
   */


  TreeView.prototype.getTreeData = function (node) {
    var id = this.getId(node);
    this.updatePersistProp();

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(id)) {
      return this.treeData;
    } else {
      var data = this.getNodeObject(id);
      return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data) ? [] : [data];
    }
  };
  /**
   * Moves the collection of nodes within the same TreeView based on target or its index position.
   * @param  {string[] | Element[]} sourceNodes - Specifies the array of TreeView nodes ID/array of TreeView node.
   * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.
   * @param  {number} index - Specifies the index to place the moved nodes in the target element.
   * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.
   */


  TreeView.prototype.moveNodes = function (sourceNodes, target, index, preventTargetExpand) {
    var dropLi = this.getElement(target);
    var nodeData = [];

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dropLi)) {
      return;
    }

    for (var i = 0; i < sourceNodes.length; i++) {
      var dragLi = this.getElement(sourceNodes[i]);
      nodeData.push(this.getNode(dragLi));

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {
        continue;
      }

      this.preventExpand = preventTargetExpand;
      this.dropAsChildNode(dragLi, dropLi, this, index);
    }

    if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] === false) {
      this.preventExpand = false;
    }

    this.triggerEvent('moveNodes', nodeData);
  };
  /**
   * Refreshes a particular node of the TreeView.
   * @param  {string | Element} target - Specifies the ID of TreeView node or TreeView node as target element.
   * @param  {{ [key: string]: Object }[]} newData - Specifies the new data of TreeView node.
   */


  TreeView.prototype.refreshNode = function (target, newData) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newData)) {
      return;
    }

    var id;
    var isRefreshChild = false;

    if (this.dataType == 1 && newData.length > 1) {
      isRefreshChild = true;
    } else if (this.dataType == 2 && newData.length === 1) {
      var updatedChildValue = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), newData[0]);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(updatedChildValue)) {
        isRefreshChild = true;
      }
    }

    var liEle = this.getElement(target);
    id = liEle ? liEle.getAttribute('data-uid') : target ? target.toString() : null;
    this.refreshData = this.getNodeObject(id);
    newData = JSON.parse(JSON.stringify(newData));
    /* eslint-disable */

    var newNodeData;
    var parentData;

    if (this.dataType == 1 && isRefreshChild) {
      for (var k = 0; k < newData.length; k++) {
        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newData[k][this.fields.parentID])) {
          parentData = newData[k];
          newData.splice(k, 1);
          break;
        }
      }

      newNodeData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, this.refreshData, parentData);
    } else {
      newNodeData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, this.refreshData, newData[0]);
    }

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liEle)) {
      this.updatePosition(id, newNodeData, isRefreshChild, newData);
      return;
    }

    this.isRefreshed = true;
    var level = parseFloat(liEle.getAttribute('aria-level'));
    var newliEle = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].createListItemFromJson(this.createElement, [newNodeData], this.listBaseOption, level);
    var ul = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, liEle);
    var childItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), newNodeData);

    if (isRefreshChild && ul || isRefreshChild && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(childItems)) {
      var parentEle = liEle.parentElement;
      var index = Array.prototype.indexOf.call(parentEle.childNodes, liEle);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(liEle);
      parentEle.insertBefore(newliEle[0], parentEle.childNodes[index]);
      this.updatePosition(id, newNodeData, isRefreshChild, newData);

      if (isRefreshChild && ul) {
        this.expandAll([id]);
      }
    } else {
      var txtEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TEXTWRAP, liEle);
      var newTextEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TEXTWRAP, newliEle[0]);
      var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, txtEle);
      var newIcon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, newTextEle);

      if (icon && newIcon) {
        if (newIcon.classList.contains(EXPANDABLE) && icon.classList.contains(COLLAPSIBLE)) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([newIcon], EXPANDABLE);
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([newIcon], COLLAPSIBLE);
        } else if (newIcon.classList.contains(COLLAPSIBLE) && icon.classList.contains(EXPANDABLE)) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([newIcon], COLLAPSIBLE);
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([newIcon], EXPANDABLE);
        } else if (icon.classList.contains('interaction')) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([newIcon], 'interaction');
        }
      }

      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(txtEle);
      var fullEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + FULLROW, liEle);
      fullEle.parentNode.insertBefore(newTextEle, fullEle.nextSibling);
      this.updatePosition(id, newNodeData, isRefreshChild, newData);
    }

    liEle = this.getElement(target);

    if (newNodeData[this.fields.tooltip]) {
      liEle.setAttribute("title", newNodeData[this.fields.tooltip]);
    }

    if (newNodeData.hasOwnProperty(this.fields.htmlAttributes) && newNodeData[this.fields.htmlAttributes]) {
      var attr = {};
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(attr, newNodeData[this.fields.htmlAttributes]);

      if (attr.class) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([liEle], attr.class.split(' '));
        delete attr.class;
      } else {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(liEle, attr);
      }
    }

    if (this.selectedNodes.indexOf(id) !== -1) {
      liEle.setAttribute('aria-selected', 'true');
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([liEle], ACTIVE);
    }

    this.isRefreshed = false;
    this.triggerEvent('refreshNode', [this.getNode(liEle)]);
  };
  /**
   * Removes the collection of TreeView nodes by passing the array of node details as argument to this method.
   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.
   */


  TreeView.prototype.removeNodes = function (nodes) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nodes)) {
      if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] && !this.isOffline) {
        this.crudOperation('delete', nodes);
      } else {
        this.deleteSuccess(nodes);
      }
    }
  };
  /**
   * Replaces the text of the TreeView node with the given text.
   * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.
   * @param  {string} newText - Specifies the new text of TreeView node.
   */


  TreeView.prototype.updateNode = function (target, newText) {
    var _this = this;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newText) || !this.allowEditing) {
      return;
    }

    var liEle = this.getElement(target);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liEle)) {
      return;
    }

    var txtEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + LISTTEXT, liEle);
    this.updateOldText(liEle);
    var eventArgs = this.getEditEvent(liEle, null, null);
    this.trigger('nodeEditing', eventArgs, function (observedArgs) {
      if (!observedArgs.cancel) {
        if (_this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] && !_this.isOffline) {
          _this.crudOperation('update', null, target, newText, null, null, false);
        } else {
          _this.appendNewText(liEle, txtEle, newText, false);
        }
      }
    });
  };
  /**
   * Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes
   * as argument to this method.
   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.
   */


  TreeView.prototype.uncheckAll = function (nodes) {
    if (this.showCheckBox) {
      this.doCheckBoxAction(nodes, false);
    }
  };

  var TreeView_1;

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TreeView.prototype, "allowDragAndDrop", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TreeView.prototype, "allowEditing", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TreeView.prototype, "allowMultiSelection", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TreeView.prototype, "allowTextWrap", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, NodeAnimationSettings)], TreeView.prototype, "animation", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], TreeView.prototype, "checkedNodes", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], TreeView.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TreeView.prototype, "disabled", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], TreeView.prototype, "dragArea", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TreeView.prototype, "enableHtmlSanitizer", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TreeView.prototype, "enablePersistence", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], TreeView.prototype, "expandedNodes", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Auto')], TreeView.prototype, "expandOn", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, FieldsSettings)], TreeView.prototype, "fields", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], TreeView.prototype, "fullRowSelect", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], TreeView.prototype, "loadOnDemand", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], TreeView.prototype, "locale", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], TreeView.prototype, "nodeTemplate", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], TreeView.prototype, "selectedNodes", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('None')], TreeView.prototype, "sortOrder", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TreeView.prototype, "showCheckBox", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], TreeView.prototype, "autoCheck", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TreeView.prototype, "fullRowNavigable", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "actionFailure", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "created", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "dataBound", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "dataSourceChanged", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "drawNode", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "destroyed", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "keyPress", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeChecked", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeChecking", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeClicked", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeCollapsed", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeCollapsing", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeDragging", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeDragStart", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeDragStop", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeDropped", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeEdited", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeEditing", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeExpanded", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeExpanding", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeSelected", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeSelecting", void 0);

  TreeView = TreeView_1 = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], TreeView);
  return TreeView;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-popups/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-popups/index.js ***!
  \******************************************************/
/*! exports provided: PositionData, Popup, getScrollableParent, getZindexPartial, getMaxZindex, calculateRelativeBasedPosition, calculatePosition, fit, isCollide, flip, ButtonProps, AnimationSettings, Dialog, DialogUtility, Animation, Tooltip, Spinner, createSpinner, showSpinner, hideSpinner, setSpinner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/index */ "./node_modules/@syncfusion/ej2-popups/src/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PositionData", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["PositionData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Popup", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Popup"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getScrollableParent", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["getScrollableParent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getZindexPartial", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["getZindexPartial"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getMaxZindex", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["getMaxZindex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "calculateRelativeBasedPosition", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["calculateRelativeBasedPosition"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "calculatePosition", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["calculatePosition"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fit", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["fit"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isCollide", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["isCollide"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flip", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["flip"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtonProps", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["ButtonProps"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnimationSettings", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["AnimationSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Dialog", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Dialog"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DialogUtility", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["DialogUtility"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Animation", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Animation"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Tooltip", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Tooltip"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Spinner", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Spinner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createSpinner", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["createSpinner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "showSpinner", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["showSpinner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hideSpinner", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["hideSpinner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setSpinner", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["setSpinner"]; });

/**
 * index
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-popups/src/common/collision.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-popups/src/common/collision.js ***!
  \*********************************************************************/
/*! exports provided: fit, isCollide, flip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fit", function() { return fit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isCollide", function() { return isCollide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flip", function() { return flip; });
/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./position */ "./node_modules/@syncfusion/ej2-popups/src/common/position.js");
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/**
 * Collision module.
 */


var parentDocument;
var targetContainer;
/**
 *
 * @param {HTMLElement} element - specifies the element
 * @param {HTMLElement} viewPortElement - specifies the element
 * @param {CollisionCoordinates} axis - specifies the collision coordinates
 * @param {OffsetPosition} position - specifies the position
 * @returns {void}
 */

function fit(element, viewPortElement, axis, position) {
  if (viewPortElement === void 0) {
    viewPortElement = null;
  }

  if (axis === void 0) {
    axis = {
      X: false,
      Y: false
    };
  }

  if (!axis.Y && !axis.X) {
    return {
      left: 0,
      top: 0
    };
  }

  var elemData = element.getBoundingClientRect();
  targetContainer = viewPortElement;
  parentDocument = element.ownerDocument;

  if (!position) {
    position = Object(_position__WEBPACK_IMPORTED_MODULE_0__["calculatePosition"])(element, 'left', 'top');
  }

  if (axis.X) {
    var containerWidth = targetContainer ? getTargetContainerWidth() : getViewPortWidth();
    var containerLeft = ContainerLeft();
    var containerRight = ContainerRight();
    var overLeft = containerLeft - position.left;
    var overRight = position.left + elemData.width - containerRight;

    if (elemData.width > containerWidth) {
      if (overLeft > 0 && overRight <= 0) {
        position.left = containerRight - elemData.width;
      } else if (overRight > 0 && overLeft <= 0) {
        position.left = containerLeft;
      } else {
        position.left = overLeft > overRight ? containerRight - elemData.width : containerLeft;
      }
    } else if (overLeft > 0) {
      position.left += overLeft;
    } else if (overRight > 0) {
      position.left -= overRight;
    }
  }

  if (axis.Y) {
    var containerHeight = targetContainer ? getTargetContainerHeight() : getViewPortHeight();
    var containerTop = ContainerTop();
    var containerBottom = ContainerBottom();
    var overTop = containerTop - position.top;
    var overBottom = position.top + elemData.height - containerBottom;

    if (elemData.height > containerHeight) {
      if (overTop > 0 && overBottom <= 0) {
        position.top = containerBottom - elemData.height;
      } else if (overBottom > 0 && overTop <= 0) {
        position.top = containerTop;
      } else {
        position.top = overTop > overBottom ? containerBottom - elemData.height : containerTop;
      }
    } else if (overTop > 0) {
      position.top += overTop;
    } else if (overBottom > 0) {
      position.top -= overBottom;
    }
  }

  return position;
}
/**
 *
 * @param {HTMLElement} element - specifies the html element
 * @param {HTMLElement} viewPortElement - specifies the html element
 * @param {number} x - specifies the number
 * @param {number} y - specifies the number
 * @returns {string[]} - returns the string value
 */

function isCollide(element, viewPortElement, x, y) {
  if (viewPortElement === void 0) {
    viewPortElement = null;
  }

  var elemOffset = Object(_position__WEBPACK_IMPORTED_MODULE_0__["calculatePosition"])(element, 'left', 'top');

  if (x) {
    elemOffset.left = x;
  }

  if (y) {
    elemOffset.top = y;
  }

  var data = [];
  targetContainer = viewPortElement;
  parentDocument = element.ownerDocument;
  var elementRect = element.getBoundingClientRect();
  var top = elemOffset.top;
  var left = elemOffset.left;
  var right = elemOffset.left + elementRect.width;
  var bottom = elemOffset.top + elementRect.height; // eslint-disable-next-line

  var topData = '',
      leftData = '';
  var yAxis = topCollideCheck(top, bottom);
  var xAxis = leftCollideCheck(left, right);

  if (yAxis.topSide) {
    data.push('top');
  }

  if (xAxis.rightSide) {
    data.push('right');
  }

  if (xAxis.leftSide) {
    data.push('left');
  }

  if (yAxis.bottomSide) {
    data.push('bottom');
  }

  return data;
}
/**
 *
 * @param {HTMLElement} element - specifies the element
 * @param {HTMLElement} target - specifies the element
 * @param {number} offsetX - specifies the number
 * @param {number} offsetY - specifies the number
 * @param {string} positionX - specifies the string value
 * @param {string} positionY - specifies the string value
 * @param {HTMLElement} viewPortElement - specifies the element
 * @param {CollisionCoordinates} axis - specifies the collision axis
 * @param {boolean} fixedParent - specifies the boolean
 * @returns {void}
 */

function flip(element, target, offsetX, offsetY, positionX, positionY, viewPortElement,
/* eslint-disable */
axis, fixedParent) {
  if (viewPortElement === void 0) {
    viewPortElement = null;
  }

  if (axis === void 0) {
    axis = {
      X: true,
      Y: true
    };
  }

  if (!target || !element || !positionX || !positionY || !axis.X && !axis.Y) {
    return;
  }

  var tEdge = {
    TL: null,
    TR: null,
    BL: null,
    BR: null
  },
      eEdge = {
    TL: null,
    TR: null,
    BL: null,
    BR: null
    /* eslint-enable */

  };
  var elementRect;

  if (window.getComputedStyle(element).display === 'none') {
    var oldVisibility = element.style.visibility;
    element.style.visibility = 'hidden';
    element.style.display = 'block';
    elementRect = element.getBoundingClientRect();
    element.style.removeProperty('display');
    element.style.visibility = oldVisibility;
  } else {
    elementRect = element.getBoundingClientRect();
  }

  var pos = {
    posX: positionX,
    posY: positionY,
    offsetX: offsetX,
    offsetY: offsetY,
    position: {
      left: 0,
      top: 0
    }
  };
  targetContainer = viewPortElement;
  parentDocument = target.ownerDocument;
  updateElementData(target, tEdge, pos, fixedParent, elementRect);
  setPosition(eEdge, pos, elementRect);

  if (axis.X) {
    leftFlip(target, eEdge, tEdge, pos, elementRect, true);
  }

  if (axis.Y && tEdge.TL.top > -1) {
    topFlip(target, eEdge, tEdge, pos, elementRect, true);
  }

  setPopup(element, pos, elementRect);
}
/**
 *
 * @param {HTMLElement} element - specifies the element
 * @param {PositionLocation} pos - specifies the location
 * @param {ClientRect} elementRect - specifies the client rect
 * @returns {void}
 */

function setPopup(element, pos, elementRect) {
  //eslint-disable-next-line
  var left = 0,
      top = 0;

  if (element.offsetParent != null && (getComputedStyle(element.offsetParent).position === 'absolute' || getComputedStyle(element.offsetParent).position === 'relative')) {
    var data = Object(_position__WEBPACK_IMPORTED_MODULE_0__["calculatePosition"])(element.offsetParent, 'left', 'top', false, elementRect);
    left = data.left;
    top = data.top;
  }

  var scaleX = 1;
  var scaleY = 1;

  if (element.offsetParent) {
    var transformStyle = getComputedStyle(element.offsetParent).transform;

    if (transformStyle !== 'none') {
      var matrix = new DOMMatrix(transformStyle);
      scaleX = matrix.a;
      scaleY = matrix.d;
    }
  }

  element.style.top = pos.position.top / scaleY + pos.offsetY - top + 'px';
  element.style.left = pos.position.left / scaleX + pos.offsetX - left + 'px';
}
/**
 *
 * @param {HTMLElement} target - specifies the element
 * @param {EdgeOffset} edge - specifies the offset
 * @param {PositionLocation} pos - specifies theloaction
 * @param {boolean} fixedParent - specifies the boolean
 * @param {ClientRect} elementRect - specifies the client rect
 * @returns {void}
 */


function updateElementData(target, edge, pos, fixedParent, elementRect) {
  pos.position = Object(_position__WEBPACK_IMPORTED_MODULE_0__["calculatePosition"])(target, pos.posX, pos.posY, fixedParent, elementRect);
  edge.TL = Object(_position__WEBPACK_IMPORTED_MODULE_0__["calculatePosition"])(target, 'left', 'top', fixedParent, elementRect);
  edge.TR = Object(_position__WEBPACK_IMPORTED_MODULE_0__["calculatePosition"])(target, 'right', 'top', fixedParent, elementRect);
  edge.BR = Object(_position__WEBPACK_IMPORTED_MODULE_0__["calculatePosition"])(target, 'left', 'bottom', fixedParent, elementRect);
  edge.BL = Object(_position__WEBPACK_IMPORTED_MODULE_0__["calculatePosition"])(target, 'right', 'bottom', fixedParent, elementRect);
}
/**
 *
 * @param {EdgeOffset} eStatus - specifies the status
 * @param {PositionLocation} pos - specifies the location
 * @param {ClientRect} elementRect - specifies the client
 * @returns {void}
 */


function setPosition(eStatus, pos, elementRect) {
  eStatus.TL = {
    top: pos.position.top + pos.offsetY,
    left: pos.position.left + pos.offsetX
  };
  eStatus.TR = {
    top: eStatus.TL.top,
    left: eStatus.TL.left + elementRect.width
  };
  eStatus.BL = {
    top: eStatus.TL.top + elementRect.height,
    left: eStatus.TL.left
  };
  eStatus.BR = {
    top: eStatus.TL.top + elementRect.height,
    left: eStatus.TL.left + elementRect.width
  };
}
/**
 *
 * @param {number} left - specifies the  number
 * @param {number} right - specifies the number
 * @returns {LeftCorners} - returns the value
 */


function leftCollideCheck(left, right) {
  //eslint-disable-next-line
  var leftSide = false,
      rightSide = false;

  if (left - getBodyScrollLeft() < ContainerLeft()) {
    leftSide = true;
  }

  if (right > ContainerRight()) {
    rightSide = true;
  }

  return {
    leftSide: leftSide,
    rightSide: rightSide
  };
}
/**
 *
 * @param {HTMLElement} target - specifies the element
 * @param {EdgeOffset} edge - specifes the element
 * @param {EdgeOffset} tEdge - specifies the edge offset
 * @param {PositionLocation} pos - specifes the location
 * @param {ClientRect} elementRect - specifies the client
 * @param {boolean} deepCheck - specifies the boolean value
 * @returns {void}
 */


function leftFlip(target, edge, tEdge, pos, elementRect, deepCheck) {
  var collideSide = leftCollideCheck(edge.TL.left, edge.TR.left);

  if (tEdge.TL.left - getBodyScrollLeft() <= ContainerLeft()) {
    collideSide.leftSide = false;
  }

  if (tEdge.TR.left > ContainerRight()) {
    collideSide.rightSide = false;
  }

  if (collideSide.leftSide && !collideSide.rightSide || !collideSide.leftSide && collideSide.rightSide) {
    if (pos.posX === 'right') {
      pos.posX = 'left';
    } else {
      pos.posX = 'right';
    }

    pos.offsetX = pos.offsetX + elementRect.width;
    pos.offsetX = -1 * pos.offsetX;
    pos.position = Object(_position__WEBPACK_IMPORTED_MODULE_0__["calculatePosition"])(target, pos.posX, pos.posY, false);
    setPosition(edge, pos, elementRect);

    if (deepCheck) {
      leftFlip(target, edge, tEdge, pos, elementRect, false);
    }
  }
}
/**
 *
 * @param {HTMLElement} target - specifies the element
 * @param {EdgeOffset} edge - specifies the offset
 * @param {EdgeOffset} tEdge - specifies the offset
 * @param {PositionLocation} pos - specifies the location
 * @param {ClientRect} elementRect - specifies the client rect
 * @param {boolean} deepCheck - specifies the boolean
 * @returns {void}
 */


function topFlip(target, edge, tEdge, pos, elementRect, deepCheck) {
  var collideSide = topCollideCheck(edge.TL.top, edge.BL.top);

  if (tEdge.TL.top - getBodyScrollTop() <= ContainerTop()) {
    collideSide.topSide = false;
  }

  if (tEdge.BL.top >= ContainerBottom() && target.getBoundingClientRect().bottom < window.innerHeight) {
    collideSide.bottomSide = false;
  }

  if (collideSide.topSide && !collideSide.bottomSide || !collideSide.topSide && collideSide.bottomSide) {
    if (pos.posY === 'top') {
      pos.posY = 'bottom';
    } else {
      pos.posY = 'top';
    }

    pos.offsetY = pos.offsetY + elementRect.height;
    pos.offsetY = -1 * pos.offsetY;
    pos.position = Object(_position__WEBPACK_IMPORTED_MODULE_0__["calculatePosition"])(target, pos.posX, pos.posY, false, elementRect);
    setPosition(edge, pos, elementRect);

    if (deepCheck) {
      topFlip(target, edge, tEdge, pos, elementRect, false);
    }
  }
}
/**
 *
 * @param {number} top - specifies the number
 * @param {number} bottom - specifies the number
 * @returns {TopCorners} - retyrns the value
 */


function topCollideCheck(top, bottom) {
  //eslint-disable-next-line
  var topSide = false,
      bottomSide = false;

  if (top - getBodyScrollTop() < ContainerTop()) {
    topSide = true;
  }

  if (bottom > ContainerBottom()) {
    bottomSide = true;
  }

  return {
    topSide: topSide,
    bottomSide: bottomSide
  };
}
/**
 * @returns {void}
 */


function getTargetContainerWidth() {
  return targetContainer.getBoundingClientRect().width;
}
/**
 * @returns {void}
 */


function getTargetContainerHeight() {
  return targetContainer.getBoundingClientRect().height;
}
/**
 * @returns {void}
 */


function getTargetContainerLeft() {
  return targetContainer.getBoundingClientRect().left;
}
/**
 * @returns {void}
 */


function getTargetContainerTop() {
  return targetContainer.getBoundingClientRect().top;
} //eslint-disable-next-line


function ContainerTop() {
  if (targetContainer) {
    return getTargetContainerTop();
  }

  return 0;
} //eslint-disable-next-line


function ContainerLeft() {
  if (targetContainer) {
    return getTargetContainerLeft();
  }

  return 0;
} //eslint-disable-next-line


function ContainerRight() {
  if (targetContainer) {
    return getBodyScrollLeft() + getTargetContainerLeft() + getTargetContainerWidth();
  }

  return getBodyScrollLeft() + getViewPortWidth();
} //eslint-disable-next-line


function ContainerBottom() {
  if (targetContainer) {
    return getBodyScrollTop() + getTargetContainerTop() + getTargetContainerHeight();
  }

  return getBodyScrollTop() + getViewPortHeight();
}
/**
 * @returns {void}
 */


function getBodyScrollTop() {
  // if(targetContainer)
  //     return targetContainer.scrollTop;
  return parentDocument.documentElement.scrollTop || parentDocument.body.scrollTop;
}
/**
 * @returns {void}
 */


function getBodyScrollLeft() {
  // if(targetContainer)
  //     return targetContainer.scrollLeft;
  return parentDocument.documentElement.scrollLeft || parentDocument.body.scrollLeft;
}
/**
 * @returns {void}
 */


function getViewPortHeight() {
  return window.innerHeight;
}
/**
 * @returns {void}
 */


function getViewPortWidth() {
  var windowWidth = window.innerWidth;
  var documentReact = document.documentElement.getBoundingClientRect();
  var offsetWidth = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["isNullOrUndefined"])(document.documentElement) ? 0 : documentReact.width;
  return windowWidth - (windowWidth - offsetWidth);
}

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-popups/src/common/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-popups/src/common/index.js ***!
  \*****************************************************************/
/*! exports provided: calculateRelativeBasedPosition, calculatePosition, fit, isCollide, flip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./position */ "./node_modules/@syncfusion/ej2-popups/src/common/position.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "calculateRelativeBasedPosition", function() { return _position__WEBPACK_IMPORTED_MODULE_0__["calculateRelativeBasedPosition"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "calculatePosition", function() { return _position__WEBPACK_IMPORTED_MODULE_0__["calculatePosition"]; });

/* harmony import */ var _collision__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./collision */ "./node_modules/@syncfusion/ej2-popups/src/common/collision.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fit", function() { return _collision__WEBPACK_IMPORTED_MODULE_1__["fit"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isCollide", function() { return _collision__WEBPACK_IMPORTED_MODULE_1__["isCollide"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flip", function() { return _collision__WEBPACK_IMPORTED_MODULE_1__["flip"]; });

/**
 * Popup Components
 */



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-popups/src/common/position.js":
/*!********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-popups/src/common/position.js ***!
  \********************************************************************/
/*! exports provided: calculateRelativeBasedPosition, calculatePosition */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "calculateRelativeBasedPosition", function() { return calculateRelativeBasedPosition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "calculatePosition", function() { return calculatePosition; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/**
 * Position library
 */

var elementRect;
var popupRect;
var element;
var parentDocument;
var fixedParent = false;
/**
 *
 * @param {HTMLElement} anchor - specifies the element
 * @param {HTMLElement} element - specifies the element
 * @returns {OffsetPosition} - returns the value
 */

function calculateRelativeBasedPosition(anchor, element) {
  var fixedElement = false;
  var anchorPos = {
    left: 0,
    top: 0
  };
  var tempAnchor = anchor;

  if (!anchor || !element) {
    return anchorPos;
  }

  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element.offsetParent) && element.style.position === 'fixed') {
    fixedElement = true;
  }

  while ((element.offsetParent || fixedElement) && anchor && element.offsetParent !== anchor) {
    anchorPos.left += anchor.offsetLeft;
    anchorPos.top += anchor.offsetTop;
    anchor = anchor.offsetParent;
  }

  anchor = tempAnchor;

  while ((element.offsetParent || fixedElement) && anchor && element.offsetParent !== anchor) {
    anchorPos.left -= anchor.scrollLeft;
    anchorPos.top -= anchor.scrollTop;
    anchor = anchor.parentElement;
  }

  return anchorPos;
}
/**
 *
 * @param {Element} currentElement - specifies the element
 * @param {string} positionX - specifies the position
 * @param {string} positionY - specifies the position
 * @param {boolean} parentElement - specifies the boolean
 * @param {ClientRect} targetValues - specifies the client
 * @returns {OffsetPosition} - returns the position
 */

function calculatePosition(currentElement, positionX, positionY, parentElement, targetValues) {
  popupRect = undefined;
  popupRect = targetValues;
  fixedParent = parentElement ? true : false;

  if (!currentElement) {
    return {
      left: 0,
      top: 0
    };
  }

  if (!positionX) {
    positionX = 'left';
  }

  if (!positionY) {
    positionY = 'top';
  }

  parentDocument = currentElement.ownerDocument;
  element = currentElement;
  var pos = {
    left: 0,
    top: 0
  };
  return updatePosition(positionX.toLowerCase(), positionY.toLowerCase(), pos);
}
/**
 *
 * @param {number} value - specifies the number
 * @param {OffsetPosition} pos - specifies the position
 * @returns {void}
 */

function setPosx(value, pos) {
  pos.left = value;
}
/**
 *
 * @param {number} value - specifies the number
 * @param {OffsetPosition} pos - specifies the position
 * @returns {void}
 */


function setPosy(value, pos) {
  pos.top = value;
}
/**
 *
 * @param {string} posX - specifies the position
 * @param {string} posY - specifies the position
 * @param {OffsetPosition} pos - specifies the position
 * @returns {OffsetPosition} - returns the postion
 */


function updatePosition(posX, posY, pos) {
  elementRect = element.getBoundingClientRect();

  switch (posY + posX) {
    case 'topcenter':
      setPosx(getElementHCenter(), pos);
      setPosy(getElementTop(), pos);
      break;

    case 'topright':
      setPosx(getElementRight(), pos);
      setPosy(getElementTop(), pos);
      break;

    case 'centercenter':
      setPosx(getElementHCenter(), pos);
      setPosy(getElementVCenter(), pos);
      break;

    case 'centerright':
      setPosx(getElementRight(), pos);
      setPosy(getElementVCenter(), pos);
      break;

    case 'centerleft':
      setPosx(getElementLeft(), pos);
      setPosy(getElementVCenter(), pos);
      break;

    case 'bottomcenter':
      setPosx(getElementHCenter(), pos);
      setPosy(getElementBottom(), pos);
      break;

    case 'bottomright':
      setPosx(getElementRight(), pos);
      setPosy(getElementBottom(), pos);
      break;

    case 'bottomleft':
      setPosx(getElementLeft(), pos);
      setPosy(getElementBottom(), pos);
      break;

    default:
    case 'topleft':
      setPosx(getElementLeft(), pos);
      setPosy(getElementTop(), pos);
      break;
  }

  element = null;
  return pos;
}
/**
 * @returns {number} - specifies the number value
 */


function getBodyScrollTop() {
  return parentDocument.documentElement.scrollTop || parentDocument.body.scrollTop;
}
/**
 * @returns {number} - specifies the number value
 */


function getBodyScrollLeft() {
  return parentDocument.documentElement.scrollLeft || parentDocument.body.scrollLeft;
}
/**
 * @returns {number} - specifies the number value
 */


function getElementBottom() {
  return fixedParent ? elementRect.bottom : elementRect.bottom + getBodyScrollTop();
}
/**
 * @returns {number} - specifies the number value
 */


function getElementVCenter() {
  return getElementTop() + elementRect.height / 2;
}
/**
 * @returns {number} - specifies the number value
 */


function getElementTop() {
  return fixedParent ? elementRect.top : elementRect.top + getBodyScrollTop();
}
/**
 * @returns {number} - specifies the number value
 */


function getElementLeft() {
  return elementRect.left + getBodyScrollLeft();
}
/**
 * @returns {number} - specifies the number value
 */


function getElementRight() {
  var popupWidth = element && (element.classList.contains('e-date-wrapper') || element.classList.contains('e-datetime-wrapper') || element.classList.contains('e-date-range-wrapper') || element.classList.contains('e-ddl') || element.classList.contains('e-multiselect')) ? popupRect ? popupRect.width : 0 : popupRect && elementRect.width >= popupRect.width ? popupRect.width : 0;
  return elementRect.right + getBodyScrollLeft() - popupWidth;
}
/**
 * @returns {number} - specifies the number value
 */


function getElementHCenter() {
  return getElementLeft() + elementRect.width / 2;
}

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-popups/src/common/resize.js":
/*!******************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-popups/src/common/resize.js ***!
  \******************************************************************/
/*! exports provided: createResize, setMinHeight, setMaxWidth, setMaxHeight, removeResize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createResize", function() { return createResize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setMinHeight", function() { return setMinHeight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setMaxWidth", function() { return setMaxWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setMaxHeight", function() { return setMaxHeight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeResize", function() { return removeResize; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/**
 * Resize library
 */

/* eslint-disable */

var elementClass = ['north-west', 'north', 'north-east', 'west', 'east', 'south-west', 'south', 'south-east'];
var RESIZE_HANDLER = 'e-resize-handle';
var FOCUSED_HANDLER = 'e-focused-handle';
var DIALOG_RESIZABLE = 'e-dlg-resizable';
var RESTRICT_LEFT = ['e-restrict-left'];
var RESIZE_WITHIN_VIEWPORT = 'e-resize-viewport';
var dialogBorderResize = ['north', 'west', 'east', 'south'];
var targetElement;
var selectedHandler;
var originalWidth = 0;
var originalHeight = 0;
var originalX = 0;
var originalY = 0;
var originalMouseX = 0;
var originalMouseY = 0;
var minHeight;
var maxHeight;
var minWidth;
var maxWidth;
var containerElement;
var resizeStart = null;
var resize = null;
var resizeEnd = null;
/* eslint-enable */

var resizeWestWidth;
var setLeft = true;
var previousWidth = 0;
var setWidth = true; // eslint-disable-next-line

var proxy;
/**
 *
 * @param {ResizeArgs} args - specifies the resize args
 * @returns {void}
 */

function createResize(args) {
  resizeStart = args.resizeBegin;
  resize = args.resizing;
  resizeEnd = args.resizeComplete;
  targetElement = getDOMElement(args.element);
  containerElement = getDOMElement(args.boundary);
  var directions = args.direction.split(' ');

  for (var i = 0; i < directions.length; i++) {
    if (dialogBorderResize.indexOf(directions[i]) >= 0 && directions[i]) {
      setBorderResizeElm(directions[i]);
    } else if (directions[i].trim() !== '') {
      var resizeHandler = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
        className: 'e-icons ' + RESIZE_HANDLER + ' ' + 'e-' + directions[i]
      });
      targetElement.appendChild(resizeHandler);
    }
  }

  minHeight = args.minHeight;
  minWidth = args.minWidth;
  maxWidth = args.maxWidth;
  maxHeight = args.maxHeight;

  if (args.proxy && args.proxy.element && args.proxy.element.classList.contains('e-dialog')) {
    wireEvents(args.proxy);
  } else {
    wireEvents();
  }
}
/**
 *
 * @param {string} direction - specifies the string
 * @returns {void}
 */

function setBorderResizeElm(direction) {
  calculateValues();
  var borderBottom = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('span', {
    attrs: {
      'unselectable': 'on',
      'contenteditable': 'false'
    }
  });
  borderBottom.setAttribute('class', 'e-dialog-border-resize e-' + direction);

  if (direction === 'south') {
    borderBottom.style.height = '2px';
    borderBottom.style.width = '100%';
    borderBottom.style.bottom = '0px';
    borderBottom.style.left = '0px';
  }

  if (direction === 'north') {
    borderBottom.style.height = '2px';
    borderBottom.style.width = '100%';
    borderBottom.style.top = '0px';
    borderBottom.style.left = '0px';
  }

  if (direction === 'east') {
    borderBottom.style.height = '100%';
    borderBottom.style.width = '2px';
    borderBottom.style.right = '0px';
    borderBottom.style.top = '0px';
  }

  if (direction === 'west') {
    borderBottom.style.height = '100%';
    borderBottom.style.width = '2px';
    borderBottom.style.left = '0px';
    borderBottom.style.top = '0px';
  }

  targetElement.appendChild(borderBottom);
}
/**
 *
 * @param {string} element - specifies the element
 * @returns {HTMLElement} - returns the element
 */


function getDOMElement(element) {
  var domElement;

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element)) {
    if (typeof element === 'string') {
      domElement = document.querySelector(element);
    } else {
      domElement = element;
    }
  }

  return domElement;
} // eslint-disable-next-line


function wireEvents(args) {
  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args)) {
    args = this;
  }

  var resizers = targetElement.querySelectorAll('.' + RESIZE_HANDLER);

  for (var i = 0; i < resizers.length; i++) {
    selectedHandler = resizers[i];
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(selectedHandler, 'mousedown', onMouseDown, args);
    var eventName = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'msie' ? 'pointerdown' : 'touchstart';
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(selectedHandler, eventName, onTouchStart, args);
  }

  var borderResizers = targetElement.querySelectorAll('.e-dialog-border-resize');

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(borderResizers)) {
    for (var i = 0; i < borderResizers.length; i++) {
      selectedHandler = borderResizers[i];
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(selectedHandler, 'mousedown', onMouseDown, args);
      var eventName = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'msie' ? 'pointerdown' : 'touchstart';
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(selectedHandler, eventName, onTouchStart, args);
    }
  }
}
/* istanbul ignore next */

/**
 *
 * @param {string} e - specifies the string
 * @returns {string} - returns the string
 */


function getEventType(e) {
  return e.indexOf('mouse') > -1 ? 'mouse' : 'touch';
}
/* istanbul ignore next */

/**
 *
 * @param {MouseEvent} e - specifies the mouse event
 * @returns {void}
 */


function onMouseDown(e) {
  e.preventDefault();
  targetElement = e.target.parentElement;
  calculateValues();
  originalMouseX = e.pageX;
  originalMouseY = e.pageY;
  e.target.classList.add(FOCUSED_HANDLER);

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(resizeStart)) {
    proxy = this;

    if (resizeStart(e, proxy) === true) {
      return;
    }
  }

  if (this.targetEle && targetElement && targetElement.querySelector('.' + DIALOG_RESIZABLE)) {
    containerElement = this.target === ('body' || false || false) ? null : this.targetEle;
    maxWidth = this.targetEle.clientWidth;
    maxHeight = this.targetEle.clientHeight;
  }

  var target = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) ? document : containerElement;
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(target, 'mousemove', onMouseMove, this);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mouseup', onMouseUp, this);

  for (var i = 0; i < RESTRICT_LEFT.length; i++) {
    if (targetElement.classList.contains(RESTRICT_LEFT[i])) {
      setLeft = false;
    } else {
      setLeft = true;
    }
  }
}
/* istanbul ignore next */

/**
 *
 * @param {MouseEvent} e - specifies the event
 * @returns {void}
 */


function onMouseUp(e) {
  var touchMoveEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'msie' ? 'pointermove' : 'touchmove';
  var touchEndEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'msie' ? 'pointerup' : 'touchend';
  var target = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) ? document : containerElement;
  var eventName = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'msie' ? 'pointerdown' : 'touchstart';
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, 'mousemove', onMouseMove);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, touchMoveEvent, onMouseMove);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, eventName, onMouseMove);

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(document.body.querySelector('.' + FOCUSED_HANDLER))) {
    document.body.querySelector('.' + FOCUSED_HANDLER).classList.remove(FOCUSED_HANDLER);
  }

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(resizeEnd)) {
    proxy = this;
    resizeEnd(e, proxy);
  }

  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mouseup', onMouseUp);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, touchEndEvent, onMouseUp);
}
/* istanbul ignore next */

/**
 * @returns {void}
 */


function calculateValues() {
  originalWidth = parseFloat(getComputedStyle(targetElement, null).getPropertyValue('width').replace('px', ''));
  originalHeight = parseFloat(getComputedStyle(targetElement, null).getPropertyValue('height').replace('px', ''));
  originalX = targetElement.getBoundingClientRect().left;
  originalY = targetElement.getBoundingClientRect().top;
}
/* istanbul ignore next */

/**
 *
 * @param {MouseEvent} e - specifies the event
 * @returns {void}
 */


function onTouchStart(e) {
  targetElement = e.target.parentElement;
  calculateValues();
  var dialogResizeElement = targetElement.classList.contains('e-dialog');

  if ((e.target.classList.contains(RESIZE_HANDLER) || e.target.classList.contains('e-dialog-border-resize')) && dialogResizeElement) {
    e.target.classList.add(FOCUSED_HANDLER);
  }

  var coordinates = e.touches ? e.changedTouches[0] : e;
  originalMouseX = coordinates.pageX;
  originalMouseY = coordinates.pageY;

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(resizeStart)) {
    proxy = this;

    if (resizeStart(e, proxy) === true) {
      return;
    }
  }

  var touchMoveEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'msie' ? 'pointermove' : 'touchmove';
  var touchEndEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'msie' ? 'pointerup' : 'touchend';
  var target = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) ? document : containerElement;
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(target, touchMoveEvent, onMouseMove, this);
  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, touchEndEvent, onMouseUp, this);
}
/* istanbul ignore next */

/**
 *
 * @param {MouseEvent} e - specifies the event
 * @returns {void}
 */


function onMouseMove(e) {
  if (e.target.classList.contains(RESIZE_HANDLER) && e.target.classList.contains(FOCUSED_HANDLER)) {
    selectedHandler = e.target;
  } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(document.body.querySelector('.' + FOCUSED_HANDLER))) {
    selectedHandler = document.body.querySelector('.' + FOCUSED_HANDLER);
  }

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(selectedHandler)) {
    var resizeTowards = '';

    for (var i = 0; i < elementClass.length; i++) {
      if (selectedHandler.classList.contains('e-' + elementClass[i])) {
        resizeTowards = elementClass[i];
      }
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(resize)) {
      proxy = this;
      resize(e, proxy);
    }

    switch (resizeTowards) {
      case 'south':
        resizeSouth(e);
        break;

      case 'north':
        resizeNorth(e);
        break;

      case 'west':
        resizeWest(e);
        break;

      case 'east':
        resizeEast(e);
        break;

      case 'south-east':
        resizeSouth(e);
        resizeEast(e);
        break;

      case 'south-west':
        resizeSouth(e);
        resizeWest(e);
        break;

      case 'north-east':
        resizeNorth(e);
        resizeEast(e);
        break;

      case 'north-west':
        resizeNorth(e);
        resizeWest(e);
        break;

      default:
        break;
    }
  }
}
/* istanbul ignore next */

/**
 *
 * @param {HTMLElement} element - specifies the eleemnt
 * @returns {ClientRect} - returns the client
 */


function getClientRectValues(element) {
  return element.getBoundingClientRect();
}
/* istanbul ignore next */
// eslint-disable-next-line


function resizeSouth(e) {
  var documentHeight = document.documentElement.clientHeight;
  var calculateValue = false;
  var coordinates = e.touches ? e.changedTouches[0] : e;
  var currentpageY = coordinates.pageY;
  var targetRectValues = getClientRectValues(targetElement);
  var containerRectValues;

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement)) {
    containerRectValues = getClientRectValues(containerElement);
  }

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement)) {
    calculateValue = true;
  } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) && (documentHeight - currentpageY >= 0 || targetRectValues.top < 0)) {
    calculateValue = true;
  }

  var calculatedHeight = originalHeight + (currentpageY - originalMouseY);
  calculatedHeight = calculatedHeight > minHeight ? calculatedHeight : minHeight;
  var containerTop = 0;

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement)) {
    containerTop = containerRectValues.top;
  }

  var borderValue = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) ? 0 : containerElement.offsetHeight - containerElement.clientHeight;
  var topWithoutborder = targetRectValues.top - containerTop - borderValue / 2;
  topWithoutborder = topWithoutborder < 0 ? 0 : topWithoutborder;

  if (targetRectValues.top > 0 && topWithoutborder + calculatedHeight > maxHeight) {
    calculateValue = false;

    if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {
      return;
    }

    targetElement.style.height = maxHeight - parseInt(topWithoutborder.toString(), 10) + 'px';
    return;
  }

  var targetTop = 0;

  if (calculateValue) {
    if (targetRectValues.top < 0 && documentHeight + (targetRectValues.height + targetRectValues.top) > 0) {
      targetTop = targetRectValues.top;

      if (calculatedHeight + targetTop <= 30) {
        calculatedHeight = targetRectValues.height - (targetRectValues.height + targetRectValues.top) + 30;
      }
    }

    if (calculatedHeight + targetRectValues.top >= maxHeight) {
      targetElement.style.height = targetRectValues.height + (documentHeight - (targetRectValues.height + targetRectValues.top)) + 'px';
    }

    var calculatedTop = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) ? targetTop : topWithoutborder;

    if (calculatedHeight >= minHeight && calculatedHeight + calculatedTop <= maxHeight) {
      targetElement.style.height = calculatedHeight + 'px';
    }
  }
}
/* istanbul ignore next */
// eslint-disable-next-line


function resizeNorth(e) {
  var calculateValue = false;
  var boundaryRectValues;
  var pageY = getEventType(e.type) === 'mouse' ? e.pageY : e.touches[0].pageY;
  var targetRectValues = getClientRectValues(targetElement);

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement)) {
    boundaryRectValues = getClientRectValues(containerElement);
  }

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) && targetRectValues.top - boundaryRectValues.top > 0) {
    calculateValue = true;
  } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) && pageY > 0) {
    calculateValue = true;
  }

  var currentHeight = originalHeight - (pageY - originalMouseY);

  if (calculateValue) {
    if (currentHeight >= minHeight && currentHeight <= maxHeight) {
      var containerTop = 0;

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement)) {
        containerTop = boundaryRectValues.top;
      }

      var top_1 = originalY - containerTop + (pageY - originalMouseY);
      top_1 = top_1 > 0 ? top_1 : 1;
      targetElement.style.height = currentHeight + 'px';
      targetElement.style.top = top_1 + 'px';
    }
  }
}
/* istanbul ignore next */
// eslint-disable-next-line


function resizeWest(e) {
  var documentWidth = document.documentElement.clientWidth;
  var calculateValue = false;
  var rectValues;

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement)) {
    rectValues = getClientRectValues(containerElement);
  }

  var pageX = getEventType(e.type) === 'mouse' ? e.pageX : e.touches[0].pageX;
  var targetRectValues = getClientRectValues(targetElement);
  var borderValue = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) ? 0 : containerElement.offsetWidth - containerElement.clientWidth;
  /* eslint-disable */

  var left = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) ? 0 : rectValues.left;
  var containerWidth = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) ? 0 : rectValues.width;
  /* eslint-enable */

  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(resizeWestWidth)) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement)) {
      resizeWestWidth = targetRectValues.left - left - borderValue / 2 + targetRectValues.width;
      resizeWestWidth = resizeWestWidth + (containerWidth - borderValue - resizeWestWidth);
    } else {
      resizeWestWidth = documentWidth;
    }
  }

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) && Math.floor(targetRectValues.left - rectValues.left + targetRectValues.width + (rectValues.right - targetRectValues.right)) - borderValue <= maxWidth) {
    calculateValue = true;
  } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) && pageX >= 0) {
    calculateValue = true;
  }

  var calculatedWidth = originalWidth - (pageX - originalMouseX);

  if (setLeft) {
    calculatedWidth = calculatedWidth > resizeWestWidth ? resizeWestWidth : calculatedWidth;
  }

  if (calculateValue) {
    if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {
      var containerLeft = 0;

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement)) {
        containerLeft = rectValues.left;
      }

      var left_1 = originalX - containerLeft + (pageX - originalMouseX);
      left_1 = left_1 > 0 ? left_1 : 1;

      if (calculatedWidth !== previousWidth && setWidth) {
        targetElement.style.width = calculatedWidth + 'px';
      }

      if (setLeft) {
        targetElement.style.left = left_1 + 'px';

        if (left_1 === 1) {
          setWidth = false;
        } else {
          setWidth = true;
        }
      }
    }
  }

  previousWidth = calculatedWidth;
}
/* istanbul ignore next */
// eslint-disable-next-line


function resizeEast(e) {
  var documentWidth = document.documentElement.clientWidth;
  var calculateValue = false;
  var containerRectValues;

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement)) {
    containerRectValues = getClientRectValues(containerElement);
  }

  var coordinates = e.touches ? e.changedTouches[0] : e;
  var pageX = coordinates.pageX;
  var targetRectValues = getClientRectValues(targetElement);

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) && (targetRectValues.left - containerRectValues.left + targetRectValues.width <= maxWidth || targetRectValues.right - containerRectValues.left >= targetRectValues.width)) {
    calculateValue = true;
  } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) && documentWidth - pageX > 0) {
    calculateValue = true;
  }

  var calculatedWidth = originalWidth + (pageX - originalMouseX);
  var containerLeft = 0;

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement)) {
    containerLeft = containerRectValues.left;
  }

  if (targetRectValues.left - containerLeft + calculatedWidth > maxWidth) {
    calculateValue = false;

    if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {
      return;
    }

    targetElement.style.width = maxWidth - (targetRectValues.left - containerLeft) + 'px';
  }

  if (calculateValue) {
    if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {
      targetElement.style.width = calculatedWidth + 'px';
    }
  }
}
/* istanbul ignore next */

/**
 *
 * @param {number} minimumHeight - specifies the number
 * @returns {void}
 */


function setMinHeight(minimumHeight) {
  minHeight = minimumHeight;
}
/**
 *
 * @param {number} value - specifies the number value
 * @returns {void}
 */

function setMaxWidth(value) {
  maxWidth = value;
}
/**
 *
 * @param {number} value - specifies the number value
 * @returns {void}
 */

function setMaxHeight(value) {
  maxHeight = value;
}
/**
 * @returns {void}
 */

function removeResize() {
  var handlers = targetElement.querySelectorAll('.' + RESIZE_HANDLER);

  for (var i = 0; i < handlers.length; i++) {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(handlers[i]);
  }

  var borderResizers = targetElement.querySelectorAll('.e-dialog-border-resize');

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(borderResizers)) {
    for (var i = 0; i < borderResizers.length; i++) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(borderResizers[i]);
    }
  }
}

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-popups/src/dialog/dialog.js":
/*!******************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-popups/src/dialog/dialog.js ***!
  \******************************************************************/
/*! exports provided: ButtonProps, AnimationSettings, Dialog, DialogUtility */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonProps", function() { return ButtonProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationSettings", function() { return AnimationSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Dialog", function() { return Dialog; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DialogUtility", function() { return DialogUtility; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ "./node_modules/@syncfusion/ej2-buttons/index.js");
/* harmony import */ var _popup_popup__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../popup/popup */ "./node_modules/@syncfusion/ej2-popups/src/popup/popup.js");
/* harmony import */ var _common_resize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/resize */ "./node_modules/@syncfusion/ej2-popups/src/common/resize.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};










var ButtonProps =
/** @class */
function (_super) {
  __extends(ButtonProps, _super);

  function ButtonProps() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], ButtonProps.prototype, "isFlat", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], ButtonProps.prototype, "buttonModel", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Button')], ButtonProps.prototype, "type", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ButtonProps.prototype, "click", void 0);

  return ButtonProps;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * Configures the animation properties for both open and close the dialog.
 */

var AnimationSettings =
/** @class */
function (_super) {
  __extends(AnimationSettings, _super);

  function AnimationSettings() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Fade')], AnimationSettings.prototype, "effect", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(400)], AnimationSettings.prototype, "duration", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], AnimationSettings.prototype, "delay", void 0);

  return AnimationSettings;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


var ROOT = 'e-dialog';
var RTL = 'e-rtl';
var DLG_HEADER_CONTENT = 'e-dlg-header-content';
var DLG_HEADER = 'e-dlg-header';
var DLG_FOOTER_CONTENT = 'e-footer-content';
var MODAL_DLG = 'e-dlg-modal';
var DLG_CONTENT = 'e-dlg-content';
var DLG_CLOSE_ICON = 'e-icon-dlg-close';
var DLG_OVERLAY = 'e-dlg-overlay';
var DLG_TARGET = 'e-dlg-target';
var DLG_CONTAINER = 'e-dlg-container';
var SCROLL_DISABLED = 'e-scroll-disabled';
var DLG_PRIMARY_BUTTON = 'e-primary';
var ICON = 'e-icons';
var POPUP_ROOT = 'e-popup';
var DEVICE = 'e-device';
var FULLSCREEN = 'e-dlg-fullscreen';
var DLG_CLOSE_ICON_BTN = 'e-dlg-closeicon-btn';
var DLG_HIDE = 'e-popup-close';
var DLG_SHOW = 'e-popup-open';
var DLG_UTIL_DEFAULT_TITLE = 'Information';
var DLG_UTIL_ROOT = 'e-scroll-disabled';
var DLG_UTIL_ALERT = 'e-alert-dialog';
var DLG_UTIL_CONFIRM = 'e-confirm-dialog';
var DLG_RESIZABLE = 'e-dlg-resizable';
var DLG_RESTRICT_LEFT_VALUE = 'e-restrict-left';
var DLG_RESTRICT_WIDTH_VALUE = 'e-resize-viewport';
var DLG_REF_ELEMENT = 'e-dlg-ref-element';
var DLG_USER_ACTION_CLOSED = 'user action';
var DLG_CLOSE_ICON_CLOSED = 'close icon';
var DLG_ESCAPE_CLOSED = 'escape';
var DLG_OVERLAYCLICK_CLOSED = 'overlayClick';
var DLG_DRAG = 'e-draggable';
/**
 * Represents the dialog component that displays the information and get input from the user.
 * Two types of dialog components are `Modal and Modeless (non-modal)` depending on its interaction with parent application.
 * ```html
 * <div id="dialog"></div>
 * ```
 * ```typescript
 * <script>
 *   var dialogObj = new Dialog({ header: 'Dialog' });
 *   dialogObj.appendTo("#dialog");
 * </script>
 * ```
 */

var Dialog =
/** @class */
function (_super) {
  __extends(Dialog, _super);
  /*
   * * Constructor for creating the widget
   *
   * @param
   * @param
   * @hidden
   */


  function Dialog(options, element) {
    var _this = _super.call(this, options, element) || this;

    _this.needsID = true;
    return _this;
  }
  /**
   *Initialize the control rendering
   *
   * @returns {void}
   * @private
   */


  Dialog.prototype.render = function () {
    this.initialize();
    this.initRender();
    this.wireEvents();

    if (this.width === '100%') {
      this.element.style.width = '';
    }

    if (this.minHeight !== '') {
      this.element.style.minHeight = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.minHeight);
    }

    if (this.enableResize) {
      this.setResize();

      if (this.animationSettings.effect === 'None') {
        this.getMinHeight();
      }
    }

    this.renderComplete();
  };

  Dialog.prototype.initializeValue = function () {
    this.dlgClosedBy = DLG_USER_ACTION_CLOSED;
  };
  /**
   *Initialize the event handler
   *
   * @returns {void}
   * @private
   */


  Dialog.prototype.preRender = function () {
    var _this = this;

    this.initializeValue();
    this.headerContent = null;
    this.allowMaxHeight = true;
    this.preventVisibility = true;
    this.clonedEle = this.element.cloneNode(true);

    this.closeIconClickEventHandler = function (event) {
      _this.dlgClosedBy = DLG_CLOSE_ICON_CLOSED;

      _this.hide(event);
    };

    this.dlgOverlayClickEventHandler = function (event) {
      _this.dlgClosedBy = DLG_OVERLAYCLICK_CLOSED;
      event.preventFocus = false;

      _this.trigger('overlayClick', event, function (overlayClickEventArgs) {
        if (!overlayClickEventArgs.preventFocus) {
          _this.focusContent();
        }

        _this.dlgClosedBy = DLG_USER_ACTION_CLOSED;
      });
    };

    var localeText = {
      close: 'Close'
    };
    this.l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"]('dialog', localeText, this.locale);
    this.checkPositionData();

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.target)) {
      var prevOnChange = this.isProtectedOnChange;
      this.isProtectedOnChange = true;
      this.target = document.body;
      this.isProtectedOnChange = prevOnChange;
    }
  };

  Dialog.prototype.updatePersistData = function () {
    if (this.enablePersistence) {
      this.setProperties({
        width: parseFloat(this.element.style.width),
        height: parseFloat(this.element.style.height),
        position: {
          X: parseFloat(this.dragObj.element.style.left),
          Y: parseFloat(this.dragObj.element.style.top)
        }
      }, true);
    }
  };

  Dialog.prototype.isNumberValue = function (value) {
    var isNumber = /^[-+]?\d*\.?\d+$/.test(value);
    return isNumber;
  };

  Dialog.prototype.checkPositionData = function () {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.position)) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.position.X) && typeof this.position.X !== 'number') {
        var isNumber = this.isNumberValue(this.position.X);

        if (isNumber) {
          var prevOnChange = this.isProtectedOnChange;
          this.isProtectedOnChange = true;
          this.position.X = parseFloat(this.position.X);
          this.isProtectedOnChange = prevOnChange;
        }
      }

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.position.Y) && typeof this.position.Y !== 'number') {
        var isNumber = this.isNumberValue(this.position.Y);

        if (isNumber) {
          var prevOnChange = this.isProtectedOnChange;
          this.isProtectedOnChange = true;
          this.position.Y = parseFloat(this.position.Y);
          this.isProtectedOnChange = prevOnChange;
        }
      }
    }
  };

  Dialog.prototype.getEle = function (list, selector) {
    var element = undefined;

    for (var i = 0; i < list.length; i++) {
      if (list[i].classList.contains(selector)) {
        element = list[i];
        break;
      }
    }

    return element;
  };
  /* istanbul ignore next */


  Dialog.prototype.getMinHeight = function () {
    var computedHeaderHeight = '0px';
    var computedFooterHeight = '0px';

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.querySelector('.' + DLG_HEADER_CONTENT))) {
      computedHeaderHeight = getComputedStyle(this.headerContent).height;
    }

    var footerEle = this.getEle(this.element.children, DLG_FOOTER_CONTENT);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(footerEle)) {
      computedFooterHeight = getComputedStyle(footerEle).height;
    }

    var headerHeight = parseInt(computedHeaderHeight.slice(0, computedHeaderHeight.indexOf('p')), 10);
    var footerHeight = parseInt(computedFooterHeight.slice(0, computedFooterHeight.indexOf('p')), 10);
    Object(_common_resize__WEBPACK_IMPORTED_MODULE_3__["setMinHeight"])(headerHeight + 30 + (isNaN(footerHeight) ? 0 : footerHeight));
    return headerHeight + 30 + footerHeight;
  };

  Dialog.prototype.onResizeStart = function (args, dialogObj) {
    dialogObj.trigger('resizeStart', args);
    return args.cancel;
  };

  Dialog.prototype.onResizing = function (args, dialogObj) {
    dialogObj.trigger('resizing', args);
  };

  Dialog.prototype.onResizeComplete = function (args, dialogObj) {
    dialogObj.trigger('resizeStop', args);
    this.updatePersistData();
  };

  Dialog.prototype.setResize = function () {
    if (this.enableResize) {
      if (this.isBlazorServerRender() && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.querySelector('.e-icons.e-resize-handle'))) {
        return;
      }

      this.element.classList.add(DLG_RESIZABLE);
      var computedHeight = getComputedStyle(this.element).minHeight;
      var computedWidth = getComputedStyle(this.element).minWidth;
      var direction = '';

      for (var i = 0; i < this.resizeHandles.length; i++) {
        if (this.resizeHandles[i] === 'All') {
          direction = 'south north east west north-east north-west south-east south-west';
          break;
        } else {
          var directionValue = '';

          switch (this.resizeHandles[i].toString()) {
            case 'SouthEast':
              directionValue = 'south-east';
              break;

            case 'SouthWest':
              directionValue = 'south-west';
              break;

            case 'NorthEast':
              directionValue = 'north-east';
              break;

            case 'NorthWest':
              directionValue = 'north-west';
              break;

            default:
              directionValue = this.resizeHandles[i].toString();
              break;
          }

          direction += directionValue.toLocaleLowerCase() + ' ';
        }
      }

      if (this.enableRtl && direction.trim() === 'south-east') {
        direction = 'south-west';
      } else if (this.enableRtl && direction.trim() === 'south-west') {
        direction = 'south-east';
      }

      if (this.isModal && this.enableRtl) {
        this.element.classList.add(DLG_RESTRICT_LEFT_VALUE);
      } else if (this.isModal && this.target === document.body) {
        this.element.classList.add(DLG_RESTRICT_WIDTH_VALUE);
      }

      Object(_common_resize__WEBPACK_IMPORTED_MODULE_3__["createResize"])({
        element: this.element,
        direction: direction,
        minHeight: parseInt(computedHeight.slice(0, computedWidth.indexOf('p')), 10),
        maxHeight: this.targetEle.clientHeight,
        minWidth: parseInt(computedWidth.slice(0, computedWidth.indexOf('p')), 10),
        maxWidth: this.targetEle.clientWidth,
        boundary: this.target === document.body ? null : this.targetEle,
        resizeBegin: this.onResizeStart.bind(this),
        resizeComplete: this.onResizeComplete.bind(this),
        resizing: this.onResizing.bind(this),
        proxy: this
      });
      this.wireWindowResizeEvent();
    } else {
      Object(_common_resize__WEBPACK_IMPORTED_MODULE_3__["removeResize"])();
      this.unWireWindowResizeEvent();

      if (this.isModal) {
        this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);
      } else {
        this.element.classList.remove(DLG_RESTRICT_WIDTH_VALUE);
      }

      this.element.classList.remove(DLG_RESIZABLE);
    }
  };

  Dialog.prototype.getFocusElement = function (target) {
    var value = 'input,select,textarea,button:enabled,a,[contenteditable="true"],[tabindex]';
    var items = target.querySelectorAll(value);
    return {
      element: items[items.length - 1]
    };
  };
  /* istanbul ignore next */


  Dialog.prototype.keyDown = function (event) {
    var _this = this;

    if (event.keyCode === 9) {
      if (this.isModal) {
        var buttonObj = void 0;

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.btnObj)) {
          buttonObj = this.btnObj[this.btnObj.length - 1];
        }

        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.btnObj) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ftrTemplateContent)) {
          buttonObj = this.getFocusElement(this.ftrTemplateContent);
        }

        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.btnObj) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ftrTemplateContent) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.contentEle)) {
          buttonObj = this.getFocusElement(this.contentEle);
        }

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(buttonObj) && document.activeElement === buttonObj.element && !event.shiftKey) {
          event.preventDefault();
          this.focusableElements(this.element).focus();
        }

        if (document.activeElement === this.focusableElements(this.element) && event.shiftKey) {
          event.preventDefault();

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(buttonObj)) {
            buttonObj.element.focus();
          }
        }
      }
    }

    var element = document.activeElement;
    var isTagName = ['input', 'textarea'].indexOf(element.tagName.toLowerCase()) > -1;
    var isContentEdit = false;

    if (!isTagName) {
      isContentEdit = element.hasAttribute('contenteditable') && element.getAttribute('contenteditable') === 'true';
    }

    if (event.keyCode === 27 && this.closeOnEscape) {
      this.dlgClosedBy = DLG_ESCAPE_CLOSED;
      var query = document.querySelector('.e-popup-open:not(.e-dialog)'); // 'document.querySelector' is used to find the elements rendered based on body

      if (!(!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(query) && !query.classList.contains('e-toolbar-pop'))) {
        this.hide(event);
      }
    }

    if (event.keyCode === 13 && !event.ctrlKey && element.tagName.toLowerCase() !== 'textarea' && isTagName && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.primaryButtonEle) || event.keyCode === 13 && event.ctrlKey && (element.tagName.toLowerCase() === 'textarea' || isContentEdit) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.primaryButtonEle)) {
      var buttonIndex_1;
      var firstPrimary = this.buttons.some(function (data, index) {
        buttonIndex_1 = index; // eslint-disable-next-line

        var buttonModel = data.buttonModel;
        return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(buttonModel) && buttonModel.isPrimary === true;
      });

      if (firstPrimary && typeof this.buttons[buttonIndex_1].click === 'function') {
        setTimeout(function () {
          _this.buttons[buttonIndex_1].click.call(_this, event);
        });
      }
    }
  };
  /**
   * Initialize the control rendering
   *
   * @returns {void}
   * @private
   */


  Dialog.prototype.initialize = function () {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.target)) {
      this.targetEle = typeof this.target === 'string' ? document.querySelector(this.target) : this.target;
    }

    if (!this.isBlazorServerRender()) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], ROOT);
    }

    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], DEVICE);
    }

    if (!this.isBlazorServerRender()) {
      this.setCSSClass();
    }

    this.setMaxHeight();
  };
  /**
   * Initialize the rendering
   *
   * @returns {void}
   * @private
   */


  Dialog.prototype.initRender = function () {
    var _this = this;

    this.initialRender = true;

    if (!this.isBlazorServerRender()) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
        role: 'dialog'
      });
    }

    if (this.zIndex === 1000) {
      this.setzIndex(this.element, false);
      this.calculatezIndex = true;
    } else {
      this.calculatezIndex = false;
    }

    if (this.isBlazorServerRender() && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.headerContent)) {
      this.headerContent = this.element.getElementsByClassName('e-dlg-header-content')[0];
    }

    if (this.isBlazorServerRender() && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.contentEle)) {
      this.contentEle = this.element.querySelector('#' + this.element.id + '_dialog-content');
    }

    if (!this.isBlazorServerRender()) {
      this.setTargetContent();

      if (this.header !== '' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.header)) {
        this.setHeader();
      }

      this.renderCloseIcon();
      this.setContent();

      if (this.footerTemplate !== '' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.footerTemplate)) {
        this.setFooterTemplate();
      } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.buttons[0].buttonModel)) {
        this.setButton();
      }
    }

    if (this.isBlazorServerRender()) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.buttons[0].buttonModel) && this.footerTemplate === '') {
        this.setButton();
      }
    }

    if (this.allowDragging && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.headerContent)) {
      this.setAllowDragging();
    }

    if (!this.isBlazorServerRender()) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
        'aria-modal': this.isModal ? 'true' : 'false'
      });

      if (this.isModal) {
        this.setIsModal();
      }
    }

    if (this.isBlazorServerRender() && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.dlgContainer)) {
      this.dlgContainer = this.element.parentElement;

      for (var i = 0, childNodes = this.dlgContainer.children; i < childNodes.length; i++) {
        if (childNodes[i].classList.contains('e-dlg-overlay')) {
          this.dlgOverlay = childNodes[i];
        }
      }
    }

    if (this.element.classList.contains(DLG_UTIL_ALERT) !== true && this.element.classList.contains(DLG_UTIL_CONFIRM) !== true && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.parentElement)) {
      var parentEle = this.isModal ? this.dlgContainer.parentElement : this.element.parentElement;
      this.refElement = this.createElement('div', {
        className: DLG_REF_ELEMENT
      });
      parentEle.insertBefore(this.refElement, this.isModal ? this.dlgContainer : this.element);
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.targetEle)) {
      // eslint-disable-next-line
      this.isModal ? this.targetEle.appendChild(this.dlgContainer) : this.targetEle.appendChild(this.element);
    }

    this.popupObj = new _popup_popup__WEBPACK_IMPORTED_MODULE_2__["Popup"](this.element, {
      height: this.height,
      width: this.width,
      zIndex: this.zIndex,
      relateTo: this.target,
      actionOnScroll: 'none',
      enableRtl: this.enableRtl,
      // eslint-disable-next-line
      open: function (event) {
        var eventArgs = {
          container: _this.isModal ? _this.dlgContainer : _this.element,
          element: _this.element,
          target: _this.target,
          preventFocus: false
        };

        if (_this.enableResize) {
          _this.resetResizeIcon();
        }

        _this.trigger('open', eventArgs, function (openEventArgs) {
          if (!openEventArgs.preventFocus) {
            _this.focusContent();
          }
        });
      },
      // eslint-disable-next-line
      close: function (event) {
        if (_this.isModal) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this.dlgOverlay], 'e-fade');
        }

        _this.unBindEvent(_this.element);

        if (_this.isModal) {
          _this.dlgContainer.style.display = 'none';
        }

        _this.trigger('close', _this.closeArgs);

        var activeEle = document.activeElement;

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(activeEle) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(activeEle.blur)) {
          activeEle.blur();
        }

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this.storeActiveElement) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this.storeActiveElement.focus)) {
          _this.storeActiveElement.focus();
        }
      }
    });
    this.positionChange();
    this.setEnableRTL();

    if (!this.isBlazorServerRender()) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], DLG_HIDE);

      if (this.isModal) {
        this.setOverlayZindex();
      }
    }

    if (this.visible) {
      this.show();
    } else {
      if (this.isModal) {
        this.dlgOverlay.style.display = 'none';
      }
    }

    this.initialRender = false;
  };

  Dialog.prototype.resetResizeIcon = function () {
    var dialogConHeight = this.getMinHeight();

    if (this.targetEle.offsetHeight < dialogConHeight) {
      var className = this.enableRtl ? 'e-south-west' : 'e-south-east';
      var resizeIcon = this.element.querySelector('.' + className);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(resizeIcon)) {
        resizeIcon.style.bottom = '-' + dialogConHeight.toString() + 'px';
      }
    }
  };

  Dialog.prototype.setOverlayZindex = function (zIndexValue) {
    var zIndex;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(zIndexValue)) {
      zIndex = parseInt(this.element.style.zIndex, 10) ? parseInt(this.element.style.zIndex, 10) : this.zIndex;
    } else {
      zIndex = zIndexValue;
    }

    this.dlgOverlay.style.zIndex = (zIndex - 1).toString();
    this.dlgContainer.style.zIndex = zIndex.toString();
  };

  Dialog.prototype.positionChange = function () {
    if (this.isModal) {
      if (!isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y))) {
        this.setPopupPosition();
      } else if (!isNaN(parseFloat(this.position.X)) && isNaN(parseFloat(this.position.Y)) || isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y))) {
        this.setPopupPosition();
      } else {
        this.element.style.top = '0px';
        this.element.style.left = '0px';
        this.dlgContainer.classList.add('e-dlg-' + this.position.X + '-' + this.position.Y);
      }
    } else {
      this.setPopupPosition();
    }
  };

  Dialog.prototype.setPopupPosition = function () {
    this.popupObj.setProperties({
      position: {
        X: this.position.X,
        Y: this.position.Y
      }
    });
  };

  Dialog.prototype.setAllowDragging = function () {
    var _this = this;

    var handleContent = '.' + DLG_HEADER_CONTENT;

    if (!this.element.classList.contains(DLG_DRAG)) {
      this.dragObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Draggable"](this.element, {
        clone: false,
        isDragScroll: true,
        abort: '.e-dlg-closeicon-btn',
        handle: handleContent,
        dragStart: function (event) {
          _this.trigger('dragStart', event, function (dragEventArgs) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
              dragEventArgs.bindEvents(event.dragElement);
            }
          });
        },
        dragStop: function (event) {
          if (_this.isModal) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this.position)) {
              _this.dlgContainer.classList.remove('e-dlg-' + _this.position.X + '-' + _this.position.Y);
            } // Reset the dialog position after drag completion.


            _this.element.style.position = 'relative';
          }

          _this.trigger('dragStop', event);

          _this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);

          _this.updatePersistData();
        },
        drag: function (event) {
          _this.trigger('drag', event);
        }
      });

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.targetEle)) {
        this.dragObj.dragArea = this.targetEle;
      }
    }
  };

  Dialog.prototype.setButton = function () {
    if (!this.isBlazorServerRender()) {
      this.buttonContent = [];
      this.btnObj = []; // eslint-disable-next-line

      var primaryBtnFlag = true;

      for (var i = 0; i < this.buttons.length; i++) {
        var buttonType = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.buttons[i].type) ? this.buttons[i].type.toLowerCase() : 'button';
        var btn = this.createElement('button', {
          className: this.cssClass,
          attrs: {
            type: buttonType
          }
        });
        this.buttonContent.push(btn.outerHTML);
      }

      this.setFooterTemplate();
    }

    var footerBtn;

    for (var i = 0, childNodes = this.element.children; i < childNodes.length; i++) {
      if (childNodes[i].classList.contains(DLG_FOOTER_CONTENT)) {
        footerBtn = childNodes[i].querySelectorAll('button');
      }
    }

    for (var i = 0; i < this.buttons.length; i++) {
      if (!this.isBlazorServerRender()) {
        this.btnObj[i] = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__["Button"](this.buttons[i].buttonModel);
      }

      if (this.isBlazorServerRender()) {
        this.ftrTemplateContent = this.element.querySelector('.' + DLG_FOOTER_CONTENT);
      }

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ftrTemplateContent) && footerBtn.length > 0) {
        if (typeof this.buttons[i].click === 'function') {
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(footerBtn[i], 'click', this.buttons[i].click, this);
        }

        if (typeof this.buttons[i].click === 'object') {
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(footerBtn[i], 'click', this.buttonClickHandler.bind(this, i), this);
        }
      }

      if (!this.isBlazorServerRender() && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ftrTemplateContent)) {
        this.btnObj[i].appendTo(this.ftrTemplateContent.children[i]);

        if (this.buttons[i].isFlat) {
          this.btnObj[i].element.classList.add('e-flat');
        }

        this.primaryButtonEle = this.element.getElementsByClassName('e-primary')[0];
      }
    }
  };

  Dialog.prototype.buttonClickHandler = function (index) {
    this.trigger('buttons[' + index + '].click', {});
  };

  Dialog.prototype.setContent = function () {
    this.contentEle = this.createElement('div', {
      className: DLG_CONTENT,
      id: this.element.id + '_dialog-content'
    });

    if (this.innerContentElement) {
      this.contentEle.appendChild(this.innerContentElement);
    } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.content) && this.content !== '' || !this.initialRender) {
      // eslint-disable-next-line
      var blazorContain = Object.keys(window);

      if (typeof this.content === 'string' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
        this.setTemplate(this.content, this.contentEle, 'content');
      } else if (this.content instanceof HTMLElement) {
        this.contentEle.appendChild(this.content);
      } else {
        this.setTemplate(this.content, this.contentEle, 'content');
      }
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.headerContent)) {
      this.element.insertBefore(this.contentEle, this.element.children[1]);
    } else {
      this.element.insertBefore(this.contentEle, this.element.children[0]);
    }

    if (this.height === 'auto') {
      if (!this.isBlazorServerRender() && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIE && this.element.style.width === '' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.width)) {
        this.element.style.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.width);
      }

      this.setMaxHeight();
    }
  };

  Dialog.prototype.setTemplate = function (template, toElement, prop) {
    var templateFn;
    var templateProps; // eslint-disable-next-line

    var blazorContain = Object.keys(window);

    if (toElement.classList.contains(DLG_HEADER)) {
      templateProps = this.element.id + 'header';
    } else if (toElement.classList.contains(DLG_FOOTER_CONTENT)) {
      templateProps = this.element.id + 'footerTemplate';
    } else {
      templateProps = this.element.id + 'content';
    }

    var templateValue;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(template.outerHTML)) {
      toElement.appendChild(template);
    } else if (typeof template === 'string' || typeof template !== 'string' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isStringTemplate) {
      if (typeof template === 'string') {
        template = this.sanitizeHelper(template);
      }

      if (this.isVue || typeof template !== 'string') {
        templateFn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(template);
        templateValue = template;
      } else {
        toElement.innerHTML = template;
      }
    }

    var fromElements = [];

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(templateFn)) {
      var isString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isStringTemplate && templateValue.indexOf('<div>Blazor') === 0 ? this.isStringTemplate : true;

      for (var _i = 0, _a = templateFn({}, this, prop, templateProps, isString); _i < _a.length; _i++) {
        var item = _a[_i];
        fromElements.push(item);
      }

      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([].slice.call(fromElements), toElement);
    }
  };
  /*
   * @returns {void}
   * @hidden
   * @value
   */


  Dialog.prototype.sanitizeHelper = function (value) {
    if (this.enableHtmlSanitizer) {
      var dialogItem = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].beforeSanitize();
      var beforeEvent = {
        cancel: false,
        helper: null
      };
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(dialogItem, dialogItem, beforeEvent);
      this.trigger('beforeSanitizeHtml', dialogItem);

      if (dialogItem.cancel && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dialogItem.helper)) {
        value = dialogItem.helper(value);
      } else if (!dialogItem.cancel) {
        value = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].serializeValue(dialogItem, value);
      }
    }

    return value;
  };

  Dialog.prototype.setMaxHeight = function () {
    if (!this.allowMaxHeight) {
      return;
    }

    var display = this.element.style.display;
    this.element.style.display = 'none';
    this.element.style.maxHeight = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.target) && this.targetEle.offsetHeight < window.innerHeight ? this.targetEle.offsetHeight - 20 + 'px' : window.innerHeight - 20 + 'px';
    this.element.style.display = display;

    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIE && this.height === 'auto' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.contentEle) && this.element.offsetHeight < this.contentEle.offsetHeight) {
      this.element.style.height = 'inherit';
    }
  };

  Dialog.prototype.setEnableRTL = function () {
    if (!this.isBlazorServerRender()) {
      // eslint-disable-next-line
      this.enableRtl ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], RTL) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], RTL);
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.querySelector('.e-resize-handle'))) {
      Object(_common_resize__WEBPACK_IMPORTED_MODULE_3__["removeResize"])();
      this.setResize();
    }
  };

  Dialog.prototype.setTargetContent = function () {
    var _this = this;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.content) || this.content === '') {
      var isContent = this.element.innerHTML.replace(/\s|<(\/?|\/?)(!--!--)>/g, '') !== '';

      if (this.element.children.length > 0 || isContent) {
        this.innerContentElement = document.createDocumentFragment();
        [].slice.call(this.element.childNodes).forEach(function (el) {
          if (el.nodeType !== 8) {
            _this.innerContentElement.appendChild(el);
          }
        });
      }
    }
  };

  Dialog.prototype.setHeader = function () {
    if (this.headerEle) {
      this.headerEle.innerHTML = '';
    } else {
      this.headerEle = this.createElement('div', {
        id: this.element.id + '_title',
        className: DLG_HEADER
      });
    }

    this.createHeaderContent();
    this.headerContent.appendChild(this.headerEle);
    this.setTemplate(this.header, this.headerEle, 'header');
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
      'aria-labelledby': this.element.id + '_title'
    });
    this.element.insertBefore(this.headerContent, this.element.children[0]);

    if (this.allowDragging && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.headerContent)) {
      this.setAllowDragging();
    }
  };

  Dialog.prototype.setFooterTemplate = function () {
    if (this.ftrTemplateContent) {
      this.ftrTemplateContent.innerHTML = '';
    } else {
      this.ftrTemplateContent = this.createElement('div', {
        className: DLG_FOOTER_CONTENT
      });
    }

    if (this.footerTemplate !== '' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.footerTemplate)) {
      this.setTemplate(this.footerTemplate, this.ftrTemplateContent, 'footerTemplate');
    } else {
      this.ftrTemplateContent.innerHTML = this.buttonContent.join('');
    }

    this.element.appendChild(this.ftrTemplateContent);
  };

  Dialog.prototype.createHeaderContent = function () {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.headerContent)) {
      this.headerContent = this.createElement('div', {
        id: this.element.id + '_dialog-header',
        className: DLG_HEADER_CONTENT
      });
    }
  };

  Dialog.prototype.renderCloseIcon = function () {
    if (this.showCloseIcon) {
      this.closeIcon = this.createElement('button', {
        className: DLG_CLOSE_ICON_BTN,
        attrs: {
          type: 'button'
        }
      });
      this.closeIconBtnObj = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__["Button"]({
        cssClass: 'e-flat',
        iconCss: DLG_CLOSE_ICON + ' ' + ICON
      });
      this.closeIconTitle();

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.headerContent)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([this.closeIcon], this.headerContent);
      } else {
        this.createHeaderContent();
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([this.closeIcon], this.headerContent);
        this.element.insertBefore(this.headerContent, this.element.children[0]);
      }

      this.closeIconBtnObj.appendTo(this.closeIcon);
    }
  };

  Dialog.prototype.closeIconTitle = function () {
    this.l10n.setLocale(this.locale);
    var closeIconTitle = this.l10n.getConstant('close');
    this.closeIcon.setAttribute('title', closeIconTitle);
    this.closeIcon.setAttribute('aria-label', closeIconTitle);
  };

  Dialog.prototype.setCSSClass = function (oldCSSClass) {
    if (oldCSSClass) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], oldCSSClass.split(' '));

      if (this.isModal && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.dlgContainer)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.dlgContainer], oldCSSClass.split(' '));
      }
    }

    if (this.cssClass) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], this.cssClass.split(' '));

      if (this.isModal && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.dlgContainer)) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.dlgContainer], this.cssClass.split(' '));
      }
    }
  };

  Dialog.prototype.setIsModal = function () {
    this.dlgContainer = this.createElement('div', {
      className: DLG_CONTAINER
    });
    this.setCSSClass();
    this.element.classList.remove(DLG_SHOW);
    this.element.parentNode.insertBefore(this.dlgContainer, this.element);
    this.dlgContainer.appendChild(this.element);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], MODAL_DLG);
    this.dlgOverlay = this.createElement('div', {
      className: DLG_OVERLAY
    });
    this.dlgOverlay.style.zIndex = (this.zIndex - 1).toString();
    this.dlgContainer.appendChild(this.dlgOverlay);
  };

  Dialog.prototype.getValidFocusNode = function (items) {
    var node;

    for (var u = 0; u < items.length; u++) {
      node = items[u];

      if ((node.clientHeight > 0 || node.tagName.toLowerCase() === 'a' && node.hasAttribute('href')) && node.tabIndex > -1 && !node.disabled && !this.disableElement(node, '[disabled],[aria-disabled="true"],[type="hidden"]')) {
        return node;
      } else {
        node = null;
      }
    }

    return node;
  };

  Dialog.prototype.focusableElements = function (content) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(content)) {
      var value = 'input,select,textarea,button,a,[contenteditable="true"],[tabindex]';
      var items = content.querySelectorAll(value);
      return this.getValidFocusNode(items);
    }

    return null;
  };

  Dialog.prototype.getAutoFocusNode = function (container) {
    var node = container.querySelector('.' + DLG_CLOSE_ICON_BTN);
    var value = '[autofocus]';
    var items = container.querySelectorAll(value);
    var validNode = this.getValidFocusNode(items);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
      this.primaryButtonEle = this.element.getElementsByClassName('e-primary')[0];
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(validNode)) {
      node = validNode;
    } else {
      validNode = this.focusableElements(this.contentEle);

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(validNode)) {
        return node = validNode;
      } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.primaryButtonEle)) {
        return this.element.querySelector('.' + DLG_PRIMARY_BUTTON);
      }
    }

    return node;
  };

  Dialog.prototype.disableElement = function (element, t) {
    var elementMatch = element ? element.matches || element.webkitMatchesSelector || element.msGetRegionContent : null;

    if (elementMatch) {
      for (; element; element = element.parentNode) {
        if (element instanceof Element && elementMatch.call(element, t)) {
          /* istanbul ignore next */
          return element;
        }
      }
    }

    return null;
  };

  Dialog.prototype.focusContent = function () {
    var element = this.getAutoFocusNode(this.element);
    var node = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element) ? element : this.element;
    var userAgent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].userAgent;

    if (userAgent.indexOf('MSIE ') > 0 || userAgent.indexOf('Trident/') > 0) {
      this.element.focus();
    }

    node.focus();
    this.unBindEvent(this.element);
    this.bindEvent(this.element);
  };

  Dialog.prototype.bindEvent = function (element) {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(element, 'keydown', this.keyDown, this);
  };

  Dialog.prototype.unBindEvent = function (element) {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(element, 'keydown', this.keyDown);
  };

  Dialog.prototype.updateSanitizeContent = function () {
    if (!this.isBlazorServerRender()) {
      this.contentEle.innerHTML = this.sanitizeHelper(this.content);
    }
  };

  Dialog.prototype.isBlazorServerRender = function () {
    return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered;
  };
  /**
   * Module required function
   *
   * @returns {void}
   * @private
   */


  Dialog.prototype.getModuleName = function () {
    return 'dialog';
  };
  /**
   * Called internally if any of the property value changed
   *
   * @param {DialogModel} newProp - specifies the new property
   * @param {DialogModel} oldProp - specifies the old property
   * @private
   * @returns {void}
   */


  Dialog.prototype.onPropertyChanged = function (newProp, oldProp) {
    if (!this.element.classList.contains(ROOT)) {
      return;
    }

    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'content':
          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.content) && this.content !== '') {
            if (this.isBlazorServerRender()) {
              this.contentEle = this.element.querySelector('.e-dlg-content');
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.contentEle) && this.contentEle.getAttribute('role') !== 'dialog') {
              if (!this.isBlazorServerRender()) {
                this.contentEle.innerHTML = '';
              }

              if (typeof this.content === 'function') {
                this.clearTemplate(['content']);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.contentEle);
                this.contentEle = null;
                this.setContent();
              } else {
                // eslint-disable-next-line @typescript-eslint/no-unused-expressions
                typeof this.content === 'string' ? this.isBlazorServerRender() && this.contentEle.innerText === '' ? this.contentEle.insertAdjacentHTML('beforeend', this.sanitizeHelper(this.content)) : this.updateSanitizeContent() : this.contentEle.appendChild(this.content);
              }

              this.setMaxHeight();
            } else {
              if (!this.isBlazorServerRender() || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.querySelector('.e-dlg-content'))) {
                this.setContent();
              }
            }
          } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.contentEle)) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.contentEle);
            this.contentEle = null;
          }

          break;

        case 'header':
          if (this.header === '' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.header)) {
            if (this.headerEle) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.headerEle);
              this.headerEle = null;
            }
          } else {
            if (!this.isBlazorServerRender() || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.querySelector('.e-dlg-header-content'))) {
              this.setHeader();
            }
          }

          break;

        case 'footerTemplate':
          if (this.footerTemplate === '' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.footerTemplate)) {
            if (!this.ftrTemplateContent) {
              return;
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.ftrTemplateContent);
            this.ftrTemplateContent = null;
            this.buttons = [{}];
          } else {
            if (!this.isBlazorServerRender() || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.querySelector('.e-footer-content'))) {
              this.setFooterTemplate();
            }

            this.buttons = [{}];
          }

          break;

        case 'showCloseIcon':
          if (this.element.getElementsByClassName(DLG_CLOSE_ICON).length > 0) {
            if (!this.showCloseIcon && (this.header === '' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.header))) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.headerContent);
              this.headerContent = null;
            } else if (!this.showCloseIcon) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.closeIcon);
            } else {
              if (this.isBlazorServerRender()) {
                this.wireEvents();
              }
            }
          } else {
            if (!this.isBlazorServerRender()) {
              this.renderCloseIcon();
            }

            this.wireEvents();
          }

          break;

        case 'locale':
          if (this.showCloseIcon) {
            this.closeIconTitle();
          }

          break;

        case 'visible':
          // eslint-disable-next-line
          this.visible ? this.show() : this.hide();
          break;

        case 'isModal':
          this.updateIsModal();
          break;

        case 'height':
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
            'height': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.height)
          });
          this.updatePersistData();
          break;

        case 'width':
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
            'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.width)
          });
          this.updatePersistData();
          break;

        case 'zIndex':
          this.popupObj.zIndex = this.zIndex;

          if (this.isModal) {
            this.setOverlayZindex(this.zIndex);
          }

          if (this.element.style.zIndex !== this.zIndex.toString()) {
            this.calculatezIndex = false;
          }

          break;

        case 'cssClass':
          this.setCSSClass(oldProp.cssClass);
          break;

        case 'buttons':
          {
            var buttonCount = this.buttons.length;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ftrTemplateContent) && !this.isBlazorServerRender()) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.ftrTemplateContent);
              this.ftrTemplateContent = null;
            }

            for (var i = 0; i < buttonCount; i++) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.buttons[i].buttonModel)) {
                this.footerTemplate = '';
                this.setButton();
              }
            }

            break;
          }

        case 'allowDragging':
          if (this.allowDragging && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.headerContent)) {
            this.setAllowDragging();
          } else {
            this.dragObj.destroy();
          }

          break;

        case 'target':
          this.setTarget(newProp.target);
          break;

        case 'position':
          this.checkPositionData();

          if (this.isModal) {
            var positionX = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldProp.position) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldProp.position.X) ? oldProp.position.X : this.position.X;
            var positionY = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldProp.position) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldProp.position.Y) ? oldProp.position.Y : this.position.Y;

            if (this.dlgContainer.classList.contains('e-dlg-' + positionX + '-' + positionY)) {
              this.dlgContainer.classList.remove('e-dlg-' + positionX + '-' + positionY);
            }
          }

          this.positionChange();
          this.updatePersistData();
          break;

        case 'enableRtl':
          this.setEnableRTL();
          break;

        case 'enableResize':
          this.setResize();
          break;

        case 'minHeight':
          if (this.minHeight !== '') {
            this.element.style.minHeight = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.minHeight);
          }

          break;
      }
    }
  };

  Dialog.prototype.setTarget = function (target) {
    this.popupObj.relateTo = target;
    this.target = target;
    this.targetEle = typeof this.target === 'string' ? document.querySelector(this.target) : this.target;

    if (this.dragObj) {
      this.dragObj.dragArea = this.targetEle;
    }

    this.setMaxHeight();

    if (this.isModal) {
      this.updateIsModal();
    }

    if (this.enableResize) {
      this.setResize();
    }
  };

  Dialog.prototype.updateIsModal = function () {
    this.element.setAttribute('aria-modal', this.isModal ? 'true' : 'false');

    if (this.isModal) {
      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.dlgOverlay)) {
        this.setIsModal();
        this.element.style.top = '0px';
        this.element.style.left = '0px';

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.targetEle)) {
          this.targetEle.appendChild(this.dlgContainer);
        }
      }
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], MODAL_DLG);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([document.body], [DLG_TARGET, SCROLL_DISABLED]);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.dlgOverlay);

      while (this.dlgContainer.firstChild) {
        this.dlgContainer.parentElement.insertBefore(this.dlgContainer.firstChild, this.dlgContainer);
      }

      this.dlgContainer.parentElement.removeChild(this.dlgContainer);
    }

    if (this.visible) {
      this.show();
    }

    this.positionChange();

    if (this.isModal && this.dlgOverlay) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler, this);
    }
  };

  Dialog.prototype.setzIndex = function (zIndexElement, setPopupZindex) {
    var prevOnChange = this.isProtectedOnChange;
    this.isProtectedOnChange = true;
    var currentzIndex = Object(_popup_popup__WEBPACK_IMPORTED_MODULE_2__["getZindexPartial"])(zIndexElement);
    this.zIndex = currentzIndex > this.zIndex ? currentzIndex : this.zIndex;
    this.isProtectedOnChange = prevOnChange;

    if (setPopupZindex) {
      this.popupObj.zIndex = this.zIndex;
    }
  };

  Dialog.prototype.windowResizeHandler = function () {
    Object(_common_resize__WEBPACK_IMPORTED_MODULE_3__["setMaxWidth"])(this.targetEle.clientWidth);
    Object(_common_resize__WEBPACK_IMPORTED_MODULE_3__["setMaxHeight"])(this.targetEle.clientHeight);
    this.setMaxHeight();
  };
  /**
   * Get the properties to be maintained in the persisted state.
   *
   * @returns {void}
   * @private
   */


  Dialog.prototype.getPersistData = function () {
    return this.addOnPersist(['width', 'height', 'position']);
  };
  /**
   * To destroy the widget
   *
   * @returns {void}
   */


  Dialog.prototype.destroy = function () {
    if (this.isDestroyed) {
      return;
    }

    var classArray = [RTL, MODAL_DLG, DLG_RESIZABLE, DLG_RESTRICT_LEFT_VALUE, FULLSCREEN, DEVICE];
    var attrs = ['role', 'aria-modal', 'aria-labelledby', 'aria-describedby', 'aria-grabbed', 'tabindex', 'style'];
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element) && this.element.classList.contains(FULLSCREEN)) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([document.body], [DLG_TARGET, SCROLL_DISABLED]);
    }

    if (this.isModal) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.targetEle) ? this.targetEle : document.body], SCROLL_DISABLED);
    }

    this.unWireEvents();

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.btnObj)) {
      for (var i = 0; i < this.btnObj.length; i++) {
        this.btnObj[i].destroy();
      }
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.closeIconBtnObj)) {
      this.closeIconBtnObj.destroy();
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.dragObj)) {
      this.dragObj.destroy();
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.popupObj.element) && this.popupObj.element.classList.contains(POPUP_ROOT)) {
      this.popupObj.destroy();
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], classArray);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cssClass) && this.cssClass !== '') {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], this.cssClass.split(' '));
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.refElement) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.refElement.parentElement)) {
      this.refElement.parentElement.insertBefore(this.isModal ? this.dlgContainer : this.element, this.refElement);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.refElement);
      this.refElement = undefined;
    }

    if (this.isModal && !this.isBlazorServerRender()) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.dlgOverlay);
      this.dlgContainer.parentNode.insertBefore(this.element, this.dlgContainer);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.dlgContainer);
    }

    if (!this.isBlazorServerRender()) {
      this.element.innerHTML = this.clonedEle.innerHTML;
    }

    if (this.isBlazorServerRender()) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.children)) {
        for (var i = 0; i <= this.element.children.length; i++) {
          i = i - i;
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.element.children[i]);
        }
      }
    }

    for (var i = 0; i < attrs.length; i++) {
      this.element.removeAttribute(attrs[i]);
    }

    this.ftrTemplateContent = null;
    this.headerContent = null;
    this.contentEle = null;

    if (!this.isBlazorServerRender()) {
      _super.prototype.destroy.call(this);
    } else {
      this.isDestroyed = true;
    } // eslint-disable-next-line


    if (this.isReact) {
      this.clearTemplate();
    }
  };

  Dialog.prototype.wireWindowResizeEvent = function () {
    window.addEventListener('resize', this.windowResizeHandler.bind(this));
  };

  Dialog.prototype.unWireWindowResizeEvent = function () {
    window.removeEventListener('resize', this.windowResizeHandler.bind(this));
  };
  /**
   * Binding event to the element while widget creation
   *
   * @returns {void}
   * @hidden
   */


  Dialog.prototype.wireEvents = function () {
    if (this.isBlazorServerRender() && this.showCloseIcon) {
      this.closeIcon = this.element.getElementsByClassName('e-dlg-closeicon-btn')[0];
    }

    if (this.showCloseIcon) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.closeIcon, 'click', this.closeIconClickEventHandler, this);
    }

    if (this.isModal && this.dlgOverlay) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler, this);
    }
  };
  /**
   * Unbinding event to the element while widget destroy
   *
   * @returns {void}
   * @hidden
   */


  Dialog.prototype.unWireEvents = function () {
    if (this.showCloseIcon) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.closeIcon, 'click', this.closeIconClickEventHandler);
    }

    if (this.isModal) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler);
    }

    if (this.buttons.length > 0 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.buttons[0].buttonModel) && this.footerTemplate === '') {
      for (var i = 0; i < this.buttons.length; i++) {
        if (typeof this.buttons[i].click === 'function') {
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.ftrTemplateContent.children[i], 'click', this.buttons[i].click);
        }
      }
    }
  };
  /**
   * Refreshes the dialog's position when the user changes its header and footer height/width dynamically.
   *
   * @returns {void}
   */


  Dialog.prototype.refreshPosition = function () {
    this.popupObj.refreshPosition();

    if (this.element.classList.contains(MODAL_DLG)) {
      this.positionChange();
    }
  };
  /**
   * Returns the current width and height of the Dialog
   *
   * @returns {DialogDimension}- returns the dialog element Dimension.
   * @public
   */


  Dialog.prototype.getDimension = function () {
    var dialogWidth = this.element.offsetWidth;
    var dialogHeight = this.element.offsetHeight;
    return {
      width: dialogWidth,
      height: dialogHeight
    };
  };
  /**
   * Opens the dialog if it is in hidden state.
   * To open the dialog with full screen width, set the parameter to true.
   *
   * @param { boolean } isFullScreen - Enable the fullScreen Dialog.
   * @returns {void}
   */


  Dialog.prototype.show = function (isFullScreen) {
    var _this = this;

    if (!this.element.classList.contains(ROOT)) {
      return;
    }

    if (!this.element.classList.contains(DLG_SHOW) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(isFullScreen)) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(isFullScreen)) {
        this.fullScreen(isFullScreen);
      }

      var eventArgs_1 = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() ? {
        cancel: false,
        element: this.element,
        container: this.isModal ? this.dlgContainer : this.element,
        maxHeight: this.element.style.maxHeight
      } : {
        cancel: false,
        element: this.element,
        container: this.isModal ? this.dlgContainer : this.element,
        target: this.target,
        maxHeight: this.element.style.maxHeight
      };
      this.trigger('beforeOpen', eventArgs_1, function (beforeOpenArgs) {
        if (!beforeOpenArgs.cancel) {
          if (_this.element.style.maxHeight !== eventArgs_1.maxHeight) {
            _this.allowMaxHeight = false;
            _this.element.style.maxHeight = eventArgs_1.maxHeight;
          }

          _this.storeActiveElement = document.activeElement;
          _this.element.tabIndex = -1;

          if (_this.isModal && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this.dlgOverlay)) {
            _this.dlgOverlay.style.display = 'block';
            _this.dlgContainer.style.display = 'flex';
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_this.dlgOverlay], 'e-fade');

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this.targetEle)) {
              if (_this.targetEle === document.body) {
                _this.dlgContainer.style.position = 'fixed';
              } else {
                _this.dlgContainer.style.position = 'absolute';
              }

              _this.dlgOverlay.style.position = 'absolute';
              _this.element.style.position = 'relative';
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([document.body], [DLG_TARGET, SCROLL_DISABLED]);
            }
          }

          var openAnimation = {
            name: _this.animationSettings.effect === 'None' && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["animationMode"] === 'Enable' ? 'Zoom' + 'In' : _this.animationSettings.effect + 'In',
            duration: _this.animationSettings.duration,
            delay: _this.animationSettings.delay
          };
          var zIndexElement = _this.isModal ? _this.element.parentElement : _this.element;

          if (_this.calculatezIndex) {
            _this.setzIndex(zIndexElement, true);

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(_this.element, {
              'zIndex': _this.zIndex
            });

            if (_this.isModal) {
              _this.setOverlayZindex(_this.zIndex);
            }
          } // eslint-disable-next-line


          _this.animationSettings.effect === 'None' && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["animationMode"] === 'Enable' ? _this.popupObj.show(openAnimation) : _this.animationSettings.effect === 'None' ? _this.popupObj.show() : _this.popupObj.show(openAnimation);
          _this.dialogOpen = true;
          var prevOnChange = _this.isProtectedOnChange;
          _this.isProtectedOnChange = true;
          _this.visible = true;
          _this.preventVisibility = true;
          _this.isProtectedOnChange = prevOnChange;
        }
      });
    } // eslint-disable-next-line @typescript-eslint/no-explicit-any


    if (this.isReact) {
      this.renderReactTemplates();
    }
  };
  /**
   * Closes the dialog if it is in visible state.
   *
   * @param { Event } event - specifies the event
   * @returns {void}
   */


  Dialog.prototype.hide = function (event) {
    var _this = this;

    if (!this.element.classList.contains(ROOT)) {
      return;
    }

    if (this.preventVisibility) {
      var eventArgs = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() ? {
        cancel: false,
        isInteracted: event ? true : false,
        element: this.element,
        container: this.isModal ? this.dlgContainer : this.element,
        event: event
      } : {
        cancel: false,
        isInteracted: event ? true : false,
        element: this.element,
        target: this.target,
        container: this.isModal ? this.dlgContainer : this.element,
        event: event,
        closedBy: this.dlgClosedBy
      };
      this.closeArgs = eventArgs;
      this.trigger('beforeClose', eventArgs, function (beforeCloseArgs) {
        if (!beforeCloseArgs.cancel) {
          if (_this.isModal) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this.targetEle)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);
            }
          }

          if (document.body.classList.contains(DLG_TARGET) && document.body.classList.contains(SCROLL_DISABLED)) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([document.body], [DLG_TARGET, SCROLL_DISABLED]);
          }

          var closeAnimation = {
            name: _this.animationSettings.effect === 'None' && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["animationMode"] === 'Enable' ? 'Zoom' + 'Out' : _this.animationSettings.effect + 'Out',
            duration: _this.animationSettings.duration,
            delay: _this.animationSettings.delay
          }; // eslint-disable-next-line

          _this.animationSettings.effect === 'None' && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["animationMode"] === 'Enable' ? _this.popupObj.hide(closeAnimation) : _this.animationSettings.effect === 'None' ? _this.popupObj.hide() : _this.popupObj.hide(closeAnimation);
          _this.dialogOpen = false;
          var prevOnChange = _this.isProtectedOnChange;
          _this.isProtectedOnChange = true;
          _this.visible = false;
          _this.preventVisibility = false;
          _this.isProtectedOnChange = prevOnChange;
        }

        _this.dlgClosedBy = DLG_USER_ACTION_CLOSED;
      });
    }
  }; // eslint-disable-next-line

  /**
   * Specifies to view the Full screen Dialog.
   *
   * @returns {void}
   * @private
   */


  Dialog.prototype.fullScreen = function (args) {
    /* eslint-disable */
    var top = this.element.offsetTop;
    var left = this.element.offsetLeft;
    /* eslint-enable */

    if (args) {
      this.element.style.top = document.scrollingElement.scrollTop + 'px';
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], FULLSCREEN);
      var display = this.element.style.display;
      this.element.style.display = 'none';
      this.element.style.maxHeight = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.target) ? this.targetEle.offsetHeight + 'px' : window.innerHeight + 'px';
      this.element.style.display = display;
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([document.body], [DLG_TARGET, SCROLL_DISABLED]);

      if (this.allowDragging && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.dragObj)) {
        this.dragObj.destroy();
      }
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], FULLSCREEN);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([document.body], [DLG_TARGET, SCROLL_DISABLED]);

      if (this.allowDragging && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.headerContent)) {
        this.setAllowDragging();
      }
    }

    return args;
  };
  /**
   * Returns the dialog button instances.
   * Based on that, you can dynamically change the button states.
   *
   * @param { number } index - Index of the button.
   * @returns {Button} - returns the button element
   */


  Dialog.prototype.getButtons = function (index) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index)) {
      return this.btnObj[index];
    }

    return this.btnObj;
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Dialog.prototype, "content", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Dialog.prototype, "enableHtmlSanitizer", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Dialog.prototype, "enablePersistence", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Dialog.prototype, "showCloseIcon", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Dialog.prototype, "isModal", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Dialog.prototype, "header", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Dialog.prototype, "visible", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Dialog.prototype, "enableResize", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(['South-East'])], Dialog.prototype, "resizeHandles", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Dialog.prototype, "height", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Dialog.prototype, "minHeight", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('100%')], Dialog.prototype, "width", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Dialog.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(1000)], Dialog.prototype, "zIndex", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Dialog.prototype, "target", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Dialog.prototype, "footerTemplate", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Dialog.prototype, "allowDragging", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([{}], ButtonProps)], Dialog.prototype, "buttons", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Dialog.prototype, "closeOnEscape", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, AnimationSettings)], Dialog.prototype, "animationSettings", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
    X: 'center',
    Y: 'center'
  }, _popup_popup__WEBPACK_IMPORTED_MODULE_2__["PositionData"])], Dialog.prototype, "position", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "created", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "open", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "beforeSanitizeHtml", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "beforeOpen", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "close", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "beforeClose", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "dragStart", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "dragStop", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "drag", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "overlayClick", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "resizeStart", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "resizing", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "resizeStop", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "destroyed", void 0);

  Dialog = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Dialog);
  return Dialog;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);


/**
 * Base for creating Alert and Confirmation Dialog through util method.
 */
// eslint-disable-next-line

var DialogUtility;

(function (DialogUtility) {
  /**
   * An alert dialog box is used to display warning like messages to the users.
   * ```
   * Eg : DialogUtility.alert('Alert message');
   *
   * ```
   */

  /* istanbul ignore next */

  /**
   *
   * @param {AlertDialogArgs} args - specifies the string
   * @returns {Dialog} - returns the dialog element.
   */
  function alert(args) {
    // eslint-disable-next-line
    var dialogComponent;
    var dialogElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      'className': DLG_UTIL_ALERT
    });
    document.body.appendChild(dialogElement);
    var alertDialogObj;
    var okButtonModel = [{
      buttonModel: {
        isPrimary: true,
        content: 'OK'
      },
      click: function () {
        this.hide();
      }
    }];

    if (typeof args === 'string') {
      alertDialogObj = createDialog({
        content: args,
        position: {
          X: 'center',
          Y: 'top'
        },
        isModal: true,
        header: DLG_UTIL_DEFAULT_TITLE,
        buttons: okButtonModel
      }, dialogElement);
    } else {
      alertDialogObj = createDialog(alertOptions(args), dialogElement);
    }

    alertDialogObj.close = function () {
      if (args && args.close) {
        args.close.apply(alertDialogObj);
      }

      alertDialogObj.destroy();

      if (alertDialogObj.element.classList.contains('e-dlg-modal')) {
        alertDialogObj.element.parentElement.remove();
        alertDialogObj.target.classList.remove(DLG_UTIL_ROOT);
      } else {
        alertDialogObj.element.remove();
      }
    };

    return alertDialogObj;
  }

  DialogUtility.alert = alert;
  /**
   * A confirm dialog displays a specified message along with ‘OK’ and ‘Cancel’ button.
   * ```
   * Eg : DialogUtility.confirm('Confirm dialog message');
   *
   * ```
   */

  /* istanbul ignore next */

  /**
   *
   * @param {ConfirmDialogArgs} args - specifies the args
   * @returns {Dialog} - returns te element
   */

  function confirm(args) {
    // eslint-disable-next-line
    var dialogComponent;
    var dialogElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      'className': DLG_UTIL_CONFIRM
    });
    document.body.appendChild(dialogElement);
    var confirmDialogObj;
    var okCancelButtonModel = [{
      buttonModel: {
        isPrimary: true,
        content: 'OK'
      },
      click: function () {
        this.hide();
      }
    }, {
      buttonModel: {
        content: 'Cancel'
      },
      click: function () {
        this.hide();
      }
    }];

    if (typeof args === 'string') {
      confirmDialogObj = createDialog({
        position: {
          X: 'center',
          Y: 'top'
        },
        content: args,
        isModal: true,
        header: DLG_UTIL_DEFAULT_TITLE,
        buttons: okCancelButtonModel
      }, dialogElement);
    } else {
      confirmDialogObj = createDialog(confirmOptions(args), dialogElement);
    }

    confirmDialogObj.close = function () {
      if (args && args.close) {
        args.close.apply(confirmDialogObj);
      }

      confirmDialogObj.destroy();

      if (confirmDialogObj.element.classList.contains('e-dlg-modal')) {
        confirmDialogObj.element.parentElement.remove();
        confirmDialogObj.target.classList.remove(DLG_UTIL_ROOT);
      } else {
        confirmDialogObj.element.remove();
      }
    };

    return confirmDialogObj;
  }

  DialogUtility.confirm = confirm; // eslint-disable-next-line

  function createDialog(options, element) {
    var dialogObject = new Dialog(options);
    dialogObject.appendTo(element);
    return dialogObject;
  } // eslint-disable-next-line


  function alertOptions(option) {
    var options = {};
    options.buttons = [];
    options = formOptions(options, option);
    options = setAlertButtonModel(options, option);
    return options;
  } // eslint-disable-next-line


  function confirmOptions(option) {
    var options = {};
    options.buttons = [];
    options = formOptions(options, option);
    options = setConfirmButtonModel(options, option);
    return options;
  } // eslint-disable-next-line


  function formOptions(options, option) {
    options.header = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.title) ? option.title : null;
    options.content = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.content) ? option.content : '';
    options.isModal = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.isModal) ? option.isModal : true;
    options.showCloseIcon = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.showCloseIcon) ? option.showCloseIcon : false;
    options.allowDragging = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.isDraggable) ? option.isDraggable : false;
    options.closeOnEscape = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.closeOnEscape) ? option.closeOnEscape : false;
    options.position = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.position) ? option.position : {
      X: 'center',
      Y: 'top'
    };
    options.animationSettings = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.animationSettings) ? option.animationSettings : {
      effect: 'Fade',
      duration: 400,
      delay: 0
    };
    options.cssClass = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.cssClass) ? option.cssClass : '';
    options.zIndex = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.zIndex) ? option.zIndex : 1000;
    options.open = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.open) ? option.open : null;
    options.width = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.width) ? option.width : 'auto';
    options.height = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.height) ? option.height : 'auto';
    return options;
  } // eslint-disable-next-line


  function setAlertButtonModel(options, option) {
    var alertButtonModel = [{
      buttonModel: {
        isPrimary: true,
        content: 'OK'
      },
      click: function () {
        this.hide();
      }
    }];

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.okButton)) {
      options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, alertButtonModel[0]);
    } else {
      options.buttons = alertButtonModel;
    }

    return options;
  } // eslint-disable-next-line


  function setConfirmButtonModel(options, option) {
    var okButtonModel = {
      buttonModel: {
        isPrimary: true,
        content: 'OK'
      },
      click: function () {
        this.hide();
      }
    };
    var cancelButtonModel = {
      buttonModel: {
        content: 'Cancel'
      },
      click: function () {
        this.hide();
      }
    };

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.okButton)) {
      options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, okButtonModel);
    } else {
      options.buttons[0] = okButtonModel;
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.cancelButton)) {
      options.buttons[1] = formButtonModel(options.buttons[1], option.cancelButton, cancelButtonModel);
    } else {
      options.buttons[1] = cancelButtonModel;
    }

    return options;
  } // eslint-disable-next-line


  function formButtonModel(buttonModel, option, buttonPropModel) {
    var buttonProps = buttonPropModel;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.text)) {
      buttonProps.buttonModel.content = option.text;
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.icon)) {
      buttonProps.buttonModel.iconCss = option.icon;
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.cssClass)) {
      buttonProps.buttonModel.cssClass = option.cssClass;
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.click)) {
      buttonProps.click = option.click;
    }

    return buttonProps;
  }
})(DialogUtility || (DialogUtility = {}));

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-popups/src/dialog/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-popups/src/dialog/index.js ***!
  \*****************************************************************/
/*! exports provided: ButtonProps, AnimationSettings, Dialog, DialogUtility */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _dialog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dialog */ "./node_modules/@syncfusion/ej2-popups/src/dialog/dialog.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtonProps", function() { return _dialog__WEBPACK_IMPORTED_MODULE_0__["ButtonProps"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnimationSettings", function() { return _dialog__WEBPACK_IMPORTED_MODULE_0__["AnimationSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Dialog", function() { return _dialog__WEBPACK_IMPORTED_MODULE_0__["Dialog"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DialogUtility", function() { return _dialog__WEBPACK_IMPORTED_MODULE_0__["DialogUtility"]; });

/**
 * Dialog Component
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-popups/src/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-popups/src/index.js ***!
  \**********************************************************/
/*! exports provided: PositionData, Popup, getScrollableParent, getZindexPartial, getMaxZindex, calculateRelativeBasedPosition, calculatePosition, fit, isCollide, flip, ButtonProps, AnimationSettings, Dialog, DialogUtility, Animation, Tooltip, Spinner, createSpinner, showSpinner, hideSpinner, setSpinner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _popup_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./popup/index */ "./node_modules/@syncfusion/ej2-popups/src/popup/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PositionData", function() { return _popup_index__WEBPACK_IMPORTED_MODULE_0__["PositionData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Popup", function() { return _popup_index__WEBPACK_IMPORTED_MODULE_0__["Popup"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getScrollableParent", function() { return _popup_index__WEBPACK_IMPORTED_MODULE_0__["getScrollableParent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getZindexPartial", function() { return _popup_index__WEBPACK_IMPORTED_MODULE_0__["getZindexPartial"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getMaxZindex", function() { return _popup_index__WEBPACK_IMPORTED_MODULE_0__["getMaxZindex"]; });

/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common/index */ "./node_modules/@syncfusion/ej2-popups/src/common/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "calculateRelativeBasedPosition", function() { return _common_index__WEBPACK_IMPORTED_MODULE_1__["calculateRelativeBasedPosition"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "calculatePosition", function() { return _common_index__WEBPACK_IMPORTED_MODULE_1__["calculatePosition"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fit", function() { return _common_index__WEBPACK_IMPORTED_MODULE_1__["fit"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isCollide", function() { return _common_index__WEBPACK_IMPORTED_MODULE_1__["isCollide"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flip", function() { return _common_index__WEBPACK_IMPORTED_MODULE_1__["flip"]; });

/* harmony import */ var _dialog_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dialog/index */ "./node_modules/@syncfusion/ej2-popups/src/dialog/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtonProps", function() { return _dialog_index__WEBPACK_IMPORTED_MODULE_2__["ButtonProps"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnimationSettings", function() { return _dialog_index__WEBPACK_IMPORTED_MODULE_2__["AnimationSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Dialog", function() { return _dialog_index__WEBPACK_IMPORTED_MODULE_2__["Dialog"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DialogUtility", function() { return _dialog_index__WEBPACK_IMPORTED_MODULE_2__["DialogUtility"]; });

/* harmony import */ var _tooltip_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tooltip/index */ "./node_modules/@syncfusion/ej2-popups/src/tooltip/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Animation", function() { return _tooltip_index__WEBPACK_IMPORTED_MODULE_3__["Animation"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Tooltip", function() { return _tooltip_index__WEBPACK_IMPORTED_MODULE_3__["Tooltip"]; });

/* harmony import */ var _spinner_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./spinner/index */ "./node_modules/@syncfusion/ej2-popups/src/spinner/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Spinner", function() { return _spinner_index__WEBPACK_IMPORTED_MODULE_4__["Spinner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createSpinner", function() { return _spinner_index__WEBPACK_IMPORTED_MODULE_4__["createSpinner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "showSpinner", function() { return _spinner_index__WEBPACK_IMPORTED_MODULE_4__["showSpinner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hideSpinner", function() { return _spinner_index__WEBPACK_IMPORTED_MODULE_4__["hideSpinner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setSpinner", function() { return _spinner_index__WEBPACK_IMPORTED_MODULE_4__["setSpinner"]; });

/**
 * Popup Components
 */






/***/ }),

/***/ "./node_modules/@syncfusion/ej2-popups/src/popup/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-popups/src/popup/index.js ***!
  \****************************************************************/
/*! exports provided: PositionData, Popup, getScrollableParent, getZindexPartial, getMaxZindex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _popup__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./popup */ "./node_modules/@syncfusion/ej2-popups/src/popup/popup.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PositionData", function() { return _popup__WEBPACK_IMPORTED_MODULE_0__["PositionData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Popup", function() { return _popup__WEBPACK_IMPORTED_MODULE_0__["Popup"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getScrollableParent", function() { return _popup__WEBPACK_IMPORTED_MODULE_0__["getScrollableParent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getZindexPartial", function() { return _popup__WEBPACK_IMPORTED_MODULE_0__["getZindexPartial"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getMaxZindex", function() { return _popup__WEBPACK_IMPORTED_MODULE_0__["getMaxZindex"]; });

/**
 * Popup Components
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-popups/src/popup/popup.js":
/*!****************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-popups/src/popup/popup.js ***!
  \****************************************************************/
/*! exports provided: PositionData, Popup, getScrollableParent, getZindexPartial, getMaxZindex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PositionData", function() { return PositionData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Popup", function() { return Popup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getScrollableParent", function() { return getScrollableParent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getZindexPartial", function() { return getZindexPartial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMaxZindex", function() { return getMaxZindex; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _common_position__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/position */ "./node_modules/@syncfusion/ej2-popups/src/common/position.js");
/* harmony import */ var _common_collision__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/collision */ "./node_modules/@syncfusion/ej2-popups/src/common/collision.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};









/**
 * Specifies the offset position values.
 */

var PositionData =
/** @class */
function (_super) {
  __extends(PositionData, _super);

  function PositionData() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('left')], PositionData.prototype, "X", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('top')], PositionData.prototype, "Y", void 0);

  return PositionData;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

 // don't use space in classNames

var CLASSNAMES = {
  ROOT: 'e-popup',
  RTL: 'e-rtl',
  OPEN: 'e-popup-open',
  CLOSE: 'e-popup-close'
};
/**
 * Represents the Popup Component
 * ```html
 * <div id="popup" style="position:absolute;height:100px;width:100px;">
 * <div style="margin:35px 25px;">Popup Content</div></div>
 * ```
 * ```typescript
 * <script>
 *   var popupObj = new Popup();
 *   popupObj.appendTo("#popup");
 * </script>
 * ```
 */

var Popup =
/** @class */
function (_super) {
  __extends(Popup, _super);

  function Popup(element, options) {
    return _super.call(this, options, element) || this;
  }
  /**
   * Called internally if any of the property value changed.
   *
   * @param {PopupModel} newProp - specifies the new property
   * @param {PopupModel} oldProp - specifies the old property
   * @private
   * @returns {void}
   */


  Popup.prototype.onPropertyChanged = function (newProp, oldProp) {
    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'width':
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
            'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.width)
          });
          break;

        case 'height':
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
            'height': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.height)
          });
          break;

        case 'zIndex':
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
            'zIndex': newProp.zIndex
          });
          break;

        case 'enableRtl':
          this.setEnableRtl();
          break;

        case 'position':
        case 'relateTo':
          this.refreshPosition();
          break;

        case 'offsetX':
          // eslint-disable-next-line
          var x = newProp.offsetX - oldProp.offsetX;
          this.element.style.left = (parseInt(this.element.style.left, 10) + x).toString() + 'px';
          break;

        case 'offsetY':
          // eslint-disable-next-line
          var y = newProp.offsetY - oldProp.offsetY;
          this.element.style.top = (parseInt(this.element.style.top, 10) + y).toString() + 'px';
          break;

        case 'content':
          this.setContent();
          break;

        case 'actionOnScroll':
          if (newProp.actionOnScroll !== 'none') {
            this.wireScrollEvents();
          } else {
            this.unwireScrollEvents();
          }

          break;
      }
    }
  };
  /**
   * gets the Component module name.
   *
   * @returns {void}
   * @private
   */


  Popup.prototype.getModuleName = function () {
    return 'popup';
  };
  /**
   * To resolve if any collision occurs.
   *
   * @returns {void}
   */


  Popup.prototype.resolveCollision = function () {
    this.checkCollision();
  };
  /**
   * gets the persisted state properties of the Component.
   *
   * @returns {void}
   */


  Popup.prototype.getPersistData = function () {
    return this.addOnPersist([]);
  };
  /**
   * To destroy the control.
   *
   * @returns {void}
   */


  Popup.prototype.destroy = function () {
    if (this.element.classList.contains('e-popup-open')) {
      this.unwireEvents();
    }

    this.element.classList.remove(CLASSNAMES.ROOT, CLASSNAMES.RTL, CLASSNAMES.OPEN, CLASSNAMES.CLOSE);
    this.content = null;
    this.relateTo = null;

    _super.prototype.destroy.call(this);
  };
  /**
   * To Initialize the control rendering
   *
   * @returns {void}
   * @private
   */


  Popup.prototype.render = function () {
    this.element.classList.add(CLASSNAMES.ROOT);
    var styles = {};

    if (this.zIndex !== 1000) {
      styles.zIndex = this.zIndex;
    }

    if (this.width !== 'auto') {
      styles.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.width);
    }

    if (this.height !== 'auto') {
      styles.height = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.height);
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, styles);
    this.fixedParent = false;
    this.setEnableRtl();
    this.setContent();
  };

  Popup.prototype.wireEvents = function () {
    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(window, 'orientationchange', this.orientationOnChange, this);
    }

    if (this.actionOnScroll !== 'none') {
      this.wireScrollEvents();
    }
  };

  Popup.prototype.wireScrollEvents = function () {
    if (this.getRelateToElement()) {
      for (var _i = 0, _a = this.getScrollableParent(this.getRelateToElement()); _i < _a.length; _i++) {
        var parent_1 = _a[_i];
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(parent_1, 'scroll', this.scrollRefresh, this);
      }
    }
  };

  Popup.prototype.unwireEvents = function () {
    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(window, 'orientationchange', this.orientationOnChange);
    }

    if (this.actionOnScroll !== 'none') {
      this.unwireScrollEvents();
    }
  };

  Popup.prototype.unwireScrollEvents = function () {
    if (this.getRelateToElement()) {
      for (var _i = 0, _a = this.getScrollableParent(this.getRelateToElement()); _i < _a.length; _i++) {
        var parent_2 = _a[_i];
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(parent_2, 'scroll', this.scrollRefresh);
      }
    }
  };

  Popup.prototype.getRelateToElement = function () {
    var relateToElement = this.relateTo === '' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.relateTo) ? document.body : this.relateTo;
    this.setProperties({
      relateTo: relateToElement
    }, true);
    return typeof this.relateTo === 'string' ? document.querySelector(this.relateTo) : this.relateTo;
  };

  Popup.prototype.scrollRefresh = function (e) {
    if (this.actionOnScroll === 'reposition') {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element) && !(this.element.offsetParent === e.target || this.element.offsetParent && this.element.offsetParent.tagName === 'BODY' && e.target.parentElement == null)) {
        this.refreshPosition();
      }
    } else if (this.actionOnScroll === 'hide') {
      this.hide();
    }

    if (this.actionOnScroll !== 'none') {
      if (this.getRelateToElement()) {
        var targetVisible = this.isElementOnViewport(this.getRelateToElement(), e.target);

        if (!targetVisible && !this.targetInvisibleStatus) {
          this.trigger('targetExitViewport');
          this.targetInvisibleStatus = true;
        } else if (targetVisible) {
          this.targetInvisibleStatus = false;
        }
      }
    }
  };
  /**
   * This method is to get the element visibility on viewport when scroll
   * the page. This method will returns true even though 1 px of element
   * part is in visible.
   *
   * @param {HTMLElement} relateToElement - specifies the element
   * @param {HTMLElement} scrollElement - specifies the scroll element
   * @returns {boolean} - retruns the boolean
   */
  // eslint-disable-next-line


  Popup.prototype.isElementOnViewport = function (relateToElement, scrollElement) {
    var scrollParents = this.getScrollableParent(relateToElement);

    for (var parent_3 = 0; parent_3 < scrollParents.length; parent_3++) {
      if (this.isElementVisible(relateToElement, scrollParents[parent_3])) {
        continue;
      } else {
        return false;
      }
    }

    return true;
  };

  Popup.prototype.isElementVisible = function (relateToElement, scrollElement) {
    var rect = this.checkGetBoundingClientRect(relateToElement);

    if (!rect.height || !rect.width) {
      return false;
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.checkGetBoundingClientRect(scrollElement))) {
      var parent_4 = scrollElement.getBoundingClientRect();
      return !(rect.bottom < parent_4.top) && !(rect.bottom > parent_4.bottom) && !(rect.right > parent_4.right) && !(rect.left < parent_4.left);
    } else {
      var win = window;
      var windowView = {
        top: win.scrollY,
        left: win.scrollX,
        right: win.scrollX + win.outerWidth,
        bottom: win.scrollY + win.outerHeight
      };
      var off = Object(_common_position__WEBPACK_IMPORTED_MODULE_1__["calculatePosition"])(relateToElement);
      var ele = {
        top: off.top,
        left: off.left,
        right: off.left + rect.width,
        bottom: off.top + rect.height
      };
      var elementView = {
        top: windowView.bottom - ele.top,
        left: windowView.right - ele.left,
        bottom: ele.bottom - windowView.top,
        right: ele.right - windowView.left
      };
      return elementView.top > 0 && elementView.left > 0 && elementView.right > 0 && elementView.bottom > 0;
    }
  };
  /**
   * Initialize the event handler
   *
   * @returns {void}
   * @private
   */


  Popup.prototype.preRender = function () {//There is no event handler
  };

  Popup.prototype.setEnableRtl = function () {
    this.reposition(); // eslint-disable-next-line

    this.enableRtl ? this.element.classList.add(CLASSNAMES.RTL) : this.element.classList.remove(CLASSNAMES.RTL);
  };

  Popup.prototype.setContent = function () {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.content)) {
      this.element.innerHTML = '';

      if (typeof this.content === 'string') {
        this.element.textContent = this.content;
      } else {
        var relateToElem = this.getRelateToElement(); // eslint-disable-next-line

        var props = this.content.props;

        if (!relateToElem.classList.contains('e-dropdown-btn') || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(props)) {
          this.element.appendChild(this.content);
        }
      }
    }
  };

  Popup.prototype.orientationOnChange = function () {
    var _this = this;

    setTimeout(function () {
      _this.refreshPosition();
    }, 200);
  }; // eslint-disable-next-line

  /**
   * Based on the `relative` element and `offset` values, `Popup` element position will refreshed.
   *
   * @returns {void}
   */


  Popup.prototype.refreshPosition = function (target, collision) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target)) {
      this.checkFixedParent(target);
    }

    this.reposition();

    if (!collision) {
      this.checkCollision();
    }
  };

  Popup.prototype.reposition = function () {
    var pos;
    var position;
    var relateToElement = this.getRelateToElement();

    if (typeof this.position.X === 'number' && typeof this.position.Y === 'number') {
      pos = {
        left: this.position.X,
        top: this.position.Y
      };
    } else if (typeof this.position.X === 'string' && typeof this.position.Y === 'number' || typeof this.position.X === 'number' && typeof this.position.Y === 'string') {
      var parentDisplay = void 0;
      var display = this.element.style.display;
      this.element.style.display = 'block';

      if (this.element.classList.contains('e-dlg-modal')) {
        parentDisplay = this.element.parentElement.style.display;
        this.element.parentElement.style.display = 'block';
      }

      position = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY);

      if (typeof this.position.X === 'string') {
        pos = {
          left: position.left,
          top: this.position.Y
        };
      } else {
        pos = {
          left: this.position.X,
          top: position.top
        };
      }

      this.element.style.display = display;

      if (this.element.classList.contains('e-dlg-modal')) {
        this.element.parentElement.style.display = parentDisplay;
      }
    } else if (relateToElement) {
      var height = this.element.clientHeight;
      var display = this.element.style.display;
      this.element.style.display = 'block';
      pos = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY, height);
      this.element.style.display = display;
    } else {
      pos = {
        left: 0,
        top: 0
      };
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(pos)) {
      this.element.style.left = pos.left + 'px';
      this.element.style.top = pos.top + 'px';
    }
  };

  Popup.prototype.checkGetBoundingClientRect = function (ele) {
    var eleRect;

    try {
      eleRect = ele.getBoundingClientRect();
      return eleRect;
    } catch (error) {
      return null;
    }
  };

  Popup.prototype.getAnchorPosition = function (anchorEle, ele, position, offsetX, offsetY, height) {
    if (height === void 0) {
      height = 0;
    }

    var eleRect = this.checkGetBoundingClientRect(ele);
    var anchorRect = this.checkGetBoundingClientRect(anchorEle);

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(eleRect) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(anchorRect)) {
      return null;
    }

    var anchor = anchorEle;
    var anchorPos = {
      left: 0,
      top: 0
    };

    if (ele.offsetParent && ele.offsetParent.tagName === 'BODY' && anchorEle.tagName === 'BODY') {
      anchorPos = Object(_common_position__WEBPACK_IMPORTED_MODULE_1__["calculatePosition"])(anchorEle);
    } else {
      if (ele.classList.contains('e-dlg-modal') && anchor.tagName !== 'BODY') {
        ele = ele.parentElement;
      }

      anchorPos = Object(_common_position__WEBPACK_IMPORTED_MODULE_1__["calculateRelativeBasedPosition"])(anchor, ele);
    }

    switch (position.X) {
      default:
      case 'left':
        break;

      case 'center':
        if (ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container') {
          anchorPos.left += window.innerWidth / 2 - eleRect.width / 2;
        } else if (this.targetType === 'container') {
          anchorPos.left += anchorRect.width / 2 - eleRect.width / 2;
        } else {
          anchorPos.left += anchorRect.width / 2;
        }

        break;

      case 'right':
        if (ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container') {
          anchorPos.left += window.innerWidth - eleRect.width;
        } else if (this.targetType === 'container') {
          anchorPos.left += anchorRect.width - eleRect.width;
        } else {
          anchorPos.left += anchorRect.width;
        }

        break;
    }

    switch (position.Y) {
      default:
      case 'top':
        break;

      case 'center':
        if (ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container') {
          anchorPos.top += window.innerHeight / 2 - eleRect.height / 2;
        } else if (this.targetType === 'container') {
          anchorPos.top += anchorRect.height / 2 - eleRect.height / 2;
        } else {
          anchorPos.top += anchorRect.height / 2;
        }

        break;

      case 'bottom':
        if (ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container') {
          anchorPos.top += window.innerHeight - eleRect.height;
        } else if (this.targetType === 'container' && !ele.classList.contains('e-dialog')) {
          anchorPos.top += anchorRect.height - eleRect.height;
        } else if (this.targetType === 'container' && ele.classList.contains('e-dialog')) {
          anchorPos.top += anchorRect.height - height;
        } else {
          anchorPos.top += anchorRect.height;
        }

        break;
    }

    anchorPos.left += offsetX;
    anchorPos.top += offsetY;
    return anchorPos;
  };

  Popup.prototype.callFlip = function (param) {
    var relateToElement = this.getRelateToElement();
    Object(_common_collision__WEBPACK_IMPORTED_MODULE_2__["flip"])(this.element, relateToElement, this.offsetX, this.offsetY, this.position.X, this.position.Y, this.viewPortElement, param, this.fixedParent);
  };

  Popup.prototype.callFit = function (param) {
    if (Object(_common_collision__WEBPACK_IMPORTED_MODULE_2__["isCollide"])(this.element, this.viewPortElement).length !== 0) {
      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.viewPortElement)) {
        var data = Object(_common_collision__WEBPACK_IMPORTED_MODULE_2__["fit"])(this.element, this.viewPortElement, param);

        if (param.X) {
          this.element.style.left = data.left + 'px';
        }

        if (param.Y) {
          this.element.style.top = data.top + 'px';
        }
      } else {
        var elementRect = this.checkGetBoundingClientRect(this.element);
        var viewPortRect = this.checkGetBoundingClientRect(this.viewPortElement);

        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(elementRect) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(viewPortRect)) {
          return null;
        }

        if (param && param.Y === true) {
          if (viewPortRect.top > elementRect.top) {
            this.element.style.top = '0px';
          } else if (viewPortRect.bottom < elementRect.bottom) {
            this.element.style.top = parseInt(this.element.style.top, 10) - (elementRect.bottom - viewPortRect.bottom) + 'px';
          }
        }

        if (param && param.X === true) {
          if (viewPortRect.right < elementRect.right) {
            this.element.style.left = parseInt(this.element.style.left, 10) - (elementRect.right - viewPortRect.right) + 'px';
          } else if (viewPortRect.left > elementRect.left) {
            this.element.style.left = parseInt(this.element.style.left, 10) + (viewPortRect.left - elementRect.left) + 'px';
          }
        }
      }
    }
  };

  Popup.prototype.checkCollision = function () {
    var horz = this.collision.X;
    var vert = this.collision.Y;

    if (horz === 'none' && vert === 'none') {
      return;
    }

    if (horz === 'flip' && vert === 'flip') {
      this.callFlip({
        X: true,
        Y: true
      });
    } else if (horz === 'fit' && vert === 'fit') {
      this.callFit({
        X: true,
        Y: true
      });
    } else {
      if (horz === 'flip') {
        this.callFlip({
          X: true,
          Y: false
        });
      } else if (vert === 'flip') {
        this.callFlip({
          Y: true,
          X: false
        });
      }

      if (horz === 'fit') {
        this.callFit({
          X: true,
          Y: false
        });
      } else if (vert === 'fit') {
        this.callFit({
          X: false,
          Y: true
        });
      }
    }
  };
  /**
   * Shows the popup element from screen.
   *
   * @returns {void}
   * @param {AnimationModel} animationOptions - specifies the model
   * @param { HTMLElement } relativeElement - To calculate the zIndex value dynamically.
   */


  Popup.prototype.show = function (animationOptions, relativeElement) {
    var _this = this;

    var relateToElement = this.getRelateToElement();

    if (relateToElement.classList.contains('e-filemanager')) {
      this.fmDialogContainer = this.element.getElementsByClassName('e-file-select-wrap')[0];
    }

    this.wireEvents();

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fmDialogContainer) && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIos) {
      this.fmDialogContainer.style.display = 'block';
    }

    if (this.zIndex === 1000 || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(relativeElement)) {
      var zIndexElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(relativeElement) ? this.element : relativeElement;
      this.zIndex = getZindexPartial(zIndexElement);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
        'zIndex': this.zIndex
      });
    }

    animationOptions = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(animationOptions) && typeof animationOptions === 'object' ? animationOptions : this.showAnimation;

    if (this.collision.X !== 'none' || this.collision.Y !== 'none') {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], CLASSNAMES.CLOSE);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], CLASSNAMES.OPEN);
      this.checkCollision();
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], CLASSNAMES.OPEN);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], CLASSNAMES.CLOSE);
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(animationOptions)) {
      animationOptions.begin = function () {
        if (!_this.isDestroyed) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_this.element], CLASSNAMES.CLOSE);
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this.element], CLASSNAMES.OPEN);
        }
      };

      animationOptions.end = function () {
        if (!_this.isDestroyed) {
          _this.trigger('open');
        }
      };

      new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"](animationOptions).animate(this.element);
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], CLASSNAMES.CLOSE);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], CLASSNAMES.OPEN);
      this.trigger('open');
    }
  };
  /**
   * Hides the popup element from screen.
   *
   * @param {AnimationModel} animationOptions - To give the animation options.
   * @returns {void}
   */


  Popup.prototype.hide = function (animationOptions) {
    var _this = this;

    animationOptions = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(animationOptions) && typeof animationOptions === 'object' ? animationOptions : this.hideAnimation;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(animationOptions)) {
      animationOptions.end = function () {
        if (!_this.isDestroyed) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_this.element], CLASSNAMES.OPEN);
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this.element], CLASSNAMES.CLOSE);

          _this.trigger('close');
        }
      };

      new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"](animationOptions).animate(this.element);
    } else {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], CLASSNAMES.OPEN);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], CLASSNAMES.CLOSE);
      this.trigger('close');
    }

    this.unwireEvents();
  };
  /**
   * Gets scrollable parent elements for the given element.
   *
   * @returns {void}
   * @param { HTMLElement } element - Specify the element to get the scrollable parents of it.
   */


  Popup.prototype.getScrollableParent = function (element) {
    this.checkFixedParent(element);
    return getScrollableParent(element, this.fixedParent);
  };

  Popup.prototype.checkFixedParent = function (element) {
    var parent = element.parentElement;

    while (parent && parent.tagName !== 'HTML') {
      var parentStyle = getComputedStyle(parent);

      if (parentStyle.position === 'fixed' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element) && this.element.offsetParent && this.element.offsetParent.tagName === 'BODY' && getComputedStyle(this.element.offsetParent).overflow !== 'hidden') {
        this.element.style.top = window.scrollY > parseInt(this.element.style.top, 10) ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(window.scrollY - parseInt(this.element.style.top, 10)) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(parseInt(this.element.style.top, 10) - window.scrollY);
        this.element.style.position = 'fixed';
        this.fixedParent = true;
      }

      parent = parent.parentElement;

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.offsetParent) && parentStyle.position === 'fixed' && this.element.style.position === 'fixed') {
        this.fixedParent = true;
      }
    }
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Popup.prototype, "height", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Popup.prototype, "width", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Popup.prototype, "content", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('container')], Popup.prototype, "targetType", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Popup.prototype, "viewPortElement", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({
    X: 'none',
    Y: 'none'
  })], Popup.prototype, "collision", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Popup.prototype, "relateTo", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, PositionData)], Popup.prototype, "position", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], Popup.prototype, "offsetX", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], Popup.prototype, "offsetY", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(1000)], Popup.prototype, "zIndex", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Popup.prototype, "enableRtl", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('reposition')], Popup.prototype, "actionOnScroll", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Popup.prototype, "showAnimation", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Popup.prototype, "hideAnimation", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Popup.prototype, "open", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Popup.prototype, "close", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Popup.prototype, "targetExitViewport", void 0);

  Popup = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Popup);
  return Popup;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);


/**
 * Gets scrollable parent elements for the given element.
 *
 * @param { HTMLElement } element - Specify the element to get the scrollable parents of it.
 * @param {boolean} fixedParent - specifies the parent element
 * @private
 * @returns {void}
 */

function getScrollableParent(element, fixedParent) {
  var eleStyle = getComputedStyle(element);
  var scrollParents = [];
  var overflowRegex = /(auto|scroll)/;
  var parent = element.parentElement;

  while (parent && parent.tagName !== 'HTML') {
    var parentStyle = getComputedStyle(parent);

    if (!(eleStyle.position === 'absolute' && parentStyle.position === 'static') && overflowRegex.test(parentStyle.overflow + parentStyle.overflowY + parentStyle.overflowX)) {
      scrollParents.push(parent);
    }

    parent = parent.parentElement;
  }

  if (!fixedParent) {
    scrollParents.push(document);
  }

  return scrollParents;
}
/**
 * Gets the maximum z-index of the given element.
 *
 * @returns {void}
 * @param { HTMLElement } element - Specify the element to get the maximum z-index of it.
 * @private
 */

function getZindexPartial(element) {
  // upto body traversal
  var parent = element.parentElement;
  var parentZindex = [];

  while (parent) {
    if (parent.tagName !== 'BODY') {
      var index = document.defaultView.getComputedStyle(parent, null).getPropertyValue('z-index');
      var position = document.defaultView.getComputedStyle(parent, null).getPropertyValue('position');

      if (index !== 'auto' && position !== 'static') {
        parentZindex.push(index);
      }

      parent = parent.parentElement;
    } else {
      break;
    }
  }

  var childrenZindex = [];

  for (var i = 0; i < document.body.children.length; i++) {
    if (!element.isEqualNode(document.body.children[i])) {
      var index = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue('z-index');
      var position = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue('position');

      if (index !== 'auto' && position !== 'static') {
        childrenZindex.push(index);
      }
    }
  }

  childrenZindex.push('999');
  var siblingsZindex = [];

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element.parentElement) && element.parentElement.tagName !== 'BODY') {
    var childNodes = [].slice.call(element.parentElement.children);

    for (var i = 0; i < childNodes.length; i++) {
      if (!element.isEqualNode(childNodes[i])) {
        var index = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue('z-index');
        var position = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue('position');

        if (index !== 'auto' && position !== 'static') {
          siblingsZindex.push(index);
        }
      }
    }
  }

  var finalValue = parentZindex.concat(childrenZindex, siblingsZindex); // eslint-disable-next-line

  var currentZindexValue = Math.max.apply(Math, finalValue) + 1;
  return currentZindexValue > 2147483647 ? 2147483647 : currentZindexValue;
}
/**
 * Gets the maximum z-index of the page.
 *
 * @returns {void}
 * @param { HTMLElement } tagName - Specify the tagName to get the maximum z-index of it.
 * @private
 */

function getMaxZindex(tagName) {
  if (tagName === void 0) {
    tagName = ['*'];
  }

  var maxZindex = [];

  for (var i = 0; i < tagName.length; i++) {
    var elements = document.getElementsByTagName(tagName[i]);

    for (var i_1 = 0; i_1 < elements.length; i_1++) {
      var index = document.defaultView.getComputedStyle(elements[i_1], null).getPropertyValue('z-index');
      var position = document.defaultView.getComputedStyle(elements[i_1], null).getPropertyValue('position');

      if (index !== 'auto' && position !== 'static') {
        maxZindex.push(index);
      }
    }
  } // eslint-disable-next-line


  var currentZindexValue = Math.max.apply(Math, maxZindex) + 1;
  return currentZindexValue > 2147483647 ? 2147483647 : currentZindexValue;
}

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-popups/src/spinner/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-popups/src/spinner/index.js ***!
  \******************************************************************/
/*! exports provided: Spinner, createSpinner, showSpinner, hideSpinner, setSpinner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _spinner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./spinner */ "./node_modules/@syncfusion/ej2-popups/src/spinner/spinner.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Spinner", function() { return _spinner__WEBPACK_IMPORTED_MODULE_0__["Spinner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createSpinner", function() { return _spinner__WEBPACK_IMPORTED_MODULE_0__["createSpinner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "showSpinner", function() { return _spinner__WEBPACK_IMPORTED_MODULE_0__["showSpinner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hideSpinner", function() { return _spinner__WEBPACK_IMPORTED_MODULE_0__["hideSpinner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setSpinner", function() { return _spinner__WEBPACK_IMPORTED_MODULE_0__["setSpinner"]; });

/**
 * spinner modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-popups/src/spinner/spinner.js":
/*!********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-popups/src/spinner/spinner.js ***!
  \********************************************************************/
/*! exports provided: Spinner, createSpinner, showSpinner, hideSpinner, setSpinner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Spinner", function() { return Spinner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createSpinner", function() { return createSpinner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "showSpinner", function() { return showSpinner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hideSpinner", function() { return hideSpinner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setSpinner", function() { return setSpinner; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");

var globalTimeOut = {};
var DEFT_MAT_WIDTH = 30;
var DEFT_MAT3_WIDTH = 30;
var DEFT_FAB_WIDTH = 30;
var DEFT_FLUENT_WIDTH = 30;
var DEFT_BOOT_WIDTH = 30;
var DEFT_BOOT4_WIDTH = 36;
var DEFT_BOOT5_WIDTH = 36;
var CLS_SHOWSPIN = 'e-spin-show';
var CLS_HIDESPIN = 'e-spin-hide';
var CLS_MATERIALSPIN = 'e-spin-material';
var CLS_MATERIAL3SPIN = 'e-spin-material3';
var CLS_FABRICSPIN = 'e-spin-fabric';
var CLS_FLUENTSPIN = 'e-spin-fluent';
var CLS_TAILWINDSPIN = 'e-spin-tailwind';
var CLS_BOOTSPIN = 'e-spin-bootstrap';
var CLS_BOOT4SPIN = 'e-spin-bootstrap4';
var CLS_BOOT5SPIN = 'e-spin-bootstrap5';
var CLS_HIGHCONTRASTSPIN = 'e-spin-high-contrast';
var CLS_SPINWRAP = 'e-spinner-pane';
var CLS_SPININWRAP = 'e-spinner-inner';
var CLS_SPINCIRCLE = 'e-path-circle';
var CLS_SPINARC = 'e-path-arc';
var CLS_SPINLABEL = 'e-spin-label';
var CLS_SPINTEMPLATE = 'e-spin-template';
var spinTemplate = null;
var spinCSSClass = null; // eslint-disable-next-line

/**
  * Function to change the Spinners in a page globally from application end.
  * ```
  * E.g : blazorSpinner({ action: "Create", options: {target: targetElement}, type: "" });
  * ```
  *
  * @param {string} action - specifies the string
  * @param {CreateArgs} options - specifies the args
  * @param {string} target - specifies the target
  * @param {string} type - specifes the type
  * @returns {void}
  * @private
  */

function Spinner(action, options, target, type) {
  switch (action) {
    case 'Create':
      /* eslint-disable */
      var element = document.querySelector(options.target);
      var args = {
        type: type,
        target: element,
        cssClass: options.cssClass,
        label: options.label,
        width: options.width
      };
      /* eslint-enable */

      createSpinner(args);
      break;

    case 'Show':
      showSpinner(document.querySelector(target));
      break;

    case 'Hide':
      hideSpinner(document.querySelector(target));
      break;

    case 'Set':
      // eslint-disable-next-line
      var setArgs = {
        cssClass: options.cssClass,
        type: type
      };
      setSpinner(setArgs);
      break;
  }
}
/**
 * Create a spinner for the specified target element.
 * ```
 * E.g : createSpinner({ target: targetElement, width: '34px', label: 'Loading..' });
 * ```
 *
 * @param {SpinnerArgs} args - specifies the args
 * @param {CreateElementArgs} internalCreateElement - specifis the element args
 * @returns {void}
 * @private
 */

function createSpinner(args, internalCreateElement) {
  var _a;

  if (!args.target) {
    return;
  }

  var radius;
  var makeElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"]; // eslint-disable-next-line

  var container = create_spinner_container(args.target, makeElement);

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.cssClass)) {
    var classNames = args.cssClass.split(' ').filter(function (className) {
      return className.trim() !== '';
    });

    (_a = container.wrap.classList).add.apply(_a, classNames);
  }

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.template) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(spinTemplate)) {
    var template = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.template) ? args.template : spinTemplate;
    container.wrap.classList.add(CLS_SPINTEMPLATE);
    replaceContent(container.wrap, template, spinCSSClass);
  } else {
    var theme = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.type) ? args.type : getTheme(container.wrap);
    var width = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.width) ? args.width : undefined;
    radius = calculateRadius(width, theme);
    setTheme(theme, container.wrap, radius, makeElement);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.label)) {
      createLabel(container.inner_wrap, args.label, makeElement);
    }
  }

  container.wrap.classList.add(CLS_HIDESPIN);
  container = null;
}
/**
 *
 * @param {HTMLElement} container - specifies the element
 * @param {string} label - specifies the string
 * @param {createElementParams} makeElement - specifies the element
 * @returns {HTMLElement} - returns the element
 */

function createLabel(container, label, makeElement) {
  var labelEle = makeElement('div', {});
  labelEle.classList.add(CLS_SPINLABEL);
  labelEle.innerHTML = label;
  container.appendChild(labelEle);
  return labelEle;
}
/**
 *
 * @param {HTMLElement} container - specifies the element
 * @param {number} radius - specifies the radius
 * @param {createElementParams} makeElement - specifies the element
 * @returns {void}
 */


function createMaterialSpinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = {
    timeOut: 0,
    type: 'Material',
    radius: radius
  };
  create_material_element(container, uniqueID, makeElement, CLS_MATERIALSPIN);
  mat_calculate_attributes(radius, container, 'Material', CLS_MATERIALSPIN);
}
/**
 *
 * @param {HTMLElement} container - specifies the element
 * @param {number} radius - specifies the radius
 * @param {createElementParams} makeElement - specifies the element
 * @returns {void}
 */


function createMaterial3Spinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = {
    timeOut: 0,
    type: 'Material3',
    radius: radius
  };
  create_material_element(container, uniqueID, makeElement, CLS_MATERIAL3SPIN);
  mat_calculate_attributes(radius, container, 'Material3', CLS_MATERIAL3SPIN);
}
/**
 *
 * @param {HTMLElement} container - specifies the element
 * @param {number} radius - specifies the radius
 * @param {createElementParams} makeElement - specifies the element
 * @returns {void}
 */


function createBootstrap4Spinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = {
    timeOut: 0,
    type: 'Bootstrap4',
    radius: radius
  };
  create_material_element(container, uniqueID, makeElement, CLS_BOOT4SPIN);
  mat_calculate_attributes(radius, container, 'Bootstrap4', CLS_BOOT4SPIN);
}
/**
 *
 * @param {HTMLElement} container - specifies the element
 * @param {number} radius - specifies the radius
 * @param {createElementParams} makeElement - specifies the element
 * @returns {void}
 */


function createBootstrap5Spinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = {
    timeOut: 0,
    type: 'Bootstrap5',
    radius: radius
  };
  create_material_element(container, uniqueID, makeElement, CLS_BOOT5SPIN);
  mat_calculate_attributes(radius, container, 'Bootstrap5', CLS_BOOT5SPIN);
}
/**
 *
 * @param {HTMLElement} container - specifies the element
 * @param {string} uniqueID - specifies the id.
 * @param {number} radius - specifies the radius
 * @returns {void}
 */


function startMatAnimate(container, uniqueID, radius) {
  var globalObject = {};
  var timeOutVar = 0;
  globalTimeOut["" + uniqueID].timeOut = 0;
  globalObject["" + uniqueID] = globalVariables(uniqueID, radius, 0, 0); // eslint-disable-next-line

  var spinnerInfo = {
    uniqueID: uniqueID,
    container: container,
    globalInfo: globalObject,
    timeOutVar: timeOutVar
  };
  animateMaterial(spinnerInfo);
}
/**
 *
 * @param {HTMLElement} container - specifies the element
 * @param {number} radius - specifies the radius
 * @param {createElementParams} makeElement - specifies the element
 * @returns {void}
 */


function createFabricSpinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = {
    timeOut: 0,
    type: 'Fabric',
    radius: radius
  };
  create_fabric_element(container, uniqueID, CLS_FABRICSPIN, makeElement);
  fb_calculate_attributes(radius, container, CLS_FABRICSPIN);
}
/**
 *
 * @param {HTMLElement} container - specifies the element
 * @param {number} radius - specifies the radius
 * @param {createElementParams} makeElement - specifies the element
 * @returns {void}
 */


function createFluentSinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = {
    timeOut: 0,
    type: 'Fluent',
    radius: radius
  };
  create_fabric_element(container, uniqueID, CLS_FLUENTSPIN, makeElement);
  fb_calculate_attributes(radius, container, CLS_FLUENTSPIN);
}
/**
 *
 * @param {HTMLElement} container - specifies the element
 * @param {number} radius - specifies the radius
 * @param {createElementParams} makeElement - specifies the element
 * @returns {void}
 */


function createTailwindSpinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = {
    timeOut: 0,
    type: 'Tailwind',
    radius: radius
  };
  create_fabric_element(container, uniqueID, CLS_TAILWINDSPIN, makeElement);
  fb_calculate_attributes(radius, container, CLS_TAILWINDSPIN);
}
/**
 *
 * @param {HTMLElement} container - specifies the element
 * @param {number} radius - specifies the radius
 * @param {createElementParams} makeElement - specifies the element
 * @returns {void}
 */


function createHighContrastSpinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = {
    timeOut: 0,
    type: 'HighContrast',
    radius: radius
  };
  create_fabric_element(container, uniqueID, CLS_HIGHCONTRASTSPIN, makeElement);
  fb_calculate_attributes(radius, container, CLS_HIGHCONTRASTSPIN);
}
/**
 *
 * @param {HTMLElement} container - specifies the element
 * @returns {string} - returns the string
 */


function getTheme(container) {
  var theme = window.getComputedStyle(container, ':after').getPropertyValue('content');
  return theme.replace(/['"]+/g, '');
}
/**
 *
 * @param {string} theme - specifies the theme
 * @param {HTMLElement} container - specifies the element
 * @param {number} radius - specifies the radius
 * @param {createElementParams} makeElement - specifies the element
 * @returns {void}
 */


function setTheme(theme, container, radius, makeElement) {
  var innerContainer = container.querySelector('.' + CLS_SPININWRAP);
  var svg = innerContainer.querySelector('svg');

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(svg)) {
    innerContainer.removeChild(svg);
  }

  switch (theme) {
    case 'Material':
      createMaterialSpinner(innerContainer, radius, makeElement);
      break;

    case 'Material3':
      createMaterial3Spinner(innerContainer, radius, makeElement);
      break;

    case 'Fabric':
      createFabricSpinner(innerContainer, radius, makeElement);
      break;

    case 'Fluent':
      createFluentSinner(innerContainer, radius, makeElement);
      break;

    case 'Bootstrap':
      createBootstrapSpinner(innerContainer, radius, makeElement);
      break;

    case 'HighContrast':
      createHighContrastSpinner(innerContainer, radius, makeElement);
      break;

    case 'Bootstrap4':
      createBootstrap4Spinner(innerContainer, radius, makeElement);
      break;

    case 'Bootstrap5':
      createBootstrap5Spinner(innerContainer, radius, makeElement);
      break;

    case 'Tailwind':
    case 'Tailwind-dark':
      createTailwindSpinner(innerContainer, radius, makeElement);
      break;
  }
}
/**
 *
 * @param {HTMLElement} innerContainer - specifies the element
 * @param {number} radius - specifies the radius
 * @param {createElementParams} makeElement - specifies the element
 * @returns {void}
 */


function createBootstrapSpinner(innerContainer, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = {
    timeOut: 0,
    type: 'Bootstrap',
    radius: radius
  };
  create_bootstrap_element(innerContainer, uniqueID, makeElement);
  boot_calculate_attributes(innerContainer, radius);
}
/**
 *
 * @param {HTMLElement} innerContainer - specifies the element
 * @param {string} uniqueID - specifies the id
 * @param {createElementParams} makeElement - specifies the element
 * @returns {void}
 */
// eslint-disable-next-line


function create_bootstrap_element(innerContainer, uniqueID, makeElement) {
  var svgBoot = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
  var viewBoxValue = 64;
  var trans = 32;
  var defaultRadius = 2;
  svgBoot.setAttribute('id', uniqueID);
  svgBoot.setAttribute('class', CLS_BOOTSPIN);
  svgBoot.setAttribute('viewBox', '0 0 ' + viewBoxValue + ' ' + viewBoxValue);
  innerContainer.insertBefore(svgBoot, innerContainer.firstChild);

  for (var item = 0; item <= 7; item++) {
    var bootCircle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
    bootCircle.setAttribute('class', CLS_SPINCIRCLE + '_' + item);
    bootCircle.setAttribute('r', defaultRadius + '');
    bootCircle.setAttribute('transform', 'translate(' + trans + ',' + trans + ')');
    svgBoot.appendChild(bootCircle);
  }
}
/**
 *
 * @param {HTMLElement} innerContainer - specifies the element
 * @param {number} radius - specifies the radius
 * @returns {void}
 */
// eslint-disable-next-line


function boot_calculate_attributes(innerContainer, radius) {
  var svg = innerContainer.querySelector('svg.e-spin-bootstrap');
  var x = 0;
  var y = 0;
  var rad = 24;
  svg.style.width = svg.style.height = radius + 'px';
  var startArc = 90;

  for (var item = 0; item <= 7; item++) {
    var start = defineArcPoints(x, y, rad, startArc);
    var circleEle = svg.querySelector('.' + CLS_SPINCIRCLE + '_' + item);
    circleEle.setAttribute('cx', start.x + '');
    circleEle.setAttribute('cy', start.y + '');
    startArc = startArc >= 360 ? 0 : startArc;
    startArc = startArc + 45;
  }
}
/**
 *
 * @param {number} begin - specifies the number
 * @param {number} stop  - specifirs the number
 * @returns {number[]} - returns the array of number
 */


function generateSeries(begin, stop) {
  var series = [];
  var start = begin;
  var end = stop; // eslint-disable-next-line

  var increment = false,
      count = 1;
  formSeries(start);
  /**
   *
   * @param {number} i - specifies the number
   * @returns {void}
   */

  function formSeries(i) {
    series.push(i);

    if (i !== end || count === 1) {
      if (i <= start && i > 1 && !increment) {
        i = parseFloat((i - 0.2).toFixed(2));
      } else if (i === 1) {
        i = 7;
        i = parseFloat((i + 0.2).toFixed(2));
        increment = true;
      } else if (i < 8 && increment) {
        i = parseFloat((i + 0.2).toFixed(2));

        if (i === 8) {
          increment = false;
        }
      } else if (i <= 8 && !increment) {
        i = parseFloat((i - 0.2).toFixed(2));
      }

      ++count;
      formSeries(i);
    }
  }

  return series;
}
/**
 *
 * @param {HTMLElement} innerContainer - specifies the element
 * @returns {void}
 */


function animateBootstrap(innerContainer) {
  var svg = innerContainer.querySelector('svg.e-spin-bootstrap');
  var id = svg.getAttribute('id');

  for (var i = 1; i <= 8; i++) {
    var circleEle = innerContainer.getElementsByClassName('e-path-circle_' + (i === 8 ? 0 : i))[0];
    rotation(circleEle, i, i, generateSeries(i, i), id);
  }
  /**
   *
   * @param {SVGCircleElement} circle - specifies the circl element
   * @param {number} start - specifies the number
   * @param {number} end - specifies the end number
   * @param {number} series - specifies the series
   * @param {string} id - specifies the id
   * @returns {void}
   */


  function rotation(circle, start, end, series, id) {
    var count = 0;
    boot_animate(start); // eslint-disable-next-line

    function boot_animate(radius) {
      if (globalTimeOut["" + id].isAnimate) {
        ++count;
        circle.setAttribute('r', radius + '');

        if (count >= series.length) {
          count = 0;
        } // eslint-disable-next-line


        globalTimeOut[id].timeOut = setTimeout(boot_animate.bind(null, series[count]), 18);
      }
    }
  }
}
/**
 *
 * @param {HTMLElement} container - specifies the element
 * @param {string} template - specifies the template
 * @param {string} cssClass - specifies the css class.
 * @returns {void}
 */


function replaceContent(container, template, cssClass) {
  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cssClass)) {
    container.classList.add(cssClass);
  }

  var inner = container.querySelector('.e-spinner-inner');
  inner.innerHTML = template;
}
/**
 *
 * @param {string} width - specifies the width
 * @param {string} theme - specifies the string
 * @returns {number} - returns the number
 */


function calculateRadius(width, theme) {
  var defaultSize;

  switch (theme) {
    case 'Material':
      defaultSize = DEFT_MAT_WIDTH;
      break;

    case 'Material3':
      defaultSize = DEFT_MAT3_WIDTH;
      break;

    case 'Fabric':
      defaultSize = DEFT_FAB_WIDTH;
      break;

    case 'Tailwind':
    case 'Tailwind-dark':
      defaultSize = DEFT_FAB_WIDTH;
      break;

    case 'Fluent':
      defaultSize = DEFT_FLUENT_WIDTH;
      break;

    case 'Bootstrap4':
      defaultSize = DEFT_BOOT4_WIDTH;
      break;

    case 'Bootstrap5':
      defaultSize = DEFT_BOOT5_WIDTH;
      break;

    default:
      defaultSize = DEFT_BOOT_WIDTH;
  }

  width = width ? parseFloat(width + '') : defaultSize;
  return theme === 'Bootstrap' ? width : width / 2;
}
/**
 *
 * @param {string} id - specifies the id
 * @param {number} radius - specifies the radius
 * @param {number} count - specifies the number count
 * @param {number} previousId - specifies the previous id
 * @returns {GlobalVariables} - returns the variables
 */


function globalVariables(id, radius, count, previousId) {
  return {
    radius: radius,
    count: count,
    previousId: previousId
  };
}
/**
 * @returns {string} - returns the string
 */
// eslint-disable-next-line


function random_generator() {
  var random = '';
  var combine = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

  for (var i = 0; i < 5; i++) {
    random += combine.charAt(Math.floor(Math.random() * combine.length));
  }

  return random;
}
/**
 *
 * @param {HTMLElement} innerCon - specifies the element
 * @param {string} uniqueID - specifies the unique id
 * @param {string} themeClass - specifies the string
 * @param {createElementParams} makeElement - specifies the element
 * @returns {void}
 */
// eslint-disable-next-line


function create_fabric_element(innerCon, uniqueID, themeClass, makeElement) {
  var svgFabric = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
  svgFabric.setAttribute('id', uniqueID);
  svgFabric.setAttribute('class', themeClass);
  var fabricCirclePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
  fabricCirclePath.setAttribute('class', CLS_SPINCIRCLE);
  var fabricCircleArc = document.createElementNS('http://www.w3.org/2000/svg', 'path');
  fabricCircleArc.setAttribute('class', CLS_SPINARC);
  innerCon.insertBefore(svgFabric, innerCon.firstChild);
  svgFabric.appendChild(fabricCirclePath);
  svgFabric.appendChild(fabricCircleArc);
}
/**
 *
 * @param {HTMLElement} innerContainer - specifies the element
 * @param {string} uniqueID - specifies the unique id
 * @param {createElementParams} makeElement - specifies the element
 * @param {string} cls - specifies the string
 * @returns {void}
 */
// eslint-disable-next-line


function create_material_element(innerContainer, uniqueID, makeElement, cls) {
  var svgMaterial = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
  var matCirclePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
  svgMaterial.setAttribute('class', cls);
  svgMaterial.setAttribute('id', uniqueID);
  matCirclePath.setAttribute('class', CLS_SPINCIRCLE);
  innerContainer.insertBefore(svgMaterial, innerContainer.firstChild);
  svgMaterial.appendChild(matCirclePath);
}
/**
 *
 * @param {HTMLElement} target - specifies the element
 * @param {createElementParams} makeElement - specifies the element
 * @returns {void}
 */
// eslint-disable-next-line


function create_spinner_container(target, makeElement) {
  var spinnerContainer = makeElement('div', {});
  var spinnerInnerContainer = makeElement('div', {});
  spinnerContainer.classList.add(CLS_SPINWRAP);
  spinnerInnerContainer.classList.add(CLS_SPININWRAP);
  target.appendChild(spinnerContainer);
  spinnerContainer.appendChild(spinnerInnerContainer); // eslint-disable-next-line

  return {
    wrap: spinnerContainer,
    inner_wrap: spinnerInnerContainer
  };
}
/**
 *
 * @param {SpinnerInfo} spinnerInfo - specifies the spinner
 * @returns {void}
 */


function animateMaterial(spinnerInfo) {
  var start = 1;
  var end = 149;
  var duration = 1333;
  var max = 75;
  createCircle(start, end, easeAnimation, duration, spinnerInfo.globalInfo[spinnerInfo.uniqueID].count, max, spinnerInfo);
  spinnerInfo.globalInfo[spinnerInfo.uniqueID].count = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].count % 4;
}
/**
 *
 * @param {number} start - specifies the number
 * @param {number} end - specifies the end number
 * @param {Function} easing - specifies the function
 * @param {number} duration - specifies the duration
 * @param {number} count - specifies the count
 * @param {number} max - specifies the max number
 * @param {SpinnerInfo} spinnerInfo - specifies the spinner info
 * @returns {void}
 */


function createCircle(start, end, easing, duration, count, max, spinnerInfo) {
  var id = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId;
  var startTime = new Date().getTime();
  var change = end - start;
  var diameter = getSize(spinnerInfo.globalInfo[spinnerInfo.uniqueID].radius * 2 + '');
  var strokeSize = getStrokeSize(diameter);
  var rotate = -90 * (spinnerInfo.globalInfo[spinnerInfo.uniqueID].count || 0);
  mat_animation(spinnerInfo); // eslint-disable-next-line

  function mat_animation(spinnerInfo) {
    var currentTime = Math.max(0, Math.min(new Date().getTime() - startTime, duration));
    updatePath(easing(currentTime, start, change, duration), spinnerInfo.container);

    if (id === spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId && currentTime < duration) {
      // eslint-disable-next-line
      globalTimeOut[spinnerInfo.uniqueID].timeOut = setTimeout(mat_animation.bind(null, spinnerInfo), 1);
    } else {
      animateMaterial(spinnerInfo);
    }
  }
  /**
   *
   * @param {number} value - specifies the number value
   * @param {HTMLElement} container - specifies the container
   * @returns {void}
   */


  function updatePath(value, container) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(container.querySelector('svg.e-spin-material')) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(container.querySelector('svg.e-spin-material3'))) {
      var svg = void 0;

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(container.querySelector('svg.e-spin-material')) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(container.querySelector('svg.e-spin-material').querySelector('path.e-path-circle'))) {
        svg = container.querySelector('svg.e-spin-material');
      } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(container.querySelector('svg.e-spin-material3')) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(container.querySelector('svg.e-spin-material3').querySelector('path.e-path-circle'))) {
        svg = container.querySelector('svg.e-spin-material3');
      }

      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(svg)) {
        var path = svg.querySelector('path.e-path-circle');
        path.setAttribute('stroke-dashoffset', getDashOffset(diameter, strokeSize, value, max) + '');
        path.setAttribute('transform', 'rotate(' + rotate + ' ' + diameter / 2 + ' ' + diameter / 2 + ')');
      }
    }
  }
}
/**
 *
 * @param {number} radius - specifies the number
 * @param {HTMLElement} container - specifies the element
 * @param {string} type - specifies the string type
 * @param {string} cls - specifies the string
 * @returns {void}
 */
// eslint-disable-next-line


function mat_calculate_attributes(radius, container, type, cls) {
  var diameter = radius * 2;
  var svg = container.querySelector('svg.' + cls);
  var path = svg.querySelector('path.e-path-circle');
  var strokeSize = getStrokeSize(diameter);
  var transformOrigin = diameter / 2 + 'px';
  svg.setAttribute('viewBox', '0 0 ' + diameter + ' ' + diameter);
  svg.style.width = svg.style.height = diameter + 'px';
  svg.style.transformOrigin = transformOrigin + ' ' + transformOrigin + ' ' + transformOrigin;
  path.setAttribute('d', drawArc(diameter, strokeSize));

  if (type === 'Material' || type === 'Material3') {
    path.setAttribute('stroke-width', strokeSize + '');
    path.setAttribute('stroke-dasharray', (diameter - strokeSize) * Math.PI * 0.75 + '');
    path.setAttribute('stroke-dashoffset', getDashOffset(diameter, strokeSize, 1, 75) + '');
  }
}
/**
 *
 * @param {string} value - specifies the value
 * @returns {number} - returns the number
 */


function getSize(value) {
  var parsed = parseFloat(value);
  return parsed;
}
/**
 *
 * @param {number} diameter - specifies the diameter
 * @param {number} strokeSize - specifies the size
 * @returns {string} - returns the string
 */


function drawArc(diameter, strokeSize) {
  var radius = diameter / 2;
  var offset = strokeSize / 2;
  return 'M' + radius + ',' + offset + 'A' + (radius - offset) + ',' + (radius - offset) + ' 0 1 1 ' + offset + ',' + radius;
}
/**
 *
 * @param {number} diameter - specifies the number
 * @returns {number} - returns the number
 */


function getStrokeSize(diameter) {
  return 10 / 100 * diameter;
}
/**
 *
 * @param {number} diameter - specifies the number
 * @param {number} strokeSize - specifies the stroke size
 * @param {number} value - specifies the value
 * @param {number} max - specifies the max number
 * @returns {number} - returns the number
 */


function getDashOffset(diameter, strokeSize, value, max) {
  return (diameter - strokeSize) * Math.PI * (3 * max / 100 - value / 100);
}
/**
 *
 * @param {number} current - specifies the number
 * @param {number} start - specifies the stroke size
 * @param {number} change - specifies the value
 * @param {number} duration - specifies the max number
 * @returns {number} - returns the number
 */


function easeAnimation(current, start, change, duration) {
  var timestamp = (current /= duration) * current;
  var timecount = timestamp * current;
  return start + change * (6 * timecount * timestamp + -15 * timestamp * timestamp + 10 * timecount);
}
/**
 *
 * @param {number} radius - specifies the number
 * @param {HTMLElement} innerConainer - specifies the element
 * @param {string} trgClass - specifies the class
 * @returns {void}
 */
// eslint-disable-next-line


function fb_calculate_attributes(radius, innerConainer, trgClass) {
  var centerX = radius;
  var centerY = radius;
  var diameter = radius * 2; // eslint-disable-next-line

  var startArc = 315,
      endArc = 45;
  var svg = innerConainer.querySelector('.' + trgClass);
  var circle = svg.querySelector('.e-path-circle');
  var path = svg.querySelector('.e-path-arc');
  var transformOrigin = diameter / 2 + 'px';
  circle.setAttribute('d', defineCircle(centerX, centerY, radius));
  path.setAttribute('d', defineArc(centerX, centerY, radius, startArc, endArc));
  svg.setAttribute('viewBox', '0 0 ' + diameter + ' ' + diameter);
  svg.style.transformOrigin = transformOrigin + ' ' + transformOrigin + ' ' + transformOrigin;
  svg.style.width = svg.style.height = diameter + 'px';
}
/**
 *
 * @param {number} centerX - specifies the number
 * @param {number} centerY - specifies the stroke size
 * @param {number} radius - specifies the value
 * @param {number} angle - specifies the max number
 * @returns {number} - returns the number
 */


function defineArcPoints(centerX, centerY, radius, angle) {
  var radians = (angle - 90) * Math.PI / 180.0;
  return {
    x: centerX + radius * Math.cos(radians),
    y: centerY + radius * Math.sin(radians)
  };
}
/**
 *
 * @param {number} x - specifies the number
 * @param {number} y - specifies the stroke size
 * @param {number} radius - specifies the radius
 * @param {number} startArc - specifies the value
 * @param {number} endArc - specifies the max number
 * @returns {number} - returns the number
 */


function defineArc(x, y, radius, startArc, endArc) {
  var start = defineArcPoints(x, y, radius, endArc);
  var end = defineArcPoints(x, y, radius, startArc);
  var d = ['M', start.x, start.y, 'A', radius, radius, 0, 0, 0, end.x, end.y].join(' ');
  return d;
}
/**
 *
 * @param {number} x - specifies the number
 * @param {number} y - specifies the stroke size
 * @param {number} radius - specifies the value
 * @returns {string} - returns the string
 */


function defineCircle(x, y, radius) {
  var d = ['M', x, y, 'm', -radius, 0, 'a', radius, radius, 0, 1, 0, radius * 2, 0, 'a', radius, radius, 0, 1, 0, -radius * 2, 0].join(' ');
  return d;
}
/**
 * Function to show the Spinner.
 *
 * @param {HTMLElement} container - Specify the target of the Spinner.
 * @returns {void}
 * @private
 */


function showSpinner(container) {
  showHideSpinner(container, false);
  container = null;
}
/**
 *
 * @param {HTMLElement} container - specifies the element
 * @param {boolean} isHide - specifies the boolean
 * @returns {void}
 */

function showHideSpinner(container, isHide) {
  var spinnerWrap;

  if (container) {
    if (container.classList.contains(CLS_SPINWRAP)) {
      spinnerWrap = container;
    } else {
      var spinWrapCollection = container.querySelectorAll('.' + CLS_SPINWRAP);

      if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIE) {
        for (var i = 0; i < spinWrapCollection.length; i++) {
          // eslint-disable-next-line
          if (spinWrapCollection[i].parentElement && spinWrapCollection[i].parentElement === container) {
            // eslint-disable-next-line
            spinnerWrap = spinWrapCollection[i];
            break;
          }
        }
      } else {
        spinnerWrap = Array.from(spinWrapCollection).find(function (wrap) {
          return wrap.parentElement === container;
        }) || null;
      }
    }
  }

  if (container && spinnerWrap) {
    var inner = spinnerWrap.querySelector('.' + CLS_SPININWRAP);
    var spinCheck = void 0; // eslint-disable-next-line

    spinCheck = isHide ? !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_HIDESPIN) : !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_SHOWSPIN);

    if (spinCheck) {
      var svgEle = spinnerWrap.querySelector('svg');

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(svgEle)) {
        return;
      }

      var id = svgEle.getAttribute('id');
      globalTimeOut["" + id].isAnimate = !isHide;

      switch (globalTimeOut["" + id].type) {
        case 'Material':
        case 'Material3':
          // eslint-disable-next-line
          isHide ? clearTimeout(globalTimeOut[id].timeOut) : startMatAnimate(inner, id, globalTimeOut[id].radius);
          break;

        case 'Bootstrap':
          // eslint-disable-next-line
          isHide ? clearTimeout(globalTimeOut[id].timeOut) : animateBootstrap(inner);
          break;
      }
    } // eslint-disable-next-line


    isHide ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(spinnerWrap, [CLS_HIDESPIN], [CLS_SHOWSPIN]) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(spinnerWrap, [CLS_SHOWSPIN], [CLS_HIDESPIN]);
    container = null;
  }
}
/**
 * Function to hide the Spinner.
 *
 * @param {HTMLElement} container - Specify the target of the Spinner.
 * @returns {void}
 * @private
 */


function hideSpinner(container) {
  showHideSpinner(container, true);
  container = null;
} // eslint-disable-next-line

/**
  * Function to change the Spinners in a page globally from application end.
  * ```
  * E.g : setSpinner({ cssClass: 'custom-css'; type: 'Material' });
  * ```
  *
  * @param {SetSpinnerArgs} args - specifies the args
  * @param {createElementParams} internalCreateElement - specifies the element params
  * @returns {void}
  * @private
  */

function setSpinner(args, internalCreateElement) {
  var makeElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"];

  if (args.template !== undefined) {
    spinTemplate = args.template;

    if (args.template !== undefined) {
      spinCSSClass = args.cssClass;
    }
  }

  var container = document.querySelectorAll('.' + CLS_SPINWRAP);

  for (var index = 0; index < container.length; index++) {
    ensureTemplate(args.template, container[index], args.type, args.cssClass, makeElement);
  }
}
/**
 *
 * @param {string} template - specifies the string
 * @param {HTMLElement} container - specifies the container
 * @param {string} theme - specifies the theme
 * @param {string} cssClass - specifies the string class
 * @param {createElementParams} makeEle - specifies the params
 * @returns {void}
 */

function ensureTemplate(template, container, theme, cssClass, makeEle) {
  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(template) && !container.classList.contains(CLS_SPINTEMPLATE)) {
    replaceTheme(container, theme, cssClass, makeEle);

    if (container.classList.contains(CLS_SHOWSPIN)) {
      container.classList.remove(CLS_SHOWSPIN);
      showSpinner(container);
    } else {
      container.classList.remove(CLS_HIDESPIN);
      hideSpinner(container);
    }
  } else {
    spinTemplate = template;

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cssClass)) {
      spinCSSClass = cssClass;
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(spinTemplate)) {
      replaceContent(container, spinTemplate, spinCSSClass);
    }
  }
}
/**
 *
 * @param {HTMLElement} container - specifies the container
 * @param {string} theme - specifies the theme
 * @param {string} cssClass - specifies the string class
 * @param {createElementParams} makeEle - specifies the params
 * @returns {void}
 */


function replaceTheme(container, theme, cssClass, makeEle) {
  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cssClass)) {
    container.classList.add(cssClass);
  }

  var svgElement = container.querySelector('svg');

  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(svgElement)) {
    var radius = theme === 'Bootstrap' ? parseFloat(svgElement.style.height) : parseFloat(svgElement.style.height) / 2;
    var classNames = svgElement.getAttribute('class');
    var svgClassList = classNames.split(/\s/);

    if (svgClassList.indexOf('e-spin-material') >= 0) {
      var id = svgElement.getAttribute('id');
      clearTimeout(globalTimeOut["" + id].timeOut);
    }

    setTheme(theme, container, radius, makeEle);
  }
}

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-popups/src/tooltip/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-popups/src/tooltip/index.js ***!
  \******************************************************************/
/*! exports provided: Animation, Tooltip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _tooltip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tooltip */ "./node_modules/@syncfusion/ej2-popups/src/tooltip/tooltip.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Animation", function() { return _tooltip__WEBPACK_IMPORTED_MODULE_0__["Animation"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Tooltip", function() { return _tooltip__WEBPACK_IMPORTED_MODULE_0__["Tooltip"]; });

/**
 * Tooltip modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-popups/src/tooltip/tooltip.js":
/*!********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-popups/src/tooltip/tooltip.js ***!
  \********************************************************************/
/*! exports provided: Animation, Tooltip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Animation", function() { return Animation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tooltip", function() { return Tooltip; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _popup_popup__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../popup/popup */ "./node_modules/@syncfusion/ej2-popups/src/popup/popup.js");
/* harmony import */ var _common_position__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/position */ "./node_modules/@syncfusion/ej2-popups/src/common/position.js");
/* harmony import */ var _common_collision__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/collision */ "./node_modules/@syncfusion/ej2-popups/src/common/collision.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};









var TOUCHEND_HIDE_DELAY = 1500;
var TAPHOLD_THRESHOLD = 500;
var SHOW_POINTER_TIP_GAP = 0;
var HIDE_POINTER_TIP_GAP = 8;
var MOUSE_TRAIL_GAP = 2;
var POINTER_ADJUST = 2;
var ROOT = 'e-tooltip';
var RTL = 'e-rtl';
var DEVICE = 'e-bigger';
var ICON = 'e-icons';
var CLOSE = 'e-tooltip-close';
var TOOLTIP_WRAP = 'e-tooltip-wrap';
var CONTENT = 'e-tip-content';
var ARROW_TIP = 'e-arrow-tip';
var ARROW_TIP_OUTER = 'e-arrow-tip-outer';
var ARROW_TIP_INNER = 'e-arrow-tip-inner';
var TIP_BOTTOM = 'e-tip-bottom';
var TIP_TOP = 'e-tip-top';
var TIP_LEFT = 'e-tip-left';
var TIP_RIGHT = 'e-tip-right';
var POPUP_ROOT = 'e-popup';
var POPUP_OPEN = 'e-popup-open';
var POPUP_CLOSE = 'e-popup-close';
var POPUP_LIB = 'e-lib';
var HIDE_POPUP = 'e-hidden';
var POPUP_CONTAINER = 'e-tooltip-popup-container';

var Animation =
/** @class */
function (_super) {
  __extends(Animation, _super);

  function Animation() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({
    effect: 'FadeIn',
    duration: 150,
    delay: 0
  })], Animation.prototype, "open", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({
    effect: 'FadeOut',
    duration: 150,
    delay: 0
  })], Animation.prototype, "close", void 0);

  return Animation;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);


/**
 * Represents the Tooltip component that displays a piece of information about the target element on mouse hover.
 * ```html
 * <div id="tooltip">Show Tooltip</div>
 * ```
 * ```typescript
 * <script>
 *   var tooltipObj = new Tooltip({ content: 'Tooltip text' });
 *   tooltipObj.appendTo("#tooltip");
 * </script>
 * ```
 */

var Tooltip =
/** @class */
function (_super) {
  __extends(Tooltip, _super);
  /* eslint-enable */

  /**
   * Constructor for creating the Tooltip Component
   *
   * @param {TooltipModel} options - specifies the options for the constructor
   * @param {string| HTMLElement} element - specifies the element for the constructor
   *
   */


  function Tooltip(options, element) {
    var _this = _super.call(this, options, element) || this;

    _this.mouseMoveEvent = null;
    _this.mouseMoveTarget = null;
    _this.containerElement = null;
    _this.isBodyContainer = true;
    return _this;
  }

  Tooltip.prototype.initialize = function () {
    this.formatPosition();
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], ROOT);
  };

  Tooltip.prototype.formatPosition = function () {
    var _a, _b;

    if (this.position.indexOf('Top') === 0 || this.position.indexOf('Bottom') === 0) {
      _a = this.position.split(/(?=[A-Z])/), this.tooltipPositionY = _a[0], this.tooltipPositionX = _a[1];
    } else {
      _b = this.position.split(/(?=[A-Z])/), this.tooltipPositionX = _b[0], this.tooltipPositionY = _b[1];
    }
  };

  Tooltip.prototype.renderArrow = function () {
    this.setTipClass(this.position);
    var tip = this.createElement('div', {
      className: ARROW_TIP + ' ' + this.tipClass
    });
    tip.appendChild(this.createElement('div', {
      className: ARROW_TIP_OUTER + ' ' + this.tipClass
    }));
    tip.appendChild(this.createElement('div', {
      className: ARROW_TIP_INNER + ' ' + this.tipClass
    }));
    this.tooltipEle.appendChild(tip);
  };

  Tooltip.prototype.setTipClass = function (position) {
    if (position.indexOf('Right') === 0) {
      this.tipClass = TIP_LEFT;
    } else if (position.indexOf('Bottom') === 0) {
      this.tipClass = TIP_TOP;
    } else if (position.indexOf('Left') === 0) {
      this.tipClass = TIP_RIGHT;
    } else {
      this.tipClass = TIP_BOTTOM;
    }
  };

  Tooltip.prototype.renderPopup = function (target) {
    var elePos = this.mouseTrail ? {
      top: 0,
      left: 0
    } : this.getTooltipPosition(target);
    this.tooltipEle.classList.remove(POPUP_LIB);
    this.popupObj = new _popup_popup__WEBPACK_IMPORTED_MODULE_1__["Popup"](this.tooltipEle, {
      height: this.height,
      width: this.width,
      position: {
        X: elePos.left,
        Y: elePos.top
      },
      enableRtl: this.enableRtl,
      open: this.openPopupHandler.bind(this),
      close: this.closePopupHandler.bind(this)
    });
  };

  Tooltip.prototype.getScalingFactor = function (target) {
    if (!target) {
      return {
        x: 1,
        y: 1
      };
    }

    var scalingFactors = {
      x: 1,
      y: 1
    };
    var elementsWithTransform = target.closest('[style*="transform: scale"]');

    if (elementsWithTransform && elementsWithTransform != this.tooltipEle && elementsWithTransform.contains(this.tooltipEle)) {
      var computedStyle = window.getComputedStyle(elementsWithTransform);
      var transformValue = computedStyle.getPropertyValue("transform");
      var matrixValues = transformValue.match(/matrix\(([^)]+)\)/)[1].split(",").map(parseFloat);
      scalingFactors.x = matrixValues[0];
      scalingFactors.y = matrixValues[3];
    }

    return scalingFactors;
  };

  Tooltip.prototype.getTooltipPosition = function (target) {
    this.tooltipEle.style.display = 'block';
    var parentWithZoomStyle = this.element.closest('[style*="zoom"]');

    if (parentWithZoomStyle) {
      if (!parentWithZoomStyle.contains(this.tooltipEle)) {
        this.tooltipEle.style.zoom = getComputedStyle(parentWithZoomStyle).zoom;
      }
    }

    var pos = Object(_common_position__WEBPACK_IMPORTED_MODULE_2__["calculatePosition"])(target, this.tooltipPositionX, this.tooltipPositionY, !this.isBodyContainer, this.isBodyContainer ? null : this.containerElement.getBoundingClientRect());
    var scalingFactors = this.getScalingFactor(target);
    var offsetPos = this.calculateTooltipOffset(this.position, scalingFactors.x, scalingFactors.y);
    var collisionPosition = this.calculateElementPosition(pos, offsetPos);
    var collisionLeft = collisionPosition[0];
    var collisionTop = collisionPosition[1];
    var elePos = this.collisionFlipFit(target, collisionLeft, collisionTop);
    elePos.left = elePos.left / scalingFactors.x;
    elePos.top = elePos.top / scalingFactors.y;
    this.tooltipEle.style.display = '';
    return elePos;
  };

  Tooltip.prototype.windowResize = function () {
    this.reposition(this.findTarget());
  };

  Tooltip.prototype.reposition = function (target) {
    if (this.popupObj && target) {
      var elePos = this.getTooltipPosition(target);
      this.popupObj.position = {
        X: elePos.left,
        Y: elePos.top
      };
      this.popupObj.dataBind();
    }
  };

  Tooltip.prototype.openPopupHandler = function () {
    if (!this.mouseTrail && this.needTemplateReposition()) {
      this.reposition(this.findTarget());
    }

    this.trigger('afterOpen', this.tooltipEventArgs);
    this.tooltipEventArgs = null;
  };

  Tooltip.prototype.closePopupHandler = function () {
    if (this.isReact && !(this.opensOn === 'Click' && typeof this.content === 'function')) {
      this.clearTemplate(['content']);
    }

    this.clear();
    this.trigger('afterClose', this.tooltipEventArgs);
    this.tooltipEventArgs = null;
  };

  Tooltip.prototype.calculateTooltipOffset = function (position, xScalingFactor, yScalingFactor) {
    if (xScalingFactor === void 0) {
      xScalingFactor = 1;
    }

    if (yScalingFactor === void 0) {
      yScalingFactor = 1;
    }

    var pos = {
      top: 0,
      left: 0
    };
    var tipWidth, tipHeight, tooltipEleWidth, tooltipEleHeight, arrowEle;
    var tipAdjust, tipHeightAdjust, tipWidthAdjust;

    if (xScalingFactor != 1 || yScalingFactor != 1) {
      var tooltipEleRect = this.tooltipEle.getBoundingClientRect();
      var arrowEleRect = void 0;
      tooltipEleWidth = Math.round(tooltipEleRect.width);
      tooltipEleHeight = Math.round(tooltipEleRect.height);
      arrowEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + ARROW_TIP, this.tooltipEle);

      if (arrowEle) {
        arrowEleRect = arrowEle.getBoundingClientRect();
      }

      tipWidth = arrowEle ? Math.round(arrowEleRect.width) : 0;
      tipHeight = arrowEle ? Math.round(arrowEleRect.height) : 0;
      tipAdjust = this.showTipPointer ? SHOW_POINTER_TIP_GAP : HIDE_POINTER_TIP_GAP;
      tipHeightAdjust = tipHeight / 2 + POINTER_ADJUST + (tooltipEleHeight - this.tooltipEle.clientHeight * yScalingFactor);
      tipWidthAdjust = tipWidth / 2 + POINTER_ADJUST + (tooltipEleWidth - this.tooltipEle.clientWidth * xScalingFactor);
    } else {
      tooltipEleWidth = this.tooltipEle.offsetWidth;
      tooltipEleHeight = this.tooltipEle.offsetHeight;
      arrowEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + ARROW_TIP, this.tooltipEle);
      tipWidth = arrowEle ? arrowEle.offsetWidth : 0;
      tipHeight = arrowEle ? arrowEle.offsetHeight : 0;
      tipAdjust = this.showTipPointer ? SHOW_POINTER_TIP_GAP : HIDE_POINTER_TIP_GAP;
      tipHeightAdjust = tipHeight / 2 + POINTER_ADJUST + (this.tooltipEle.offsetHeight - this.tooltipEle.clientHeight);
      tipWidthAdjust = tipWidth / 2 + POINTER_ADJUST + (this.tooltipEle.offsetWidth - this.tooltipEle.clientWidth);
    }

    if (this.mouseTrail) {
      tipAdjust += MOUSE_TRAIL_GAP;
    }

    switch (position) {
      case 'RightTop':
        pos.left += tipWidth + tipAdjust;
        pos.top -= tooltipEleHeight - tipHeightAdjust;
        break;

      case 'RightCenter':
        pos.left += tipWidth + tipAdjust;
        pos.top -= tooltipEleHeight / 2;
        break;

      case 'RightBottom':
        pos.left += tipWidth + tipAdjust;
        pos.top -= tipHeightAdjust;
        break;

      case 'BottomRight':
        pos.top += tipHeight + tipAdjust;
        pos.left -= tipWidthAdjust;
        break;

      case 'BottomCenter':
        pos.top += tipHeight + tipAdjust;
        pos.left -= tooltipEleWidth / 2;
        break;

      case 'BottomLeft':
        pos.top += tipHeight + tipAdjust;
        pos.left -= tooltipEleWidth - tipWidthAdjust;
        break;

      case 'LeftBottom':
        pos.left -= tipWidth + tooltipEleWidth + tipAdjust;
        pos.top -= tipHeightAdjust;
        break;

      case 'LeftCenter':
        pos.left -= tipWidth + tooltipEleWidth + tipAdjust;
        pos.top -= tooltipEleHeight / 2;
        break;

      case 'LeftTop':
        pos.left -= tipWidth + tooltipEleWidth + tipAdjust;
        pos.top -= tooltipEleHeight - tipHeightAdjust;
        break;

      case 'TopLeft':
        pos.top -= tooltipEleHeight + tipHeight + tipAdjust;
        pos.left -= tooltipEleWidth - tipWidthAdjust;
        break;

      case 'TopRight':
        pos.top -= tooltipEleHeight + tipHeight + tipAdjust;
        pos.left -= tipWidthAdjust;
        break;

      default:
        pos.top -= tooltipEleHeight + tipHeight + tipAdjust;
        pos.left -= tooltipEleWidth / 2;
        break;
    }

    pos.left += this.offsetX;
    pos.top += this.offsetY;
    return pos;
  };

  Tooltip.prototype.updateTipPosition = function (position) {
    var selEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + ARROW_TIP + ',.' + ARROW_TIP_OUTER + ',.' + ARROW_TIP_INNER, this.tooltipEle);
    var removeList = [TIP_BOTTOM, TIP_TOP, TIP_LEFT, TIP_RIGHT];
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(selEle, removeList);
    this.setTipClass(position);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])(selEle, this.tipClass);
  };

  Tooltip.prototype.adjustArrow = function (target, position, tooltipPositionX, tooltipPositionY) {
    var arrowEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + ARROW_TIP, this.tooltipEle);

    if (this.showTipPointer === false || arrowEle === null) {
      return;
    }

    this.updateTipPosition(position);
    var leftValue;
    var topValue;
    this.tooltipEle.style.display = 'block';
    var tooltipWidth = this.tooltipEle.clientWidth;
    var tooltipHeight = this.tooltipEle.clientHeight;
    var arrowInnerELe = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + ARROW_TIP_INNER, this.tooltipEle);
    var tipWidth = arrowEle.offsetWidth;
    var tipHeight = arrowEle.offsetHeight;
    this.tooltipEle.style.display = '';

    if (this.tipClass === TIP_BOTTOM || this.tipClass === TIP_TOP) {
      if (this.tipClass === TIP_BOTTOM) {
        topValue = '99.9%'; // Arrow icon aligned -2px height from ArrowOuterTip div

        arrowInnerELe.style.top = '-' + (tipHeight - 2) + 'px';
      } else {
        topValue = -(tipHeight - 1) + 'px'; // Arrow icon aligned -6px height from ArrowOuterTip div

        arrowInnerELe.style.top = '-' + (tipHeight - 6) + 'px';
      }

      if (target) {
        var tipPosExclude = tooltipPositionX !== 'Center' || tooltipWidth > target.offsetWidth || this.mouseTrail;

        if (tipPosExclude && tooltipPositionX === 'Left' || !tipPosExclude && this.tipPointerPosition === 'End') {
          leftValue = tooltipWidth - tipWidth - POINTER_ADJUST + 'px';
        } else if (tipPosExclude && tooltipPositionX === 'Right' || !tipPosExclude && this.tipPointerPosition === 'Start') {
          leftValue = POINTER_ADJUST + 'px';
        } else if (tipPosExclude && (this.tipPointerPosition === 'End' || this.tipPointerPosition === 'Start')) {
          leftValue = this.tipPointerPosition === 'End' ? target.offsetWidth + (this.tooltipEle.offsetWidth - target.offsetWidth) / 2 - tipWidth / 2 - POINTER_ADJUST + 'px' : (this.tooltipEle.offsetWidth - target.offsetWidth) / 2 - tipWidth / 2 + POINTER_ADJUST + 'px';
        } else {
          leftValue = tooltipWidth / 2 - tipWidth / 2 + 'px';
        }
      }
    } else {
      if (this.tipClass === TIP_RIGHT) {
        leftValue = '99.9%'; // Arrow icon aligned -2px left from ArrowOuterTip div

        arrowInnerELe.style.left = '-' + (tipWidth - 2) + 'px';
      } else {
        leftValue = -(tipWidth - 1) + 'px'; // Arrow icon aligned -2px from ArrowOuterTip width

        arrowInnerELe.style.left = -tipWidth + (tipWidth - 2) + 'px';
      }

      var tipPosExclude = tooltipPositionY !== 'Center' || tooltipHeight > target.offsetHeight || this.mouseTrail;

      if (tipPosExclude && tooltipPositionY === 'Top' || !tipPosExclude && this.tipPointerPosition === 'End') {
        topValue = tooltipHeight - tipHeight - POINTER_ADJUST + 'px';
      } else if (tipPosExclude && tooltipPositionY === 'Bottom' || !tipPosExclude && this.tipPointerPosition === 'Start') {
        topValue = POINTER_ADJUST + 'px';
      } else {
        topValue = tooltipHeight / 2 - tipHeight / 2 + 'px';
      }
    }

    arrowEle.style.top = topValue;
    arrowEle.style.left = leftValue;
  };

  Tooltip.prototype.renderContent = function (target) {
    var tooltipContent = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CONTENT, this.tooltipEle);

    if (this.cssClass) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.tooltipEle], this.cssClass.split(' '));
    }

    if (target && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target.getAttribute('title'))) {
      target.setAttribute('data-content', target.getAttribute('title'));
      target.removeAttribute('title');
    }

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.content)) {
      tooltipContent.innerHTML = '';

      if (this.content instanceof HTMLElement) {
        tooltipContent.appendChild(this.content);
      } else if (typeof this.content === 'string') {
        if (this.enableHtmlSanitizer) {
          this.setProperties({
            content: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(this.content)
          }, true);
        }

        if (this.enableHtmlParse) {
          var tempFunction = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(this.content);
          var tempArr = tempFunction({}, this, 'content', this.element.id + 'content', undefined, undefined, tooltipContent, this.root);

          if (tempArr) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(tempArr, tooltipContent);
          }
        } else {
          tooltipContent['textContent'] = this.content;
        }
      } else {
        var templateFunction = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(this.content);
        var tempArr = templateFunction({}, this, 'content', this.element.id + 'content', undefined, undefined, tooltipContent);

        if (tempArr) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(tempArr, tooltipContent);
        }

        this.renderReactTemplates();
      }
    } else {
      if (target && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target.getAttribute('data-content'))) {
        tooltipContent.innerHTML = target.getAttribute('data-content');
      }
    }
  };

  Tooltip.prototype.renderCloseIcon = function () {
    if (!this.isSticky) {
      var existingCloseIcon = this.tooltipEle.querySelector('.' + ICON + '.' + CLOSE);

      if (existingCloseIcon) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(existingCloseIcon);
      }

      return;
    }

    var tipClose = this.createElement('div', {
      className: ICON + ' ' + CLOSE
    });
    this.tooltipEle.appendChild(tipClose);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(tipClose, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchStartEvent, this.onStickyClose, this);
  };

  Tooltip.prototype.addDataTooltipId = function (target, id) {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(target, {
      'data-tooltip-id': id
    });
  };

  Tooltip.prototype.removeDataTooltipId = function (target) {
    target.removeAttribute('data-tooltip-id');
  };

  Tooltip.prototype.tapHoldHandler = function (evt) {
    clearTimeout(this.autoCloseTimer);
    this.targetHover(evt.originalEvent);
  };

  Tooltip.prototype.touchEndHandler = function (e) {
    var _this = this;

    if (this.isSticky) {
      return;
    }

    var close = function () {
      _this.close();
    };

    this.autoCloseTimer = setTimeout(close, TOUCHEND_HIDE_DELAY);
  };

  Tooltip.prototype.targetClick = function (e) {
    var target;

    if (this.target) {
      target = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, this.target);
    } else {
      target = this.element;
    }

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target)) {
      return;
    }

    if (target.getAttribute('data-tooltip-id') === null) {
      this.targetHover(e);
    } else if (!this.isSticky) {
      this.hideTooltip(this.animation.close, e, target);
    }
  };

  Tooltip.prototype.targetHover = function (e) {
    var target;

    if (this.target) {
      target = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, this.target);
    } else {
      target = this.element;
    }

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target) || target.getAttribute('data-tooltip-id') !== null && this.closeDelay === 0) {
      return;
    }

    var targetList = [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('[data-tooltip-id= "' + this.ctrlId + '_content"]', document));

    for (var _i = 0, targetList_1 = targetList; _i < targetList_1.length; _i++) {
      var target_1 = targetList_1[_i];
      this.restoreElement(target_1);
    }

    this.showTooltip(target, this.animation.open, e);
  };

  Tooltip.prototype.mouseMoveBeforeOpen = function (e) {
    this.mouseMoveEvent = e;
  };

  Tooltip.prototype.mouseMoveBeforeRemove = function () {
    if (this.mouseMoveTarget) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.mouseMoveTarget, 'mousemove touchstart', this.mouseMoveBeforeOpen);
    }
  };

  Tooltip.prototype.showTooltip = function (target, showAnimation, e) {
    var _this = this;

    clearTimeout(this.showTimer);
    clearTimeout(this.hideTimer);

    if (this.openDelay && this.mouseTrail) {
      this.mouseMoveBeforeRemove();
      this.mouseMoveTarget = target;
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.mouseMoveTarget, 'mousemove touchstart', this.mouseMoveBeforeOpen, this);
    }

    this.tooltipEventArgs = {
      type: e ? e.type : null,
      cancel: false,
      target: target,
      event: e ? e : null,
      element: this.tooltipEle,
      isInteracted: !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e)
    };

    var observeCallback = function (beforeRenderArgs) {
      _this.beforeRenderCallback(beforeRenderArgs, target, e, showAnimation);
    };

    this.trigger('beforeRender', this.tooltipEventArgs, observeCallback.bind(this));
  };

  Tooltip.prototype.beforeRenderCallback = function (beforeRenderArgs, target, e, showAnimation) {
    if (beforeRenderArgs.cancel) {
      this.isHidden = true;
      this.clear();
      this.mouseMoveBeforeRemove();
    } else {
      this.isHidden = false;

      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tooltipEle)) {
        this.ctrlId = this.element.getAttribute('id') ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])(this.element.getAttribute('id')) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('tooltip');
        this.tooltipEle = this.createElement('div', {
          className: TOOLTIP_WRAP + ' ' + POPUP_ROOT + ' ' + POPUP_LIB,
          attrs: {
            role: 'tooltip',
            'aria-hidden': 'false',
            'id': this.ctrlId + '_content'
          },
          styles: 'width:' + Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.width) + ';height:' + Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.height) + ';position:absolute;'
        });

        if (Object.keys(this.htmlAttributes).length !== 0) {
          for (var attr in this.htmlAttributes) {
            if (attr === "class") {
              this.tooltipEle.classList.add(this.htmlAttributes["" + attr]);
            } else {
              this.tooltipEle.setAttribute(attr, this.htmlAttributes["" + attr]);
            }
          }
        }

        this.tooltipBeforeRender(target, this);
        this.tooltipAfterRender(target, e, showAnimation, this);
      } else {
        if (target) {
          this.adjustArrow(target, this.position, this.tooltipPositionX, this.tooltipPositionY);
          this.addDataTooltipId(target, this.ctrlId + '_content');
          this.renderContent(target);
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"].stop(this.tooltipEle);
          this.reposition(target);
          this.tooltipAfterRender(target, e, showAnimation, this);
        }
      }
    }
  };

  Tooltip.prototype.appendContainer = function (ctrlObj) {
    if (typeof this.container == 'string') {
      if (this.container === 'body') {
        this.containerElement = document.body;
      } else {
        this.isBodyContainer = false;
        this.containerElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])(this.container, document);
      }
    } else if (this.container instanceof HTMLElement) {
      this.containerElement = this.container;
      this.isBodyContainer = this.containerElement.tagName === 'BODY';
    }

    if (!this.isBodyContainer) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.containerElement], POPUP_CONTAINER);
    }

    this.containerElement.appendChild(ctrlObj.tooltipEle);
  };

  Tooltip.prototype.tooltipBeforeRender = function (target, ctrlObj) {
    if (target) {
      if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([ctrlObj.tooltipEle], DEVICE);
      }

      if (ctrlObj.width !== 'auto') {
        ctrlObj.tooltipEle.style.maxWidth = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(ctrlObj.width);
      }

      ctrlObj.tooltipEle.appendChild(ctrlObj.createElement('div', {
        className: CONTENT
      }));
      this.appendContainer(ctrlObj);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([ctrlObj.tooltipEle], HIDE_POPUP);
      ctrlObj.addDataTooltipId(target, ctrlObj.ctrlId + '_content');
      ctrlObj.renderContent(target);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([ctrlObj.tooltipEle], POPUP_OPEN);

      if (ctrlObj.showTipPointer) {
        ctrlObj.renderArrow();
      }

      ctrlObj.renderCloseIcon();
      ctrlObj.renderPopup(target);
      ctrlObj.adjustArrow(target, ctrlObj.position, ctrlObj.tooltipPositionX, ctrlObj.tooltipPositionY);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"].stop(ctrlObj.tooltipEle);
      ctrlObj.reposition(target);
    }
  };

  Tooltip.prototype.tooltipAfterRender = function (target, e, showAnimation, ctrlObj) {
    if (target) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([ctrlObj.tooltipEle], POPUP_OPEN);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([ctrlObj.tooltipEle], POPUP_CLOSE);
      ctrlObj.tooltipEventArgs = {
        type: e ? e.type : null,
        cancel: false,
        target: target,
        event: e ? e : null,
        element: ctrlObj.tooltipEle,
        isInteracted: !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e)
      };

      if (ctrlObj.needTemplateReposition() && !ctrlObj.mouseTrail) {
        ctrlObj.tooltipEle.style.display = 'none';
      }

      var observeCallback = function (observedArgs) {
        ctrlObj.beforeOpenCallback(observedArgs, target, showAnimation, e);
      };

      ctrlObj.trigger('beforeOpen', ctrlObj.tooltipEventArgs, observeCallback.bind(ctrlObj));
    }
  };

  Tooltip.prototype.beforeOpenCallback = function (observedArgs, target, showAnimation, e) {
    var _this = this;

    if (observedArgs.cancel) {
      this.isHidden = true;
      this.clear();
      this.mouseMoveBeforeRemove();
      this.restoreElement(target);
    } else {
      var openAnimation_1 = {
        name: showAnimation.effect === 'None' && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["animationMode"] === 'Enable' ? 'FadeIn' : this.animation.open.effect,
        duration: showAnimation.duration,
        delay: showAnimation.delay,
        timingFunction: 'easeOut'
      };

      if (showAnimation.effect === 'None') {
        openAnimation_1 = undefined;
      }

      if (this.openDelay > 0) {
        var show = function () {
          if (_this.mouseTrail) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(target, 'mousemove touchstart mouseenter', _this.onMouseMove, _this);
          }

          if (_this.popupObj) {
            _this.popupObj.show(openAnimation_1, target);

            if (_this.mouseMoveEvent && _this.mouseTrail) {
              _this.onMouseMove(_this.mouseMoveEvent);
            }
          }
        };

        this.showTimer = setTimeout(show, this.openDelay);
      } else {
        if (this.popupObj) {
          this.popupObj.show(openAnimation_1, target);
        }
      }
    }

    if (e) {
      this.wireMouseEvents(e, target);
    }
  };

  Tooltip.prototype.needTemplateReposition = function () {
    // eslint-disable-next-line
    var tooltip = this;
    return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(tooltip.viewContainerRef) && typeof tooltip.viewContainerRef !== 'string';
  };

  Tooltip.prototype.checkCollision = function (target, x, y) {
    var elePos = {
      left: x,
      top: y,
      position: this.position,
      horizontal: this.tooltipPositionX,
      vertical: this.tooltipPositionY
    };
    var affectedPos = Object(_common_collision__WEBPACK_IMPORTED_MODULE_3__["isCollide"])(this.tooltipEle, this.checkCollideTarget(), x, y);

    if (affectedPos.length > 0) {
      elePos.horizontal = affectedPos.indexOf('left') >= 0 ? 'Right' : affectedPos.indexOf('right') >= 0 ? 'Left' : this.tooltipPositionX;
      elePos.vertical = affectedPos.indexOf('top') >= 0 ? 'Bottom' : affectedPos.indexOf('bottom') >= 0 ? 'Top' : this.tooltipPositionY;
    }

    return elePos;
  };

  Tooltip.prototype.calculateElementPosition = function (pos, offsetPos) {
    return [this.isBodyContainer ? pos.left + offsetPos.left : pos.left - this.containerElement.offsetLeft + offsetPos.left + window.pageXOffset + this.containerElement.scrollLeft, this.isBodyContainer ? pos.top + offsetPos.top : pos.top - this.containerElement.offsetTop + offsetPos.top + window.pageYOffset + this.containerElement.scrollTop];
  };

  Tooltip.prototype.collisionFlipFit = function (target, x, y) {
    var elePos = this.checkCollision(target, x, y);
    var newpos = elePos.position;

    if (this.tooltipPositionY !== elePos.vertical) {
      newpos = this.position.indexOf('Bottom') === 0 || this.position.indexOf('Top') === 0 ? elePos.vertical + this.tooltipPositionX : this.tooltipPositionX + elePos.vertical;
    }

    if (this.tooltipPositionX !== elePos.horizontal) {
      if (newpos.indexOf('Left') === 0) {
        elePos.vertical = newpos === 'LeftTop' || newpos === 'LeftCenter' ? 'Top' : 'Bottom';
        newpos = elePos.vertical + 'Left';
      }

      if (newpos.indexOf('Right') === 0) {
        elePos.vertical = newpos === 'RightTop' || newpos === 'RightCenter' ? 'Top' : 'Bottom';
        newpos = elePos.vertical + 'Right';
      }

      elePos.horizontal = this.tooltipPositionX;
    }

    this.tooltipEventArgs = {
      type: null,
      cancel: false,
      target: target,
      event: null,
      element: this.tooltipEle,
      collidedPosition: newpos
    };
    this.trigger('beforeCollision', this.tooltipEventArgs);

    if (this.tooltipEventArgs.cancel) {
      newpos = this.position;
    } else {
      var elePosVertical = elePos.vertical;
      var elePosHorizontal = elePos.horizontal;

      if (elePos.position !== newpos) {
        var pos = Object(_common_position__WEBPACK_IMPORTED_MODULE_2__["calculatePosition"])(target, elePosHorizontal, elePosVertical, !this.isBodyContainer, this.isBodyContainer ? null : this.containerElement.getBoundingClientRect());
        this.adjustArrow(target, newpos, elePosHorizontal, elePosVertical);
        var scalingFactors = this.getScalingFactor(target);
        var offsetPos = this.calculateTooltipOffset(newpos, scalingFactors.x, scalingFactors.y);
        offsetPos.top -= this.getOffSetPosition('TopBottom', newpos, this.offsetY);
        offsetPos.left -= this.getOffSetPosition('RightLeft', newpos, this.offsetX);
        elePos.position = newpos;
        var elePosition = this.calculateElementPosition(pos, offsetPos);
        elePos.left = elePosition[0];
        elePos.top = elePosition[1];
      } else {
        this.adjustArrow(target, newpos, elePosHorizontal, elePosVertical);
      }
    }

    var eleOffset = {
      left: elePos.left,
      top: elePos.top
    };
    var position = this.isBodyContainer ? Object(_common_collision__WEBPACK_IMPORTED_MODULE_3__["fit"])(this.tooltipEle, this.checkCollideTarget(), {
      X: true,
      Y: this.windowCollision
    }, eleOffset) : eleOffset;
    this.tooltipEle.style.display = 'block';
    var arrowEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + ARROW_TIP, this.tooltipEle);

    if (this.showTipPointer && arrowEle != null && (newpos.indexOf('Bottom') === 0 || newpos.indexOf('Top') === 0)) {
      var arrowleft = parseInt(arrowEle.style.left, 10) - (position.left - elePos.left);

      if (arrowleft < 0) {
        arrowleft = 0;
      } else if (arrowleft + arrowEle.offsetWidth > this.tooltipEle.clientWidth) {
        arrowleft = this.tooltipEle.clientWidth - arrowEle.offsetWidth;
      }

      arrowEle.style.left = arrowleft.toString() + 'px';
    }

    this.tooltipEle.style.display = '';
    eleOffset.left = position.left;
    eleOffset.top = position.top;
    return eleOffset;
  };

  Tooltip.prototype.getOffSetPosition = function (positionString, newPos, offsetType) {
    return positionString.indexOf(this.position.split(/(?=[A-Z])/)[0]) !== -1 && positionString.indexOf(newPos.split(/(?=[A-Z])/)[0]) !== -1 ? 2 * offsetType : 0;
  };

  Tooltip.prototype.checkCollideTarget = function () {
    return !this.windowCollision && this.target ? this.element : null;
  };

  Tooltip.prototype.hideTooltip = function (hideAnimation, e, targetElement) {
    var _this = this;

    if (this.closeDelay > 0) {
      clearTimeout(this.hideTimer);
      clearTimeout(this.showTimer);

      var hide = function () {
        if (_this.closeDelay && _this.tooltipEle && _this.isTooltipOpen) {
          return;
        }

        _this.tooltipHide(hideAnimation, e, targetElement);
      };

      this.hideTimer = setTimeout(hide, this.closeDelay);
    } else {
      this.tooltipHide(hideAnimation, e, targetElement);
    }
  };

  Tooltip.prototype.tooltipHide = function (hideAnimation, e, targetElement) {
    var _this = this;

    var target;

    if (e) {
      target = this.target ? targetElement || e.target : this.element;
    } else {
      target = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('[data-tooltip-id= "' + this.ctrlId + '_content"]', document);
    }

    this.tooltipEventArgs = {
      type: e ? e.type : null,
      cancel: false,
      target: target,
      event: e ? e : null,
      element: this.tooltipEle,
      isInteracted: !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e)
    }; // this line commented for close the tooltip popup element even the target element destroyed in a page.
    //if (isNullOrUndefined(target)) { return; }

    this.trigger('beforeClose', this.tooltipEventArgs, function (observedArgs) {
      if (!observedArgs.cancel) {
        _this.mouseMoveBeforeRemove();

        _this.popupHide(hideAnimation, target);
      } else {
        _this.isHidden = false;
      }
    });
    this.tooltipEventArgs = null;
  };

  Tooltip.prototype.popupHide = function (hideAnimation, target) {
    if (target) {
      this.restoreElement(target);
    }

    this.isHidden = true;
    var closeAnimation = {
      name: hideAnimation.effect === 'None' && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["animationMode"] === 'Enable' ? 'FadeOut' : this.animation.close.effect,
      duration: hideAnimation.duration,
      delay: hideAnimation.delay,
      timingFunction: 'easeIn'
    };

    if (hideAnimation.effect === 'None') {
      closeAnimation = undefined;
    }

    if (this.popupObj) {
      this.popupObj.hide(closeAnimation);
    }
  };

  Tooltip.prototype.restoreElement = function (target) {
    this.unwireMouseEvents(target);

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target.getAttribute('data-content'))) {
      target.setAttribute('title', target.getAttribute('data-content'));
      target.removeAttribute('data-content');
    }

    this.removeDataTooltipId(target);
  };

  Tooltip.prototype.clear = function () {
    if (this.tooltipEle) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.tooltipEle], POPUP_CLOSE);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.tooltipEle], POPUP_OPEN);
    }

    if (this.isHidden) {
      if (this.popupObj) {
        this.popupObj.destroy();
      }

      if (this.tooltipEle) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.tooltipEle);
      }

      this.tooltipEle = null;
      this.popupObj = null;
    }
  };

  Tooltip.prototype.tooltipHover = function (e) {
    if (this.tooltipEle) {
      this.isTooltipOpen = true;
    }
  };

  Tooltip.prototype.tooltipMouseOut = function (e) {
    this.isTooltipOpen = false;
    this.hideTooltip(this.animation.close, e, this.findTarget());
  };

  Tooltip.prototype.onMouseOut = function (e) {
    var enteredElement = e.relatedTarget; // don't close the tooltip only if it is tooltip content element

    if (enteredElement && !this.mouseTrail) {
      var checkForTooltipElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(enteredElement, "." + TOOLTIP_WRAP + "." + POPUP_LIB + "." + POPUP_ROOT);

      if (checkForTooltipElement) {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(checkForTooltipElement, 'mouseleave', this.tooltipElementMouseOut, this);
      } else {
        this.hideTooltip(this.animation.close, e, this.findTarget());

        if (this.closeDelay === 0) {
          this.clear();
        }
      }
    } else {
      this.hideTooltip(this.animation.close, e, this.findTarget());
      this.clear();
    }
  };

  Tooltip.prototype.tooltipElementMouseOut = function (e) {
    this.hideTooltip(this.animation.close, e, this.findTarget());
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseleave', this.tooltipElementMouseOut);
    this.clear();
  };

  Tooltip.prototype.onStickyClose = function (e) {
    this.close();
  };

  Tooltip.prototype.onMouseMove = function (event) {
    var eventPageX = 0;
    var eventPageY = 0;

    if (event.type.indexOf('touch') > -1) {
      event.preventDefault();
      eventPageX = event.touches[0].pageX;
      eventPageY = event.touches[0].pageY;
    } else {
      eventPageX = event.pageX;
      eventPageY = event.pageY;
    }

    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"].stop(this.tooltipEle);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.tooltipEle], POPUP_CLOSE);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.tooltipEle], POPUP_OPEN);
    this.adjustArrow(event.target, this.position, this.tooltipPositionX, this.tooltipPositionY);
    var scalingFactors = this.getScalingFactor(event.target);
    var pos = this.calculateTooltipOffset(this.position, scalingFactors.x, scalingFactors.y);
    var x = eventPageX + pos.left + this.offsetX;
    var y = eventPageY + pos.top + this.offsetY;
    var elePos = this.checkCollision(event.target, x, y);

    if (this.tooltipPositionX !== elePos.horizontal || this.tooltipPositionY !== elePos.vertical) {
      var newpos = this.position.indexOf('Bottom') === 0 || this.position.indexOf('Top') === 0 ? elePos.vertical + elePos.horizontal : elePos.horizontal + elePos.vertical;
      elePos.position = newpos;
      this.adjustArrow(event.target, elePos.position, elePos.horizontal, elePos.vertical);
      var colpos = this.calculateTooltipOffset(elePos.position, scalingFactors.x, scalingFactors.y);
      elePos.left = eventPageX + colpos.left - this.offsetX;
      elePos.top = eventPageY + colpos.top - this.offsetY;
    }

    this.tooltipEle.style.left = elePos.left + 'px';
    this.tooltipEle.style.top = elePos.top + 'px';
  };

  Tooltip.prototype.keyDown = function (event) {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.targetsList) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.target)) {
      var target = [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])(this.target, this.element));

      if (target.length !== this.targetsList.length) {
        this.unwireEvents(this.opensOn);
        this.wireEvents(this.opensOn);
      }
    }

    if (this.tooltipEle && event.keyCode === 27) {
      this.close();
    }
  };

  Tooltip.prototype.touchEnd = function (e) {
    if (this.tooltipEle && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + ROOT) === null && !this.isSticky) {
      this.close();
    }
  };

  Tooltip.prototype.scrollHandler = function (e) {
    if (this.tooltipEle && !this.isSticky) {
      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, "." + TOOLTIP_WRAP + "." + POPUP_LIB + "." + POPUP_ROOT)) {
        this.close();
      }
    }
  };
  /**
   * Core method that initializes the control rendering.
   *
   * @private
   * @returns {void}
   */


  Tooltip.prototype.render = function () {
    this.initialize();
    this.wireEvents(this.opensOn);
    this.renderComplete();
  };
  /**
   * Initializes the values of private members.
   *
   * @private
   * @returns {void}
   */


  Tooltip.prototype.preRender = function () {
    this.tipClass = TIP_BOTTOM;
    this.tooltipPositionX = 'Center';
    this.tooltipPositionY = 'Top';
    this.isHidden = true;
  };
  /**
   * Binding events to the Tooltip element.
   *
   * @hidden
   * @param {string} trigger - specify the trigger string to the function
   * @returns {void}
   *
   */


  Tooltip.prototype.wireEvents = function (trigger) {
    var triggerList = this.getTriggerList(trigger);

    for (var _i = 0, triggerList_1 = triggerList; _i < triggerList_1.length; _i++) {
      var opensOn = triggerList_1[_i];

      if (opensOn === 'Custom') {
        return;
      }

      if (opensOn === 'Focus') {
        this.wireFocusEvents();
      }

      if (opensOn === 'Click') {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchStartEvent, this.targetClick, this);
      }

      if (opensOn === 'Hover') {
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
          this.touchModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.element, {
            tapHoldThreshold: TAPHOLD_THRESHOLD,
            tapHold: this.tapHoldHandler.bind(this)
          });
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchEndEvent, this.touchEndHandler, this);
        } else {
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'mouseover', this.targetHover, this);
        }
      }
    }

    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'touchend', this.touchEnd, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'scroll wheel', this.scrollHandler, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(window, 'resize', this.windowResize, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'keydown', this.keyDown, this);
  };

  Tooltip.prototype.getTriggerList = function (trigger) {
    if (trigger === 'Auto') {
      trigger = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice ? 'Hover' : 'Hover Focus';
    }

    return trigger.split(' ');
  };

  Tooltip.prototype.wireFocusEvents = function () {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.target)) {
      if (this.element.nodeName !== "BODY") {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'focusin', this.targetHover, this);
      } else {
        var targetList = [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])(this.target, this.element));
        this.targetsList = targetList;

        for (var _i = 0, targetList_2 = targetList; _i < targetList_2.length; _i++) {
          var target = targetList_2[_i];
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(target, 'focus', this.targetHover, this);
        }
      }
    } else {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'focus', this.targetHover, this);
    }
  };

  Tooltip.prototype.wireMouseEvents = function (e, target) {
    if (this.tooltipEle) {
      if (!this.isSticky) {
        if (e.type === 'focus') {
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(target, 'blur', this.onMouseOut, this);
        }

        if (e.type === 'focusin') {
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(target, 'focusout', this.onMouseOut, this);
        }

        if (e.type === 'mouseover') {
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(target, 'mouseleave', this.onMouseOut, this);
        }

        if (this.closeDelay) {
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.tooltipEle, 'mouseenter', this.tooltipHover, this);
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.tooltipEle, 'mouseleave', this.tooltipMouseOut, this);
        }
      }

      if (this.mouseTrail && this.openDelay === 0) {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(target, 'mousemove touchstart mouseenter', this.onMouseMove, this);
      }
    }
  };
  /**
   * Unbinding events from the element on widget destroy.
   *
   * @hidden
   *
   * @param {string} trigger - specify the trigger string to the function
   * @returns {void}
   *
   */


  Tooltip.prototype.unwireEvents = function (trigger) {
    var triggerList = this.getTriggerList(trigger);

    for (var _i = 0, triggerList_2 = triggerList; _i < triggerList_2.length; _i++) {
      var opensOn = triggerList_2[_i];

      if (opensOn === 'Custom') {
        return;
      }

      if (opensOn === 'Focus') {
        this.unwireFocusEvents();
      }

      if (opensOn === 'Click') {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchStartEvent, this.targetClick);
      }

      if (opensOn === 'Hover') {
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
          if (this.touchModule) {
            this.touchModule.destroy();
          }

          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchEndEvent, this.touchEndHandler);
        } else {
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseover', this.targetHover);
        }
      }
    }

    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'touchend', this.touchEnd);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'scroll wheel', this.scrollHandler);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(window, 'resize', this.windowResize);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'keydown', this.keyDown);
  };

  Tooltip.prototype.unwireFocusEvents = function () {
    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.target)) {
      if (this.element.nodeName === 'BODY') {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'focusin', this.targetHover);
      } else {
        var targetList = [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])(this.target, this.element));

        for (var _i = 0, targetList_3 = targetList; _i < targetList_3.length; _i++) {
          var target = targetList_3[_i];
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, 'focus', this.targetHover);
        }
      }
    } else {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'focus', this.targetHover);
    }
  };

  Tooltip.prototype.unwireMouseEvents = function (target) {
    if (!this.isSticky) {
      var triggerList = this.getTriggerList(this.opensOn);

      for (var _i = 0, triggerList_3 = triggerList; _i < triggerList_3.length; _i++) {
        var opensOn = triggerList_3[_i];

        if (opensOn === 'Focus') {
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, 'blur', this.onMouseOut);
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, 'focusout', this.onMouseOut);
        }

        if (opensOn === 'Hover' && !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, 'mouseleave', this.onMouseOut);
        }
      }

      if (this.closeDelay) {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, 'mouseenter', this.tooltipHover);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, 'mouseleave', this.tooltipMouseOut);
      }
    }

    if (this.mouseTrail) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, 'mousemove touchstart mouseenter', this.onMouseMove);
    }
  };

  Tooltip.prototype.findTarget = function () {
    var target = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('[data-tooltip-id= "' + this.ctrlId + '_content"]', document);
    return target;
  };
  /**
   * Core method to return the component name.
   *
   * @private
   *
   * @returns {string} - this method returns module name.
   */


  Tooltip.prototype.getModuleName = function () {
    return 'tooltip';
  };
  /**
   * Returns the properties to be maintained in the persisted state.
   *
   * @private
   *
   * @returns {string} - this method returns persisted data.
   */


  Tooltip.prototype.getPersistData = function () {
    return this.addOnPersist([]);
  };
  /**
   * Called internally, if any of the property value changed.
   *
   * @private
   *
   * @param {TooltipModel} newProp - this param gives new property values to the method
   * @param {TooltipModel} oldProp - this param gives old property values to the method
   * @returns {void}
   *
   */


  Tooltip.prototype.onPropertyChanged = function (newProp, oldProp) {
    var targetElement = this.findTarget();

    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'width':
          if (this.tooltipEle && targetElement) {
            this.tooltipEle.style.width = this.tooltipEle.style.maxWidth = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.width);
            this.reposition(targetElement);
          }

          break;

        case 'height':
          if (this.tooltipEle && targetElement) {
            this.tooltipEle.style.height = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.height);
            this.reposition(targetElement);
          }

          break;

        case 'content':
          if (this.tooltipEle) {
            this.renderContent();
          }

          break;

        case 'opensOn':
          this.unwireEvents(oldProp.opensOn);
          this.wireEvents(newProp.opensOn);
          break;

        case 'position':
          this.formatPosition();

          if (this.tooltipEle && targetElement) {
            var arrowInnerELe = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + ARROW_TIP_INNER, this.tooltipEle);

            if (arrowInnerELe) {
              arrowInnerELe.style.top = arrowInnerELe.style.left = null;
            }

            this.reposition(targetElement);
          }

          break;

        case 'tipPointerPosition':
          if (this.tooltipEle && targetElement) {
            this.reposition(targetElement);
          }

          break;

        case 'offsetX':
          if (this.tooltipEle) {
            var x = newProp.offsetX - oldProp.offsetX;
            this.tooltipEle.style.left = (parseInt(this.tooltipEle.style.left, 10) + x).toString() + 'px';
          }

          break;

        case 'offsetY':
          if (this.tooltipEle) {
            var y = newProp.offsetY - oldProp.offsetY;
            this.tooltipEle.style.top = (parseInt(this.tooltipEle.style.top, 10) + y).toString() + 'px';
          }

          break;

        case 'cssClass':
          if (this.tooltipEle) {
            if (oldProp.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.tooltipEle], oldProp.cssClass.split(' '));
            }

            if (newProp.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.tooltipEle], newProp.cssClass.split(' '));
            }
          }

          break;

        case 'enableRtl':
          if (this.tooltipEle) {
            if (this.enableRtl) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.tooltipEle], RTL);
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.tooltipEle], RTL);
            }
          }

          break;

        case 'isSticky':
          if (this.tooltipEle && targetElement) {
            this.renderCloseIcon();
            this.reposition(targetElement);
          }

          break;

        case 'container':
          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.containerElement)) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.containerElement], POPUP_CONTAINER);
          }

          this.container = newProp.container;

          if (this.tooltipEle && targetElement) {
            this.appendContainer(this);
            this.reposition(targetElement);
          }

      }
    }
  };
  /**
   * It is used to show the Tooltip on the specified target with specific animation settings.
   *
   * @param {HTMLElement} element - Target element where the Tooltip is to be displayed. (It is an optional parameter)
   * @param {TooltipAnimationSettings} animation - Sets the specific animation, while showing the Tooltip on the screen. (It is an optional parameter)
   * @returns {void}
   */


  Tooltip.prototype.open = function (element, animation) {
    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(animation)) {
      animation = this.animation.open;
    }

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element)) {
      element = this.element;
    }

    if (element.style.display === 'none') {
      return;
    }

    this.showTooltip(element, animation);
  };
  /**
   * It is used to hide the Tooltip with specific animation effect.
   *
   * @param {TooltipAnimationSettings} animation - Sets the specific animation when hiding Tooltip from the screen. (It is an optional parameter)
   * @returns {void}
   */


  Tooltip.prototype.close = function (animation) {
    if (!animation) {
      animation = this.animation.close;
    }

    this.hideTooltip(animation);
  };
  /**
   * It is used to refresh the Tooltip content and its position.
   *
   * @param {HTMLElement} target - Target element where the Tooltip content or position needs to be refreshed.
   * @returns {void}
   */


  Tooltip.prototype.refresh = function (target) {
    if (this.tooltipEle) {
      this.renderContent(target);
    }

    if (this.popupObj && target) {
      this.reposition(target);
    }
  };
  /**
   * It is used to destroy the Tooltip component.
   * @method destroy
   * @returns {void}
   * @memberof Tooltip
   */


  Tooltip.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    if (this.tooltipEle) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.tooltipEle);
    }

    if (this.popupObj) {
      this.popupObj.destroy();
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], ROOT);
    this.unwireEvents(this.opensOn);
    this.unwireMouseEvents(this.element);
    this.tooltipEle = null;
    this.popupObj = null;
    var currentTarget = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('[data-tooltip-id= "' + this.ctrlId + '_content"]', this.element);

    for (var _i = 0, currentTarget_1 = currentTarget; _i < currentTarget_1.length; _i++) {
      var target = currentTarget_1[_i];
      this.restoreElement(target);
    }
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Tooltip.prototype, "width", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Tooltip.prototype, "height", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Tooltip.prototype, "content", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('body')], Tooltip.prototype, "container", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Tooltip.prototype, "target", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('TopCenter')], Tooltip.prototype, "position", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], Tooltip.prototype, "offsetX", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], Tooltip.prototype, "offsetY", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Tooltip.prototype, "showTipPointer", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Tooltip.prototype, "enableHtmlParse", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Tooltip.prototype, "windowCollision", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Auto')], Tooltip.prototype, "tipPointerPosition", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Auto')], Tooltip.prototype, "opensOn", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Tooltip.prototype, "mouseTrail", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Tooltip.prototype, "isSticky", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, Animation)], Tooltip.prototype, "animation", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], Tooltip.prototype, "openDelay", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], Tooltip.prototype, "closeDelay", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Tooltip.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Tooltip.prototype, "enableHtmlSanitizer", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Tooltip.prototype, "htmlAttributes", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tooltip.prototype, "beforeRender", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tooltip.prototype, "beforeOpen", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tooltip.prototype, "afterOpen", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tooltip.prototype, "beforeClose", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tooltip.prototype, "afterClose", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tooltip.prototype, "beforeCollision", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tooltip.prototype, "created", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tooltip.prototype, "destroyed", void 0);

  Tooltip = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Tooltip);
  return Tooltip;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-splitbuttons/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-splitbuttons/index.js ***!
  \************************************************************/
/*! exports provided: getModel, upDownKeyHandler, setBlankIconStyle, Item, DropDownButton, SplitButton, Deferred, createButtonGroup, SpinSettings, AnimationSettings, ProgressButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/index */ "./node_modules/@syncfusion/ej2-splitbuttons/src/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getModel", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["getModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "upDownKeyHandler", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["upDownKeyHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setBlankIconStyle", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["setBlankIconStyle"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Item", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Item"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DropDownButton", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["DropDownButton"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SplitButton", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["SplitButton"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Deferred", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["Deferred"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createButtonGroup", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["createButtonGroup"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpinSettings", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["SpinSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnimationSettings", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["AnimationSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProgressButton", function() { return _src_index__WEBPACK_IMPORTED_MODULE_0__["ProgressButton"]; });

/**
 * index
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-splitbuttons/src/button-group/button-group.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-splitbuttons/src/button-group/button-group.js ***!
  \************************************************************************************/
/*! exports provided: createButtonGroup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createButtonGroup", function() { return createButtonGroup; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ "./node_modules/@syncfusion/ej2-buttons/index.js");


/**
 * Initialize ButtonGroup CSS component with specified properties.
 * ```html
 * <div id='buttongroup'>
 * <button></button>
 * <button></button>
 * <button></button>
 * </div>
 * ```
 * ```typescript
 * createButtonGroup('#buttongroup', {
 *   cssClass: 'e-outline',
 *   buttons: [
 *       { content: 'Day' },
 *       { content: 'Week' },
 *       { content: 'Work Week'}
 *   ]
 * });
 * ```
 *
 * @param {string} selector
 * @param {CreateButtonGroupModel} options
 * @returns HTMLElement
 */

/**
 * Creates button group.
 *
 * @param {string} selector - Specifies the selector.
 * @param {CreateButtonGroupModel} options - Specifies the button group model.
 * @param {Function} createElement - Specifies the element.
 * @returns {HTMLElement} - Button group element.
 */

function createButtonGroup(selector, options, createElement) {
  if (options === void 0) {
    options = {};
  }

  var child;
  var btnElem;
  var nextChild;
  var btnModel;

  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(createElement)) {
    createElement = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"];
  }

  var wrapper = document.querySelector(selector);
  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([wrapper], ['e-btn-group', 'e-css']);
  wrapper.setAttribute('role', 'group');
  var childs = wrapper.children;
  options.buttons = options.buttons || [];

  for (var i = 0, j = 0; j < childs.length; i++, j++) {
    child = childs[j];
    btnModel = options.buttons[i];

    if (btnModel !== null) {
      if (child.tagName === 'BUTTON') {
        btnElem = child;
      } else {
        btnElem = createElement('label');
        nextChild = childs[j + 1];

        if (nextChild) {
          wrapper.insertBefore(btnElem, nextChild);
        } else {
          wrapper.appendChild(btnElem);
        }

        if (child.id) {
          btnElem.setAttribute('for', child.id);
        }

        if (btnModel && btnModel.disabled) {
          child.disabled = true;
        }

        j++;
      }

      if (options.cssClass && btnModel && !btnModel.cssClass) {
        btnModel.cssClass = options.cssClass;
      }

      new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__["Button"](btnModel || {}, btnElem);
    }
  }

  return wrapper;
}

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-splitbuttons/src/button-group/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-splitbuttons/src/button-group/index.js ***!
  \*****************************************************************************/
/*! exports provided: createButtonGroup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _button_group__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button-group */ "./node_modules/@syncfusion/ej2-splitbuttons/src/button-group/button-group.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createButtonGroup", function() { return _button_group__WEBPACK_IMPORTED_MODULE_0__["createButtonGroup"]; });

/**
 * ButtonGroup modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-splitbuttons/src/common/common.js":
/*!************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-splitbuttons/src/common/common.js ***!
  \************************************************************************/
/*! exports provided: getModel, upDownKeyHandler, setBlankIconStyle, Item */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getModel", function() { return getModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "upDownKeyHandler", function() { return upDownKeyHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setBlankIconStyle", function() { return setBlankIconStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Item", function() { return Item; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};


/**
 * @param {Object} props - Specifies the properties
 * @param {string[]} model - Specifies the model
 * @returns {Object} Component Model
 */

function getModel(props, model) {
  var obj = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, props);

  for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {
    var prop = _a[_i];

    if (model.indexOf(prop) < 0) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["deleteObject"])(obj, prop);
    }
  }

  return obj;
}
/** @hidden
 * @param {HTMLElement} ul - Specifies the UL element
 * @param {number} keyCode - Specifies the keycode
 * @returns {void}
 */

function upDownKeyHandler(ul, keyCode) {
  var defaultIdx = keyCode === 40 ? 0 : ul.childElementCount - 1;
  var liIdx = defaultIdx;
  var li;
  var selectedLi = ul.querySelector('.e-selected');

  if (selectedLi) {
    selectedLi.classList.remove('e-selected');
  }

  for (var i = 0, len = ul.children.length; i < len; i++) {
    if (ul.children[i].classList.contains('e-focused')) {
      li = ul.children[i];
      liIdx = i;
      li.classList.remove('e-focused');

      if (keyCode === 40) {
        liIdx++;
      } else {
        liIdx--;
      }

      if (liIdx === (keyCode === 40 ? ul.childElementCount : -1)) {
        liIdx = defaultIdx;
      }
    }
  }

  li = ul.children[liIdx];
  liIdx = isValidLI(ul, li, liIdx, keyCode);

  if (liIdx !== -1) {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([ul.children[liIdx]], 'e-focused');
    ul.children[liIdx].focus();
  }
}
/**
 * Get Valid LI element
 *
 * @param {HTMLElement} ul - Specifies the UL element
 * @param {Element} li - Specifies the LI element
 * @param {number} index - Specifies the index
 * @param {number} keyCode - Specifies the keycode
 * @param {number} count - Specifies the count
 * @returns {number} - Index
 */

function isValidLI(ul, li, index, keyCode, count) {
  if (count === void 0) {
    count = 0;
  }

  if (li.classList.contains('e-separator') || li.classList.contains('e-disabled')) {
    if (index === (keyCode === 40 ? ul.childElementCount - 1 : 0)) {
      index = keyCode === 40 ? 0 : ul.childElementCount - 1;
    } else {
      if (keyCode === 40) {
        index++;
      } else {
        index--;
      }
    }
  }

  li = ul.children[index];

  if (li.classList.contains('e-separator') || li.classList.contains('e-disabled')) {
    count++;

    if (count === ul.childElementCount) {
      return index = -1;
    }

    index = isValidLI(ul, li, index, keyCode, count);
  }

  return index;
}
/** @hidden
 * @param {HTMLElement} popup - Specifies the popup element.
 * @returns {void}
 */


function setBlankIconStyle(popup, blankIcon) {
  var blankIconList = [].slice.call(popup.getElementsByClassName('e-blank-icon'));

  if (blankIcon) {
    var menuItem = [].slice.call(popup.getElementsByClassName('e-item'));
    menuItem.forEach(function (li) {
      if (li.style.paddingLeft || li.style.paddingRight) {
        li.removeAttribute('style');
      }
    });
  }

  if (!blankIconList.length) {
    return;
  }

  var iconLi = popup.querySelector('.e-item:not(.e-blank-icon):not(.e-separator)');

  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(iconLi)) {
    return;
  }

  if (iconLi.classList.contains('e-url')) {
    iconLi = iconLi.querySelector('.e-menu-url');
  }

  var icon = iconLi.querySelector('.e-menu-icon');
  var cssProp;
  var enableRtl = popup.classList.contains('e-rtl');

  if (enableRtl) {
    cssProp = {
      padding: 'paddingRight',
      margin: 'marginLeft'
    };
  } else {
    cssProp = {
      padding: 'paddingLeft',
      margin: 'marginRight'
    };
  }
  /* eslint-disable */


  var size = parseInt(getComputedStyle(icon).fontSize, 10) + parseInt(enableRtl ? getComputedStyle(icon)[cssProp.margin] : getComputedStyle(icon)[cssProp.margin], 10) + parseInt(getComputedStyle(iconLi).paddingLeft, 10) + "px";
  blankIconList.forEach(function (li) {
    if (li.classList.contains('e-url')) {
      li.querySelector('.e-menu-url').style[cssProp.padding] = size;
    } else {
      li.style[cssProp.padding] = size;
    }
  });
  /* eslint-enable */
}
/**
 * Defines the items of Split Button/DropDownButton.
 */

var Item =
/** @class */
function (_super) {
  __extends(Item, _super);

  function Item() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "iconCss", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "id", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Item.prototype, "separator", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "text", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "url", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Item.prototype, "disabled", void 0);

  return Item;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-splitbuttons/src/common/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-splitbuttons/src/common/index.js ***!
  \***********************************************************************/
/*! exports provided: getModel, upDownKeyHandler, setBlankIconStyle, Item */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common */ "./node_modules/@syncfusion/ej2-splitbuttons/src/common/common.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getModel", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["getModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "upDownKeyHandler", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["upDownKeyHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setBlankIconStyle", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["setBlankIconStyle"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Item", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["Item"]; });

/**
 * Common modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-splitbuttons/src/drop-down-button/drop-down-button.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-splitbuttons/src/drop-down-button/drop-down-button.js ***!
  \********************************************************************************************/
/*! exports provided: DropDownButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DropDownButton", function() { return DropDownButton; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ "./node_modules/@syncfusion/ej2-buttons/index.js");
/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-popups */ "./node_modules/@syncfusion/ej2-popups/index.js");
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../common/common */ "./node_modules/@syncfusion/ej2-splitbuttons/src/common/common.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};









var classNames = {
  DISABLED: 'e-disabled',
  FOCUS: 'e-focused',
  ICON: 'e-menu-icon',
  ITEM: 'e-item',
  POPUP: 'e-dropdown-popup',
  RTL: 'e-rtl',
  SEPARATOR: 'e-separator',
  VERTICAL: 'e-vertical'
};
/**
 * DropDownButton component is used to toggle contextual overlays for displaying list of action items.
 * It can contain both text and images.
 * ```html
 * <button id="element">DropDownButton</button>
 * ```
 * ```typescript
 * <script>
 * var dropDownButtonObj = new DropDownButton({items: [{ text: 'Action1' }, { text: 'Action2' },{ text: 'Action3' }]);
 * dropDownButtonObj.appendTo("#element");
 * </script>
 * ```
 */

var DropDownButton =
/** @class */
function (_super) {
  __extends(DropDownButton, _super);
  /**
   * Constructor for creating the widget
   *
   * @param  {DropDownButtonModel} options - Specifies dropdown button model
   * @param  {string|HTMLButtonElement} element - Specifies element
   * @hidden
   */


  function DropDownButton(options, element) {
    var _this = _super.call(this, options, element) || this;

    _this.isPopupCreated = true;
    return _this;
  }

  DropDownButton.prototype.preRender = function () {
    /** */
  };
  /**
   * Get the properties to be maintained in the persisted state.
   *
   * @returns {string} - Persist data
   */


  DropDownButton.prototype.getPersistData = function () {
    return this.addOnPersist([]);
  };
  /**
   * To open/close DropDownButton popup based on current state of the DropDownButton.
   *
   * @returns {void}
   */


  DropDownButton.prototype.toggle = function () {
    if (this.canOpen()) {
      this.openPopUp();
    } else if (this.createPopupOnClick && !this.isPopupCreated) {
      this.createPopup();
      this.openPopUp();
    } else {
      this.closePopup();
    }
  };
  /**
   * Initialize the Component rendering
   *
   * @returns {void}
   * @private
   */


  DropDownButton.prototype.render = function () {
    this.initialize();

    if (!this.disabled) {
      this.wireEvents();
    }

    this.renderComplete();
  };
  /**
   * Adds a new item to the menu. By default, new item appends to the list as the last item,
   * but you can insert based on the text parameter.
   *
   * @param  { ItemModel[] } items - Specifies an array of JSON data.
   * @param { string } text - Specifies the text to insert the newly added item in the menu.
   * @returns {void}.
   */


  DropDownButton.prototype.addItems = function (items, text) {
    var newItem;
    var idx = this.items.length;

    for (var j = 0, len = this.items.length; j < len; j++) {
      if (text === this.items[j].text) {
        idx = j;
        break;
      }
    }

    for (var i = items.length - 1; i >= 0; i--) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      newItem = new _common_common__WEBPACK_IMPORTED_MODULE_3__["Item"](this, 'items', items[i], true);
      this.items.splice(idx, 0, newItem);
    }

    if (!this.canOpen()) {
      this.createItems();
    }
  };
  /**
   * Removes the items from the menu.
   *
   * @param  { string[] } items - Specifies an array of string to remove the items.
   * @param { string } isUniqueId - Set `true` if specified items is a collection of unique id.
   * @returns {void}.
   */


  DropDownButton.prototype.removeItems = function (items, isUniqueId) {
    var refresh = false;

    for (var i = 0, len = items.length; i < len; i++) {
      for (var j = 0, len_1 = this.items.length; j < len_1; j++) {
        if (items[i] === (isUniqueId ? this.items[j].id : this.items[j].text)) {
          this.items.splice(j, 1);
          refresh = true;
          break;
        }
      }
    }

    if (refresh && this.getULElement()) {
      this.createItems();
    }
  };

  DropDownButton.prototype.createPopup = function () {
    var _a;

    var div = this.createElement('div', {
      className: classNames.POPUP,
      id: this.element.id + '-popup'
    });
    document.body.appendChild(div);
    this.dropDown = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["Popup"](div, {
      relateTo: this.element,
      collision: {
        X: 'fit',
        Y: 'flip'
      },
      position: {
        X: 'left',
        Y: 'bottom'
      },
      targetType: 'relative',
      content: this.target ? this.getTargetElement() : '',
      enableRtl: this.enableRtl
    });

    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.popupContent)) {
      this.popupContent.style.display = '';
    }

    if (this.dropDown.element.style.position === 'fixed') {
      this.dropDown.refreshPosition(this.element);
    }

    this.dropDown.hide();
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, (_a = {}, _a['aria-haspopup'] = this.items.length || this.target ? 'true' : 'false', _a['aria-expanded'] = 'false', _a['type'] = 'button', _a['aria-label'] = this.element.textContent ? this.element.textContent : 'dropdownbutton', _a));

    if (this.cssClass) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([div], this.cssClass.replace(/\s+/g, ' ').trim().split(' '));
    }

    this.isPopupCreated = true;
  };

  DropDownButton.prototype.getTargetElement = function () {
    if (this.createPopupOnClick && !this.isColorPicker() && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.popupContent)) {
      return this.popupContent;
    }

    return typeof this.target === 'string' ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])(this.target) : this.target;
  };

  DropDownButton.prototype.createItems = function (appendItems) {
    var items = this.items;
    var showIcon = this.hasIcon(this.items, 'iconCss');
    var span;
    var item;
    var li;
    var eventArgs;
    var ul = this.getULElement();

    if (ul) {
      ul.innerHTML = '';
    } else {
      ul = this.createElement('ul', {
        attrs: {
          'role': 'menu',
          'tabindex': '0'
        }
      });
    }

    for (var i = 0; i < items.length; i++) {
      item = items[i];
      var tempItem = item.text;
      li = this.createElement('li', {
        innerHTML: item.url ? '' : tempItem,
        className: item.separator ? classNames.ITEM + ' ' + classNames.SEPARATOR : classNames.ITEM,
        attrs: item.separator ? {
          'role': 'separator',
          'tabindex': '-1'
        } : {
          'role': 'menuitem',
          'tabindex': '-1',
          'aria-label': tempItem
        },
        id: item.id ? item.id : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('e-' + this.getModuleName() + '-item')
      });

      if (this.enableHtmlSanitizer) {
        li.textContent = item.url ? '' : tempItem;
      } else {
        li.innerHTML = item.url ? '' : tempItem;
      }

      if (item.url) {
        li.appendChild(this.createAnchor(item));
        li.classList.add('e-url');
      }

      if (item.iconCss) {
        span = this.createElement('span', {
          className: classNames.ICON + ' ' + item.iconCss
        });

        if (item.url) {
          li.childNodes[0].appendChild(span);
        } else {
          li.insertBefore(span, li.childNodes[0]);
        }
      } else {
        if (showIcon && !item.separator) {
          li.classList.add('e-blank-icon');
        }
      }

      if (item.disabled) {
        li.classList.add('e-disabled');
      }

      eventArgs = {
        item: item,
        element: li
      };
      this.trigger('beforeItemRender', eventArgs);
      ul.appendChild(li);
    }

    if (appendItems) {
      this.getPopUpElement().appendChild(ul);
    }

    if (showIcon) {
      Object(_common_common__WEBPACK_IMPORTED_MODULE_3__["setBlankIconStyle"])(this.getPopUpElement());
    }
  };

  DropDownButton.prototype.hasIcon = function (items, field) {
    for (var i = 0, len = items.length; i < len; i++) {
      if (items[i]["" + field]) {
        return true;
      }
    }

    return false;
  };

  DropDownButton.prototype.createAnchor = function (item) {
    var tempItem = this.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(item.text) : item.text;
    return this.createElement('a', {
      className: 'e-menu-text e-menu-url',
      innerHTML: tempItem,
      attrs: {
        'href': item.url
      }
    });
  };

  DropDownButton.prototype.initialize = function () {
    this.button = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__["Button"]({
      iconCss: this.iconCss,
      iconPosition: this.iconPosition,
      cssClass: this.cssClass,
      content: this.content,
      disabled: this.disabled,
      enableRtl: this.enableRtl,
      enablePersistence: this.enablePersistence
    });
    this.button.createElement = this.createElement;
    this.button.appendTo(this.element);

    if (!this.element.id) {
      this.element.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('e-' + this.getModuleName());
    }

    this.appendArrowSpan();
    this.setActiveElem([this.element]);

    if (this.target && !this.isColorPicker() && !this.createPopupOnClick || !this.createPopupOnClick) {
      this.createPopup();
    } else {
      this.isPopupCreated = false;

      if (this.target && !this.isColorPicker() && this.createPopupOnClick) {
        this.popupContent = this.getTargetElement();
        this.popupContent.style.display = 'none';
      }
    }
  };

  DropDownButton.prototype.isColorPicker = function () {
    if (!this.element) {
      return false;
    }

    var prevElem = this.element.previousSibling;

    if (prevElem && prevElem.classList && prevElem.classList.contains('e-split-colorpicker')) {
      return true;
    }

    return false;
  };

  DropDownButton.prototype.appendArrowSpan = function () {
    this.element.appendChild(this.createElement('span', {
      className: 'e-btn-icon e-icons ' + 'e-icon-' + (this.cssClass.indexOf(classNames.VERTICAL) > -1 ? 'bottom' : 'right') + ' e-caret'
    }));
  };

  DropDownButton.prototype.setActiveElem = function (elem) {
    this.activeElem = elem;
  };
  /**
   * Get component name.
   *
   * @returns {string} - Module Name
   * @private
   */


  DropDownButton.prototype.getModuleName = function () {
    return 'dropdown-btn';
  };

  DropDownButton.prototype.canOpen = function () {
    var val = false;

    if (this.isPopupCreated) {
      val = this.getPopUpElement().classList.contains('e-popup-close');
    }

    return val;
  };
  /**
   * Destroys the widget.
   *
   * @returns {void}
   */


  DropDownButton.prototype.destroy = function () {
    var _this = this;

    _super.prototype.destroy.call(this);

    if (this.getModuleName() === 'dropdown-btn') {
      var classList_1;

      if (this.element.querySelector('span.e-caret')) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.element.querySelector('span.e-caret'));
      }

      if (this.cssClass) {
        classList_1 = this.cssClass.split(' ');
      }

      this.button.destroy();

      if (classList_1) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], classList_1);
      }

      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(this.activeElem, ['e-active']);
      var attrList = this.element.getAttribute('class') ? ['aria-haspopup', 'aria-expanded', 'aria-owns', 'type'] : ['aria-haspopup', 'aria-expanded', 'aria-owns', 'type', 'class'];
      attrList.forEach(function (key) {
        _this.element.removeAttribute(key);
      });
      this.popupUnWireEvents();
      this.destroyPopup();
      this.isPopupCreated = false;

      if (!this.disabled) {
        this.unWireEvents();
      }
    }
  };

  DropDownButton.prototype.destroyPopup = function () {
    if (this.isPopupCreated) {
      this.dropDown.destroy();

      if (this.getPopUpElement()) {
        var popupEle = document.getElementById(this.getPopUpElement().id);

        if (popupEle) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([popupEle], ['e-popup-open', 'e-popup-close']);
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(popupEle);
        }
      }

      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.getPopUpElement(), 'click', this.clickHandler);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.getPopUpElement(), 'keydown', this.keyBoardHandler);

      if (this.isPopupCreated && this.dropDown) {
        this.dropDown.element = null;
        this.dropDown = undefined;
      }
    }

    this.isPopupCreated = false;
  };

  DropDownButton.prototype.getPopUpElement = function () {
    var val = null;

    if (!this.dropDown && this.activeElem[0].classList.contains('e-split-btn')) {
      var dropDownBtn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getComponent"])(this.activeElem[1], 'dropdown-btn');

      if (dropDownBtn) {
        this.dropDown = dropDownBtn.dropDown;
      }
    }

    if (this.dropDown) {
      val = this.dropDown.element;
    }

    return val;
  };

  DropDownButton.prototype.getULElement = function () {
    var val = null;

    if (this.getPopUpElement()) {
      val = this.getPopUpElement().children[0];
    }

    return val;
  };

  DropDownButton.prototype.wireEvents = function () {
    this.delegateMousedownHandler = this.mousedownHandler.bind(this);

    if (!this.createPopupOnClick) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mousedown touchstart', this.delegateMousedownHandler, this);
    }

    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'click', this.clickHandler, this);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keydown', this.keyBoardHandler, this);
  };

  DropDownButton.prototype.popupWireEvents = function () {
    if (!this.delegateMousedownHandler) {
      this.delegateMousedownHandler = this.mousedownHandler.bind(this);
    }

    var popupElement = this.getPopUpElement();

    if (this.createPopupOnClick) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mousedown touchstart', this.delegateMousedownHandler, this);
    }

    if (popupElement) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(popupElement, 'click', this.clickHandler, this);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(popupElement, 'keydown', this.keyBoardHandler, this);

      if (this.closeActionEvents) {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(popupElement, this.closeActionEvents, this.focusoutHandler, this);
      }
    }

    this.rippleFn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(popupElement, {
      selector: '.' + classNames.ITEM
    });
  };

  DropDownButton.prototype.popupUnWireEvents = function () {
    var popupElement = this.getPopUpElement();

    if (this.createPopupOnClick) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mousedown touchstart', this.delegateMousedownHandler);
    }

    if (popupElement && popupElement.parentElement) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(popupElement, 'click', this.clickHandler);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(popupElement, 'keydown', this.keyBoardHandler);

      if (this.closeActionEvents) {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(popupElement, this.closeActionEvents, this.focusoutHandler);
      }
    }

    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isRippleEnabled"] && this.rippleFn) {
      this.rippleFn();
    }
  };
  /**
   * Handles the keyboard interactions.
   *
   * @param {KeyboardEventArgs} e - Specifies keyboard event args.
   * @returns {void}
   * @hidden
   */


  DropDownButton.prototype.keyBoardHandler = function (e) {
    if (e.target === this.element && (e.keyCode === 9 || !e.altKey && e.keyCode === 40 || e.keyCode === 38)) {
      return;
    }

    switch (e.keyCode) {
      case 38:
      case 40:
        if (e.altKey && (e.keyCode === 38 || e.keyCode === 40)) {
          this.keyEventHandler(e);
        } else {
          this.upDownKeyHandler(e);
        }

        break;

      case 9:
      case 13:
      case 27:
      case 32:
        this.keyEventHandler(e);
        break;
    }
  };

  DropDownButton.prototype.upDownKeyHandler = function (e) {
    if (this.target && (e.keyCode === 38 || e.keyCode === 40)) {
      return;
    }

    e.preventDefault();
    Object(_common_common__WEBPACK_IMPORTED_MODULE_3__["upDownKeyHandler"])(this.getULElement(), e.keyCode);
  };

  DropDownButton.prototype.keyEventHandler = function (e) {
    if (this.target && (e.keyCode === 13 || e.keyCode === 9)) {
      return;
    }

    if (e.keyCode === 13 && this.activeElem[0].classList.contains('e-split-btn')) {
      this.activeElem[0].focus();
      return;
    }

    if (e.target && e.target.className.indexOf('e-edit-template') > -1 && e.keyCode === 32) {
      return;
    }

    if (e.keyCode !== 9) {
      e.preventDefault();
    }

    if (e.keyCode === 27 || e.keyCode === 38 || e.keyCode === 9) {
      if (!this.canOpen()) {
        this.closePopup(e, this.element);
      }
    } else {
      this.clickHandler(e);
    }
  };

  DropDownButton.prototype.getLI = function (elem) {
    return elem.tagName === 'LI' ? elem : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(elem, 'li');
  };

  DropDownButton.prototype.mousedownHandler = function (e) {
    var trgt = e.target;

    if (this.dropDown && !this.canOpen() && !(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '[id="' + this.getPopUpElement().id + '"]') || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '[id="' + this.element.id + '"]'))) {
      this.closePopup(e);
    }
  };

  DropDownButton.prototype.focusoutHandler = function (e) {
    if (this.isPopupCreated && !this.canOpen()) {
      var liTarget = e.relatedTarget;

      if (liTarget && liTarget.className.indexOf('e-item') > -1) {
        var li = this.getLI(liTarget);

        if (li) {
          var liIdx = Array.prototype.indexOf.call(this.getULElement().children, li);
          var item = this.items[liIdx];

          if (item) {
            var selectEventArgs = {
              element: li,
              item: item
            };
            this.trigger('select', selectEventArgs);
          }
        }
      }

      this.closePopup(e);
    }
  };

  DropDownButton.prototype.clickHandler = function (e) {
    var trgt = e.target;

    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '[id="' + this.element.id + '"]')) {
      if (!this.createPopupOnClick || this.target && this.target !== '' && !this.isColorPicker() && !this.createPopupOnClick) {
        if (this.getPopUpElement().classList.contains('e-popup-close')) {
          this.openPopUp(e);
        } else {
          this.closePopup(e);
        }
      } else if (this.isPopupCreated) {
        this.closePopup(e, this.activeElem[0]);
      } else {
        this.createPopup();
        this.openPopUp(e);
      }
    } else {
      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '[id="' + this.getPopUpElement().id + '"]')) {
        var eventArgs = void 0;
        var liIdx = void 0;
        var item = void 0;
        var li = this.getLI(trgt);

        if (li) {
          liIdx = Array.prototype.indexOf.call(this.getULElement().children, li);
          item = this.items[liIdx];

          if (item) {
            eventArgs = {
              element: li,
              item: item
            };
            this.trigger('select', eventArgs);
          }

          this.closePopup(e, this.activeElem[0]);
        }
      }
    }
  };

  DropDownButton.prototype.openPopUp = function (e) {
    var _this = this;

    if (e === void 0) {
      e = null;
    }

    var isReact = false;
    var popupElem = this.getPopUpElement();

    if (!this.target) {
      this.createItems(true);
    } else {
      if (this.activeElem.length > 1) {
        var splitButton = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getComponent"])(this.activeElem[0], 'split-btn'); // eslint-disable-next-line @typescript-eslint/no-explicit-any

        if (splitButton.isReact && popupElem.childNodes.length < 1) {
          isReact = true; // eslint-disable-next-line @typescript-eslint/no-explicit-any

          splitButton.appendReactElement(this.getTargetElement(), this.getPopUpElement());
          this.renderReactTemplates();
        }
      } else {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if (this.isReact && popupElem.childNodes.length < 1) {
          isReact = true; // eslint-disable-next-line @typescript-eslint/no-explicit-any

          this.appendReactElement(this.getTargetElement(), this.getPopUpElement());
          this.renderReactTemplates();
        }
      }
    }

    var ul = this.getULElement();
    this.popupWireEvents();
    var beforeOpenArgs = {
      element: ul,
      items: this.items,
      event: e,
      cancel: false
    };
    this.trigger('beforeOpen', beforeOpenArgs, function (observedArgs) {
      if (!observedArgs.cancel) {
        var ul_1 = _this.getULElement();

        _this.dropDown.show(null, _this.element);

        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this.element], 'e-active');

        _this.element.setAttribute('aria-expanded', 'true');

        _this.element.setAttribute('aria-owns', _this.getPopUpElement().id);

        if (ul_1) {
          ul_1.focus();
        }

        if (_this.enableRtl && ul_1.parentElement.style.left !== '0px') {
          var wrapperWidth = void 0;

          if (_this.element.parentElement && _this.element.parentElement.classList.contains('e-split-btn-wrapper')) {
            wrapperWidth = _this.element.parentElement.offsetWidth;
          } else {
            wrapperWidth = _this.element.offsetWidth;
          }

          var popupRect = ul_1.parentElement.offsetWidth - wrapperWidth;
          var popupLeft = parseFloat(ul_1.parentElement.style.left) - popupRect;

          if (popupLeft < 0) {
            popupLeft = 0;
          }

          ul_1.parentElement.style.left = popupLeft + "px";
        }

        var openArgs = {
          element: ul_1,
          items: _this.items
        };

        _this.trigger('open', openArgs);
      }
    });
  };

  DropDownButton.prototype.closePopup = function (e, focusEle) {
    var _this = this;

    if (e === void 0) {
      e = null;
    }

    var ul = this.getULElement();
    var beforeCloseArgs = {
      element: ul,
      items: this.items,
      event: e,
      cancel: false
    };
    this.trigger('beforeClose', beforeCloseArgs, function (observedArgs) {
      if (!observedArgs.cancel) {
        var popupElement = _this.getPopUpElement();

        if (popupElement) {
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(popupElement, 'keydown', _this.keyBoardHandler);
        }

        _this.popupUnWireEvents();

        var ul_2 = _this.getULElement();

        var selectedLi = void 0;

        if (ul_2) {
          selectedLi = ul_2.querySelector('.e-selected');
        }

        if (selectedLi) {
          selectedLi.classList.remove('e-selected');
        }

        _this.dropDown.hide();

        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(_this.activeElem, 'e-active');

        _this.element.setAttribute('aria-expanded', 'false');

        _this.element.removeAttribute('aria-owns');

        if (focusEle) {
          focusEle.focus();
        }

        var closeArgs = {
          element: ul_2,
          items: _this.items
        };

        _this.trigger('close', closeArgs);

        if (!_this.target && ul_2) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(ul_2);
        }

        if (!_this.target || _this.isColorPicker() || _this.target && !_this.isColorPicker()) {
          if (_this.createPopupOnClick) {
            _this.destroyPopup();
          }
        }
      } else {
        if (ul) {
          ul.focus();
        }
      }
    });
  };

  DropDownButton.prototype.unWireEvents = function () {
    if (!this.createPopupOnClick) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mousedown touchstart', this.delegateMousedownHandler);
    }

    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'click', this.clickHandler);
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keydown', this.keyBoardHandler);

    if (this.isPopupCreated) {
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.getPopUpElement(), 'click', this.clickHandler);
      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.getPopUpElement(), 'keydown', this.keyBoardHandler);
    }
  };
  /**
   * Called internally if any of the property value changed.
   *
   * @param  {DropDownButtonModel} newProp - Specifies new properties
   * @param  {DropDownButtonModel} oldProp - Specifies old properties
   * @returns {void}
   * @private
   */


  DropDownButton.prototype.onPropertyChanged = function (newProp, oldProp) {
    var btnModel = ['content', 'cssClass', 'iconCss', 'iconPosition', 'disabled', 'enableRtl'];
    this.button.setProperties(Object(_common_common__WEBPACK_IMPORTED_MODULE_3__["getModel"])(newProp, btnModel));
    var popupElement;

    if (this.isPopupCreated) {
      popupElement = this.getPopUpElement();
      this.dropDown.setProperties(Object(_common_common__WEBPACK_IMPORTED_MODULE_3__["getModel"])(newProp, ['enableRtl']));
    }

    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'content':
          if (!this.element.querySelector('span.e-caret')) {
            this.appendArrowSpan();
          }

          break;

        case 'disabled':
          if (newProp.disabled) {
            this.unWireEvents();

            if (this.isPopupCreated && !this.canOpen()) {
              this.closePopup();
            }
          } else {
            this.wireEvents();
          }

          break;

        case 'cssClass':
          if (newProp.cssClass.indexOf(classNames.VERTICAL) > -1 || oldProp.cssClass.indexOf(classNames.VERTICAL) > -1) {
            if (!this.element.querySelector('span.e-caret')) {
              this.appendArrowSpan();
            }

            var arrowSpan = this.element.querySelector('span.e-caret');
            newProp.cssClass.indexOf(classNames.VERTICAL) > -1 ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(arrowSpan, ['e-icon-bottom'], ['e-icon-right']) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(arrowSpan, ['e-icon-right'], ['e-icon-bottom']);
          }

          if (this.isPopupCreated) {
            if (oldProp.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([popupElement], oldProp.cssClass.split(' '));
            }

            if (newProp.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([popupElement], newProp.cssClass.replace(/\s+/g, ' ').trim().split(' '));
            }
          }

          break;

        case 'target':
          this.dropDown.content = this.getTargetElement();
          this.dropDown.dataBind();
          break;

        case 'items':
          if (this.isPopupCreated && this.getULElement()) {
            this.createItems();
          }

          break;

        case 'createPopupOnClick':
          if (newProp.createPopupOnClick) {
            this.destroyPopup();
          } else {
            this.createPopup();
          }

          break;
      }
    }
  };
  /**
   * Sets the focus to DropDownButton
   * its native method
   *
   * @public
   * @returns {void}
   */


  DropDownButton.prototype.focusIn = function () {
    this.element.focus();
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], DropDownButton.prototype, "content", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], DropDownButton.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], DropDownButton.prototype, "disabled", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], DropDownButton.prototype, "iconCss", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Left')], DropDownButton.prototype, "iconPosition", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], DropDownButton.prototype, "enableHtmlSanitizer", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([], _common_common__WEBPACK_IMPORTED_MODULE_3__["Item"])], DropDownButton.prototype, "items", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], DropDownButton.prototype, "createPopupOnClick", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], DropDownButton.prototype, "target", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], DropDownButton.prototype, "closeActionEvents", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownButton.prototype, "beforeItemRender", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownButton.prototype, "beforeOpen", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownButton.prototype, "beforeClose", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownButton.prototype, "close", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownButton.prototype, "open", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownButton.prototype, "select", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownButton.prototype, "created", void 0);

  DropDownButton = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], DropDownButton);
  return DropDownButton;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-splitbuttons/src/drop-down-button/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-splitbuttons/src/drop-down-button/index.js ***!
  \*********************************************************************************/
/*! exports provided: DropDownButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _drop_down_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./drop-down-button */ "./node_modules/@syncfusion/ej2-splitbuttons/src/drop-down-button/drop-down-button.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DropDownButton", function() { return _drop_down_button__WEBPACK_IMPORTED_MODULE_0__["DropDownButton"]; });

/**
 * DropDownButton modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-splitbuttons/src/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-splitbuttons/src/index.js ***!
  \****************************************************************/
/*! exports provided: getModel, upDownKeyHandler, setBlankIconStyle, Item, DropDownButton, SplitButton, Deferred, createButtonGroup, SpinSettings, AnimationSettings, ProgressButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common/index */ "./node_modules/@syncfusion/ej2-splitbuttons/src/common/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getModel", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["getModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "upDownKeyHandler", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["upDownKeyHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setBlankIconStyle", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["setBlankIconStyle"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Item", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["Item"]; });

/* harmony import */ var _drop_down_button_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./drop-down-button/index */ "./node_modules/@syncfusion/ej2-splitbuttons/src/drop-down-button/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DropDownButton", function() { return _drop_down_button_index__WEBPACK_IMPORTED_MODULE_1__["DropDownButton"]; });

/* harmony import */ var _split_button_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./split-button/index */ "./node_modules/@syncfusion/ej2-splitbuttons/src/split-button/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SplitButton", function() { return _split_button_index__WEBPACK_IMPORTED_MODULE_2__["SplitButton"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Deferred", function() { return _split_button_index__WEBPACK_IMPORTED_MODULE_2__["Deferred"]; });

/* harmony import */ var _button_group_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./button-group/index */ "./node_modules/@syncfusion/ej2-splitbuttons/src/button-group/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createButtonGroup", function() { return _button_group_index__WEBPACK_IMPORTED_MODULE_3__["createButtonGroup"]; });

/* harmony import */ var _progress_button_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./progress-button/index */ "./node_modules/@syncfusion/ej2-splitbuttons/src/progress-button/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpinSettings", function() { return _progress_button_index__WEBPACK_IMPORTED_MODULE_4__["SpinSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnimationSettings", function() { return _progress_button_index__WEBPACK_IMPORTED_MODULE_4__["AnimationSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProgressButton", function() { return _progress_button_index__WEBPACK_IMPORTED_MODULE_4__["ProgressButton"]; });

/**
 * SplitButton all module
 */






/***/ }),

/***/ "./node_modules/@syncfusion/ej2-splitbuttons/src/progress-button/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-splitbuttons/src/progress-button/index.js ***!
  \********************************************************************************/
/*! exports provided: SpinSettings, AnimationSettings, ProgressButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _progress_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./progress-button */ "./node_modules/@syncfusion/ej2-splitbuttons/src/progress-button/progress-button.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpinSettings", function() { return _progress_button__WEBPACK_IMPORTED_MODULE_0__["SpinSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnimationSettings", function() { return _progress_button__WEBPACK_IMPORTED_MODULE_0__["AnimationSettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProgressButton", function() { return _progress_button__WEBPACK_IMPORTED_MODULE_0__["ProgressButton"]; });

/**
 * ProgressButton modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-splitbuttons/src/progress-button/progress-button.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-splitbuttons/src/progress-button/progress-button.js ***!
  \******************************************************************************************/
/*! exports provided: SpinSettings, AnimationSettings, ProgressButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpinSettings", function() { return SpinSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationSettings", function() { return AnimationSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProgressButton", function() { return ProgressButton; });
/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ "./node_modules/@syncfusion/ej2-buttons/index.js");
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-popups */ "./node_modules/@syncfusion/ej2-popups/index.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};






var HIDESPINNER = 'e-hide-spinner';
var PROGRESS = 'e-progress';
var PROGRESSACTIVE = 'e-progress-active';
var CONTENTCLS = 'e-btn-content';
/**
 * Defines the spin settings.
 */

var SpinSettings =
/** @class */
function (_super) {
  __extends(SpinSettings, _super);

  function SpinSettings() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Property"])(null)], SpinSettings.prototype, "template", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Property"])(16)], SpinSettings.prototype, "width", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Property"])('Left')], SpinSettings.prototype, "position", void 0);

  return SpinSettings;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["ChildProperty"]);


/**
 * Defines the animation settings.
 */

var AnimationSettings =
/** @class */
function (_super) {
  __extends(AnimationSettings, _super);

  function AnimationSettings() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Property"])(400)], AnimationSettings.prototype, "duration", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Property"])('None')], AnimationSettings.prototype, "effect", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Property"])('ease')], AnimationSettings.prototype, "easing", void 0);

  return AnimationSettings;
}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["ChildProperty"]);


/**
 * The ProgressButton visualizes the progression of an operation to indicate the user
 * that a process is happening in the background with visual representation.
 * ```html
 * <button id="element"></button>
 * ```
 * ```typescript
 * <script>
 * var progressButtonObj = new ProgressButton({ content: 'Progress Button' });
 * progressButtonObj.appendTo("#element");
 * </script>
 * ```
 */

var ProgressButton =
/** @class */
function (_super) {
  __extends(ProgressButton, _super);
  /**
   * Constructor for creating the widget.
   *
   * @param  {ProgressButtonModel} options - Specifies progress button model
   * @param  {string|HTMLButtonElement} element - Specifies element
   */


  function ProgressButton(options, element) {
    var _this = _super.call(this, options, element) || this;

    _this.step = 1;
    return _this;
  }

  ProgressButton.prototype.preRender = function () {
    _super.prototype.preRender.call(this);
  };
  /**
   * Initialize the Component rendering
   *
   * @returns {void}
   * @private
   */


  ProgressButton.prototype.render = function () {
    _super.prototype.render.call(this);

    this.init();
    this.wireEvents();
    this.setAria();
    this.renderComplete();
  };
  /**
   * Starts the button progress at the specified percent.
   *
   * @param {number} percent - Starts the button progress at this percent.
   * @returns {void}
   */


  ProgressButton.prototype.start = function (percent) {
    this.isPaused = false;
    this.startProgress(percent ? percent : this.percent, this.progressTime);
  };
  /**
   * Stops the button progress.
   *
   * @returns {void}
   */


  ProgressButton.prototype.stop = function () {
    this.isPaused = true;
    cancelAnimationFrame(this.timerId);
  };
  /**
   * Complete the button progress.
   *
   * @returns {void}
   */


  ProgressButton.prototype.progressComplete = function () {
    this.isPaused = false;
    this.finishProgress();
  };
  /**
   * Get component name.
   *
   * @returns {string} - Module Name
   * @private
   */


  ProgressButton.prototype.getModuleName = function () {
    return 'progress-btn';
  };
  /**
   * Destroys the widget.
   *
   * @returns {void}
   */


  ProgressButton.prototype.destroy = function () {
    var _this = this;

    var classList = [HIDESPINNER, PROGRESSACTIVE, 'e-round-corner', 'e-' + _super.prototype.getModuleName.call(this), 'e-spin-' + this.spinSettings.position.toLowerCase()];

    _super.prototype.destroy.call(this);

    this.unWireEvents();
    this.element.innerHTML = '';

    if (this.cssClass) {
      classList = classList.concat(this.cssClass.split(' '));
    }

    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["removeClass"])([this.element], classList);
    var css = this.element.getAttribute('class') ? ['aria-label', 'aria-valuemin', 'aria-valuemax', 'aria-valuenow'] : ['aria-label', 'aria-valuemin', 'aria-valuemax', 'aria-valuenow', 'class'];
    css.forEach(function (key) {
      _this.element.removeAttribute(key);
    });

    if (this.disabled) {
      this.element.removeAttribute('disabled');
    }
  };

  ProgressButton.prototype.init = function () {
    this.element.classList.add('e-' + _super.prototype.getModuleName.call(this));
    this.setContent();
    this.createSpinner();

    if (this.enableProgress) {
      this.createProgress();
    }
  };

  ProgressButton.prototype.createSpinner = function () {
    var spinner = this.createElement('span', {
      className: 'e-spinner'
    });
    this.setSpinPosition(spinner);
    Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["createSpinner"])({
      target: spinner,
      width: this.spinSettings.width || 16,
      template: this.spinSettings.template
    }, this.createElement);
  };

  ProgressButton.prototype.getSpinner = function () {
    return this.element.getElementsByClassName('e-spinner')[0];
  };

  ProgressButton.prototype.getProgress = function () {
    return this.element.getElementsByClassName(PROGRESS)[0];
  };

  ProgressButton.prototype.setSpinPosition = function (ele) {
    var position = this.spinSettings.position || 'Left';

    if (position === 'Left' || position === 'Top') {
      this.element.insertBefore(ele, this.element.getElementsByClassName(CONTENTCLS)[0]);
    } else {
      this.element.appendChild(ele);
    }

    this.element.classList.add('e-spin-' + position.toLowerCase());
  };

  ProgressButton.prototype.createProgress = function () {
    this.element.appendChild(this.createElement('span', {
      className: PROGRESS
    }));
  };

  ProgressButton.prototype.setContent = function () {
    var cont;
    cont = this.element.innerHTML;

    if (this.enableHtmlSanitizer) {
      cont = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["SanitizeHtmlHelper"].sanitize(this.element.innerHTML);
    }

    this.element.innerHTML = '';
    this.element.appendChild(this.createElement('span', {
      className: CONTENTCLS,
      innerHTML: cont
    }));
  };

  ProgressButton.prototype.setContentIcon = function (content) {
    var contElem = this.createElement('span', {
      className: CONTENTCLS,
      innerHTML: content
    });

    if (this.iconCss) {
      var span = this.createElement('span', {
        className: 'e-btn-icon ' + this.iconCss
      });

      if (!this.element.textContent.trim()) {
        this.element.classList.add('e-icon-btn');
      } else {
        span.classList.add('e-icon-' + this.iconPosition.toLowerCase());

        if (this.iconPosition === 'Top' || this.iconPosition === 'Bottom') {
          this.element.classList.add('e-' + this.iconPosition.toLowerCase() + '-icon-btn');
        }
      }

      var node = contElem.childNodes[0];

      if (node && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {
        contElem.insertBefore(span, node);
      } else {
        contElem.appendChild(span);
      }
    }

    this.element.appendChild(contElem);
  };

  ProgressButton.prototype.clickHandler = function () {
    if (this.element.classList.contains(PROGRESSACTIVE)) {
      return;
    }

    this.startProgress();
  };

  ProgressButton.prototype.startProgress = function (percent, progressTime) {
    var clsList = this.element.classList;
    var isVertical = clsList.contains('e-vertical');
    clsList.add(PROGRESSACTIVE);

    if (!clsList.contains(HIDESPINNER)) {
      Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["showSpinner"])(this.element.querySelector(".e-spinner"));
    }

    this.startAnimate(Date.now(), progressTime ? progressTime : 0, progressTime ? Date.now() - this.duration * 1 / 100 : Date.now(), percent ? percent : 0, 0, this.step, 0, isVertical);
    this.startContAnimate();
  };

  ProgressButton.prototype.startAnimate = function (timestamp, progressTime, prevTime, percent, prevPercent, step, prevProgressTime, isVertical) {
    var _this = this;

    try {
      var timeDiff = timestamp - prevTime;
      var stepTime = this.duration * step / 100;
      var timeDiffBuffer_1 = timeDiff ? timeDiff < stepTime ? timeDiff - stepTime : timeDiff % stepTime : 0;
      this.progressTime = progressTime = progressTime + timeDiff - timeDiffBuffer_1;
      prevTime = timestamp - timeDiffBuffer_1;
      percent = percent + (timeDiff - timeDiffBuffer_1) / this.duration * 100;
      prevPercent = (progressTime - prevProgressTime) % stepTime === 0 || percent === 100 ? percent : prevPercent;
      var args = {
        percent: prevPercent,
        currentDuration: progressTime,
        step: step
      };
      this.eIsVertical = isVertical;

      if (percent === 0) {
        this.trigger('begin', args, function (observedArgs) {
          _this.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer_1, prevTime);
        });
      } else if (percent === 100 || progressTime === this.duration) {
        this.trigger('end', args, function (observedArgs) {
          _this.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer_1, prevTime);
        });
      } else {
        this.trigger('progress', args, function (observedArgs) {
          _this.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer_1, prevTime);
        });
      }
    } catch (e) {
      cancelAnimationFrame(this.timerId);
      this.trigger('fail', e);
    }
  };

  ProgressButton.prototype.successCallback = function (args, perc, pPerc, prgTim, pPrgTim, timDif, pTim) {
    var _this = this;

    var percent = perc;
    var prevPercent = pPerc;
    var timeDiffBuffer = timDif;
    var progressTime = prgTim;
    var prevProgressTime = pPrgTim;
    var prevTime = pTim;
    var isVertical = this.eIsVertical;

    if (percent !== args.percent && args.percent !== prevPercent) {
      percent = args.percent;
    }

    this.percent = percent;
    this.step = args.step;

    if ((progressTime - prevProgressTime) % (this.duration * args.step / 100) === 0 || percent === 100) {
      this.timerId = requestAnimationFrame(function () {
        if (_this.enableProgress) {
          _this.getProgress().style[isVertical ? 'height' : 'width'] = percent + '%';
        }

        _this.element.setAttribute('aria-valuenow', percent.toString());
      });
      prevPercent = percent;
      prevProgressTime = progressTime;
    }

    if (!this.isPaused) {
      if (progressTime < this.duration && percent < 100) {
        this.interval = window.setTimeout(function () {
          _this.startAnimate(Date.now(), progressTime, prevTime, percent, prevPercent, args.step, prevProgressTime, isVertical);
        }, this.duration / 100 - timeDiffBuffer);
      } else {
        this.interval = window.setTimeout(function () {
          _this.progressTime = _this.percent = 0;

          if (_this.enableProgress) {
            _this.getProgress().style[isVertical ? 'height' : 'width'] = '0%';
          }

          _this.element.setAttribute('aria-valuenow', '0');

          _this.hideSpin();
        }, 100);
      }
    }
  };

  ProgressButton.prototype.startContAnimate = function () {
    var _this = this;

    var ele = this.element.getElementsByClassName(CONTENTCLS)[0];

    if (this.animationSettings.effect !== 'None') {
      new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Animation"]({}).animate(ele, {
        duration: this.animationSettings.duration === 0 && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["animationMode"] === 'Enable' ? 400 : this.animationSettings.duration,
        name: 'Progress' + this.animationSettings.effect,
        timingFunction: this.animationSettings.easing,
        begin: function () {
          if (_this.spinSettings.position === 'Center') {
            _this.setSpinnerSize();
          }
        },
        end: function () {
          ele.classList.add('e-animate-end');
        }
      });
    } else if (this.spinSettings.position === 'Center') {
      this.setSpinnerSize();
    }
  };

  ProgressButton.prototype.finishProgress = function () {
    var clsList = this.element.classList;
    var isVertical = clsList.contains('e-vertical');
    clsList.add(PROGRESSACTIVE);
    var count = 100;

    for (var i = this.percent; i < count; i++) {
      i += 10;

      if (i > 100) {
        i = 100;
      }

      if (this.enableProgress) {
        this.getProgress().style[isVertical ? 'height' : 'width'] = this.percent < 100 ? i + '%' : '100%';
      }
    }

    this.element.setAttribute('aria-valuenow', '0');
    this.hideSpin();
    var args = {
      step: this.step,
      currentDuration: this.progressTime,
      percent: 100
    };
    clearTimeout(this.interval);
    this.trigger('end', args);
    this.progressTime = this.percent = 0;
  };

  ProgressButton.prototype.setSpinnerSize = function () {
    var ele = this.element.getElementsByClassName(CONTENTCLS)[0];
    var spinner = this.getSpinner();
    spinner.style.width = Math.max(spinner.offsetWidth, ele.offsetWidth) + 'px';
    spinner.style.height = Math.max(spinner.offsetHeight, ele.offsetHeight) + 'px';
    ele.classList.add('e-cont-animate');
  };

  ProgressButton.prototype.hideSpin = function () {
    var cont = this.element.getElementsByClassName(CONTENTCLS)[0];

    if (!this.element.classList.contains(HIDESPINNER)) {
      Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["hideSpinner"])(this.element.querySelector(".e-spinner"));
    }

    this.element.classList.remove(PROGRESSACTIVE);

    if (this.animationSettings.effect !== 'None') {
      cont.classList.remove('e-animate-end');
    }

    if (this.spinSettings.position === 'Center') {
      var ele = this.getSpinner();
      cont.classList.remove('e-cont-animate');
      ele.style.width = 'auto';
      ele.style.height = 'auto';
    }
  };

  ProgressButton.prototype.setIconSpan = function () {
    var cont = this.element.getElementsByClassName(CONTENTCLS)[0];
    var iconSpan = this.element.getElementsByClassName('e-btn-icon')[0];

    if (cont.childNodes[0] && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {
      cont.insertBefore(iconSpan, cont.childNodes[0]);
    } else {
      cont.appendChild(iconSpan);
    }
  };

  ProgressButton.prototype.setAria = function () {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["attributes"])(this.element, {
      'aria-label': this.element.textContent + ' progress',
      'aria-valuemin': '0',
      'aria-valuemax': '100',
      'aria-valuenow': '0'
    });
  };

  ProgressButton.prototype.wireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["EventHandler"].add(this.element, 'click', this.clickHandler, this);
  };

  ProgressButton.prototype.unWireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["EventHandler"].remove(this.element, 'click', this.clickHandler);
  };
  /**
   * Called internally if any of the property value changed.
   *
   * @param  {ProgressButtonModel} newProp - Specifies new properties
   * @param  {ProgressButtonModel} oldProp - Specifies old properties
   * @returns {void}
   * @private
   */


  ProgressButton.prototype.onPropertyChanged = function (newProp, oldProp) {
    var ele = this.element;
    var isSpinning = false;
    var clsList = this.element.querySelector('.e-spinner-pane').classList;

    if (clsList.contains('e-spin-show')) {
      isSpinning = true;
    }

    _super.prototype.onPropertyChanged.call(this, newProp, oldProp);

    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'content':
          this.setContent();
          this.createSpinner();

          if (isSpinning) {
            Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["showSpinner"])(this.element.querySelector(".e-spinner"));
            isSpinning = false;
          }

          if (this.enableProgress) {
            this.createProgress();
          }

          ele.setAttribute('aria-label', ele.textContent + ' progress');
          break;

        case 'iconCss':
          if (!oldProp.iconCss) {
            this.setIconSpan();
          }

          break;

        case 'iconPosition':
          this.setIconSpan();
          break;

        case 'enableProgress':
          if (newProp.enableProgress) {
            this.createProgress();
          } else {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["remove"])(this.getProgress());
          }

          break;

        case 'spinSettings':
          if (newProp.spinSettings.position) {
            ele.classList.remove('e-spin-' + oldProp.spinSettings.position.toLowerCase());
            this.setSpinPosition(this.getSpinner());
          }

          if (newProp.spinSettings.template || newProp.spinSettings.width) {
            ele.removeChild(this.getSpinner());
            this.createSpinner();
          }

          break;
      }
    }
  };
  /**
   * Sets the focus to ProgressButton
   * its native method
   *
   * @public
   * @returns {void}
   */


  ProgressButton.prototype.focusIn = function () {
    this.element.focus();
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Property"])(false)], ProgressButton.prototype, "enableProgress", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Property"])(2000)], ProgressButton.prototype, "duration", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Property"])('Left')], ProgressButton.prototype, "iconPosition", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Property"])('')], ProgressButton.prototype, "iconCss", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Property"])(false)], ProgressButton.prototype, "disabled", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Property"])(false)], ProgressButton.prototype, "isPrimary", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Property"])('')], ProgressButton.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Property"])('')], ProgressButton.prototype, "content", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Property"])(false)], ProgressButton.prototype, "isToggle", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Property"])(false)], ProgressButton.prototype, "enableHtmlSanitizer", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Complex"])({}, SpinSettings)], ProgressButton.prototype, "spinSettings", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Complex"])({}, AnimationSettings)], ProgressButton.prototype, "animationSettings", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Event"])()], ProgressButton.prototype, "created", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Event"])()], ProgressButton.prototype, "begin", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Event"])()], ProgressButton.prototype, "progress", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Event"])()], ProgressButton.prototype, "end", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["Event"])()], ProgressButton.prototype, "fail", void 0);

  ProgressButton = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__["NotifyPropertyChanges"]], ProgressButton);
  return ProgressButton;
}(_syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_0__["Button"]);



/***/ }),

/***/ "./node_modules/@syncfusion/ej2-splitbuttons/src/split-button/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-splitbuttons/src/split-button/index.js ***!
  \*****************************************************************************/
/*! exports provided: SplitButton, Deferred */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _split_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./split-button */ "./node_modules/@syncfusion/ej2-splitbuttons/src/split-button/split-button.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SplitButton", function() { return _split_button__WEBPACK_IMPORTED_MODULE_0__["SplitButton"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Deferred", function() { return _split_button__WEBPACK_IMPORTED_MODULE_0__["Deferred"]; });

/**
 * Split Button modules
 */


/***/ }),

/***/ "./node_modules/@syncfusion/ej2-splitbuttons/src/split-button/split-button.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-splitbuttons/src/split-button/split-button.js ***!
  \************************************************************************************/
/*! exports provided: SplitButton, Deferred */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SplitButton", function() { return SplitButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Deferred", function() { return Deferred; });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ "./node_modules/@syncfusion/ej2-base/index.js");
/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ "./node_modules/@syncfusion/ej2-buttons/index.js");
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../common/common */ "./node_modules/@syncfusion/ej2-splitbuttons/src/common/common.js");
/* harmony import */ var _drop_down_button_drop_down_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../drop-down-button/drop-down-button */ "./node_modules/@syncfusion/ej2-splitbuttons/src/drop-down-button/drop-down-button.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}; // eslint-disable-next-line @typescript-eslint/triple-slash-reference
/// <reference path='../drop-down-button/drop-down-button-model.d.ts'/>








var RTL = 'e-rtl';
var TAGNAME = 'EJS-SPLITBUTTON';
/**
 * SplitButton component has primary and secondary button. Primary button is used to select
 * default action and secondary button is used to toggle contextual overlays for displaying list of
 * action items. It can contain both text and images.
 * ```html
 * <button id="element"></button>
 * ```
 * ```typescript
 * <script>
 * var splitBtnObj = new SplitButton({content: 'SplitButton'});
 * splitBtnObj.appendTo("#element");
 * </script>
 * ```
 */

var SplitButton =
/** @class */
function (_super) {
  __extends(SplitButton, _super);
  /**
   * Constructor for creating the widget
   *
   * @param  {SplitButtonModel} options - Specifies the splitbutton model
   * @param  {string|HTMLButtonElement} element - Specifies the element
   * @hidden
   */


  function SplitButton(options, element) {
    return _super.call(this, options, element) || this;
  }
  /**
   * Initialize Angular support.
   *
   * @private
   * @returns {void}
   */


  SplitButton.prototype.preRender = function () {
    var ele = this.element;

    if (ele.tagName === TAGNAME) {
      var ejInstance = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('ej2_instances', ele);
      var btn = this.createElement('button', {
        attrs: {
          'type': 'button'
        }
      });
      var wrapper = this.createElement(TAGNAME, {
        className: 'e-' + this.getModuleName() + '-wrapper'
      });

      for (var idx = 0, len = ele.attributes.length; idx < len; idx++) {
        btn.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);
      }

      ele.parentNode.insertBefore(wrapper, ele);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(ele);
      ele = btn;
      wrapper.appendChild(ele);
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('ej2_instances', ejInstance, ele);
      this.wrapper = wrapper;
      this.element = ele;
    }

    if (!this.element.id) {
      this.element.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('e-' + this.getModuleName());
    }
  };
  /**
   * Initialize the Component rendering.
   *
   * @returns {void}
   * @private
   */


  SplitButton.prototype.render = function () {
    this.initWrapper();
    this.createPrimaryButton();
    this.renderControl();
  };

  SplitButton.prototype.renderControl = function () {
    this.createSecondaryButton();
    this.setActiveElem([this.element, this.secondaryBtnObj.element]);
    this.setAria();
    this.wireEvents();
    this.renderComplete();
  };
  /**
   * Adds a new item to the menu. By default, new item appends to the list as the last item,
   * but you can insert based on the text parameter.
   *
   * @param  { ItemModel[] } items - Specifies an array of JSON data.
   * @param { string } text - Specifies the text to insert the newly added item in the menu.
   * @returns {void}.
   */


  SplitButton.prototype.addItems = function (items, text) {
    _super.prototype.addItems.call(this, items, text);

    this.secondaryBtnObj.items = this.items;
  };
  /**
   * Removes the items from the menu.
   *
   * @param  { string[] } items - Specifies an array of string to remove the items.
   * @param { string } isUniqueId - Set `true` if specified items is a collection of unique id.
   * @returns {void}.
   */


  SplitButton.prototype.removeItems = function (items, isUniqueId) {
    _super.prototype.removeItems.call(this, items, isUniqueId);

    this.secondaryBtnObj.items = this.items;
  };

  SplitButton.prototype.initWrapper = function () {
    if (!this.wrapper) {
      this.wrapper = this.createElement('div', {
        className: 'e-' + this.getModuleName() + '-wrapper'
      });
      this.element.parentNode.insertBefore(this.wrapper, this.element);
    }

    this.element.classList.remove('e-' + this.getModuleName());

    if (this.enableRtl) {
      this.wrapper.classList.add(RTL);
    }

    if (this.cssClass) {
      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.wrapper], this.cssClass.replace(/\s+/g, ' ').trim().split(' '));
    }
  };

  SplitButton.prototype.createPrimaryButton = function () {
    var btnModel = {
      cssClass: this.cssClass,
      enableRtl: this.enableRtl,
      iconCss: this.iconCss,
      iconPosition: this.iconPosition,
      content: this.content,
      disabled: this.disabled
    };
    this.primaryBtnObj = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__["Button"](btnModel);
    this.primaryBtnObj.createElement = this.createElement;
    this.primaryBtnObj.appendTo(this.element);
    this.element.classList.add('e-' + this.getModuleName());
    this.element.type = 'button';
    this.wrapper.appendChild(this.element);
  };

  SplitButton.prototype.createSecondaryButton = function () {
    var _this = this;

    var btnElem = this.createElement('button', {
      className: 'e-icon-btn',
      attrs: {
        'tabindex': '-1'
      },
      id: this.element.id + '_dropdownbtn'
    });
    this.wrapper.appendChild(btnElem);
    var dropDownBtnModel = {
      cssClass: this.cssClass,
      disabled: this.disabled,
      enableRtl: this.enableRtl,
      items: this.items,
      target: this.target,
      createPopupOnClick: this.createPopupOnClick
    };

    dropDownBtnModel.beforeItemRender = function (args) {
      if (_this.createPopupOnClick) {
        _this.secondaryBtnObj.dropDown.relateTo = _this.wrapper;
        _this.dropDown = _this.secondaryBtnObj.dropDown;
      }

      _this.trigger('beforeItemRender', args);
    };

    dropDownBtnModel.open = function (args) {
      _this.trigger('open', args);
    };

    dropDownBtnModel.close = function (args) {
      _this.trigger('close', args);
    };

    dropDownBtnModel.select = function (args) {
      _this.trigger('select', args);
    };

    dropDownBtnModel.beforeOpen = function (args) {
      if (_this.createPopupOnClick && _this.items.length == 0) {
        _this.secondaryBtnObj.dropDown.relateTo = _this.wrapper;
        _this.dropDown = _this.secondaryBtnObj.dropDown;
      }

      var callBackPromise = new Deferred();

      _this.trigger('beforeOpen', args, function (observedArgs) {
        callBackPromise.resolve(observedArgs);
      });

      return callBackPromise;
    };

    dropDownBtnModel.beforeClose = function (args) {
      var callBackPromise = new Deferred();

      _this.trigger('beforeClose', args, function (observedArgs) {
        callBackPromise.resolve(observedArgs);
      });

      return callBackPromise;
    };

    this.secondaryBtnObj = new _drop_down_button_drop_down_button__WEBPACK_IMPORTED_MODULE_3__["DropDownButton"](dropDownBtnModel);
    this.secondaryBtnObj.createElement = this.createElement;
    this.secondaryBtnObj.appendTo(btnElem);

    if (!this.createPopupOnClick) {
      this.secondaryBtnObj.dropDown.relateTo = this.wrapper;
      this.dropDown = this.secondaryBtnObj.dropDown;
    } // eslint-disable-next-line @typescript-eslint/no-explicit-any


    this.isPopupCreated = this.secondaryBtnObj.isPopupCreated;
    this.secondaryBtnObj.activeElem = [this.element, this.secondaryBtnObj.element];
    this.secondaryBtnObj.element.querySelector('.e-btn-icon').classList.remove('e-icon-right');

    if (this.disabled) {
      this.wrapper.classList.add('e-splitbtn-disabled');
    }
  };

  SplitButton.prototype.setAria = function () {
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
      'aria-expanded': 'false',
      'aria-haspopup': 'true',
      'aria-label': this.element.textContent + ' splitbutton',
      'aria-owns': this.element.id + '_dropdownbtn-popup'
    });
  };
  /**
   * Get component name.
   *
   * @returns {string} - Module Name
   * @private
   */


  SplitButton.prototype.getModuleName = function () {
    return 'split-btn';
  };
  /**
   * To open/close SplitButton popup based on current state of the SplitButton.
   *
   * @returns {void}
   */


  SplitButton.prototype.toggle = function () {
    this.secondaryBtnObj.toggle();
  };

  SplitButton.prototype.destroy = function () {
    var _this = this;

    var classList = [RTL];

    if (this.cssClass) {
      classList = classList.concat(this.cssClass.split(' '));
    }

    if (this.element) {
      var element = document.getElementById(this.element.id);

      if (element && element.parentElement === this.wrapper) {
        if (this.wrapper.tagName === TAGNAME) {
          this.wrapper.innerHTML = '';
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.wrapper], ['e-rtl', 'e-' + this.getModuleName() + '-wrapper']);
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.wrapper], this.cssClass.split(' '));
        } else {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], classList);
          ['aria-label', 'aria-haspopup', 'aria-expanded', 'aria-owns', 'type'].forEach(function (key) {
            _this.element.removeAttribute(key);
          });
          this.wrapper.parentNode.insertBefore(this.element, this.wrapper);
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.wrapper);
        }

        this.unWireEvents();
      }
    }

    this.wrapper = null;
    this.primaryBtnObj.destroy();
    this.secondaryBtnObj.destroy();

    _super.prototype.destroy.call(this);

    if (!this.element.getAttribute('class')) {
      this.element.removeAttribute('class');
    }
  };

  SplitButton.prototype.wireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'click', this.primaryBtnClickHandler, this);
    new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.element, {
      keyAction: this.btnKeyBoardHandler.bind(this),
      keyConfigs: {
        altdownarrow: 'alt+downarrow',
        enter: 'enter'
      }
    });
  };

  SplitButton.prototype.unWireEvents = function () {
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'click', this.primaryBtnClickHandler);
    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"]).destroy();
  };

  SplitButton.prototype.primaryBtnClickHandler = function () {
    this.trigger('click', {
      element: this.element
    });
  };

  SplitButton.prototype.btnKeyBoardHandler = function (e) {
    switch (e.action) {
      case 'altdownarrow':
        this.clickHandler(e);
        break;

      case 'enter':
        this.clickHandler(e);

        if (this.getPopUpElement() && !this.getPopUpElement().classList.contains('e-popup-close')) {
          this.element.classList.remove('e-active');
          this.secondaryBtnObj.element.classList.add('e-active');
        } else {
          this.secondaryBtnObj.element.classList.remove('e-active');
        }

        break;
    }
  };
  /**
   * Called internally if any of the property value changed.
   *
   * @param  {SplitButtonModel} newProp - Specifies new properties
   * @param  {SplitButtonModel} oldProp - Specifies old properties
   * @returns {void}
   */


  SplitButton.prototype.onPropertyChanged = function (newProp, oldProp) {
    var model = ['content', 'iconCss', 'iconPosition', 'cssClass', 'disabled', 'enableRtl'];
    this.primaryBtnObj.setProperties(Object(_common_common__WEBPACK_IMPORTED_MODULE_2__["getModel"])(newProp, model));
    model = ['beforeOpen', 'beforeItemRender', 'select', 'open', 'close', 'cssClass', 'disabled', 'enableRtl', 'createPopupOnClick'];

    if (Object.keys(newProp).indexOf('items') > -1) {
      this.secondaryBtnObj.items = newProp.items;
      this.secondaryBtnObj.dataBind();
    }

    this.secondaryBtnObj.setProperties(Object(_common_common__WEBPACK_IMPORTED_MODULE_2__["getModel"])(newProp, model));

    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
      var prop = _a[_i];

      switch (prop) {
        case 'cssClass':
          if (oldProp.cssClass) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.wrapper], oldProp.cssClass.split(' '));
          }

          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.wrapper], newProp.cssClass.replace(/\s+/g, ' ').trim().split(' '));
          break;

        case 'enableRtl':
          if (newProp.enableRtl) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.wrapper], RTL);
          } else {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.wrapper], RTL);
          }

          break;

        case 'disabled':
          if (newProp.disabled) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.wrapper], 'e-splitbtn-disabled');
          } else {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.wrapper], 'e-splitbtn-disabled');
          }

      }
    }
  };
  /**
   * Sets the focus to SplitButton
   * its native method
   *
   * @public
   * @returns {void}
   */


  SplitButton.prototype.focusIn = function () {
    this.element.focus();
  };

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], SplitButton.prototype, "content", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], SplitButton.prototype, "cssClass", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], SplitButton.prototype, "disabled", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], SplitButton.prototype, "iconCss", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Left')], SplitButton.prototype, "iconPosition", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], SplitButton.prototype, "createPopupOnClick", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([], _common_common__WEBPACK_IMPORTED_MODULE_2__["Item"])], SplitButton.prototype, "items", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], SplitButton.prototype, "target", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], SplitButton.prototype, "beforeItemRender", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], SplitButton.prototype, "beforeOpen", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], SplitButton.prototype, "beforeClose", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], SplitButton.prototype, "click", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], SplitButton.prototype, "close", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], SplitButton.prototype, "open", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], SplitButton.prototype, "select", void 0);

  __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], SplitButton.prototype, "created", void 0);

  SplitButton = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], SplitButton);
  return SplitButton;
}(_drop_down_button_drop_down_button__WEBPACK_IMPORTED_MODULE_3__["DropDownButton"]);


/**
 * Deferred is used to handle asynchronous operation.
 */

var Deferred =
/** @class */
function () {
  function Deferred() {
    var _this = this;
    /**
     * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.
     */


    this.promise = new Promise(function (resolve, reject) {
      _this.resolve = resolve;
      _this.reject = reject;
    });
    /**
     * Defines the callback function triggers when the Deferred object is rejected.
     */

    this.catch = this.promise.catch.bind(this.promise);
    /**
     * Defines the callback function triggers when the Deferred object is resolved.
     */

    this.then = this.promise.then.bind(this.promise);
  }

  return Deferred;
}();



/***/ })

}]);
//# sourceMappingURL=11.chunk.js.map